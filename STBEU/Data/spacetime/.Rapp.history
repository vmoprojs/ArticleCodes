#================================= Comp_Pair_Gauss_st2 (SPACE-TIME)#
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="Gaussian";shape=4;n=1#
set.seed(112)#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,9)# con 9 funciona,  con 8 explota#
coordx_dyn=list()#
#
maxN=130#130#
for(k in 1:length(coordt))#
{#
  NN=sample(1:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
# coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 0.1#
sill <- 1#
nugget <- 0#
scale_s <- .3#
scale_t <- .3#
skew <- -0.5#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget, sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,mean = mean )#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxtime=1;maxdist=0.3#
fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
               corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,model = model,varest = TRUE)#
print(fit1)#
fit1$param
score <- sensmat <- varcov <- varimat <- parscale <- NULL#
### Initialization parameters:#
initparam <- WlsStart(coordx=NULL, coordy=NULL, coordt=coordt, coordx_dyn=coordx_dyn, corrmodel, data=ss1, distance="Eucl", "Fitting", fixed=fixed, grid=FALSE,#10#
                      likelihood='Marginal', maxdist=maxdist, maxtime=maxtime,  model=model, n=1, NULL,#16#
                      parscale, optimizer=='L-BFGS-B', radius=6378.388, start=start, taper=NULL, tapsep=NULL,#22#
                      type="Pairwise", varest=TRUE, vartype='SubSamp', weighted=FALSE, winconst=NULL, winstp=NULL,winconst_t=NULL, winstp_t=NULL, X=NULL)#31#
numcoord=length(initparam$coordx);numtime=1;spacetime_dyn=FALSE#
if(initparam$spacetime) numtime=length(initparam$coordt)#
if(initparam$bivariate) numtime=2#
if(!is.null(coordx_dyn)) spacetime_dyn=TRUE#
dimat <- numcoord*numtime##
NS=cumsum(initparam$ns)#
if(is.null(dim(initparam$X)))#
{#
  X=as.matrix(rep(1,dimat))#
  if((initparam$spacetime||initparam$bivariate)&& spacetime_dyn)  X=as.matrix(rep(1,NS[numtime]))#
}#
num_betas=ncol(X) #
grid = FALSE#
if(grid)    #
  {a=expand.grid(initparam$coordx,initparam$coordy);coordx=a[,1];coordy=a[,2]; #
  }else {#
    if((initparam$spacetime||initparam$bivariate)&&(!spacetime_dyn)){#
  data=c(t(data))#
  coordx=rep(coordx,numtime);coordy=rep(coordy,numtime)#
}#
  if((initparam$spacetime||initparam$bivariate)&&(spacetime_dyn)) initparam$data=unlist(initparam$data)          #
}#
if(initparam$spacetime||initparam$bivariate)   NS=c(0,NS)[-(length(initparam$ns)+1)]#
initparam$fixed#
#
dimmat <- initparam$numparam^2#
dmat <- initparam$numparam*(initparam$numparam+1)/2#
eps <- (.Machine$double.eps)^(1/3)#
param <- c(initparam$param, initparam$fixed)#
score <- double(initparam$numparam)#
paramcorr <- param[initparam$namescorr]#
nuisance <- param[initparam$namesnuis]#
sel=substr(names(nuisance),1,4)=="mean"#
mm=as.numeric(nuisance[sel])   ## mean paramteres#
other_nuis=as.numeric(nuisance[!sel]) #
nuisance=c(mm,other_nuis)#
sensmat <- double(dmat);varimat <- double(dmat)#
GD=.C('GodambeMat',as.double(mm),as.integer(initparam$bivariate),as.double(initparam$coordx),as.double(initparam$coordy),#
      as.double(initparam$coordt),as.integer(initparam$corrmodel), as.double(initparam$data),as.integer(initparam$distance),as.double(eps),#
      as.integer(initparam$flagcorr), as.integer(initparam$flagnuis),as.integer(grid),as.integer(initparam$likelihood),#
      as.double(c(X%*%mm)),as.integer(initparam$model),as.double(initparam$n),as.integer(num_betas),#
      as.integer(initparam$numparam),as.integer(initparam$numparamcorr),as.integer(length(paramcorr)),as.double(paramcorr),as.double(nuisance),#
      score=score,sensmat=sensmat,as.integer(initparam$spacetime),as.integer(initparam$type),#
      varimat=varimat,as.integer(initparam$vartype),as.double(initparam$winconst),as.double(initparam$winstp),as.double(initparam$winconst_t),as.double(initparam$winstp_t),#
      as.integer(initparam$weighted),c(t(X)),ns=as.integer(initparam$ns),NS=as.integer(NS),PACKAGE='GeoModels',DUP=TRUE,NAOK=TRUE)#
str(GD)
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
################################################################
############ Examples of spatial RFs #################
################################################################
model="Gaussian";shape=4;n=1#
# Define the spatial-coordinates of the points:#
coordt=seq(0,5,0.5)#1#
coordx_dyn=list()#
#
maxN=150#130#
set.seed(112)#
for(k in 1:length(coordt))#
{#
  NN=sample(1:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
# coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
mean <- 0#
sill <- 1#
nugget <- 0#
scale_s <- 0.2/3#
scale_t <- 1/3#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget,sill=sill)#
# Starting value for the estimated parameters#
start<-list(mean=mean,scale_s=scale_s,scale_t=scale_t)#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel="Exp_Exp",model=model,#
              param=param)$data#
maxtime=1;maxdist=0.3#
CPUtime = proc.time()#
fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
               corrmodel="Exp_Exp",maxtime=maxtime,maxdist=maxdist,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,varest=TRUE)#
CPUtime = proc.time()-CPUtime#
print(fit1)#
score <- sensmat <- varcov <- varimat <- parscale <- NULL#
### Initialization parameters:#
initparam <- WlsStart(coordx=NULL, coordy=NULL, coordt=coordt, coordx_dyn=coordx_dyn, corrmodel, data=ss1, distance="Eucl", "Fitting", fixed=fixed, grid=FALSE,#10#
                      likelihood='Marginal', maxdist=maxdist, maxtime=maxtime,  model=model, n=1, NULL,#16#
                      parscale, optimizer=='L-BFGS-B', radius=6378.388, start=start, taper=NULL, tapsep=NULL,#22#
                      type="Pairwise", varest=TRUE, vartype='SubSamp', weighted=FALSE, winconst=NULL, winstp=NULL,winconst_t=NULL, winstp_t=NULL, X=NULL)#31#
numcoord=length(initparam$coordx);numtime=1;spacetime_dyn=FALSE#
if(initparam$spacetime) numtime=length(initparam$coordt)#
if(initparam$bivariate) numtime=2#
if(!is.null(coordx_dyn)) spacetime_dyn=TRUE#
dimat <- numcoord*numtime##
NS=cumsum(initparam$ns)#
if(is.null(dim(initparam$X)))#
{#
  X=as.matrix(rep(1,dimat))#
  if((initparam$spacetime||initparam$bivariate)&& spacetime_dyn)  X=as.matrix(rep(1,NS[numtime]))#
}#
num_betas=ncol(X) #
grid = FALSE#
if(grid)    #
{a=expand.grid(initparam$coordx,initparam$coordy);coordx=a[,1];coordy=a[,2]; #
}else {#
  if((initparam$spacetime||initparam$bivariate)&&(!spacetime_dyn)){#
    data=c(t(data))#
    coordx=rep(coordx,numtime);coordy=rep(coordy,numtime)#
  }#
  if((initparam$spacetime||initparam$bivariate)&&(spacetime_dyn)) initparam$data=unlist(initparam$data)          #
}#
if(initparam$spacetime||initparam$bivariate)   NS=c(0,NS)[-(length(initparam$ns)+1)]#
initparam$fixed#
#
dimmat <- initparam$numparam^2#
dmat <- initparam$numparam*(initparam$numparam+1)/2#
eps <- (.Machine$double.eps)^(1/3)#
param <- c(initparam$param, initparam$fixed)#
score <- double(initparam$numparam)#
paramcorr <- param[initparam$namescorr]#
nuisance <- param[initparam$namesnuis]#
sel=substr(names(nuisance),1,4)=="mean"#
mm=as.numeric(nuisance[sel])   ## mean paramteres#
other_nuis=as.numeric(nuisance[!sel]) #
nuisance=c(mm,other_nuis)#
sensmat <- double(dmat);varimat <- double(dmat)#
GD=.C('GodambeMat',as.double(mm),as.integer(initparam$bivariate),as.double(initparam$coordx),as.double(initparam$coordy),#
      as.double(initparam$coordt),as.integer(initparam$corrmodel), as.double(initparam$data),as.integer(initparam$distance),as.double(eps),#
      as.integer(initparam$flagcorr), as.integer(initparam$flagnuis),as.integer(grid),as.integer(initparam$likelihood),#
      as.double(c(X%*%mm)),as.integer(initparam$model),as.double(initparam$n),as.integer(num_betas),#
      as.integer(initparam$numparam),as.integer(initparam$numparamcorr),as.integer(length(paramcorr)),as.double(paramcorr),as.double(nuisance),#
      score=score,sensmat=sensmat,as.integer(initparam$spacetime),as.integer(initparam$type),#
      varimat=varimat,as.integer(initparam$vartype),as.double(initparam$winconst),as.double(initparam$winstp),as.double(initparam$winconst_t),as.double(initparam$winstp_t),#
      as.integer(initparam$weighted),c(t(X)),ns=as.integer(initparam$ns),NS=as.integer(NS),PACKAGE='GeoModels',DUP=TRUE,NAOK=TRUE)#
str(GD)
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
################################################################
############ Examples of spatial RFs #################
################################################################
model="Gaussian";shape=4;n=1#
# Define the spatial-coordinates of the points:#
coordt=seq(0,5,0.5)#1#
coordx_dyn=list()#
#
maxN=150#130#
set.seed(112)#
for(k in 1:length(coordt))#
{#
  NN=sample(1:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
# coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
mean <- 0#
sill <- 1#
nugget <- 0#
scale_s <- 0.2/3#
scale_t <- 1/3#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget,sill=sill)#
# Starting value for the estimated parameters#
start<-list(mean=mean,scale_s=scale_s,scale_t=scale_t)#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel="Exp_Exp",model=model,#
              param=param)$data#
maxtime=1;maxdist=0.3#
CPUtime = proc.time()#
fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
               corrmodel="Exp_Exp",maxtime=maxtime,maxdist=maxdist,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,varest=TRUE)#
CPUtime = proc.time()-CPUtime#
print(fit1)
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
################################################################
############ Examples of spatial RFs #################
################################################################
model="Gaussian";shape=4;n=1#
# Define the spatial-coordinates of the points:#
coordt=seq(0,5,0.5)#1#
coordx_dyn=list()#
#
maxN=150#130#
set.seed(112)#
for(k in 1:length(coordt))#
{#
  NN=sample(1:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
# coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
mean <- 0#
sill <- 1#
nugget <- 0#
scale_s <- 0.2/3#
scale_t <- 1/3#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget,sill=sill)#
# Starting value for the estimated parameters#
start<-list(mean=mean,scale_s=scale_s,scale_t=scale_t)#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel="Exp_Exp",model=model,#
              param=param)$data#
maxtime=1;maxdist=0.3
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
################################################################
############ Examples of spatial RFs #################
################################################################
model="Gaussian";shape=4;n=1#
# Define the spatial-coordinates of the points:#
coordt=seq(0,5,0.5)#1#
coordx_dyn=list()#
#
maxN=150#130#
set.seed(112)#
for(k in 1:length(coordt))#
{#
  NN=sample(1:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
# coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
mean <- 0#
sill <- 1#
nugget <- 0#
scale_s <- 0.2/3#
scale_t <- 1/3#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget,sill=sill)#
# Starting value for the estimated parameters#
start<-list(mean=mean,scale_s=scale_s,scale_t=scale_t)#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel="Exp_Exp",model=model,#
              param=param)$data#
maxtime=1;maxdist=0.3#
# CPUtime = proc.time()#
# fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
#                corrmodel="Exp_Exp",maxtime=maxtime,maxdist=maxdist,#
#                likelihood="Marginal",type="Pairwise",#
#                start=start,fixed=fixed,varest=TRUE)#
# CPUtime = proc.time()-CPUtime#
# print(fit1)#
score <- sensmat <- varcov <- varimat <- parscale <- NULL#
### Initialization parameters:#
initparam <- WlsStart(coordx=NULL, coordy=NULL, coordt=coordt, coordx_dyn=coordx_dyn, corrmodel, data=ss1, distance="Eucl", "Fitting", fixed=fixed, grid=FALSE,#10#
                      likelihood='Marginal', maxdist=maxdist, maxtime=maxtime,  model=model, n=1, NULL,#16#
                      parscale, optimizer=='L-BFGS-B', radius=6378.388, start=start, taper=NULL, tapsep=NULL,#22#
                      type="Pairwise", varest=TRUE, vartype='SubSamp', weighted=FALSE, winconst=NULL, winstp=NULL,winconst_t=NULL, winstp_t=NULL, X=NULL)#31#
numcoord=length(initparam$coordx);numtime=1;spacetime_dyn=FALSE#
if(initparam$spacetime) numtime=length(initparam$coordt)#
if(initparam$bivariate) numtime=2#
if(!is.null(coordx_dyn)) spacetime_dyn=TRUE#
dimat <- numcoord*numtime##
NS=cumsum(initparam$ns)#
if(is.null(dim(initparam$X)))#
{#
  X=as.matrix(rep(1,dimat))#
  if((initparam$spacetime||initparam$bivariate)&& spacetime_dyn)  X=as.matrix(rep(1,NS[numtime]))#
}#
num_betas=ncol(X) #
grid = FALSE#
if(grid)    #
{a=expand.grid(initparam$coordx,initparam$coordy);coordx=a[,1];coordy=a[,2]; #
}else {#
  if((initparam$spacetime||initparam$bivariate)&&(!spacetime_dyn)){#
    data=c(t(data))#
    coordx=rep(coordx,numtime);coordy=rep(coordy,numtime)#
  }#
  if((initparam$spacetime||initparam$bivariate)&&(spacetime_dyn)) initparam$data=unlist(initparam$data)          #
}#
if(initparam$spacetime||initparam$bivariate)   NS=c(0,NS)[-(length(initparam$ns)+1)]#
initparam$fixed#
#
dimmat <- initparam$numparam^2#
dmat <- initparam$numparam*(initparam$numparam+1)/2#
eps <- (.Machine$double.eps)^(1/3)#
param <- c(initparam$param, initparam$fixed)#
score <- double(initparam$numparam)#
paramcorr <- param[initparam$namescorr]#
nuisance <- param[initparam$namesnuis]#
sel=substr(names(nuisance),1,4)=="mean"#
mm=as.numeric(nuisance[sel])   ## mean paramteres#
other_nuis=as.numeric(nuisance[!sel]) #
nuisance=c(mm,other_nuis)#
sensmat <- double(dmat);varimat <- double(dmat)#
GD=.C('GodambeMat',as.double(mm),as.integer(initparam$bivariate),as.double(initparam$coordx),as.double(initparam$coordy),#
      as.double(initparam$coordt),as.integer(initparam$corrmodel), as.double(initparam$data),as.integer(initparam$distance),as.double(eps),#
      as.integer(initparam$flagcorr), as.integer(initparam$flagnuis),as.integer(grid),as.integer(initparam$likelihood),#
      as.double(c(X%*%mm)),as.integer(initparam$model),as.double(initparam$n),as.integer(num_betas),#
      as.integer(initparam$numparam),as.integer(initparam$numparamcorr),as.integer(length(paramcorr)),as.double(paramcorr),as.double(nuisance),#
      score=score,sensmat=sensmat,as.integer(initparam$spacetime),as.integer(initparam$type),#
      varimat=varimat,as.integer(initparam$vartype),as.double(initparam$winconst),as.double(initparam$winstp),as.double(initparam$winconst_t),as.double(initparam$winstp_t),#
      as.integer(initparam$weighted),c(t(X)),ns=as.integer(initparam$ns),NS=as.integer(NS),PACKAGE='GeoModels',DUP=TRUE,NAOK=TRUE)#
str(GD)
CPUtime = proc.time()#
fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
               corrmodel="Exp_Exp",maxtime=maxtime,maxdist=maxdist,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed)#
CPUtime = proc.time()-CPUtime#
print(fit1)
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
################################################################
############ Examples of spatial RFs #################
################################################################
model="Gaussian";shape=4;n=1#
# Define the spatial-coordinates of the points:#
coordt=seq(0,5,0.5)#1#
coordx_dyn=list()#
#
maxN=150#130#
set.seed(112)#
for(k in 1:length(coordt))#
{#
  NN=sample(1:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
# coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
mean <- 0#
sill <- 1#
nugget <- 0#
scale_s <- 0.2/3#
scale_t <- 1/3#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget,sill=sill)#
# Starting value for the estimated parameters#
start<-list(mean=mean,scale_s=scale_s,scale_t=scale_t)#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel="Exp_Exp",model=model,#
              param=param)$data#
maxtime=1;maxdist=0.3#
# CPUtime = proc.time()#
# fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
#                corrmodel="Exp_Exp",maxtime=maxtime,maxdist=maxdist,#
#                likelihood="Marginal",type="Pairwise",#
#                start=start,fixed=fixed,varest=TRUE)#
# CPUtime = proc.time()-CPUtime#
# print(fit1)#
score <- sensmat <- varcov <- varimat <- parscale <- NULL#
### Initialization parameters:#
initparam <- WlsStart(coordx=NULL, coordy=NULL, coordt=coordt, coordx_dyn=coordx_dyn, corrmodel, data=ss1, distance="Eucl", "Fitting", fixed=fixed, grid=FALSE,#10#
                      likelihood='Marginal', maxdist=maxdist, maxtime=maxtime,  model=model, n=1, NULL,#16#
                      parscale, optimizer=='L-BFGS-B', radius=6378.388, start=start, taper=NULL, tapsep=NULL,#22#
                      type="Pairwise", varest=TRUE, vartype='SubSamp', weighted=FALSE, winconst=NULL, winstp=NULL,winconst_t=NULL, winstp_t=NULL, X=NULL)#31#
numcoord=length(initparam$coordx);numtime=1;spacetime_dyn=FALSE#
if(initparam$spacetime) numtime=length(initparam$coordt)#
if(initparam$bivariate) numtime=2#
if(!is.null(coordx_dyn)) spacetime_dyn=TRUE#
dimat <- numcoord*numtime##
NS=cumsum(initparam$ns)#
if(is.null(dim(initparam$X)))#
{#
  X=as.matrix(rep(1,dimat))#
  if((initparam$spacetime||initparam$bivariate)&& spacetime_dyn)  X=as.matrix(rep(1,NS[numtime]))#
}#
num_betas=ncol(X) #
grid = FALSE#
if(grid)    #
{a=expand.grid(initparam$coordx,initparam$coordy);coordx=a[,1];coordy=a[,2]; #
}else {#
  if((initparam$spacetime||initparam$bivariate)&&(!spacetime_dyn)){#
    data=c(t(data))#
    coordx=rep(coordx,numtime);coordy=rep(coordy,numtime)#
  }#
  if((initparam$spacetime||initparam$bivariate)&&(spacetime_dyn)) initparam$data=unlist(initparam$data)          #
}#
if(initparam$spacetime||initparam$bivariate)   NS=c(0,NS)[-(length(initparam$ns)+1)]#
initparam$fixed#
#
dimmat <- initparam$numparam^2#
dmat <- initparam$numparam*(initparam$numparam+1)/2#
eps <- (.Machine$double.eps)^(1/3)#
param <- c(initparam$param, initparam$fixed)#
score <- double(initparam$numparam)#
paramcorr <- param[initparam$namescorr]#
nuisance <- param[initparam$namesnuis]#
sel=substr(names(nuisance),1,4)=="mean"#
mm=as.numeric(nuisance[sel])   ## mean paramteres#
other_nuis=as.numeric(nuisance[!sel]) #
nuisance=c(mm,other_nuis)#
sensmat <- double(dmat);varimat <- double(dmat)#
GD=.C('GodambeMat',as.double(mm),as.integer(initparam$bivariate),as.double(initparam$coordx),as.double(initparam$coordy),#
      as.double(initparam$coordt),as.integer(initparam$corrmodel), as.double(initparam$data),as.integer(initparam$distance),as.double(eps),#
      as.integer(initparam$flagcorr), as.integer(initparam$flagnuis),as.integer(grid),as.integer(initparam$likelihood),#
      as.double(c(X%*%mm)),as.integer(initparam$model),as.double(initparam$n),as.integer(num_betas),#
      as.integer(initparam$numparam),as.integer(initparam$numparamcorr),as.integer(length(paramcorr)),as.double(paramcorr),as.double(nuisance),#
      score=score,sensmat=sensmat,as.integer(initparam$spacetime),as.integer(initparam$type),#
      varimat=varimat,as.integer(initparam$vartype),as.double(initparam$winconst),as.double(initparam$winstp),as.double(initparam$winconst_t),as.double(initparam$winstp_t),#
      as.integer(initparam$weighted),c(t(X)),ns=as.integer(initparam$ns),NS=as.integer(NS),PACKAGE='GeoModels',DUP=TRUE,NAOK=TRUE)#
str(GD)
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
################################################################
############ Examples of spatial RFs #################
################################################################
model="Gaussian";shape=4;n=1#
# Define the spatial-coordinates of the points:#
coordt=seq(0,10)#1#
coordx_dyn=list()#
#
maxN=150#130#
set.seed(112)#
for(k in 1:length(coordt))#
{#
  NN=sample(1:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
# coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
mean <- 0#
sill <- 1#
nugget <- 0#
scale_s <- 0.2/3#
scale_t <- 1/3#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget,sill=sill)#
# Starting value for the estimated parameters#
start<-list(mean=mean,scale_s=scale_s,scale_t=scale_t)#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel="Exp_Exp",model=model,#
              param=param)$data#
maxtime=1;maxdist=0.3#
# CPUtime = proc.time()#
# fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
#                corrmodel="Exp_Exp",maxtime=maxtime,maxdist=maxdist,#
#                likelihood="Marginal",type="Pairwise",#
#                start=start,fixed=fixed,varest=TRUE)#
# CPUtime = proc.time()-CPUtime#
# print(fit1)#
score <- sensmat <- varcov <- varimat <- parscale <- NULL#
### Initialization parameters:#
initparam <- WlsStart(coordx=NULL, coordy=NULL, coordt=coordt, coordx_dyn=coordx_dyn, corrmodel, data=ss1, distance="Eucl", "Fitting", fixed=fixed, grid=FALSE,#10#
                      likelihood='Marginal', maxdist=maxdist, maxtime=maxtime,  model=model, n=1, NULL,#16#
                      parscale, optimizer=='L-BFGS-B', radius=6378.388, start=start, taper=NULL, tapsep=NULL,#22#
                      type="Pairwise", varest=TRUE, vartype='SubSamp', weighted=FALSE, winconst=NULL, winstp=NULL,winconst_t=NULL, winstp_t=NULL, X=NULL)#31#
numcoord=length(initparam$coordx);numtime=1;spacetime_dyn=FALSE#
if(initparam$spacetime) numtime=length(initparam$coordt)#
if(initparam$bivariate) numtime=2#
if(!is.null(coordx_dyn)) spacetime_dyn=TRUE#
dimat <- numcoord*numtime##
NS=cumsum(initparam$ns)#
if(is.null(dim(initparam$X)))#
{#
  X=as.matrix(rep(1,dimat))#
  if((initparam$spacetime||initparam$bivariate)&& spacetime_dyn)  X=as.matrix(rep(1,NS[numtime]))#
}#
num_betas=ncol(X) #
grid = FALSE#
if(grid)    #
{a=expand.grid(initparam$coordx,initparam$coordy);coordx=a[,1];coordy=a[,2]; #
}else {#
  if((initparam$spacetime||initparam$bivariate)&&(!spacetime_dyn)){#
    data=c(t(data))#
    coordx=rep(coordx,numtime);coordy=rep(coordy,numtime)#
  }#
  if((initparam$spacetime||initparam$bivariate)&&(spacetime_dyn)) initparam$data=unlist(initparam$data)          #
}#
if(initparam$spacetime||initparam$bivariate)   NS=c(0,NS)[-(length(initparam$ns)+1)]#
initparam$fixed#
#
dimmat <- initparam$numparam^2#
dmat <- initparam$numparam*(initparam$numparam+1)/2#
eps <- (.Machine$double.eps)^(1/3)#
param <- c(initparam$param, initparam$fixed)#
score <- double(initparam$numparam)#
paramcorr <- param[initparam$namescorr]#
nuisance <- param[initparam$namesnuis]#
sel=substr(names(nuisance),1,4)=="mean"#
mm=as.numeric(nuisance[sel])   ## mean paramteres#
other_nuis=as.numeric(nuisance[!sel]) #
nuisance=c(mm,other_nuis)#
sensmat <- double(dmat);varimat <- double(dmat)#
GD=.C('GodambeMat',as.double(mm),as.integer(initparam$bivariate),as.double(initparam$coordx),as.double(initparam$coordy),#
      as.double(initparam$coordt),as.integer(initparam$corrmodel), as.double(initparam$data),as.integer(initparam$distance),as.double(eps),#
      as.integer(initparam$flagcorr), as.integer(initparam$flagnuis),as.integer(grid),as.integer(initparam$likelihood),#
      as.double(c(X%*%mm)),as.integer(initparam$model),as.double(initparam$n),as.integer(num_betas),#
      as.integer(initparam$numparam),as.integer(initparam$numparamcorr),as.integer(length(paramcorr)),as.double(paramcorr),as.double(nuisance),#
      score=score,sensmat=sensmat,as.integer(initparam$spacetime),as.integer(initparam$type),#
      varimat=varimat,as.integer(initparam$vartype),as.double(initparam$winconst),as.double(initparam$winstp),as.double(initparam$winconst_t),as.double(initparam$winstp_t),#
      as.integer(initparam$weighted),c(t(X)),ns=as.integer(initparam$ns),NS=as.integer(NS),PACKAGE='GeoModels',DUP=TRUE,NAOK=TRUE)#
str(GD)
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
################################################################
############ Examples of spatial RFs #################
################################################################
model="Gaussian";shape=4;n=1#
# Define the spatial-coordinates of the points:#
coordt=seq(0,10,0.5)#1#
coordx_dyn=list()#
#
maxN=150#130#
set.seed(112)#
for(k in 1:length(coordt))#
{#
  NN=sample(1:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
# coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
mean <- 0#
sill <- 1#
nugget <- 0#
scale_s <- 0.2/3#
scale_t <- 1/3#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget,sill=sill)#
# Starting value for the estimated parameters#
start<-list(mean=mean,scale_s=scale_s,scale_t=scale_t)#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel="Exp_Exp",model=model,#
              param=param)$data#
maxtime=1;maxdist=0.3#
# CPUtime = proc.time()#
# fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
#                corrmodel="Exp_Exp",maxtime=maxtime,maxdist=maxdist,#
#                likelihood="Marginal",type="Pairwise",#
#                start=start,fixed=fixed,varest=TRUE)#
# CPUtime = proc.time()-CPUtime#
# print(fit1)#
score <- sensmat <- varcov <- varimat <- parscale <- NULL#
### Initialization parameters:#
initparam <- WlsStart(coordx=NULL, coordy=NULL, coordt=coordt, coordx_dyn=coordx_dyn, corrmodel, data=ss1, distance="Eucl", "Fitting", fixed=fixed, grid=FALSE,#10#
                      likelihood='Marginal', maxdist=maxdist, maxtime=maxtime,  model=model, n=1, NULL,#16#
                      parscale, optimizer=='L-BFGS-B', radius=6378.388, start=start, taper=NULL, tapsep=NULL,#22#
                      type="Pairwise", varest=TRUE, vartype='SubSamp', weighted=FALSE, winconst=NULL, winstp=NULL,winconst_t=NULL, winstp_t=NULL, X=NULL)#31#
numcoord=length(initparam$coordx);numtime=1;spacetime_dyn=FALSE#
if(initparam$spacetime) numtime=length(initparam$coordt)#
if(initparam$bivariate) numtime=2#
if(!is.null(coordx_dyn)) spacetime_dyn=TRUE#
dimat <- numcoord*numtime##
NS=cumsum(initparam$ns)#
if(is.null(dim(initparam$X)))#
{#
  X=as.matrix(rep(1,dimat))#
  if((initparam$spacetime||initparam$bivariate)&& spacetime_dyn)  X=as.matrix(rep(1,NS[numtime]))#
}#
num_betas=ncol(X) #
grid = FALSE#
if(grid)    #
{a=expand.grid(initparam$coordx,initparam$coordy);coordx=a[,1];coordy=a[,2]; #
}else {#
  if((initparam$spacetime||initparam$bivariate)&&(!spacetime_dyn)){#
    data=c(t(data))#
    coordx=rep(coordx,numtime);coordy=rep(coordy,numtime)#
  }#
  if((initparam$spacetime||initparam$bivariate)&&(spacetime_dyn)) initparam$data=unlist(initparam$data)          #
}#
if(initparam$spacetime||initparam$bivariate)   NS=c(0,NS)[-(length(initparam$ns)+1)]#
initparam$fixed#
#
dimmat <- initparam$numparam^2#
dmat <- initparam$numparam*(initparam$numparam+1)/2#
eps <- (.Machine$double.eps)^(1/3)#
param <- c(initparam$param, initparam$fixed)#
score <- double(initparam$numparam)#
paramcorr <- param[initparam$namescorr]#
nuisance <- param[initparam$namesnuis]#
sel=substr(names(nuisance),1,4)=="mean"#
mm=as.numeric(nuisance[sel])   ## mean paramteres#
other_nuis=as.numeric(nuisance[!sel]) #
nuisance=c(mm,other_nuis)#
sensmat <- double(dmat);varimat <- double(dmat)#
GD=.C('GodambeMat',as.double(mm),as.integer(initparam$bivariate),as.double(initparam$coordx),as.double(initparam$coordy),#
      as.double(initparam$coordt),as.integer(initparam$corrmodel), as.double(initparam$data),as.integer(initparam$distance),as.double(eps),#
      as.integer(initparam$flagcorr), as.integer(initparam$flagnuis),as.integer(grid),as.integer(initparam$likelihood),#
      as.double(c(X%*%mm)),as.integer(initparam$model),as.double(initparam$n),as.integer(num_betas),#
      as.integer(initparam$numparam),as.integer(initparam$numparamcorr),as.integer(length(paramcorr)),as.double(paramcorr),as.double(nuisance),#
      score=score,sensmat=sensmat,as.integer(initparam$spacetime),as.integer(initparam$type),#
      varimat=varimat,as.integer(initparam$vartype),as.double(initparam$winconst),as.double(initparam$winstp),as.double(initparam$winconst_t),as.double(initparam$winstp_t),#
      as.integer(initparam$weighted),c(t(X)),ns=as.integer(initparam$ns),NS=as.integer(NS),PACKAGE='GeoModels',DUP=TRUE,NAOK=TRUE)#
str(GD)
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="Gaussian";shape=4;n=1#
set.seed(112)#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,20,1.5)# step:1.5#
#
N=100  # number of location sites#
x <- runif(N, 0, 1)#
# set.seed(5)#
y <- runif(N, 0, 1)#
coords <- cbind(x,y)#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 0.1#
sill <- 1#
nugget <- 0#
scale_s <- .3#
scale_t <- .3#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
fixed<-list(nugget=nugget, sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,mean = mean )#
set.seed(2)#
ss1 <- GeoSim(coordx=coords, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxtime=2;maxdist=0.1#
fit1 <- GeoFit(data=ss1,coordx=coords,coordt=coordt,#
               corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,model = model,varest = TRUE)#
print(fit1)#
fit1$param
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
################################################################
############ Examples of spatial RFs #################
################################################################
model="Gaussian";shape=4;n=1#
# Define the spatial-coordinates of the points:#
coordt=seq(0,10,1.5)#1#
coordx_dyn=list()#
#
maxN=150#130#
set.seed(112)#
for(k in 1:length(coordt))#
{#
  NN=sample(1:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
# coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
mean <- 0#
sill <- 1#
nugget <- 0#
scale_s <- 0.2/3#
scale_t <- 1/3#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget,sill=sill)#
# Starting value for the estimated parameters#
start<-list(mean=mean,scale_s=scale_s,scale_t=scale_t)#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel="Exp_Exp",model=model,#
              param=param)$data#
maxtime=1;maxdist=0.3#
# CPUtime = proc.time()#
# fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
#                corrmodel="Exp_Exp",maxtime=maxtime,maxdist=maxdist,#
#                likelihood="Marginal",type="Pairwise",#
#                start=start,fixed=fixed,varest=TRUE)#
# CPUtime = proc.time()-CPUtime#
# print(fit1)#
score <- sensmat <- varcov <- varimat <- parscale <- NULL#
### Initialization parameters:#
initparam <- WlsStart(coordx=NULL, coordy=NULL, coordt=coordt, coordx_dyn=coordx_dyn, corrmodel, data=ss1, distance="Eucl", "Fitting", fixed=fixed, grid=FALSE,#10#
                      likelihood='Marginal', maxdist=maxdist, maxtime=maxtime,  model=model, n=1, NULL,#16#
                      parscale, optimizer=='L-BFGS-B', radius=6378.388, start=start, taper=NULL, tapsep=NULL,#22#
                      type="Pairwise", varest=TRUE, vartype='SubSamp', weighted=FALSE, winconst=NULL, winstp=NULL,winconst_t=NULL, winstp_t=NULL, X=NULL)#31#
numcoord=length(initparam$coordx);numtime=1;spacetime_dyn=FALSE#
if(initparam$spacetime) numtime=length(initparam$coordt)#
if(initparam$bivariate) numtime=2#
if(!is.null(coordx_dyn)) spacetime_dyn=TRUE#
dimat <- numcoord*numtime##
NS=cumsum(initparam$ns)#
if(is.null(dim(initparam$X)))#
{#
  X=as.matrix(rep(1,dimat))#
  if((initparam$spacetime||initparam$bivariate)&& spacetime_dyn)  X=as.matrix(rep(1,NS[numtime]))#
}#
num_betas=ncol(X) #
grid = FALSE#
if(grid)    #
{a=expand.grid(initparam$coordx,initparam$coordy);coordx=a[,1];coordy=a[,2]; #
}else {#
  if((initparam$spacetime||initparam$bivariate)&&(!spacetime_dyn)){#
    data=c(t(data))#
    coordx=rep(coordx,numtime);coordy=rep(coordy,numtime)#
  }#
  if((initparam$spacetime||initparam$bivariate)&&(spacetime_dyn)) initparam$data=unlist(initparam$data)          #
}#
if(initparam$spacetime||initparam$bivariate)   NS=c(0,NS)[-(length(initparam$ns)+1)]#
initparam$fixed#
#
dimmat <- initparam$numparam^2#
dmat <- initparam$numparam*(initparam$numparam+1)/2#
eps <- (.Machine$double.eps)^(1/3)#
param <- c(initparam$param, initparam$fixed)#
score <- double(initparam$numparam)#
paramcorr <- param[initparam$namescorr]#
nuisance <- param[initparam$namesnuis]#
sel=substr(names(nuisance),1,4)=="mean"#
mm=as.numeric(nuisance[sel])   ## mean paramteres#
other_nuis=as.numeric(nuisance[!sel]) #
nuisance=c(mm,other_nuis)#
sensmat <- double(dmat);varimat <- double(dmat)#
GD=.C('GodambeMat',as.double(mm),as.integer(initparam$bivariate),as.double(initparam$coordx),as.double(initparam$coordy),#
      as.double(initparam$coordt),as.integer(initparam$corrmodel), as.double(initparam$data),as.integer(initparam$distance),as.double(eps),#
      as.integer(initparam$flagcorr), as.integer(initparam$flagnuis),as.integer(grid),as.integer(initparam$likelihood),#
      as.double(c(X%*%mm)),as.integer(initparam$model),as.double(initparam$n),as.integer(num_betas),#
      as.integer(initparam$numparam),as.integer(initparam$numparamcorr),as.integer(length(paramcorr)),as.double(paramcorr),as.double(nuisance),#
      score=score,sensmat=sensmat,as.integer(initparam$spacetime),as.integer(initparam$type),#
      varimat=varimat,as.integer(initparam$vartype),as.double(initparam$winconst),as.double(initparam$winstp),as.double(initparam$winconst_t),as.double(initparam$winstp_t),#
      as.integer(initparam$weighted),c(t(X)),ns=as.integer(initparam$ns),NS=as.integer(NS),PACKAGE='GeoModels',DUP=TRUE,NAOK=TRUE)#
str(GD)
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
################################################################
############ Examples of spatial RFs #################
################################################################
model="Gaussian";shape=4;n=1#
# Define the spatial-coordinates of the points:#
coordt=seq(0,10,1)#1#
coordx_dyn=list()#
#
maxN=150#130#
set.seed(112)#
for(k in 1:length(coordt))#
{#
  NN=sample(1:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
# coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
mean <- 0#
sill <- 1#
nugget <- 0#
scale_s <- 0.2/3#
scale_t <- 1/3#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget,sill=sill)#
# Starting value for the estimated parameters#
start<-list(mean=mean,scale_s=scale_s,scale_t=scale_t)#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel="Exp_Exp",model=model,#
              param=param)$data#
maxtime=1;maxdist=0.3#
# CPUtime = proc.time()#
# fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
#                corrmodel="Exp_Exp",maxtime=maxtime,maxdist=maxdist,#
#                likelihood="Marginal",type="Pairwise",#
#                start=start,fixed=fixed,varest=TRUE)#
# CPUtime = proc.time()-CPUtime#
# print(fit1)#
score <- sensmat <- varcov <- varimat <- parscale <- NULL#
### Initialization parameters:#
initparam <- WlsStart(coordx=NULL, coordy=NULL, coordt=coordt, coordx_dyn=coordx_dyn, corrmodel, data=ss1, distance="Eucl", "Fitting", fixed=fixed, grid=FALSE,#10#
                      likelihood='Marginal', maxdist=maxdist, maxtime=maxtime,  model=model, n=1, NULL,#16#
                      parscale, optimizer=='L-BFGS-B', radius=6378.388, start=start, taper=NULL, tapsep=NULL,#22#
                      type="Pairwise", varest=TRUE, vartype='SubSamp', weighted=FALSE, winconst=NULL, winstp=NULL,winconst_t=NULL, winstp_t=NULL, X=NULL)#31#
numcoord=length(initparam$coordx);numtime=1;spacetime_dyn=FALSE#
if(initparam$spacetime) numtime=length(initparam$coordt)#
if(initparam$bivariate) numtime=2#
if(!is.null(coordx_dyn)) spacetime_dyn=TRUE#
dimat <- numcoord*numtime##
NS=cumsum(initparam$ns)#
if(is.null(dim(initparam$X)))#
{#
  X=as.matrix(rep(1,dimat))#
  if((initparam$spacetime||initparam$bivariate)&& spacetime_dyn)  X=as.matrix(rep(1,NS[numtime]))#
}#
num_betas=ncol(X) #
grid = FALSE#
if(grid)    #
{a=expand.grid(initparam$coordx,initparam$coordy);coordx=a[,1];coordy=a[,2]; #
}else {#
  if((initparam$spacetime||initparam$bivariate)&&(!spacetime_dyn)){#
    data=c(t(data))#
    coordx=rep(coordx,numtime);coordy=rep(coordy,numtime)#
  }#
  if((initparam$spacetime||initparam$bivariate)&&(spacetime_dyn)) initparam$data=unlist(initparam$data)          #
}#
if(initparam$spacetime||initparam$bivariate)   NS=c(0,NS)[-(length(initparam$ns)+1)]#
initparam$fixed#
#
dimmat <- initparam$numparam^2#
dmat <- initparam$numparam*(initparam$numparam+1)/2#
eps <- (.Machine$double.eps)^(1/3)#
param <- c(initparam$param, initparam$fixed)#
score <- double(initparam$numparam)#
paramcorr <- param[initparam$namescorr]#
nuisance <- param[initparam$namesnuis]#
sel=substr(names(nuisance),1,4)=="mean"#
mm=as.numeric(nuisance[sel])   ## mean paramteres#
other_nuis=as.numeric(nuisance[!sel]) #
nuisance=c(mm,other_nuis)#
sensmat <- double(dmat);varimat <- double(dmat)#
GD=.C('GodambeMat',as.double(mm),as.integer(initparam$bivariate),as.double(initparam$coordx),as.double(initparam$coordy),#
      as.double(initparam$coordt),as.integer(initparam$corrmodel), as.double(initparam$data),as.integer(initparam$distance),as.double(eps),#
      as.integer(initparam$flagcorr), as.integer(initparam$flagnuis),as.integer(grid),as.integer(initparam$likelihood),#
      as.double(c(X%*%mm)),as.integer(initparam$model),as.double(initparam$n),as.integer(num_betas),#
      as.integer(initparam$numparam),as.integer(initparam$numparamcorr),as.integer(length(paramcorr)),as.double(paramcorr),as.double(nuisance),#
      score=score,sensmat=sensmat,as.integer(initparam$spacetime),as.integer(initparam$type),#
      varimat=varimat,as.integer(initparam$vartype),as.double(initparam$winconst),as.double(initparam$winstp),as.double(initparam$winconst_t),as.double(initparam$winstp_t),#
      as.integer(initparam$weighted),c(t(X)),ns=as.integer(initparam$ns),NS=as.integer(NS),PACKAGE='GeoModels',DUP=TRUE,NAOK=TRUE)#
str(GD)
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
################################################################
############ Examples of spatial RFs #################
################################################################
model="Gaussian";shape=4;n=1#
# Define the spatial-coordinates of the points:#
coordt=seq(0,10,1.5)#1#
coordx_dyn=list()#
#
maxN=150#130#
set.seed(112)#
for(k in 1:length(coordt))#
{#
  NN=sample(1:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
# coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
mean <- 0#
sill <- 1#
nugget <- 0#
scale_s <- 0.2/3#
scale_t <- 1/3#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget,sill=sill)#
# Starting value for the estimated parameters#
start<-list(mean=mean,scale_s=scale_s,scale_t=scale_t)#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel="Exp_Exp",model=model,#
              param=param)$data#
maxtime=1;maxdist=0.3#
# CPUtime = proc.time()#
# fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
#                corrmodel="Exp_Exp",maxtime=maxtime,maxdist=maxdist,#
#                likelihood="Marginal",type="Pairwise",#
#                start=start,fixed=fixed,varest=TRUE)#
# CPUtime = proc.time()-CPUtime#
# print(fit1)#
score <- sensmat <- varcov <- varimat <- parscale <- NULL#
### Initialization parameters:#
initparam <- WlsStart(coordx=NULL, coordy=NULL, coordt=coordt, coordx_dyn=coordx_dyn, corrmodel, data=ss1, distance="Eucl", "Fitting", fixed=fixed, grid=FALSE,#10#
                      likelihood='Marginal', maxdist=maxdist, maxtime=maxtime,  model=model, n=1, NULL,#16#
                      parscale, optimizer=='L-BFGS-B', radius=6378.388, start=start, taper=NULL, tapsep=NULL,#22#
                      type="Pairwise", varest=TRUE, vartype='SubSamp', weighted=FALSE, winconst=NULL, winstp=NULL,winconst_t=NULL, winstp_t=NULL, X=NULL)#31#
numcoord=length(initparam$coordx);numtime=1;spacetime_dyn=FALSE#
if(initparam$spacetime) numtime=length(initparam$coordt)#
if(initparam$bivariate) numtime=2#
if(!is.null(coordx_dyn)) spacetime_dyn=TRUE#
dimat <- numcoord*numtime##
NS=cumsum(initparam$ns)#
if(is.null(dim(initparam$X)))#
{#
  X=as.matrix(rep(1,dimat))#
  if((initparam$spacetime||initparam$bivariate)&& spacetime_dyn)  X=as.matrix(rep(1,NS[numtime]))#
}#
num_betas=ncol(X) #
grid = FALSE#
if(grid)    #
{a=expand.grid(initparam$coordx,initparam$coordy);coordx=a[,1];coordy=a[,2]; #
}else {#
  if((initparam$spacetime||initparam$bivariate)&&(!spacetime_dyn)){#
    data=c(t(data))#
    coordx=rep(coordx,numtime);coordy=rep(coordy,numtime)#
  }#
  if((initparam$spacetime||initparam$bivariate)&&(spacetime_dyn)) initparam$data=unlist(initparam$data)          #
}#
if(initparam$spacetime||initparam$bivariate)   NS=c(0,NS)[-(length(initparam$ns)+1)]#
initparam$fixed#
#
dimmat <- initparam$numparam^2#
dmat <- initparam$numparam*(initparam$numparam+1)/2#
eps <- (.Machine$double.eps)^(1/3)#
param <- c(initparam$param, initparam$fixed)#
score <- double(initparam$numparam)#
paramcorr <- param[initparam$namescorr]#
nuisance <- param[initparam$namesnuis]#
sel=substr(names(nuisance),1,4)=="mean"#
mm=as.numeric(nuisance[sel])   ## mean paramteres#
other_nuis=as.numeric(nuisance[!sel]) #
nuisance=c(mm,other_nuis)#
sensmat <- double(dmat);varimat <- double(dmat)#
GD=.C('GodambeMat',as.double(mm),as.integer(initparam$bivariate),as.double(initparam$coordx),as.double(initparam$coordy),#
      as.double(initparam$coordt),as.integer(initparam$corrmodel), as.double(initparam$data),as.integer(initparam$distance),as.double(eps),#
      as.integer(initparam$flagcorr), as.integer(initparam$flagnuis),as.integer(grid),as.integer(initparam$likelihood),#
      as.double(c(X%*%mm)),as.integer(initparam$model),as.double(initparam$n),as.integer(num_betas),#
      as.integer(initparam$numparam),as.integer(initparam$numparamcorr),as.integer(length(paramcorr)),as.double(paramcorr),as.double(nuisance),#
      score=score,sensmat=sensmat,as.integer(initparam$spacetime),as.integer(initparam$type),#
      varimat=varimat,as.integer(initparam$vartype),as.double(initparam$winconst),as.double(initparam$winstp),as.double(initparam$winconst_t),as.double(initparam$winstp_t),#
      as.integer(initparam$weighted),c(t(X)),ns=as.integer(initparam$ns),NS=as.integer(NS),PACKAGE='GeoModels',DUP=TRUE,NAOK=TRUE)#
str(GD)
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
################################################################
############ Examples of spatial RFs #################
################################################################
model="Gaussian";shape=4;n=1#
# Define the spatial-coordinates of the points:#
coordt=seq(0,10,1.1)#1#
coordx_dyn=list()#
#
maxN=150#130#
set.seed(112)#
for(k in 1:length(coordt))#
{#
  NN=sample(1:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
# coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
mean <- 0#
sill <- 1#
nugget <- 0#
scale_s <- 0.2/3#
scale_t <- 1/3#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget,sill=sill)#
# Starting value for the estimated parameters#
start<-list(mean=mean,scale_s=scale_s,scale_t=scale_t)#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel="Exp_Exp",model=model,#
              param=param)$data#
maxtime=1;maxdist=0.3#
# CPUtime = proc.time()#
# fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
#                corrmodel="Exp_Exp",maxtime=maxtime,maxdist=maxdist,#
#                likelihood="Marginal",type="Pairwise",#
#                start=start,fixed=fixed,varest=TRUE)#
# CPUtime = proc.time()-CPUtime#
# print(fit1)#
score <- sensmat <- varcov <- varimat <- parscale <- NULL#
### Initialization parameters:#
initparam <- WlsStart(coordx=NULL, coordy=NULL, coordt=coordt, coordx_dyn=coordx_dyn, corrmodel, data=ss1, distance="Eucl", "Fitting", fixed=fixed, grid=FALSE,#10#
                      likelihood='Marginal', maxdist=maxdist, maxtime=maxtime,  model=model, n=1, NULL,#16#
                      parscale, optimizer=='L-BFGS-B', radius=6378.388, start=start, taper=NULL, tapsep=NULL,#22#
                      type="Pairwise", varest=TRUE, vartype='SubSamp', weighted=FALSE, winconst=NULL, winstp=NULL,winconst_t=NULL, winstp_t=NULL, X=NULL)#31#
numcoord=length(initparam$coordx);numtime=1;spacetime_dyn=FALSE#
if(initparam$spacetime) numtime=length(initparam$coordt)#
if(initparam$bivariate) numtime=2#
if(!is.null(coordx_dyn)) spacetime_dyn=TRUE#
dimat <- numcoord*numtime##
NS=cumsum(initparam$ns)#
if(is.null(dim(initparam$X)))#
{#
  X=as.matrix(rep(1,dimat))#
  if((initparam$spacetime||initparam$bivariate)&& spacetime_dyn)  X=as.matrix(rep(1,NS[numtime]))#
}#
num_betas=ncol(X) #
grid = FALSE#
if(grid)    #
{a=expand.grid(initparam$coordx,initparam$coordy);coordx=a[,1];coordy=a[,2]; #
}else {#
  if((initparam$spacetime||initparam$bivariate)&&(!spacetime_dyn)){#
    data=c(t(data))#
    coordx=rep(coordx,numtime);coordy=rep(coordy,numtime)#
  }#
  if((initparam$spacetime||initparam$bivariate)&&(spacetime_dyn)) initparam$data=unlist(initparam$data)          #
}#
if(initparam$spacetime||initparam$bivariate)   NS=c(0,NS)[-(length(initparam$ns)+1)]#
initparam$fixed#
#
dimmat <- initparam$numparam^2#
dmat <- initparam$numparam*(initparam$numparam+1)/2#
eps <- (.Machine$double.eps)^(1/3)#
param <- c(initparam$param, initparam$fixed)#
score <- double(initparam$numparam)#
paramcorr <- param[initparam$namescorr]#
nuisance <- param[initparam$namesnuis]#
sel=substr(names(nuisance),1,4)=="mean"#
mm=as.numeric(nuisance[sel])   ## mean paramteres#
other_nuis=as.numeric(nuisance[!sel]) #
nuisance=c(mm,other_nuis)#
sensmat <- double(dmat);varimat <- double(dmat)#
GD=.C('GodambeMat',as.double(mm),as.integer(initparam$bivariate),as.double(initparam$coordx),as.double(initparam$coordy),#
      as.double(initparam$coordt),as.integer(initparam$corrmodel), as.double(initparam$data),as.integer(initparam$distance),as.double(eps),#
      as.integer(initparam$flagcorr), as.integer(initparam$flagnuis),as.integer(grid),as.integer(initparam$likelihood),#
      as.double(c(X%*%mm)),as.integer(initparam$model),as.double(initparam$n),as.integer(num_betas),#
      as.integer(initparam$numparam),as.integer(initparam$numparamcorr),as.integer(length(paramcorr)),as.double(paramcorr),as.double(nuisance),#
      score=score,sensmat=sensmat,as.integer(initparam$spacetime),as.integer(initparam$type),#
      varimat=varimat,as.integer(initparam$vartype),as.double(initparam$winconst),as.double(initparam$winstp),as.double(initparam$winconst_t),as.double(initparam$winstp_t),#
      as.integer(initparam$weighted),c(t(X)),ns=as.integer(initparam$ns),NS=as.integer(NS),PACKAGE='GeoModels',DUP=TRUE,NAOK=TRUE)#
str(GD)
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
################################################################
############ Examples of spatial RFs #################
################################################################
model="Gaussian";shape=4;n=1#
# Define the spatial-coordinates of the points:#
coordt=seq(0,5,.5)#1#
coordx_dyn=list()#
#
maxN=150#130#
set.seed(112)#
for(k in 1:length(coordt))#
{#
  NN=sample(1:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
# coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
mean <- 0#
sill <- 1#
nugget <- 0#
scale_s <- 0.2/3#
scale_t <- 1/3#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget,sill=sill)#
# Starting value for the estimated parameters#
start<-list(mean=mean,scale_s=scale_s,scale_t=scale_t)#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel="Exp_Exp",model=model,#
              param=param)$data#
maxtime=1;maxdist=0.3#
# CPUtime = proc.time()#
# fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
#                corrmodel="Exp_Exp",maxtime=maxtime,maxdist=maxdist,#
#                likelihood="Marginal",type="Pairwise",#
#                start=start,fixed=fixed,varest=TRUE)#
# CPUtime = proc.time()-CPUtime#
# print(fit1)#
score <- sensmat <- varcov <- varimat <- parscale <- NULL#
### Initialization parameters:#
initparam <- WlsStart(coordx=NULL, coordy=NULL, coordt=coordt, coordx_dyn=coordx_dyn, corrmodel, data=ss1, distance="Eucl", "Fitting", fixed=fixed, grid=FALSE,#10#
                      likelihood='Marginal', maxdist=maxdist, maxtime=maxtime,  model=model, n=1, NULL,#16#
                      parscale, optimizer=='L-BFGS-B', radius=6378.388, start=start, taper=NULL, tapsep=NULL,#22#
                      type="Pairwise", varest=TRUE, vartype='SubSamp', weighted=FALSE, winconst=NULL, winstp=NULL,winconst_t=NULL, winstp_t=NULL, X=NULL)#31#
numcoord=length(initparam$coordx);numtime=1;spacetime_dyn=FALSE#
if(initparam$spacetime) numtime=length(initparam$coordt)#
if(initparam$bivariate) numtime=2#
if(!is.null(coordx_dyn)) spacetime_dyn=TRUE#
dimat <- numcoord*numtime##
NS=cumsum(initparam$ns)#
if(is.null(dim(initparam$X)))#
{#
  X=as.matrix(rep(1,dimat))#
  if((initparam$spacetime||initparam$bivariate)&& spacetime_dyn)  X=as.matrix(rep(1,NS[numtime]))#
}#
num_betas=ncol(X) #
grid = FALSE#
if(grid)    #
{a=expand.grid(initparam$coordx,initparam$coordy);coordx=a[,1];coordy=a[,2]; #
}else {#
  if((initparam$spacetime||initparam$bivariate)&&(!spacetime_dyn)){#
    data=c(t(data))#
    coordx=rep(coordx,numtime);coordy=rep(coordy,numtime)#
  }#
  if((initparam$spacetime||initparam$bivariate)&&(spacetime_dyn)) initparam$data=unlist(initparam$data)          #
}#
if(initparam$spacetime||initparam$bivariate)   NS=c(0,NS)[-(length(initparam$ns)+1)]#
initparam$fixed#
#
dimmat <- initparam$numparam^2#
dmat <- initparam$numparam*(initparam$numparam+1)/2#
eps <- (.Machine$double.eps)^(1/3)#
param <- c(initparam$param, initparam$fixed)#
score <- double(initparam$numparam)#
paramcorr <- param[initparam$namescorr]#
nuisance <- param[initparam$namesnuis]#
sel=substr(names(nuisance),1,4)=="mean"#
mm=as.numeric(nuisance[sel])   ## mean paramteres#
other_nuis=as.numeric(nuisance[!sel]) #
nuisance=c(mm,other_nuis)#
sensmat <- double(dmat);varimat <- double(dmat)#
GD=.C('GodambeMat',as.double(mm),as.integer(initparam$bivariate),as.double(initparam$coordx),as.double(initparam$coordy),#
      as.double(initparam$coordt),as.integer(initparam$corrmodel), as.double(initparam$data),as.integer(initparam$distance),as.double(eps),#
      as.integer(initparam$flagcorr), as.integer(initparam$flagnuis),as.integer(grid),as.integer(initparam$likelihood),#
      as.double(c(X%*%mm)),as.integer(initparam$model),as.double(initparam$n),as.integer(num_betas),#
      as.integer(initparam$numparam),as.integer(initparam$numparamcorr),as.integer(length(paramcorr)),as.double(paramcorr),as.double(nuisance),#
      score=score,sensmat=sensmat,as.integer(initparam$spacetime),as.integer(initparam$type),#
      varimat=varimat,as.integer(initparam$vartype),as.double(initparam$winconst),as.double(initparam$winstp),as.double(initparam$winconst_t),as.double(initparam$winstp_t),#
      as.integer(initparam$weighted),c(t(X)),ns=as.integer(initparam$ns),NS=as.integer(NS),PACKAGE='GeoModels',DUP=TRUE,NAOK=TRUE)#
str(GD)
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
################################################################
############ Examples of spatial RFs #################
################################################################
model="Gaussian";shape=4;n=1#
# Define the spatial-coordinates of the points:#
coordt=seq(0,10,1)#1#
coordx_dyn=list()#
#
maxN=150#130#
set.seed(112)#
for(k in 1:length(coordt))#
{#
  NN=sample(1:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
# coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
mean <- 0#
sill <- 1#
nugget <- 0#
scale_s <- 0.2/3#
scale_t <- 1/3#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget,sill=sill)#
# Starting value for the estimated parameters#
start<-list(mean=mean,scale_s=scale_s,scale_t=scale_t)#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel="Exp_Exp",model=model,#
              param=param)$data#
maxtime=1;maxdist=0.3#
# CPUtime = proc.time()#
# fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
#                corrmodel="Exp_Exp",maxtime=maxtime,maxdist=maxdist,#
#                likelihood="Marginal",type="Pairwise",#
#                start=start,fixed=fixed,varest=TRUE)#
# CPUtime = proc.time()-CPUtime#
# print(fit1)#
score <- sensmat <- varcov <- varimat <- parscale <- NULL#
### Initialization parameters:#
initparam <- WlsStart(coordx=NULL, coordy=NULL, coordt=coordt, coordx_dyn=coordx_dyn, corrmodel, data=ss1, distance="Eucl", "Fitting", fixed=fixed, grid=FALSE,#10#
                      likelihood='Marginal', maxdist=maxdist, maxtime=maxtime,  model=model, n=1, NULL,#16#
                      parscale, optimizer=='L-BFGS-B', radius=6378.388, start=start, taper=NULL, tapsep=NULL,#22#
                      type="Pairwise", varest=TRUE, vartype='SubSamp', weighted=FALSE, winconst=NULL, winstp=NULL,winconst_t=NULL, winstp_t=NULL, X=NULL)#31#
numcoord=length(initparam$coordx);numtime=1;spacetime_dyn=FALSE#
if(initparam$spacetime) numtime=length(initparam$coordt)#
if(initparam$bivariate) numtime=2#
if(!is.null(coordx_dyn)) spacetime_dyn=TRUE#
dimat <- numcoord*numtime##
NS=cumsum(initparam$ns)#
if(is.null(dim(initparam$X)))#
{#
  X=as.matrix(rep(1,dimat))#
  if((initparam$spacetime||initparam$bivariate)&& spacetime_dyn)  X=as.matrix(rep(1,NS[numtime]))#
}#
num_betas=ncol(X) #
grid = FALSE#
if(grid)    #
{a=expand.grid(initparam$coordx,initparam$coordy);coordx=a[,1];coordy=a[,2]; #
}else {#
  if((initparam$spacetime||initparam$bivariate)&&(!spacetime_dyn)){#
    data=c(t(data))#
    coordx=rep(coordx,numtime);coordy=rep(coordy,numtime)#
  }#
  if((initparam$spacetime||initparam$bivariate)&&(spacetime_dyn)) initparam$data=unlist(initparam$data)          #
}#
if(initparam$spacetime||initparam$bivariate)   NS=c(0,NS)[-(length(initparam$ns)+1)]#
initparam$fixed#
#
dimmat <- initparam$numparam^2#
dmat <- initparam$numparam*(initparam$numparam+1)/2#
eps <- (.Machine$double.eps)^(1/3)#
param <- c(initparam$param, initparam$fixed)#
score <- double(initparam$numparam)#
paramcorr <- param[initparam$namescorr]#
nuisance <- param[initparam$namesnuis]#
sel=substr(names(nuisance),1,4)=="mean"#
mm=as.numeric(nuisance[sel])   ## mean paramteres#
other_nuis=as.numeric(nuisance[!sel]) #
nuisance=c(mm,other_nuis)#
sensmat <- double(dmat);varimat <- double(dmat)#
GD=.C('GodambeMat',as.double(mm),as.integer(initparam$bivariate),as.double(initparam$coordx),as.double(initparam$coordy),#
      as.double(initparam$coordt),as.integer(initparam$corrmodel), as.double(initparam$data),as.integer(initparam$distance),as.double(eps),#
      as.integer(initparam$flagcorr), as.integer(initparam$flagnuis),as.integer(grid),as.integer(initparam$likelihood),#
      as.double(c(X%*%mm)),as.integer(initparam$model),as.double(initparam$n),as.integer(num_betas),#
      as.integer(initparam$numparam),as.integer(initparam$numparamcorr),as.integer(length(paramcorr)),as.double(paramcorr),as.double(nuisance),#
      score=score,sensmat=sensmat,as.integer(initparam$spacetime),as.integer(initparam$type),#
      varimat=varimat,as.integer(initparam$vartype),as.double(initparam$winconst),as.double(initparam$winstp),as.double(initparam$winconst_t),as.double(initparam$winstp_t),#
      as.integer(initparam$weighted),c(t(X)),ns=as.integer(initparam$ns),NS=as.integer(NS),PACKAGE='GeoModels',DUP=TRUE,NAOK=TRUE)#
str(GD)
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
################################################################
############ Examples of spatial RFs #################
################################################################
model="Gaussian";shape=4;n=1#
# Define the spatial-coordinates of the points:#
coordt=seq(0,2,.5)#1#
coordx_dyn=list()#
#
maxN=150#130#
set.seed(112)#
for(k in 1:length(coordt))#
{#
  NN=sample(1:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
# coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
mean <- 0#
sill <- 1#
nugget <- 0#
scale_s <- 0.2/3#
scale_t <- 1/3#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget,sill=sill)#
# Starting value for the estimated parameters#
start<-list(mean=mean,scale_s=scale_s,scale_t=scale_t)#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel="Exp_Exp",model=model,#
              param=param)$data#
maxtime=1;maxdist=0.3#
# CPUtime = proc.time()#
# fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
#                corrmodel="Exp_Exp",maxtime=maxtime,maxdist=maxdist,#
#                likelihood="Marginal",type="Pairwise",#
#                start=start,fixed=fixed,varest=TRUE)#
# CPUtime = proc.time()-CPUtime#
# print(fit1)#
score <- sensmat <- varcov <- varimat <- parscale <- NULL#
### Initialization parameters:#
initparam <- WlsStart(coordx=NULL, coordy=NULL, coordt=coordt, coordx_dyn=coordx_dyn, corrmodel, data=ss1, distance="Eucl", "Fitting", fixed=fixed, grid=FALSE,#10#
                      likelihood='Marginal', maxdist=maxdist, maxtime=maxtime,  model=model, n=1, NULL,#16#
                      parscale, optimizer=='L-BFGS-B', radius=6378.388, start=start, taper=NULL, tapsep=NULL,#22#
                      type="Pairwise", varest=TRUE, vartype='SubSamp', weighted=FALSE, winconst=NULL, winstp=NULL,winconst_t=NULL, winstp_t=NULL, X=NULL)#31#
numcoord=length(initparam$coordx);numtime=1;spacetime_dyn=FALSE#
if(initparam$spacetime) numtime=length(initparam$coordt)#
if(initparam$bivariate) numtime=2#
if(!is.null(coordx_dyn)) spacetime_dyn=TRUE#
dimat <- numcoord*numtime##
NS=cumsum(initparam$ns)#
if(is.null(dim(initparam$X)))#
{#
  X=as.matrix(rep(1,dimat))#
  if((initparam$spacetime||initparam$bivariate)&& spacetime_dyn)  X=as.matrix(rep(1,NS[numtime]))#
}#
num_betas=ncol(X) #
grid = FALSE#
if(grid)    #
{a=expand.grid(initparam$coordx,initparam$coordy);coordx=a[,1];coordy=a[,2]; #
}else {#
  if((initparam$spacetime||initparam$bivariate)&&(!spacetime_dyn)){#
    data=c(t(data))#
    coordx=rep(coordx,numtime);coordy=rep(coordy,numtime)#
  }#
  if((initparam$spacetime||initparam$bivariate)&&(spacetime_dyn)) initparam$data=unlist(initparam$data)          #
}#
if(initparam$spacetime||initparam$bivariate)   NS=c(0,NS)[-(length(initparam$ns)+1)]#
initparam$fixed#
#
dimmat <- initparam$numparam^2#
dmat <- initparam$numparam*(initparam$numparam+1)/2#
eps <- (.Machine$double.eps)^(1/3)#
param <- c(initparam$param, initparam$fixed)#
score <- double(initparam$numparam)#
paramcorr <- param[initparam$namescorr]#
nuisance <- param[initparam$namesnuis]#
sel=substr(names(nuisance),1,4)=="mean"#
mm=as.numeric(nuisance[sel])   ## mean paramteres#
other_nuis=as.numeric(nuisance[!sel]) #
nuisance=c(mm,other_nuis)#
sensmat <- double(dmat);varimat <- double(dmat)#
GD=.C('GodambeMat',as.double(mm),as.integer(initparam$bivariate),as.double(initparam$coordx),as.double(initparam$coordy),#
      as.double(initparam$coordt),as.integer(initparam$corrmodel), as.double(initparam$data),as.integer(initparam$distance),as.double(eps),#
      as.integer(initparam$flagcorr), as.integer(initparam$flagnuis),as.integer(grid),as.integer(initparam$likelihood),#
      as.double(c(X%*%mm)),as.integer(initparam$model),as.double(initparam$n),as.integer(num_betas),#
      as.integer(initparam$numparam),as.integer(initparam$numparamcorr),as.integer(length(paramcorr)),as.double(paramcorr),as.double(nuisance),#
      score=score,sensmat=sensmat,as.integer(initparam$spacetime),as.integer(initparam$type),#
      varimat=varimat,as.integer(initparam$vartype),as.double(initparam$winconst),as.double(initparam$winstp),as.double(initparam$winconst_t),as.double(initparam$winstp_t),#
      as.integer(initparam$weighted),c(t(X)),ns=as.integer(initparam$ns),NS=as.integer(NS),PACKAGE='GeoModels',DUP=TRUE,NAOK=TRUE)#
str(GD)
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
################################################################
############ Examples of spatial RFs #################
################################################################
model="Gaussian";shape=4;n=1#
# Define the spatial-coordinates of the points:#
coordt=seq(0,3,.5)#1#
coordx_dyn=list()#
#
maxN=150#130#
set.seed(112)#
for(k in 1:length(coordt))#
{#
  NN=sample(1:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
# coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
mean <- 0#
sill <- 1#
nugget <- 0#
scale_s <- 0.2/3#
scale_t <- 1/3#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget,sill=sill)#
# Starting value for the estimated parameters#
start<-list(mean=mean,scale_s=scale_s,scale_t=scale_t)#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel="Exp_Exp",model=model,#
              param=param)$data#
maxtime=1;maxdist=0.3#
# CPUtime = proc.time()#
# fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
#                corrmodel="Exp_Exp",maxtime=maxtime,maxdist=maxdist,#
#                likelihood="Marginal",type="Pairwise",#
#                start=start,fixed=fixed,varest=TRUE)#
# CPUtime = proc.time()-CPUtime#
# print(fit1)#
score <- sensmat <- varcov <- varimat <- parscale <- NULL#
### Initialization parameters:#
initparam <- WlsStart(coordx=NULL, coordy=NULL, coordt=coordt, coordx_dyn=coordx_dyn, corrmodel, data=ss1, distance="Eucl", "Fitting", fixed=fixed, grid=FALSE,#10#
                      likelihood='Marginal', maxdist=maxdist, maxtime=maxtime,  model=model, n=1, NULL,#16#
                      parscale, optimizer=='L-BFGS-B', radius=6378.388, start=start, taper=NULL, tapsep=NULL,#22#
                      type="Pairwise", varest=TRUE, vartype='SubSamp', weighted=FALSE, winconst=NULL, winstp=NULL,winconst_t=NULL, winstp_t=NULL, X=NULL)#31#
numcoord=length(initparam$coordx);numtime=1;spacetime_dyn=FALSE#
if(initparam$spacetime) numtime=length(initparam$coordt)#
if(initparam$bivariate) numtime=2#
if(!is.null(coordx_dyn)) spacetime_dyn=TRUE#
dimat <- numcoord*numtime##
NS=cumsum(initparam$ns)#
if(is.null(dim(initparam$X)))#
{#
  X=as.matrix(rep(1,dimat))#
  if((initparam$spacetime||initparam$bivariate)&& spacetime_dyn)  X=as.matrix(rep(1,NS[numtime]))#
}#
num_betas=ncol(X) #
grid = FALSE#
if(grid)    #
{a=expand.grid(initparam$coordx,initparam$coordy);coordx=a[,1];coordy=a[,2]; #
}else {#
  if((initparam$spacetime||initparam$bivariate)&&(!spacetime_dyn)){#
    data=c(t(data))#
    coordx=rep(coordx,numtime);coordy=rep(coordy,numtime)#
  }#
  if((initparam$spacetime||initparam$bivariate)&&(spacetime_dyn)) initparam$data=unlist(initparam$data)          #
}#
if(initparam$spacetime||initparam$bivariate)   NS=c(0,NS)[-(length(initparam$ns)+1)]#
initparam$fixed#
#
dimmat <- initparam$numparam^2#
dmat <- initparam$numparam*(initparam$numparam+1)/2#
eps <- (.Machine$double.eps)^(1/3)#
param <- c(initparam$param, initparam$fixed)#
score <- double(initparam$numparam)#
paramcorr <- param[initparam$namescorr]#
nuisance <- param[initparam$namesnuis]#
sel=substr(names(nuisance),1,4)=="mean"#
mm=as.numeric(nuisance[sel])   ## mean paramteres#
other_nuis=as.numeric(nuisance[!sel]) #
nuisance=c(mm,other_nuis)#
sensmat <- double(dmat);varimat <- double(dmat)#
GD=.C('GodambeMat',as.double(mm),as.integer(initparam$bivariate),as.double(initparam$coordx),as.double(initparam$coordy),#
      as.double(initparam$coordt),as.integer(initparam$corrmodel), as.double(initparam$data),as.integer(initparam$distance),as.double(eps),#
      as.integer(initparam$flagcorr), as.integer(initparam$flagnuis),as.integer(grid),as.integer(initparam$likelihood),#
      as.double(c(X%*%mm)),as.integer(initparam$model),as.double(initparam$n),as.integer(num_betas),#
      as.integer(initparam$numparam),as.integer(initparam$numparamcorr),as.integer(length(paramcorr)),as.double(paramcorr),as.double(nuisance),#
      score=score,sensmat=sensmat,as.integer(initparam$spacetime),as.integer(initparam$type),#
      varimat=varimat,as.integer(initparam$vartype),as.double(initparam$winconst),as.double(initparam$winstp),as.double(initparam$winconst_t),as.double(initparam$winstp_t),#
      as.integer(initparam$weighted),c(t(X)),ns=as.integer(initparam$ns),NS=as.integer(NS),PACKAGE='GeoModels',DUP=TRUE,NAOK=TRUE)#
str(GD)
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
################################################################
############ Examples of spatial RFs #################
################################################################
model="Gaussian";shape=4;n=1#
# Define the spatial-coordinates of the points:#
coordt=seq(0,2,.5)#1#
coordx_dyn=list()#
#
maxN=150#130#
set.seed(112)#
for(k in 1:length(coordt))#
{#
  NN=sample(1:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
# coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
mean <- 0#
sill <- 1#
nugget <- 0#
scale_s <- 0.2/3#
scale_t <- 1/3#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget,sill=sill)#
# Starting value for the estimated parameters#
start<-list(mean=mean,scale_s=scale_s,scale_t=scale_t)#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel="Exp_Exp",model=model,#
              param=param)$data#
maxtime=1;maxdist=0.3#
# CPUtime = proc.time()#
# fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
#                corrmodel="Exp_Exp",maxtime=maxtime,maxdist=maxdist,#
#                likelihood="Marginal",type="Pairwise",#
#                start=start,fixed=fixed,varest=TRUE)#
# CPUtime = proc.time()-CPUtime#
# print(fit1)#
score <- sensmat <- varcov <- varimat <- parscale <- NULL#
### Initialization parameters:#
initparam <- WlsStart(coordx=NULL, coordy=NULL, coordt=coordt, coordx_dyn=coordx_dyn, corrmodel, data=ss1, distance="Eucl", "Fitting", fixed=fixed, grid=FALSE,#10#
                      likelihood='Marginal', maxdist=maxdist, maxtime=maxtime,  model=model, n=1, NULL,#16#
                      parscale, optimizer=='L-BFGS-B', radius=6378.388, start=start, taper=NULL, tapsep=NULL,#22#
                      type="Pairwise", varest=TRUE, vartype='SubSamp', weighted=FALSE, winconst=NULL, winstp=NULL,winconst_t=NULL, winstp_t=NULL, X=NULL)#31#
numcoord=length(initparam$coordx);numtime=1;spacetime_dyn=FALSE#
if(initparam$spacetime) numtime=length(initparam$coordt)#
if(initparam$bivariate) numtime=2#
if(!is.null(coordx_dyn)) spacetime_dyn=TRUE#
dimat <- numcoord*numtime##
NS=cumsum(initparam$ns)#
if(is.null(dim(initparam$X)))#
{#
  X=as.matrix(rep(1,dimat))#
  if((initparam$spacetime||initparam$bivariate)&& spacetime_dyn)  X=as.matrix(rep(1,NS[numtime]))#
}#
num_betas=ncol(X) #
grid = FALSE#
if(grid)    #
{a=expand.grid(initparam$coordx,initparam$coordy);coordx=a[,1];coordy=a[,2]; #
}else {#
  if((initparam$spacetime||initparam$bivariate)&&(!spacetime_dyn)){#
    data=c(t(data))#
    coordx=rep(coordx,numtime);coordy=rep(coordy,numtime)#
  }#
  if((initparam$spacetime||initparam$bivariate)&&(spacetime_dyn)) initparam$data=unlist(initparam$data)          #
}#
if(initparam$spacetime||initparam$bivariate)   NS=c(0,NS)[-(length(initparam$ns)+1)]#
initparam$fixed#
#
dimmat <- initparam$numparam^2#
dmat <- initparam$numparam*(initparam$numparam+1)/2#
eps <- (.Machine$double.eps)^(1/3)#
param <- c(initparam$param, initparam$fixed)#
score <- double(initparam$numparam)#
paramcorr <- param[initparam$namescorr]#
nuisance <- param[initparam$namesnuis]#
sel=substr(names(nuisance),1,4)=="mean"#
mm=as.numeric(nuisance[sel])   ## mean paramteres#
other_nuis=as.numeric(nuisance[!sel]) #
nuisance=c(mm,other_nuis)#
sensmat <- double(dmat);varimat <- double(dmat)#
GD=.C('GodambeMat',as.double(mm),as.integer(initparam$bivariate),as.double(initparam$coordx),as.double(initparam$coordy),#
      as.double(initparam$coordt),as.integer(initparam$corrmodel), as.double(initparam$data),as.integer(initparam$distance),as.double(eps),#
      as.integer(initparam$flagcorr), as.integer(initparam$flagnuis),as.integer(grid),as.integer(initparam$likelihood),#
      as.double(c(X%*%mm)),as.integer(initparam$model),as.double(initparam$n),as.integer(num_betas),#
      as.integer(initparam$numparam),as.integer(initparam$numparamcorr),as.integer(length(paramcorr)),as.double(paramcorr),as.double(nuisance),#
      score=score,sensmat=sensmat,as.integer(initparam$spacetime),as.integer(initparam$type),#
      varimat=varimat,as.integer(initparam$vartype),as.double(initparam$winconst),as.double(initparam$winstp),as.double(initparam$winconst_t),as.double(initparam$winstp_t),#
      as.integer(initparam$weighted),c(t(X)),ns=as.integer(initparam$ns),NS=as.integer(NS),PACKAGE='GeoModels',DUP=TRUE,NAOK=TRUE)#
str(GD)
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
################################################################
############ Examples of spatial RFs #################
################################################################
model="Gaussian";shape=4;n=1#
# Define the spatial-coordinates of the points:#
coordt=seq(0,3,.5)#1#
coordx_dyn=list()#
#
maxN=150#130#
set.seed(112)#
for(k in 1:length(coordt))#
{#
  NN=sample(1:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
# coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
mean <- 0#
sill <- 1#
nugget <- 0#
scale_s <- 0.2/3#
scale_t <- 1/3#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget,sill=sill)#
# Starting value for the estimated parameters#
start<-list(mean=mean,scale_s=scale_s,scale_t=scale_t)#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel="Exp_Exp",model=model,#
              param=param)$data#
maxtime=1;maxdist=0.3#
# CPUtime = proc.time()#
# fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
#                corrmodel="Exp_Exp",maxtime=maxtime,maxdist=maxdist,#
#                likelihood="Marginal",type="Pairwise",#
#                start=start,fixed=fixed,varest=TRUE)#
# CPUtime = proc.time()-CPUtime#
# print(fit1)#
score <- sensmat <- varcov <- varimat <- parscale <- NULL#
### Initialization parameters:#
initparam <- WlsStart(coordx=NULL, coordy=NULL, coordt=coordt, coordx_dyn=coordx_dyn, corrmodel, data=ss1, distance="Eucl", "Fitting", fixed=fixed, grid=FALSE,#10#
                      likelihood='Marginal', maxdist=maxdist, maxtime=maxtime,  model=model, n=1, NULL,#16#
                      parscale, optimizer=='L-BFGS-B', radius=6378.388, start=start, taper=NULL, tapsep=NULL,#22#
                      type="Pairwise", varest=TRUE, vartype='SubSamp', weighted=FALSE, winconst=NULL, winstp=NULL,winconst_t=NULL, winstp_t=NULL, X=NULL)#31#
numcoord=length(initparam$coordx);numtime=1;spacetime_dyn=FALSE#
if(initparam$spacetime) numtime=length(initparam$coordt)#
if(initparam$bivariate) numtime=2#
if(!is.null(coordx_dyn)) spacetime_dyn=TRUE#
dimat <- numcoord*numtime##
NS=cumsum(initparam$ns)#
if(is.null(dim(initparam$X)))#
{#
  X=as.matrix(rep(1,dimat))#
  if((initparam$spacetime||initparam$bivariate)&& spacetime_dyn)  X=as.matrix(rep(1,NS[numtime]))#
}#
num_betas=ncol(X) #
grid = FALSE#
if(grid)    #
{a=expand.grid(initparam$coordx,initparam$coordy);coordx=a[,1];coordy=a[,2]; #
}else {#
  if((initparam$spacetime||initparam$bivariate)&&(!spacetime_dyn)){#
    data=c(t(data))#
    coordx=rep(coordx,numtime);coordy=rep(coordy,numtime)#
  }#
  if((initparam$spacetime||initparam$bivariate)&&(spacetime_dyn)) initparam$data=unlist(initparam$data)          #
}#
if(initparam$spacetime||initparam$bivariate)   NS=c(0,NS)[-(length(initparam$ns)+1)]#
initparam$fixed#
#
dimmat <- initparam$numparam^2#
dmat <- initparam$numparam*(initparam$numparam+1)/2#
eps <- (.Machine$double.eps)^(1/3)#
param <- c(initparam$param, initparam$fixed)#
score <- double(initparam$numparam)#
paramcorr <- param[initparam$namescorr]#
nuisance <- param[initparam$namesnuis]#
sel=substr(names(nuisance),1,4)=="mean"#
mm=as.numeric(nuisance[sel])   ## mean paramteres#
other_nuis=as.numeric(nuisance[!sel]) #
nuisance=c(mm,other_nuis)#
sensmat <- double(dmat);varimat <- double(dmat)#
GD=.C('GodambeMat',as.double(mm),as.integer(initparam$bivariate),as.double(initparam$coordx),as.double(initparam$coordy),#
      as.double(initparam$coordt),as.integer(initparam$corrmodel), as.double(initparam$data),as.integer(initparam$distance),as.double(eps),#
      as.integer(initparam$flagcorr), as.integer(initparam$flagnuis),as.integer(grid),as.integer(initparam$likelihood),#
      as.double(c(X%*%mm)),as.integer(initparam$model),as.double(initparam$n),as.integer(num_betas),#
      as.integer(initparam$numparam),as.integer(initparam$numparamcorr),as.integer(length(paramcorr)),as.double(paramcorr),as.double(nuisance),#
      score=score,sensmat=sensmat,as.integer(initparam$spacetime),as.integer(initparam$type),#
      varimat=varimat,as.integer(initparam$vartype),as.double(initparam$winconst),as.double(initparam$winstp),as.double(initparam$winconst_t),as.double(initparam$winstp_t),#
      as.integer(initparam$weighted),c(t(X)),ns=as.integer(initparam$ns),NS=as.integer(NS),PACKAGE='GeoModels',DUP=TRUE,NAOK=TRUE)#
str(GD)
coordt
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="Gaussian";shape=4;n=1#
set.seed(112)#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,9)# con 9 funciona,  con 8 explota#
coordx_dyn=list()#
#
maxN=130#130#
for(k in 1:length(coordt))#
{#
  NN=sample(1:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
# coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 0.1#
sill <- 1#
nugget <- 0#
scale_s <- .3#
scale_t <- .3#
skew <- -0.5#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget, sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,mean = mean )#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxtime=1;maxdist=0.3#
fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
               corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,model = model,varest = TRUE)#
print(fit1)#
fit1$param
times
coordt
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="Gaussian";shape=4;n=1#
set.seed(112)#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,9)# con 9 funciona,  con 8 explota#
coordx_dyn=list()#
#
maxN=130#130#
for(k in 1:length(coordt))#
{#
  NN=sample(1:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
# coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 0.1#
sill <- 1#
nugget <- 0#
scale_s <- .3#
scale_t <- .3#
skew <- -0.5#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget, sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,mean = mean )#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxtime=1;maxdist=0.3#
fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
               corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,model = model,varest = TRUE)#
print(fit1)#
fit1$param
#================================= Comp_Pair_Gauss (SPACE)#
library(GeoModels)#
#
rm(list = ls())#
# Define the spatial-coordinates of the points:#
# set.seed(6)#
# set.seed(5)#
N=500  # number of location sites#
x <- runif(N, 0, 1)#
# set.seed(5)#
y <- runif(N, 0, 1)#
coords <- cbind(x,y)#
#
# Define spatial matrix covariates#
X=cbind(rep(1,N),runif(N))#
#
# Set the covariance model's parameters:#
corrmodel <- "Exp"#
model <- "Gaussian"#
NuisParam(model,FALSE,1)#
CorrParam(corrmodel)#
mean <- 0#
mean1 <- -0.5#
sill <- 1#
nugget <- 0#
scale <- 2/3#
skew <- 1.5#
param<-list(mean=mean,mean1=mean1,sill=sill,nugget=nugget,scale=scale)#
#
# Simulation of the spatial Gaussian RF:#
set.seed(7)#
data <- GeoSim(coordx=coords,corrmodel=corrmodel, param=param,X=X,model = model)$data#
# data = rnorm(nrow(coords))#
# Fixed parameters#
fixed<-list(nugget=nugget,sill=sill)#
# Starting value for the estimated parameters#
start<-list(mean=mean,mean1=mean1,scale=scale)#
#
# CPUtime = proc.time()#
fit1 <- GeoFit(data=data,coordx=coords,corrmodel=corrmodel,#
               maxdist=0.1,likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,X=X, model = model,varest = TRUE)#
# CPUtime = proc.time()-CPUtime;CPUtime#
print(fit1)#
#================================= Comp_Pair_Gauss_st2 (SPACE-TIME)#
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="Gaussian";shape=4;n=1#
set.seed(112)#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,9)# con 9 funciona,  con 8 explota#
coordx_dyn=list()#
#
maxN=130#130#
for(k in 1:length(coordt))#
{#
  NN=sample(1:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
# coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 0.1#
sill <- 1#
nugget <- 0#
scale_s <- .3#
scale_t <- .3#
skew <- -0.5#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget, sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,mean = mean )#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxtime=1;maxdist=0.3#
fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
               corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,model = model,varest = TRUE)#
print(fit1)#
fit1$param
#================================= Comp_Pair_Gauss_st2 (SPACE-TIME)#
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="Gaussian";shape=4;n=1#
set.seed(112)#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,9,1)# con 9 funciona,  con 8 explota#
coordx_dyn=list()#
#
maxN=130#130#
for(k in 1:length(coordt))#
{#
  NN=sample(1:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
# coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 0.1#
sill <- 1#
nugget <- 0#
scale_s <- .3#
scale_t <- .3#
skew <- -0.5#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget, sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,mean = mean )#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxtime=1;maxdist=0.3#
fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
               corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,model = model,varest = TRUE)#
print(fit1)#
fit1$param#
score <- sensmat <- varcov <- varimat <- parscale <- NULL#
### Initialization parameters:#
initparam <- WlsStart(coordx=NULL, coordy=NULL, coordt=coordt, coordx_dyn=coordx_dyn, corrmodel, data=ss1, distance="Eucl", "Fitting", fixed=fixed, grid=FALSE,#10#
                      likelihood='Marginal', maxdist=maxdist, maxtime=maxtime,  model=model, n=1, NULL,#16#
                      parscale, optimizer=='L-BFGS-B', radius=6378.388, start=start, taper=NULL, tapsep=NULL,#22#
                      type="Pairwise", varest=TRUE, vartype='SubSamp', weighted=FALSE, winconst=NULL, winstp=NULL,winconst_t=NULL, winstp_t=NULL, X=NULL)#31#
numcoord=length(initparam$coordx);numtime=1;spacetime_dyn=FALSE#
if(initparam$spacetime) numtime=length(initparam$coordt)#
if(initparam$bivariate) numtime=2#
if(!is.null(coordx_dyn)) spacetime_dyn=TRUE#
dimat <- numcoord*numtime##
NS=cumsum(initparam$ns)#
if(is.null(dim(initparam$X)))#
{#
  X=as.matrix(rep(1,dimat))#
  if((initparam$spacetime||initparam$bivariate)&& spacetime_dyn)  X=as.matrix(rep(1,NS[numtime]))#
}#
num_betas=ncol(X) #
grid = FALSE#
if(grid)    #
  {a=expand.grid(initparam$coordx,initparam$coordy);coordx=a[,1];coordy=a[,2]; #
  }else {#
    if((initparam$spacetime||initparam$bivariate)&&(!spacetime_dyn)){#
  data=c(t(data))#
  coordx=rep(coordx,numtime);coordy=rep(coordy,numtime)#
}#
  if((initparam$spacetime||initparam$bivariate)&&(spacetime_dyn)) initparam$data=unlist(initparam$data)          #
}#
if(initparam$spacetime||initparam$bivariate)   NS=c(0,NS)[-(length(initparam$ns)+1)]#
initparam$fixed#
#
dimmat <- initparam$numparam^2#
dmat <- initparam$numparam*(initparam$numparam+1)/2#
eps <- (.Machine$double.eps)^(1/3)#
param <- c(initparam$param, initparam$fixed)#
score <- double(initparam$numparam)#
paramcorr <- param[initparam$namescorr]#
nuisance <- param[initparam$namesnuis]#
sel=substr(names(nuisance),1,4)=="mean"#
mm=as.numeric(nuisance[sel])   ## mean paramteres#
other_nuis=as.numeric(nuisance[!sel]) #
nuisance=c(mm,other_nuis)#
sensmat <- double(dmat);varimat <- double(dmat)#
GD=.C('GodambeMat',as.double(mm),as.integer(initparam$bivariate),as.double(initparam$coordx),as.double(initparam$coordy),#
      as.double(initparam$coordt),as.integer(initparam$corrmodel), as.double(initparam$data),as.integer(initparam$distance),as.double(eps),#
      as.integer(initparam$flagcorr), as.integer(initparam$flagnuis),as.integer(grid),as.integer(initparam$likelihood),#
      as.double(c(X%*%mm)),as.integer(initparam$model),as.double(initparam$n),as.integer(num_betas),#
      as.integer(initparam$numparam),as.integer(initparam$numparamcorr),as.integer(length(paramcorr)),as.double(paramcorr),as.double(nuisance),#
      score=score,sensmat=sensmat,as.integer(initparam$spacetime),as.integer(initparam$type),#
      varimat=varimat,as.integer(initparam$vartype),as.double(initparam$winconst),as.double(initparam$winstp),as.double(initparam$winconst_t),as.double(initparam$winstp_t),#
      as.integer(initparam$weighted),c(t(X)),ns=as.integer(initparam$ns),NS=as.integer(NS),PACKAGE='GeoModels',DUP=TRUE,NAOK=TRUE)#
str(GD)
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="Gaussian";shape=4;n=1#
set.seed(112)#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,9,1.5)# con 9 funciona,  con 8 explota#
coordx_dyn=list()#
#
maxN=130#130#
for(k in 1:length(coordt))#
{#
  NN=sample(1:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
# coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 0.1#
sill <- 1#
nugget <- 0#
scale_s <- .3#
scale_t <- .3#
skew <- -0.5#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget, sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,mean = mean )#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxtime=1;maxdist=0.3#
fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
               corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,model = model,varest = TRUE)#
print(fit1)#
fit1$param#
score <- sensmat <- varcov <- varimat <- parscale <- NULL#
### Initialization parameters:#
initparam <- WlsStart(coordx=NULL, coordy=NULL, coordt=coordt, coordx_dyn=coordx_dyn, corrmodel, data=ss1, distance="Eucl", "Fitting", fixed=fixed, grid=FALSE,#10#
                      likelihood='Marginal', maxdist=maxdist, maxtime=maxtime,  model=model, n=1, NULL,#16#
                      parscale, optimizer=='L-BFGS-B', radius=6378.388, start=start, taper=NULL, tapsep=NULL,#22#
                      type="Pairwise", varest=TRUE, vartype='SubSamp', weighted=FALSE, winconst=NULL, winstp=NULL,winconst_t=NULL, winstp_t=NULL, X=NULL)#31#
numcoord=length(initparam$coordx);numtime=1;spacetime_dyn=FALSE#
if(initparam$spacetime) numtime=length(initparam$coordt)#
if(initparam$bivariate) numtime=2#
if(!is.null(coordx_dyn)) spacetime_dyn=TRUE#
dimat <- numcoord*numtime##
NS=cumsum(initparam$ns)#
if(is.null(dim(initparam$X)))#
{#
  X=as.matrix(rep(1,dimat))#
  if((initparam$spacetime||initparam$bivariate)&& spacetime_dyn)  X=as.matrix(rep(1,NS[numtime]))#
}#
num_betas=ncol(X) #
grid = FALSE#
if(grid)    #
  {a=expand.grid(initparam$coordx,initparam$coordy);coordx=a[,1];coordy=a[,2]; #
  }else {#
    if((initparam$spacetime||initparam$bivariate)&&(!spacetime_dyn)){#
  data=c(t(data))#
  coordx=rep(coordx,numtime);coordy=rep(coordy,numtime)#
}#
  if((initparam$spacetime||initparam$bivariate)&&(spacetime_dyn)) initparam$data=unlist(initparam$data)          #
}#
if(initparam$spacetime||initparam$bivariate)   NS=c(0,NS)[-(length(initparam$ns)+1)]#
initparam$fixed#
#
dimmat <- initparam$numparam^2#
dmat <- initparam$numparam*(initparam$numparam+1)/2#
eps <- (.Machine$double.eps)^(1/3)#
param <- c(initparam$param, initparam$fixed)#
score <- double(initparam$numparam)#
paramcorr <- param[initparam$namescorr]#
nuisance <- param[initparam$namesnuis]#
sel=substr(names(nuisance),1,4)=="mean"#
mm=as.numeric(nuisance[sel])   ## mean paramteres#
other_nuis=as.numeric(nuisance[!sel]) #
nuisance=c(mm,other_nuis)#
sensmat <- double(dmat);varimat <- double(dmat)#
GD=.C('GodambeMat',as.double(mm),as.integer(initparam$bivariate),as.double(initparam$coordx),as.double(initparam$coordy),#
      as.double(initparam$coordt),as.integer(initparam$corrmodel), as.double(initparam$data),as.integer(initparam$distance),as.double(eps),#
      as.integer(initparam$flagcorr), as.integer(initparam$flagnuis),as.integer(grid),as.integer(initparam$likelihood),#
      as.double(c(X%*%mm)),as.integer(initparam$model),as.double(initparam$n),as.integer(num_betas),#
      as.integer(initparam$numparam),as.integer(initparam$numparamcorr),as.integer(length(paramcorr)),as.double(paramcorr),as.double(nuisance),#
      score=score,sensmat=sensmat,as.integer(initparam$spacetime),as.integer(initparam$type),#
      varimat=varimat,as.integer(initparam$vartype),as.double(initparam$winconst),as.double(initparam$winstp),as.double(initparam$winconst_t),as.double(initparam$winstp_t),#
      as.integer(initparam$weighted),c(t(X)),ns=as.integer(initparam$ns),NS=as.integer(NS),PACKAGE='GeoModels',DUP=TRUE,NAOK=TRUE)#
str(GD)
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="Gaussian";#
set.seed(115)#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,9,1.5)# con 9 funciona,  con 8 explota#
coordx_dyn=list()#
#
maxN=130#130#
for(k in 1:length(coordt))#
{#
  NN=sample(1:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
# coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 0.1#
sill <- 1#
nugget <- 0#
scale_s <- 1/3#
scale_t <- 1/3#
skew <- -0.5#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget, sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,mean = mean )#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxtime=1;maxdist=1#
fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
               corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,model = model,varest = TRUE)#
print(fit1)#
fit1$param
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="Gaussian";#
set.seed(115)#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,9,1)# con 9 funciona,  con 8 explota#
coordx_dyn=list()#
#
maxN=130#130#
for(k in 1:length(coordt))#
{#
  NN=sample(1:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
# coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 0.1#
sill <- 1#
nugget <- 0#
scale_s <- 1/3#
scale_t <- 1/3#
skew <- -0.5#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget, sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,mean = mean )#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxtime=1;maxdist=1#
fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
               corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,model = model,varest = TRUE)#
print(fit1)#
fit1$param
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="Gaussian";#
set.seed(115)#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,18,1)# con 9 funciona,  con 8 explota#
coordx_dyn=list()#
#
maxN=130#130#
for(k in 1:length(coordt))#
{#
  NN=sample(1:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
# coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 0.1#
sill <- 1#
nugget <- 0#
scale_s <- 1/3#
scale_t <- 1/3#
skew <- -0.5#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget, sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,mean = mean )#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxtime=1;maxdist=1#
fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
               corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,model = model,varest = TRUE)#
print(fit1)#
fit1$param
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="Gaussian";#
set.seed(115)#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,9,1)# con 9 funciona,  con 8 explota#
coordx_dyn=list()#
#
maxN=130#130#
for(k in 1:length(coordt))#
{#
  NN=sample(1:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
# coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 0.1#
sill <- 1#
nugget <- 0#
scale_s <- 1/3#
scale_t <- 1/3#
skew <- -0.5#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget, sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,mean = mean )#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxtime=1;maxdist=1#
fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
               corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,model = model,varest = TRUE)#
print(fit1)#
fit1$param
coordt
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="Gaussian";#
set.seed(115)#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,9,1.5)# con 9 funciona,  con 8 explota#
coordx_dyn=list()#
#
maxN=130#130#
for(k in 1:length(coordt))#
{#
  NN=sample(1:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
# coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 0.1#
sill <- 1#
nugget <- 0#
scale_s <- 1/3#
scale_t <- 1/3#
skew <- -0.5#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget, sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,mean = mean )#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxtime=1;maxdist=1#
fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
               corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,model = model,varest = TRUE)#
print(fit1)#
fit1$param
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="Gaussian";#
set.seed(115)#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,9,1)# con 9 funciona,  con 8 explota#
coordx_dyn=list()#
#
maxN=130#130#
for(k in 1:length(coordt))#
{#
  NN=sample(1:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
# coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 0.1#
sill <- 1#
nugget <- 0#
scale_s <- 1/3#
scale_t <- 1/3#
skew <- -0.5#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget, sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,mean = mean )#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxtime=1;maxdist=1#
fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
               corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,model = model,varest = TRUE)#
print(fit1)#
fit1$param
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="Gaussian";#
set.seed(115)#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,9,1.5)# con 9 funciona,  con 8 explota#
coordx_dyn=list()#
#
maxN=130#130#
for(k in 1:length(coordt))#
{#
  NN=sample(1:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
# coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 0.1#
sill <- 1#
nugget <- 0#
scale_s <- 1/3#
scale_t <- 1/3#
skew <- -0.5#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget, sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,mean = mean )#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxtime=1;maxdist=1#
fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
               corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,model = model,varest = TRUE)#
print(fit1)#
fit1$param
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="Gaussian";#
set.seed(115)#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,9,1)# con 9 funciona,  con 8 explota#
coordx_dyn=list()#
#
maxN=130#130#
for(k in 1:length(coordt))#
{#
  NN=sample(1:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
# coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 0.1#
sill <- 1#
nugget <- 0#
scale_s <- 1/3#
scale_t <- 1/3#
skew <- -0.5#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget, sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,mean = mean )#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxtime=1;maxdist=1#
fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
               corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,model = model,varest = TRUE)#
print(fit1)#
fit1$param
coordt
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
################################################################
############ Examples of spatial RFs #################
################################################################
model="Gaussian";shape=4;n=1#
# Define the spatial-coordinates of the points:#
coordt=seq(0,3,.5)#1#
coordx_dyn=list()#
#
maxN=150#130#
set.seed(112)#
for(k in 1:length(coordt))#
{#
  NN=sample(1:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
# coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
mean <- 0#
sill <- 1#
nugget <- 0#
scale_s <- 0.2/3#
scale_t <- 1/3#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget,sill=sill)#
# Starting value for the estimated parameters#
start<-list(mean=mean,scale_s=scale_s,scale_t=scale_t)#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel="Exp_Exp",model=model,#
              param=param)$data#
maxtime=1;maxdist=0.3#
# CPUtime = proc.time()#
# fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
#                corrmodel="Exp_Exp",maxtime=maxtime,maxdist=maxdist,#
#                likelihood="Marginal",type="Pairwise",#
#                start=start,fixed=fixed,varest=TRUE)#
# CPUtime = proc.time()-CPUtime#
# print(fit1)#
score <- sensmat <- varcov <- varimat <- parscale <- NULL#
### Initialization parameters:#
initparam <- WlsStart(coordx=NULL, coordy=NULL, coordt=coordt, coordx_dyn=coordx_dyn, corrmodel, data=ss1, distance="Eucl", "Fitting", fixed=fixed, grid=FALSE,#10#
                      likelihood='Marginal', maxdist=maxdist, maxtime=maxtime,  model=model, n=1, NULL,#16#
                      parscale, optimizer=='L-BFGS-B', radius=6378.388, start=start, taper=NULL, tapsep=NULL,#22#
                      type="Pairwise", varest=TRUE, vartype='SubSamp', weighted=FALSE, winconst=NULL, winstp=NULL,winconst_t=NULL, winstp_t=NULL, X=NULL)#31#
numcoord=length(initparam$coordx);numtime=1;spacetime_dyn=FALSE#
if(initparam$spacetime) numtime=length(initparam$coordt)#
if(initparam$bivariate) numtime=2#
if(!is.null(coordx_dyn)) spacetime_dyn=TRUE#
dimat <- numcoord*numtime##
NS=cumsum(initparam$ns)#
if(is.null(dim(initparam$X)))#
{#
  X=as.matrix(rep(1,dimat))#
  if((initparam$spacetime||initparam$bivariate)&& spacetime_dyn)  X=as.matrix(rep(1,NS[numtime]))#
}#
num_betas=ncol(X) #
grid = FALSE#
if(grid)    #
{a=expand.grid(initparam$coordx,initparam$coordy);coordx=a[,1];coordy=a[,2]; #
}else {#
  if((initparam$spacetime||initparam$bivariate)&&(!spacetime_dyn)){#
    data=c(t(data))#
    coordx=rep(coordx,numtime);coordy=rep(coordy,numtime)#
  }#
  if((initparam$spacetime||initparam$bivariate)&&(spacetime_dyn)) initparam$data=unlist(initparam$data)          #
}#
if(initparam$spacetime||initparam$bivariate)   NS=c(0,NS)[-(length(initparam$ns)+1)]#
initparam$fixed#
#
dimmat <- initparam$numparam^2#
dmat <- initparam$numparam*(initparam$numparam+1)/2#
eps <- (.Machine$double.eps)^(1/3)#
param <- c(initparam$param, initparam$fixed)#
score <- double(initparam$numparam)#
paramcorr <- param[initparam$namescorr]#
nuisance <- param[initparam$namesnuis]#
sel=substr(names(nuisance),1,4)=="mean"#
mm=as.numeric(nuisance[sel])   ## mean paramteres#
other_nuis=as.numeric(nuisance[!sel]) #
nuisance=c(mm,other_nuis)#
sensmat <- double(dmat);varimat <- double(dmat)#
GD=.C('GodambeMat',as.double(mm),as.integer(initparam$bivariate),as.double(initparam$coordx),as.double(initparam$coordy),#
      as.double(initparam$coordt),as.integer(initparam$corrmodel), as.double(initparam$data),as.integer(initparam$distance),as.double(eps),#
      as.integer(initparam$flagcorr), as.integer(initparam$flagnuis),as.integer(grid),as.integer(initparam$likelihood),#
      as.double(c(X%*%mm)),as.integer(initparam$model),as.double(initparam$n),as.integer(num_betas),#
      as.integer(initparam$numparam),as.integer(initparam$numparamcorr),as.integer(length(paramcorr)),as.double(paramcorr),as.double(nuisance),#
      score=score,sensmat=sensmat,as.integer(initparam$spacetime),as.integer(initparam$type),#
      varimat=varimat,as.integer(initparam$vartype),as.double(initparam$winconst),as.double(initparam$winstp),as.double(initparam$winconst_t),as.double(initparam$winstp_t),#
      as.integer(initparam$weighted),c(t(X)),ns=as.integer(initparam$ns),NS=as.integer(NS),PACKAGE='GeoModels',DUP=TRUE,NAOK=TRUE)#
str(GD)
CPUtime = proc.time()#
fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
               corrmodel="Exp_Exp",maxtime=maxtime,maxdist=maxdist,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,varest=TRUE)#
CPUtime = proc.time()-CPUtime#
print(fit1)
maxtime=1;maxdist=1
CPUtime = proc.time()#
fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
               corrmodel="Exp_Exp",maxtime=maxtime,maxdist=maxdist,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,varest=TRUE)#
CPUtime = proc.time()-CPUtime#
print(fit1)
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
################################################################
############ Examples of spatial RFs #################
################################################################
model="Gaussian";shape=4;n=1#
# Define the spatial-coordinates of the points:#
coordt=seq(0,3,.5)#1#
coordx_dyn=list()#
#
maxN=150#130#
set.seed(112)#
for(k in 1:length(coordt))#
{#
  NN=sample(1:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
# coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
mean <- 0#
sill <- 1#
nugget <- 0#
scale_s <- 0.2/3#
scale_t <- 1/3#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget,sill=sill)#
# Starting value for the estimated parameters#
start<-list(mean=mean,scale_s=scale_s,scale_t=scale_t)#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel="Exp_Exp",model=model,#
              param=param)$data#
maxtime=1;maxdist=1#
CPUtime = proc.time()#
fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
               corrmodel="Exp_Exp",maxtime=maxtime,maxdist=maxdist,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,varest=TRUE)#
CPUtime = proc.time()-CPUtime#
print(fit1)
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
################################################################
############ Examples of spatial RFs #################
################################################################
model="Gaussian";shape=4;n=1#
# Define the spatial-coordinates of the points:#
coordt=seq(0,3,1.5)#1#
coordx_dyn=list()#
#
maxN=150#130#
set.seed(112)#
for(k in 1:length(coordt))#
{#
  NN=sample(1:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
# coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
mean <- 0#
sill <- 1#
nugget <- 0#
scale_s <- 0.2/3#
scale_t <- 1/3#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget,sill=sill)#
# Starting value for the estimated parameters#
start<-list(mean=mean,scale_s=scale_s,scale_t=scale_t)#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel="Exp_Exp",model=model,#
              param=param)$data#
maxtime=1;maxdist=1#
CPUtime = proc.time()#
fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
               corrmodel="Exp_Exp",maxtime=maxtime,maxdist=maxdist,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,varest=TRUE)#
CPUtime = proc.time()-CPUtime#
print(fit1)
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
################################################################
############ Examples of spatial RFs #################
################################################################
model="Gaussian";shape=4;n=1#
# Define the spatial-coordinates of the points:#
coordt=seq(0,10,1.5)#1#
coordx_dyn=list()#
#
maxN=150#130#
set.seed(112)#
for(k in 1:length(coordt))#
{#
  NN=sample(1:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
# coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
mean <- 0#
sill <- 1#
nugget <- 0#
scale_s <- 0.2/3#
scale_t <- 1/3#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget,sill=sill)#
# Starting value for the estimated parameters#
start<-list(mean=mean,scale_s=scale_s,scale_t=scale_t)#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel="Exp_Exp",model=model,#
              param=param)$data#
maxtime=1;maxdist=1#
CPUtime = proc.time()#
fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
               corrmodel="Exp_Exp",maxtime=maxtime,maxdist=maxdist,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,varest=TRUE)#
CPUtime = proc.time()-CPUtime#
print(fit1)
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
################################################################
############ Examples of spatial RFs #################
################################################################
model="Gaussian";shape=4;n=1#
# Define the spatial-coordinates of the points:#
coordt=seq(0,10,.5)#1#
coordx_dyn=list()#
#
maxN=150#130#
set.seed(112)#
for(k in 1:length(coordt))#
{#
  NN=sample(1:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
# coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
mean <- 0#
sill <- 1#
nugget <- 0#
scale_s <- 0.2/3#
scale_t <- 1/3#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget,sill=sill)#
# Starting value for the estimated parameters#
start<-list(mean=mean,scale_s=scale_s,scale_t=scale_t)#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel="Exp_Exp",model=model,#
              param=param)$data#
maxtime=1;maxdist=1#
CPUtime = proc.time()#
fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
               corrmodel="Exp_Exp",maxtime=maxtime,maxdist=maxdist,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,varest=TRUE)#
CPUtime = proc.time()-CPUtime#
print(fit1)
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
################################################################
############ Examples of spatial RFs #################
################################################################
model="Gaussian";shape=4;n=1#
# Define the spatial-coordinates of the points:#
coordt=seq(0,3,1)#1#
coordx_dyn=list()#
#
maxN=150#130#
set.seed(112)#
for(k in 1:length(coordt))#
{#
  NN=sample(1:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
# coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
mean <- 0#
sill <- 1#
nugget <- 0#
scale_s <- 0.2/3#
scale_t <- 1/3#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget,sill=sill)#
# Starting value for the estimated parameters#
start<-list(mean=mean,scale_s=scale_s,scale_t=scale_t)#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel="Exp_Exp",model=model,#
              param=param)$data#
maxtime=1;maxdist=1#
CPUtime = proc.time()#
fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
               corrmodel="Exp_Exp",maxtime=maxtime,maxdist=maxdist,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,varest=TRUE)#
CPUtime = proc.time()-CPUtime#
print(fit1)
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
################################################################
############ Examples of spatial RFs #################
################################################################
model="Gaussian";shape=4;n=1#
# Define the spatial-coordinates of the points:#
coordt=seq(0,10,1)#1#
coordx_dyn=list()#
#
maxN=150#130#
set.seed(112)#
for(k in 1:length(coordt))#
{#
  NN=sample(1:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
# coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
mean <- 0#
sill <- 1#
nugget <- 0#
scale_s <- 0.2/3#
scale_t <- 1/3#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget,sill=sill)#
# Starting value for the estimated parameters#
start<-list(mean=mean,scale_s=scale_s,scale_t=scale_t)#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel="Exp_Exp",model=model,#
              param=param)$data#
maxtime=1;maxdist=1#
CPUtime = proc.time()#
fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
               corrmodel="Exp_Exp",maxtime=maxtime,maxdist=maxdist,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,varest=TRUE)#
CPUtime = proc.time()-CPUtime#
print(fit1)
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
################################################################
############ Examples of spatial RFs #################
################################################################
model="Gaussian";shape=4;n=1#
# Define the spatial-coordinates of the points:#
coordt=seq(0,15,1.5)#1#
coordx_dyn=list()#
#
maxN=150#130#
set.seed(112)#
for(k in 1:length(coordt))#
{#
  NN=sample(1:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
# coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
mean <- 0#
sill <- 1#
nugget <- 0#
scale_s <- 0.2/3#
scale_t <- 1/3#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget,sill=sill)#
# Starting value for the estimated parameters#
start<-list(mean=mean,scale_s=scale_s,scale_t=scale_t)#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel="Exp_Exp",model=model,#
              param=param)$data#
maxtime=1;maxdist=1#
CPUtime = proc.time()#
fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
               corrmodel="Exp_Exp",maxtime=maxtime,maxdist=maxdist,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,varest=TRUE)#
CPUtime = proc.time()-CPUtime#
print(fit1)
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
################################################################
############ Examples of spatial RFs #################
################################################################
model="Gaussian";shape=4;n=1#
# Define the spatial-coordinates of the points:#
coordt=seq(0,15,2)#1#
coordx_dyn=list()#
#
maxN=150#130#
set.seed(112)#
for(k in 1:length(coordt))#
{#
  NN=sample(1:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
# coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
mean <- 0#
sill <- 1#
nugget <- 0#
scale_s <- 0.2/3#
scale_t <- 1/3#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget,sill=sill)#
# Starting value for the estimated parameters#
start<-list(mean=mean,scale_s=scale_s,scale_t=scale_t)#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel="Exp_Exp",model=model,#
              param=param)$data#
maxtime=1;maxdist=1#
CPUtime = proc.time()#
fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
               corrmodel="Exp_Exp",maxtime=maxtime,maxdist=maxdist,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,varest=TRUE)#
CPUtime = proc.time()-CPUtime#
print(fit1)
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
################################################################
############ Examples of spatial RFs #################
################################################################
model="Gaussian";shape=4;n=1#
# Define the spatial-coordinates of the points:#
coordt=seq(0,15,2)#1#
coordx_dyn=list()#
#
maxN=150#130#
set.seed(112)#
for(k in 1:length(coordt))#
{#
  NN=sample(1:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
# coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
mean <- 0#
sill <- 1#
nugget <- 0#
scale_s <- 0.2/3#
scale_t <- 1/3#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget,sill=sill)#
# Starting value for the estimated parameters#
start<-list(mean=mean,scale_s=scale_s,scale_t=scale_t)#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel="Exp_Exp",model=model,#
              param=param)$data#
maxtime=1;maxdist=2#
CPUtime = proc.time()#
fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
               corrmodel="Exp_Exp",maxtime=maxtime,maxdist=maxdist,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,varest=TRUE)#
CPUtime = proc.time()-CPUtime#
print(fit1)
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="Gaussian";shape=4;n=1#
set.seed(112)#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,20,1.5)# step:1.5#
#
N=100  # number of location sites#
x <- runif(N, 0, 1)#
# set.seed(5)#
y <- runif(N, 0, 1)#
coords <- cbind(x,y)#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 0.1#
sill <- 1#
nugget <- 0#
scale_s <- .3#
scale_t <- .3#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
fixed<-list(nugget=nugget, sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,mean = mean )#
set.seed(2)#
ss1 <- GeoSim(coordx=coords, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxtime=2;maxdist=0.1#
fit1 <- GeoFit(data=ss1,coordx=coords,coordt=coordt,#
               corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,model = model,varest = TRUE)#
print(fit1)#
fit1$param#
#
# Full likelihood:#
fit2 <- GeoFit(data=ss1,coordx=coords,coordt=coordt,#
corrmodel=corrmodel,likelihood="Full",type="Standard",#
start=start,fixed=fixed,model = model,varest = TRUE)#
print(fit2)
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
################################################################
############ Examples of spatial RFs #################
################################################################
model="Gaussian";shape=4;n=1#
set.seed(112)#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,5,0.5)#1#
coordx_dyn=list()#
#
maxN=150#130#
for(k in 1:length(coordt))#
{#
  NN=sample(1:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
mean <- 0#
sill <- 1#
nugget <- 0#
scale_s <- 0.2/3#
scale_t <- 1/3#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget)#
# Starting value for the estimated parameters#
start<-list(mean=mean,scale_s=scale_s,scale_t=scale_t,sill=sill)#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel="Exp_Exp",model=model,#
              param=param)$data#
#
CPUtime = proc.time()#
fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
               corrmodel="Exp_Exp",maxtime=1,maxdist=0.3,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed)#
CPUtime = proc.time()-CPUtime#
print(fit1)
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="Gamma"#
set.seed(112)#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,1,0.5)#1#
coordx_dyn=list()#
#
maxN=100#130#
for(k in 1:length(coordt))#
{#
  NN=sample(1:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 1#
sill <- 1#
nugget <- 0#
shape=6#
scale_s <- 0.2/3#
scale_t <- 0.2/3#
param<-list(mean=mean, sill=sill,nugget=nugget,shape=shape,scale_s=scale_s,scale_t=scale_t)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget,sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,shape = shape, mean = mean)#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
CPUtime = proc.time()#
fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
               corrmodel=corrmodel,maxtime=0.3,maxdist=0.3,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,model = model)#
CPUtime = proc.time()-CPUtime#
print(fit1)
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="Gamma"#
set.seed(112)#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,1,0.5)#1#
coordx_dyn=list()#
#
maxN=100#130#
for(k in 1:length(coordt))#
{#
  NN=sample(1:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 1#
sill <- 1#
nugget <- 0#
shape=6#
scale_s <- 0.2/3#
scale_t <- 0.2/3#
param<-list(mean=mean, sill=sill,nugget=nugget,shape=shape,scale_s=scale_s,scale_t=scale_t)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget,sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,shape = shape, mean = mean)#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
CPUtime = proc.time()#
fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
               corrmodel=corrmodel,maxtime=0.3,maxdist=0.3,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,model = model,varest=TRUE)#
CPUtime = proc.time()-CPUtime#
print(fit1)
coordt
summary(coords)
summary(dist(coords))
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="Gamma"#
set.seed(112)#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,1,0.5)#1#
coordx_dyn=list()#
#
maxN=100#130#
for(k in 1:length(coordt))#
{#
  NN=sample(1:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 1#
sill <- 1#
nugget <- 0#
shape=6#
scale_s <- 0.2/3#
scale_t <- 0.2/3#
param<-list(mean=mean, sill=sill,nugget=nugget,shape=shape,scale_s=scale_s,scale_t=scale_t)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget,sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,shape = shape, mean = mean)#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxdist = 0.3;maxtime=0.5#
CPUtime = proc.time()#
fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
               corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,model = model)#
CPUtime = proc.time()-CPUtime#
print(fit1)
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="Gamma"#
set.seed(112)#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,1,0.5)#1#
coordx_dyn=list()#
#
maxN=100#130#
for(k in 1:length(coordt))#
{#
  NN=sample(1:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 1#
sill <- 1#
nugget <- 0#
shape=6#
scale_s <- 0.2/3#
scale_t <- 0.2/3#
param<-list(mean=mean, sill=sill,nugget=nugget,shape=shape,scale_s=scale_s,scale_t=scale_t)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget,sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,shape = shape, mean = mean)#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxdist = 0.3;maxtime=0.5#
CPUtime = proc.time()#
fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
               corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,model = model,varest=TRUE)#
CPUtime = proc.time()-CPUtime#
print(fit1)
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="Gamma"#
set.seed(112)#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,1,0.5)#1#
coordx_dyn=list()#
#
maxN=100#130#
for(k in 1:length(coordt))#
{#
  NN=sample(1:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 1#
sill <- 1#
nugget <- 0#
shape=6#
scale_s <- 0.2/3#
scale_t <- 0.2/3#
param<-list(mean=mean, sill=sill,nugget=nugget,shape=shape,scale_s=scale_s,scale_t=scale_t)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget,sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,shape = shape, mean = mean)#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxdist = 0.3;maxtime=0.6#
CPUtime = proc.time()#
fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
               corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,model = model)#
CPUtime = proc.time()-CPUtime#
print(fit1)
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="Gamma"#
set.seed(112)#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,1,0.5)#1#
coordx_dyn=list()#
#
maxN=100#130#
for(k in 1:length(coordt))#
{#
  NN=sample(1:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 1#
sill <- 1#
nugget <- 0#
shape=6#
scale_s <- 0.2/3#
scale_t <- 0.2/3#
param<-list(mean=mean, sill=sill,nugget=nugget,shape=shape,scale_s=scale_s,scale_t=scale_t)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget,sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,shape = shape, mean = mean)#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxdist = 0.3;maxtime=0.6#
CPUtime = proc.time()#
fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
               corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,model = model,varest=TRUE)#
CPUtime = proc.time()-CPUtime#
print(fit1)
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="Gamma"#
set.seed(112)#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,1,0.5)#1#
coordx_dyn=list()#
#
maxN=100#130#
for(k in 1:length(coordt))#
{#
  NN=sample(1:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 1#
sill <- 1#
nugget <- 0#
shape=6#
scale_s <- 0.2/3#
scale_t <- 0.2/3#
param<-list(mean=mean, sill=sill,nugget=nugget,shape=shape,scale_s=scale_s,scale_t=scale_t)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget,sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,shape = shape, mean = mean)#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxdist = 0.6;maxtime=0.3#
CPUtime = proc.time()#
fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
               corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,model = model)#
CPUtime = proc.time()-CPUtime#
print(fit1)
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="Gamma"#
set.seed(112)#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,1,0.5)#1#
coordx_dyn=list()#
#
maxN=100#130#
for(k in 1:length(coordt))#
{#
  NN=sample(1:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 1#
sill <- 1#
nugget <- 0#
shape=6#
scale_s <- 0.2/3#
scale_t <- 0.2/3#
param<-list(mean=mean, sill=sill,nugget=nugget,shape=shape,scale_s=scale_s,scale_t=scale_t)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget,sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,shape = shape, mean = mean)#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxdist = 0.6;maxtime=0.3#
CPUtime = proc.time()#
fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
               corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,model = model,varest=TRUE)#
CPUtime = proc.time()-CPUtime#
print(fit1)
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="Gamma"#
set.seed(112)#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,1,0.5)#1#
coordx_dyn=list()#
#
maxN=100#130#
for(k in 1:length(coordt))#
{#
  NN=sample(1:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 1#
sill <- 1#
nugget <- 0#
shape=6#
scale_s <- 0.2/3#
scale_t <- 0.2/3#
param<-list(mean=mean, sill=sill,nugget=nugget,shape=shape,scale_s=scale_s,scale_t=scale_t)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget,sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,shape = shape, mean = mean)#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxdist = 0.9;maxtime=0.3#
CPUtime = proc.time()#
fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
               corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,model = model,varest=TRUE)#
CPUtime = proc.time()-CPUtime#
print(fit1)
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="Gamma"#
set.seed(112)#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,1,0.5)#1#
coordx_dyn=list()#
#
maxN=100#130#
for(k in 1:length(coordt))#
{#
  NN=sample(1:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 1#
sill <- 1#
nugget <- 0#
shape=6#
scale_s <- 0.2/3#
scale_t <- 0.2/3#
param<-list(mean=mean, sill=sill,nugget=nugget,shape=shape,scale_s=scale_s,scale_t=scale_t)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget,sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,shape = shape, mean = mean)#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxdist = 1;maxtime=0.3#
CPUtime = proc.time()#
fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
               corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,model = model,varest=TRUE)#
CPUtime = proc.time()-CPUtime#
print(fit1)
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="Gamma"#
set.seed(112)#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,1,0.5)#1#
coordx_dyn=list()#
#
maxN=100#130#
for(k in 1:length(coordt))#
{#
  NN=sample(1:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 1#
sill <- 1#
nugget <- 0#
shape=6#
scale_s <- 0.2/3#
scale_t <- 0.2/3#
param<-list(mean=mean, sill=sill,nugget=nugget,shape=shape,scale_s=scale_s,scale_t=scale_t)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget,sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,shape = shape, mean = mean)#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxdist = 1;maxtime=1#
CPUtime = proc.time()#
fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
               corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,model = model,varest=TRUE)#
CPUtime = proc.time()-CPUtime#
print(fit1)
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="Gamma"#
set.seed(112)#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,1,0.5)#1#
coordx_dyn=list()#
#
maxN=100#130#
for(k in 1:length(coordt))#
{#
  NN=sample(1:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 1#
sill <- 1#
nugget <- 0#
shape=6#
scale_s <- 0.2/3#
scale_t <- 0.2/3#
param<-list(mean=mean, sill=sill,nugget=nugget,shape=shape,scale_s=scale_s,scale_t=scale_t)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget,sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,shape = shape, mean = mean)#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxdist = 5;maxtime=5#
CPUtime = proc.time()#
fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
               corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,model = model,varest=TRUE)#
CPUtime = proc.time()-CPUtime#
print(fit1)
summary(dist(coordt))
summary(dist(coords))
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="Gamma"#
set.seed(112)#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,1,0.5)#1#
coordx_dyn=list()#
#
maxN=100#130#
for(k in 1:length(coordt))#
{#
  NN=sample(1:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 1#
sill <- 1#
nugget <- 0#
shape=6#
scale_s <- 0.2/3#
scale_t <- 0.2/3#
param<-list(mean=mean, sill=sill,nugget=nugget,shape=shape,scale_s=scale_s,scale_t=scale_t)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget,sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,shape = shape, mean = mean)#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxdist = 2;maxtime=2#
CPUtime = proc.time()#
fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
               corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,model = model,varest=TRUE)#
CPUtime = proc.time()-CPUtime#
print(fit1)
rm(list = ls())#
## see also  https://rdrr.io/rforge/gstat/man/wind.html#
require(gstat)#
require(mapdata)#
library(GeoModels)#
require(fields)#
require(mapproj)#
par(mfrow=c(1,1))#
#
# Wind Data: Daily average wind speeds for 1961-1978 at 12 synoptic #
# meteorological stations in the Republic of Ireland (Haslett and raftery 1989). #
# Wind speeds are in knots (1 knot = 0.5418 m/s), at each #
# of the stations of Haslett and Raftery#
#
## type of distance#
distance="Eucl" #distance="Geod"#
data("wind", package = "gstat")#
DATA=as.matrix(wind[,4:15])#
#DATA=DATA[,-3]  ### deleting ROSSLANE location site as in previous analysis#
sum(DATA==0)#
## where and when?#
which(DATA==0,arr.ind = T)#
### 16 values = to 0#
### we arbitrary replace 0 with  with the mean of the next and and the previous one (in time)#
DATA[5823:5825,]; DATA[5824,4]=(0.58+0.33)/2#
DATA[1507:1509,]; DATA[1508,6]=(1.58+2.42)/2#
DATA[2152:2154,]; DATA[2153,6]=(0.67+1.46)/2#
DATA[2351:2353,]; DATA[2352,6]=(3.21+0.92)/2#
DATA[3629:3631,]; DATA[3630,6]=(3.63+0.46)/2#
DATA[4053:4055,]; DATA[4054,6]=(4.63+2.50)/2#
DATA[5175:5177,]; DATA[5176,6]=(2.92+2.17)/2#
DATA[5456:5458,]; DATA[5457,6]=(0.13+2.37)/2#
DATA[4707:4709,]; DATA[4708,7]=(0.63+3.29)/2#
DATA[366:369,];   DATA[368,8]=DATA[367,8]=(2.79+3.75)/2#
DATA[694:697,];   DATA[695,8]=DATA[696,8]=(2.54+1)/2#
DATA[3653:3655,]; DATA[3654,8]=(0.33+0.75)/2#
DATA[5794:5796,]; DATA[5795,8]=(1.08+3.29)/2#
DATA[6176:6178,]; DATA[6177,9]=(2.13+0.21)/2#
# plot(density(DATA))#
#DATA[DATA==0]=0.05#
#
#wind.loc=wind.loc[-12,] ## deleting ROSSLANE lon-lat#
library(sp) # char2dms#
wind.loc$y = as.numeric(char2dms(as.character(wind.loc[["Latitude"]])))#
wind.loc$x = as.numeric(char2dms(as.character(wind.loc[["Longitude"]])))#
coordsLONLAT=cbind(wind.loc$x,wind.loc$y)  ## lonlat coordinates#
#
### graphic of ireland#
coordinates(wind.loc) = ~x+y#
# map("worldHires", xlim = c(-11,-5.4), ylim = c(51,55.5))#
# plot(wind.loc, add=TRUE, pch=16)#
# text(coordinates(wind.loc), pos=1, label=wind.loc$Station)#
############# sinusoidal projecion#
if(distance=="Eucl")#
{ P.sinusoidal <- mapproject(coordsLONLAT[,1],coordsLONLAT[,2],projection="sinusoidal")#
coords<-cbind(P.sinusoidal$x,P.sinusoidal$y)*6378.388#
}#
if(distance=="Geod") coords=coordsLONLAT#
### matrix of spatial great circle or euclidean distances#
if(distance=="Geod") dists2 = rdist.earth(coords, miles=FALSE)#
if(distance=="Eucl") dists2 = dist(coords)#
#
## compact support for weight function in pairwise likelihood#
dd=max(dists2)*1+0.01#
maxtime=2.01#
maxtime = 100#
## length of data: daily obervations for 18 years (1961-1978) at 12 location sites#
(1978-1961+1)*365*12#
length(as.vector(DATA))#
### there is a  small difference due to years with 366 days#
times = 1:nrow(DATA) # number of temporal realizations#
length(times)#
########################################
#### selecting first kk year#
########################################
kk=5#
ll=365*kk#
times=1:ll#
DATA=DATA[1:ll,]#
###########################
###########################
###########################
#### some tines series#
#par(mfrow=c(3,4))#
wind$time = ISOdate(wind$year+1900, wind$month, wind$day)#
# time series of e.g. Dublin data:#
# plot(DUB~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Dub")#
#plot(CLA~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Cla")#
#plot(RPT ~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Rpt")#
#plot(VAL~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Val")#
#plot(ROS~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Ros")#
#plot(KIL~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Kil")#
#plot(SHA~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Sha")#
#plot(BIR~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Bir")#
#plot(MUL~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Mul")#
#plot(CLO~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Clo")#
#plot(BEL~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Bel")#
#plot(MAL~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Mal")#
######## matrix covariates. #############
nsites<-dim(DATA)[2]   ##number sites#
nt<-dim(DATA)[1]       ## number times#
#
tcoords<-(1:nt)%x%rep(1,dim(coordsLONLAT)[1])#
xycoords<-(rep(1,nt)%x%as.matrix(coordsLONLAT))#
#########################################################################
#########################################################################
#### computing period for spatial sites DUB#
s<-spectrum(wind$DUB)#
periodo<-1/(s$freq[which.max(s$spec)])#
periodo#
############################################
# number of harmonics#
ns<-3#
h<-matrix(0,length(tcoords),2*ns)#
tscale<-365#
for ( i in 1: ns) {#
  h[,(2*(i-1)+1)]<-sin(2*pi*(i)*tcoords/tscale)#
  h[,(2*i)]<-cos(2*pi*(i)*tcoords/tscale)#
}#
#########################################################################
#### matrix of covariates for regression harmonic#
X=as.matrix(cbind(rep(1,nrow(h)),h))#
dim(X)#
#########################################################################
#########################################################################
############## correlation model ########################################
#########################################################################
corrmodel="exp_exp"#
scale_s = 340#
scale_t= 3#
nugget = 0 ## must be fixed#
sill = 1 ## must be fixed#
#########################################################################
#########################################################################
############### Gamma RF estimation #####################################
#########################################################################
#########################################################################
model="Gamma"#
#
mean=log(mean(DATA))#
shape = 6#
start=list(shape=shape,mean=mean,scale_s=scale_s,scale_t=scale_t,mean1=0,mean2=0,mean3=0,mean4=0,mean5=0,mean6=0)#
fixed<-list(nugget=nugget,sill=sill) #
#
GPU = 0 # 0 or 2 GPU denotes de Device we are using, in my Mac it is 0 (8 cores CPU),1 (Iris not for double),2 (AMD for double)#
local = c(1,1) #First component is 8 if GPU is 0. It is 2^n for n>=0 if GPU is 2#
#
# fit2 <- GeoFit(data=DATA,coordx=coords,coordt=times,corrmodel=corrmodel,distance=distance,#
#                maxdist=dd,maxtime=maxtime,likelihood="Marginal",type="Pairwise",model=model,X=X,#
#                start=start,fixed=fixed,GPU=GPU, local = local,varest=TRUE)#
# #
# fit2#
nti <- 15#
# maxtime = 50#
fit3 <- GeoFit(data=DATA,coordx=coords,coordt=times[1:nti],corrmodel=corrmodel,distance=distance,#
               maxdist=dd,maxtime=maxtime,likelihood="Marginal",type="Pairwise",model=model,X=X,#
               start=start,fixed=fixed,GPU=GPU, local = local,varest=TRUE)#
#
fit3
?spectrum
nti <- 15#
# maxtime = 50#
fit3 <- GeoFit(data=DATA,coordx=coords,coordt=times[1:nti],corrmodel=corrmodel,distance=distance,#
               maxdist=dd,maxtime=maxtime,likelihood="Marginal",type="Pairwise",model=model,X=X,#
               start=start,fixed=fixed,GPU=GPU, local = local,varest=TRUE)#
#
fit3
nti <- 16#
# maxtime = 50#
fit3 <- GeoFit(data=DATA,coordx=coords,coordt=times[1:nti],corrmodel=corrmodel,distance=distance,#
               maxdist=dd,maxtime=maxtime,likelihood="Marginal",type="Pairwise",model=model,X=X,#
               start=start,fixed=fixed,GPU=GPU, local = local,varest=TRUE)#
#
fit3
nti <- 17#
# maxtime = 50#
fit3 <- GeoFit(data=DATA,coordx=coords,coordt=times[1:nti],corrmodel=corrmodel,distance=distance,#
               maxdist=dd,maxtime=maxtime,likelihood="Marginal",type="Pairwise",model=model,X=X,#
               start=start,fixed=fixed,GPU=GPU, local = local,varest=TRUE)#
#
fit3
rm(list = ls())#
## see also  https://rdrr.io/rforge/gstat/man/wind.html#
require(gstat)#
require(mapdata)#
library(GeoModels)#
require(fields)#
require(mapproj)#
par(mfrow=c(1,1))#
#
# Wind Data: Daily average wind speeds for 1961-1978 at 12 synoptic #
# meteorological stations in the Republic of Ireland (Haslett and raftery 1989). #
# Wind speeds are in knots (1 knot = 0.5418 m/s), at each #
# of the stations of Haslett and Raftery#
#
## type of distance#
distance="Eucl" #distance="Geod"#
data("wind", package = "gstat")#
DATA=as.matrix(wind[,4:15])#
#DATA=DATA[,-3]  ### deleting ROSSLANE location site as in previous analysis#
sum(DATA==0)#
## where and when?#
which(DATA==0,arr.ind = T)#
### 16 values = to 0#
### we arbitrary replace 0 with  with the mean of the next and and the previous one (in time)#
DATA[5823:5825,]; DATA[5824,4]=(0.58+0.33)/2#
DATA[1507:1509,]; DATA[1508,6]=(1.58+2.42)/2#
DATA[2152:2154,]; DATA[2153,6]=(0.67+1.46)/2#
DATA[2351:2353,]; DATA[2352,6]=(3.21+0.92)/2#
DATA[3629:3631,]; DATA[3630,6]=(3.63+0.46)/2#
DATA[4053:4055,]; DATA[4054,6]=(4.63+2.50)/2#
DATA[5175:5177,]; DATA[5176,6]=(2.92+2.17)/2#
DATA[5456:5458,]; DATA[5457,6]=(0.13+2.37)/2#
DATA[4707:4709,]; DATA[4708,7]=(0.63+3.29)/2#
DATA[366:369,];   DATA[368,8]=DATA[367,8]=(2.79+3.75)/2#
DATA[694:697,];   DATA[695,8]=DATA[696,8]=(2.54+1)/2#
DATA[3653:3655,]; DATA[3654,8]=(0.33+0.75)/2#
DATA[5794:5796,]; DATA[5795,8]=(1.08+3.29)/2#
DATA[6176:6178,]; DATA[6177,9]=(2.13+0.21)/2#
# plot(density(DATA))#
#DATA[DATA==0]=0.05#
#
#wind.loc=wind.loc[-12,] ## deleting ROSSLANE lon-lat#
library(sp) # char2dms#
wind.loc$y = as.numeric(char2dms(as.character(wind.loc[["Latitude"]])))#
wind.loc$x = as.numeric(char2dms(as.character(wind.loc[["Longitude"]])))#
coordsLONLAT=cbind(wind.loc$x,wind.loc$y)  ## lonlat coordinates#
#
### graphic of ireland#
coordinates(wind.loc) = ~x+y#
# map("worldHires", xlim = c(-11,-5.4), ylim = c(51,55.5))#
# plot(wind.loc, add=TRUE, pch=16)#
# text(coordinates(wind.loc), pos=1, label=wind.loc$Station)#
############# sinusoidal projecion#
if(distance=="Eucl")#
{ P.sinusoidal <- mapproject(coordsLONLAT[,1],coordsLONLAT[,2],projection="sinusoidal")#
coords<-cbind(P.sinusoidal$x,P.sinusoidal$y)*6378.388#
}#
if(distance=="Geod") coords=coordsLONLAT#
### matrix of spatial great circle or euclidean distances#
if(distance=="Geod") dists2 = rdist.earth(coords, miles=FALSE)#
if(distance=="Eucl") dists2 = dist(coords)#
#
## compact support for weight function in pairwise likelihood#
dd=max(dists2)*1+0.01#
maxtime=2.01#
maxtime = 100#
## length of data: daily obervations for 18 years (1961-1978) at 12 location sites#
(1978-1961+1)*365*12#
length(as.vector(DATA))#
### there is a  small difference due to years with 366 days#
times = 1:nrow(DATA) # number of temporal realizations#
length(times)#
########################################
#### selecting first kk year#
########################################
kk=5#
ll=365*kk#
times=1:ll#
DATA=DATA[1:ll,]#
###########################
###########################
###########################
#### some tines series#
#par(mfrow=c(3,4))#
wind$time = ISOdate(wind$year+1900, wind$month, wind$day)#
# time series of e.g. Dublin data:#
# plot(DUB~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Dub")#
#plot(CLA~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Cla")#
#plot(RPT ~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Rpt")#
#plot(VAL~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Val")#
#plot(ROS~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Ros")#
#plot(KIL~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Kil")#
#plot(SHA~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Sha")#
#plot(BIR~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Bir")#
#plot(MUL~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Mul")#
#plot(CLO~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Clo")#
#plot(BEL~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Bel")#
#plot(MAL~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Mal")#
######## matrix covariates. #############
nsites<-dim(DATA)[2]   ##number sites#
nt<-dim(DATA)[1]       ## number times#
#
tcoords<-(1:nt)%x%rep(1,dim(coordsLONLAT)[1])#
xycoords<-(rep(1,nt)%x%as.matrix(coordsLONLAT))#
#########################################################################
#########################################################################
#### computing period for spatial sites DUB#
s<-spectrum(wind$DUB)#
periodo<-1/(s$freq[which.max(s$spec)])#
periodo#
############################################
# number of harmonics#
ns<-3#
h<-matrix(0,length(tcoords),2*ns)#
tscale<-365#
for ( i in 1: ns) {#
  h[,(2*(i-1)+1)]<-sin(2*pi*(i)*tcoords/tscale)#
  h[,(2*i)]<-cos(2*pi*(i)*tcoords/tscale)#
}#
#########################################################################
#### matrix of covariates for regression harmonic#
X=as.matrix(cbind(rep(1,nrow(h)),h))#
dim(X)#
#########################################################################
#########################################################################
############## correlation model ########################################
#########################################################################
corrmodel="exp_exp"#
scale_s = 340#
scale_t= 3#
nugget = 0 ## must be fixed#
sill = 1 ## must be fixed#
#########################################################################
#########################################################################
############### Gamma RF estimation #####################################
#########################################################################
#########################################################################
model="Gamma"#
#
mean=log(mean(DATA))#
shape = 6#
start=list(shape=shape,mean=mean,scale_s=scale_s,scale_t=scale_t,mean1=0,mean2=0,mean3=0,mean4=0,mean5=0,mean6=0)#
fixed<-list(nugget=nugget,sill=sill) #
#
GPU = 0 # 0 or 2 GPU denotes de Device we are using, in my Mac it is 0 (8 cores CPU),1 (Iris not for double),2 (AMD for double)#
local = c(1,1) #First component is 8 if GPU is 0. It is 2^n for n>=0 if GPU is 2#
#
# fit2 <- GeoFit(data=DATA,coordx=coords,coordt=times,corrmodel=corrmodel,distance=distance,#
#                maxdist=dd,maxtime=maxtime,likelihood="Marginal",type="Pairwise",model=model,X=X,#
#                start=start,fixed=fixed,GPU=GPU, local = local,varest=TRUE)#
# #
# fit2#
nti <- 16#
# maxtime = 50#
fit3 <- GeoFit(data=DATA,coordx=coords,coordt=times[1:nti],corrmodel=corrmodel,distance=distance,#
               maxdist=dd,maxtime=maxtime,likelihood="Marginal",type="Pairwise",model=model,X=X,#
               start=start,fixed=fixed,GPU=GPU, local = local,varest=TRUE)#
#
fit3#
score <- sensmat <- varcov <- varimat <- parscale <- NULL#
### Initialization parameters:#
initparam <- WlsStart(coordx=coords, coordy=NULL, coordt=times, coordx_dyn=NULL, corrmodel, data=DATA, distance="Eucl", "Fitting", fixed=fixed, grid=FALSE,#10#
                      likelihood='Marginal', maxdist=dd, maxtime=maxtime,  model=model, n=1, NULL,#16#
                      parscale, optimizer=='L-BFGS-B', radius=6378.388, start=start, taper=NULL, tapsep=NULL,#22#
                      type="Pairwise", varest=TRUE, vartype='SubSamp', weighted=FALSE, winconst=NULL, winstp=NULL,winconst_t=NULL, winstp_t=NULL, X=X)#31#
numcoord=length(initparam$coordx);numtime=1;spacetime_dyn=FALSE;coordx_dyn=NULL;varest=TRUE#
likelihood='Marginal';coordy=NULL;coordx <- coords;coordt <- times#
CMdl<-CkCorrModel(corrmodel)#
Stime <- CheckST(CMdl)
if(Stime && is.null(coordx_dyn) && varest && likelihood=='Marginal')#
{#
  if(is.null(coordy)){coordy <- coordx[,2]#
  coordx <- coordx[,1]}#
  coordx_dyn=list()#
  datatemp=list()#
  for(k in 1:length(coordt))#
  {#
    coordx_dyn[[k]]=cbind(coordx,coordy)#
    datatemp[[k]]=data[k,]#
  }#
  data <- datatemp#
  rm(datatemp)#
}
data
DATA
numcoord=length(initparam$coordx);numtime=1;spacetime_dyn=FALSE;coordx_dyn=NULL;varest=TRUE#
likelihood='Marginal';coordy=NULL;coordx <- coords;coordt <- times;data <- DATA#
CMdl<-CkCorrModel(corrmodel)#
Stime <- CheckST(CMdl)#
# print(spacetime)#
if(Stime && is.null(coordx_dyn) && varest && likelihood=='Marginal')#
{#
  if(is.null(coordy)){coordy <- coordx[,2]#
  coordx <- coordx[,1]}#
  coordx_dyn=list()#
  datatemp=list()#
  for(k in 1:length(coordt))#
  {#
    coordx_dyn[[k]]=cbind(coordx,coordy)#
    datatemp[[k]]=data[k,]#
  }#
  data <- datatemp#
  rm(datatemp)#
}
data
initparam$data
rm(list = ls())#
## see also  https://rdrr.io/rforge/gstat/man/wind.html#
require(gstat)#
require(mapdata)#
library(GeoModels)#
require(fields)#
require(mapproj)#
par(mfrow=c(1,1))#
#
# Wind Data: Daily average wind speeds for 1961-1978 at 12 synoptic #
# meteorological stations in the Republic of Ireland (Haslett and raftery 1989). #
# Wind speeds are in knots (1 knot = 0.5418 m/s), at each #
# of the stations of Haslett and Raftery#
#
## type of distance#
distance="Eucl" #distance="Geod"#
data("wind", package = "gstat")#
DATA=as.matrix(wind[,4:15])#
#DATA=DATA[,-3]  ### deleting ROSSLANE location site as in previous analysis#
sum(DATA==0)#
## where and when?#
which(DATA==0,arr.ind = T)#
### 16 values = to 0#
### we arbitrary replace 0 with  with the mean of the next and and the previous one (in time)#
DATA[5823:5825,]; DATA[5824,4]=(0.58+0.33)/2#
DATA[1507:1509,]; DATA[1508,6]=(1.58+2.42)/2#
DATA[2152:2154,]; DATA[2153,6]=(0.67+1.46)/2#
DATA[2351:2353,]; DATA[2352,6]=(3.21+0.92)/2#
DATA[3629:3631,]; DATA[3630,6]=(3.63+0.46)/2#
DATA[4053:4055,]; DATA[4054,6]=(4.63+2.50)/2#
DATA[5175:5177,]; DATA[5176,6]=(2.92+2.17)/2#
DATA[5456:5458,]; DATA[5457,6]=(0.13+2.37)/2#
DATA[4707:4709,]; DATA[4708,7]=(0.63+3.29)/2#
DATA[366:369,];   DATA[368,8]=DATA[367,8]=(2.79+3.75)/2#
DATA[694:697,];   DATA[695,8]=DATA[696,8]=(2.54+1)/2#
DATA[3653:3655,]; DATA[3654,8]=(0.33+0.75)/2#
DATA[5794:5796,]; DATA[5795,8]=(1.08+3.29)/2#
DATA[6176:6178,]; DATA[6177,9]=(2.13+0.21)/2#
# plot(density(DATA))#
#DATA[DATA==0]=0.05#
#
#wind.loc=wind.loc[-12,] ## deleting ROSSLANE lon-lat#
library(sp) # char2dms#
wind.loc$y = as.numeric(char2dms(as.character(wind.loc[["Latitude"]])))#
wind.loc$x = as.numeric(char2dms(as.character(wind.loc[["Longitude"]])))#
coordsLONLAT=cbind(wind.loc$x,wind.loc$y)  ## lonlat coordinates#
#
### graphic of ireland#
coordinates(wind.loc) = ~x+y#
# map("worldHires", xlim = c(-11,-5.4), ylim = c(51,55.5))#
# plot(wind.loc, add=TRUE, pch=16)#
# text(coordinates(wind.loc), pos=1, label=wind.loc$Station)#
############# sinusoidal projecion#
if(distance=="Eucl")#
{ P.sinusoidal <- mapproject(coordsLONLAT[,1],coordsLONLAT[,2],projection="sinusoidal")#
coords<-cbind(P.sinusoidal$x,P.sinusoidal$y)*6378.388#
}#
if(distance=="Geod") coords=coordsLONLAT#
### matrix of spatial great circle or euclidean distances#
if(distance=="Geod") dists2 = rdist.earth(coords, miles=FALSE)#
if(distance=="Eucl") dists2 = dist(coords)#
#
## compact support for weight function in pairwise likelihood#
dd=max(dists2)*1+0.01#
maxtime=2.01#
maxtime = 100#
## length of data: daily obervations for 18 years (1961-1978) at 12 location sites#
(1978-1961+1)*365*12#
length(as.vector(DATA))#
### there is a  small difference due to years with 366 days#
times = 1:nrow(DATA) # number of temporal realizations#
length(times)#
########################################
#### selecting first kk year#
########################################
kk=5#
ll=365*kk#
times=1:ll#
DATA=DATA[1:ll,]#
###########################
###########################
###########################
#### some tines series#
#par(mfrow=c(3,4))#
wind$time = ISOdate(wind$year+1900, wind$month, wind$day)#
# time series of e.g. Dublin data:#
# plot(DUB~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Dub")#
#plot(CLA~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Cla")#
#plot(RPT ~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Rpt")#
#plot(VAL~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Val")#
#plot(ROS~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Ros")#
#plot(KIL~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Kil")#
#plot(SHA~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Sha")#
#plot(BIR~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Bir")#
#plot(MUL~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Mul")#
#plot(CLO~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Clo")#
#plot(BEL~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Bel")#
#plot(MAL~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Mal")#
######## matrix covariates. #############
nsites<-dim(DATA)[2]   ##number sites#
nt<-dim(DATA)[1]       ## number times#
#
tcoords<-(1:nt)%x%rep(1,dim(coordsLONLAT)[1])#
xycoords<-(rep(1,nt)%x%as.matrix(coordsLONLAT))#
#########################################################################
#########################################################################
#### computing period for spatial sites DUB#
s<-spectrum(wind$DUB)#
periodo<-1/(s$freq[which.max(s$spec)])#
periodo#
############################################
# number of harmonics#
ns<-3#
h<-matrix(0,length(tcoords),2*ns)#
tscale<-365#
for ( i in 1: ns) {#
  h[,(2*(i-1)+1)]<-sin(2*pi*(i)*tcoords/tscale)#
  h[,(2*i)]<-cos(2*pi*(i)*tcoords/tscale)#
}#
#########################################################################
#### matrix of covariates for regression harmonic#
X=as.matrix(cbind(rep(1,nrow(h)),h))#
dim(X)#
#########################################################################
#########################################################################
############## correlation model ########################################
#########################################################################
corrmodel="exp_exp"#
scale_s = 340#
scale_t= 3#
nugget = 0 ## must be fixed#
sill = 1 ## must be fixed#
#########################################################################
#########################################################################
############### Gamma RF estimation #####################################
#########################################################################
#########################################################################
model="Gamma"#
#
mean=log(mean(DATA))#
shape = 6#
start=list(shape=shape,mean=mean,scale_s=scale_s,scale_t=scale_t,mean1=0,mean2=0,mean3=0,mean4=0,mean5=0,mean6=0)#
fixed<-list(nugget=nugget,sill=sill) #
#
GPU = 0 # 0 or 2 GPU denotes de Device we are using, in my Mac it is 0 (8 cores CPU),1 (Iris not for double),2 (AMD for double)#
local = c(1,1) #First component is 8 if GPU is 0. It is 2^n for n>=0 if GPU is 2#
#
# fit2 <- GeoFit(data=DATA,coordx=coords,coordt=times,corrmodel=corrmodel,distance=distance,#
#                maxdist=dd,maxtime=maxtime,likelihood="Marginal",type="Pairwise",model=model,X=X,#
#                start=start,fixed=fixed,GPU=GPU, local = local,varest=TRUE)#
# #
# fit2#
nti <- 10#
# maxtime = 50#
fit3 <- GeoFit(data=DATA,coordx=coords,coordt=times[1:nti],corrmodel=corrmodel,distance=distance,#
               maxdist=dd,maxtime=maxtime,likelihood="Marginal",type="Pairwise",model=model,X=X,#
               start=start,fixed=fixed,GPU=GPU, local = local,varest=TRUE)#
#
fit3
rm(list = ls())#
## see also  https://rdrr.io/rforge/gstat/man/wind.html#
require(gstat)#
require(mapdata)#
library(GeoModels)#
require(fields)#
require(mapproj)#
par(mfrow=c(1,1))#
#
# Wind Data: Daily average wind speeds for 1961-1978 at 12 synoptic #
# meteorological stations in the Republic of Ireland (Haslett and raftery 1989). #
# Wind speeds are in knots (1 knot = 0.5418 m/s), at each #
# of the stations of Haslett and Raftery#
#
## type of distance#
distance="Eucl" #distance="Geod"#
data("wind", package = "gstat")#
DATA=as.matrix(wind[,4:15])#
#DATA=DATA[,-3]  ### deleting ROSSLANE location site as in previous analysis#
sum(DATA==0)#
## where and when?#
which(DATA==0,arr.ind = T)#
### 16 values = to 0#
### we arbitrary replace 0 with  with the mean of the next and and the previous one (in time)#
DATA[5823:5825,]; DATA[5824,4]=(0.58+0.33)/2#
DATA[1507:1509,]; DATA[1508,6]=(1.58+2.42)/2#
DATA[2152:2154,]; DATA[2153,6]=(0.67+1.46)/2#
DATA[2351:2353,]; DATA[2352,6]=(3.21+0.92)/2#
DATA[3629:3631,]; DATA[3630,6]=(3.63+0.46)/2#
DATA[4053:4055,]; DATA[4054,6]=(4.63+2.50)/2#
DATA[5175:5177,]; DATA[5176,6]=(2.92+2.17)/2#
DATA[5456:5458,]; DATA[5457,6]=(0.13+2.37)/2#
DATA[4707:4709,]; DATA[4708,7]=(0.63+3.29)/2#
DATA[366:369,];   DATA[368,8]=DATA[367,8]=(2.79+3.75)/2#
DATA[694:697,];   DATA[695,8]=DATA[696,8]=(2.54+1)/2#
DATA[3653:3655,]; DATA[3654,8]=(0.33+0.75)/2#
DATA[5794:5796,]; DATA[5795,8]=(1.08+3.29)/2#
DATA[6176:6178,]; DATA[6177,9]=(2.13+0.21)/2#
# plot(density(DATA))#
#DATA[DATA==0]=0.05#
#
#wind.loc=wind.loc[-12,] ## deleting ROSSLANE lon-lat#
library(sp) # char2dms#
wind.loc$y = as.numeric(char2dms(as.character(wind.loc[["Latitude"]])))#
wind.loc$x = as.numeric(char2dms(as.character(wind.loc[["Longitude"]])))#
coordsLONLAT=cbind(wind.loc$x,wind.loc$y)  ## lonlat coordinates#
#
### graphic of ireland#
coordinates(wind.loc) = ~x+y#
# map("worldHires", xlim = c(-11,-5.4), ylim = c(51,55.5))#
# plot(wind.loc, add=TRUE, pch=16)#
# text(coordinates(wind.loc), pos=1, label=wind.loc$Station)#
############# sinusoidal projecion#
if(distance=="Eucl")#
{ P.sinusoidal <- mapproject(coordsLONLAT[,1],coordsLONLAT[,2],projection="sinusoidal")#
coords<-cbind(P.sinusoidal$x,P.sinusoidal$y)*6378.388#
}#
if(distance=="Geod") coords=coordsLONLAT#
### matrix of spatial great circle or euclidean distances#
if(distance=="Geod") dists2 = rdist.earth(coords, miles=FALSE)#
if(distance=="Eucl") dists2 = dist(coords)#
#
## compact support for weight function in pairwise likelihood#
dd=max(dists2)*1+0.01#
maxtime=2.01#
# maxtime = 100#
## length of data: daily obervations for 18 years (1961-1978) at 12 location sites#
(1978-1961+1)*365*12#
length(as.vector(DATA))#
### there is a  small difference due to years with 366 days#
times = 1:nrow(DATA) # number of temporal realizations#
length(times)#
########################################
#### selecting first kk year#
########################################
kk=5#
ll=365*kk#
times=1:ll#
DATA=DATA[1:ll,]#
###########################
###########################
###########################
#### some tines series#
#par(mfrow=c(3,4))#
wind$time = ISOdate(wind$year+1900, wind$month, wind$day)#
# time series of e.g. Dublin data:#
# plot(DUB~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Dub")#
#plot(CLA~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Cla")#
#plot(RPT ~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Rpt")#
#plot(VAL~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Val")#
#plot(ROS~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Ros")#
#plot(KIL~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Kil")#
#plot(SHA~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Sha")#
#plot(BIR~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Bir")#
#plot(MUL~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Mul")#
#plot(CLO~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Clo")#
#plot(BEL~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Bel")#
#plot(MAL~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Mal")#
######## matrix covariates. #############
nsites<-dim(DATA)[2]   ##number sites#
nt<-dim(DATA)[1]       ## number times#
#
tcoords<-(1:nt)%x%rep(1,dim(coordsLONLAT)[1])#
xycoords<-(rep(1,nt)%x%as.matrix(coordsLONLAT))#
#########################################################################
#########################################################################
#### computing period for spatial sites DUB#
s<-spectrum(wind$DUB)#
periodo<-1/(s$freq[which.max(s$spec)])#
periodo#
############################################
# number of harmonics#
ns<-3#
h<-matrix(0,length(tcoords),2*ns)#
tscale<-365#
for ( i in 1: ns) {#
  h[,(2*(i-1)+1)]<-sin(2*pi*(i)*tcoords/tscale)#
  h[,(2*i)]<-cos(2*pi*(i)*tcoords/tscale)#
}#
#########################################################################
#### matrix of covariates for regression harmonic#
X=as.matrix(cbind(rep(1,nrow(h)),h))#
dim(X)#
#########################################################################
#########################################################################
############## correlation model ########################################
#########################################################################
corrmodel="exp_exp"#
scale_s = 340#
scale_t= 3#
nugget = 0 ## must be fixed#
sill = 1 ## must be fixed#
#########################################################################
#########################################################################
############### Gamma RF estimation #####################################
#########################################################################
#########################################################################
model="Gamma"#
#
mean=log(mean(DATA))#
shape = 6#
start=list(shape=shape,mean=mean,scale_s=scale_s,scale_t=scale_t,mean1=0,mean2=0,mean3=0,mean4=0,mean5=0,mean6=0)#
fixed<-list(nugget=nugget,sill=sill) #
#
GPU = 0 # 0 or 2 GPU denotes de Device we are using, in my Mac it is 0 (8 cores CPU),1 (Iris not for double),2 (AMD for double)#
local = c(1,1) #First component is 8 if GPU is 0. It is 2^n for n>=0 if GPU is 2#
#
# fit2 <- GeoFit(data=DATA,coordx=coords,coordt=times,corrmodel=corrmodel,distance=distance,#
#                maxdist=dd,maxtime=maxtime,likelihood="Marginal",type="Pairwise",model=model,X=X,#
#                start=start,fixed=fixed,GPU=GPU, local = local,varest=TRUE)#
# #
# fit2#
nti <- 42#
# maxtime = 50#
# fit3 <- GeoFit(data=DATA,coordx=coords,coordt=times[1:nti],corrmodel=corrmodel,distance=distance,#
#                maxdist=dd,maxtime=maxtime,likelihood="Marginal",type="Pairwise",model=model,X=X,#
#                start=start,fixed=fixed,GPU=GPU, local = local,varest=TRUE)#
# #
# fit3#
numtime=1;spacetime_dyn=FALSE;coordx_dyn=NULL;varest=TRUE#
likelihood='Marginal';coordy=NULL;coordx <- coords;coordt <- times[1:nti];data <- DATA#
CMdl<-CkCorrModel(corrmodel)#
Stime <- CheckST(CMdl)#
# print(spacetime)#
if(Stime && is.null(coordx_dyn) && varest && likelihood=='Marginal')#
{#
  if(is.null(coordy)){coordy <- coordx[,2]#
  coordx <- coordx[,1]}#
  coordx_dyn=list()#
  datatemp=list()#
  for(k in 1:length(coordt))#
  {#
    coordx_dyn[[k]]=cbind(coordx,coordy)#
    datatemp[[k]]=data[k,]#
  }#
  data <- datatemp#
  rm(datatemp)#
}#
score <- sensmat <- varcov <- varimat <- parscale <- NULL#
### Initialization parameters:#
initparam <- WlsStart(coordx=coords, coordy=NULL, coordt=times[1:nti], coordx_dyn=coordx_dyn, corrmodel, data=data, distance="Eucl", "Fitting", fixed=fixed, grid=FALSE,#10#
                      likelihood='Marginal', maxdist=dd, maxtime=maxtime,  model=model, n=1, NULL,#16#
                      parscale, optimizer=='L-BFGS-B', radius=6378.388, start=start, taper=NULL, tapsep=NULL,#22#
                      type="Pairwise", varest=TRUE, vartype='SubSamp', weighted=FALSE, winconst=NULL, winstp=NULL,winconst_t=NULL, winstp_t=NULL, X=X)#31#
numcoord=length(initparam$coordx)#
if(initparam$spacetime) numtime=length(initparam$coordt)#
if(initparam$bivariate) numtime=2#
if(!is.null(coordx_dyn)) spacetime_dyn=TRUE#
dimat <- numcoord*numtime##
NS=cumsum(initparam$ns)#
if(is.null(dim(initparam$X)))#
{#
  X=as.matrix(rep(1,dimat))#
  if((initparam$spacetime||initparam$bivariate)&& spacetime_dyn)  X=as.matrix(rep(1,NS[numtime]))#
}#
num_betas=ncol(X) #
grid = FALSE#
if(grid)    #
{a=expand.grid(initparam$coordx,initparam$coordy);coordx=a[,1];coordy=a[,2]; #
}else {#
  if((initparam$spacetime||initparam$bivariate)&&(!spacetime_dyn)){#
    data=c(t(data))#
    coordx=rep(coordx,numtime);coordy=rep(coordy,numtime)#
  }#
  if((initparam$spacetime||initparam$bivariate)&&(spacetime_dyn)) initparam$data=unlist(initparam$data)          #
}#
if(initparam$spacetime||initparam$bivariate)   NS=c(0,NS)[-(length(initparam$ns)+1)]#
initparam$fixed#
#
dimmat <- initparam$numparam^2#
dmat <- initparam$numparam*(initparam$numparam+1)/2#
eps <- (.Machine$double.eps)^(1/3)#
param <- c(initparam$param, initparam$fixed)#
score <- double(initparam$numparam)#
paramcorr <- param[initparam$namescorr]#
nuisance <- param[initparam$namesnuis]#
sel=substr(names(nuisance),1,4)=="mean"#
mm=as.numeric(nuisance[sel])   ## mean paramteres#
other_nuis=as.numeric(nuisance[!sel]) #
nuisance=c(mm,other_nuis)#
sensmat <- double(dmat);varimat <- double(dmat)#
GD=.C('GodambeMat',as.double(mm),as.integer(initparam$bivariate),as.double(initparam$coordx),as.double(initparam$coordy),#
      as.double(initparam$coordt),as.integer(initparam$corrmodel), as.double(initparam$data),as.integer(initparam$distance),as.double(eps),#
      as.integer(initparam$flagcorr), as.integer(initparam$flagnuis),as.integer(grid),as.integer(initparam$likelihood),#
      as.double(c(X%*%mm)),as.integer(initparam$model),as.double(initparam$n),as.integer(num_betas),#
      as.integer(initparam$numparam),as.integer(initparam$numparamcorr),as.integer(length(paramcorr)),as.double(paramcorr),as.double(nuisance),#
      score=score,sensmat=sensmat,as.integer(initparam$spacetime),as.integer(initparam$type),#
      varimat=varimat,as.integer(initparam$vartype),as.double(initparam$winconst),as.double(initparam$winstp),as.double(initparam$winconst_t),as.double(initparam$winstp_t),#
      as.integer(initparam$weighted),c(t(X)),ns=as.integer(initparam$ns),NS=as.integer(NS),PACKAGE='GeoModels',DUP=TRUE,NAOK=TRUE)#
str(GD)
rm(list = ls())#
## see also  https://rdrr.io/rforge/gstat/man/wind.html#
require(gstat)#
require(mapdata)#
library(GeoModels)#
require(fields)#
require(mapproj)#
par(mfrow=c(1,1))#
#
# Wind Data: Daily average wind speeds for 1961-1978 at 12 synoptic #
# meteorological stations in the Republic of Ireland (Haslett and raftery 1989). #
# Wind speeds are in knots (1 knot = 0.5418 m/s), at each #
# of the stations of Haslett and Raftery#
#
## type of distance#
distance="Eucl" #distance="Geod"#
data("wind", package = "gstat")#
DATA=as.matrix(wind[,4:15])#
#DATA=DATA[,-3]  ### deleting ROSSLANE location site as in previous analysis#
sum(DATA==0)#
## where and when?#
which(DATA==0,arr.ind = T)#
### 16 values = to 0#
### we arbitrary replace 0 with  with the mean of the next and and the previous one (in time)#
DATA[5823:5825,]; DATA[5824,4]=(0.58+0.33)/2#
DATA[1507:1509,]; DATA[1508,6]=(1.58+2.42)/2#
DATA[2152:2154,]; DATA[2153,6]=(0.67+1.46)/2#
DATA[2351:2353,]; DATA[2352,6]=(3.21+0.92)/2#
DATA[3629:3631,]; DATA[3630,6]=(3.63+0.46)/2#
DATA[4053:4055,]; DATA[4054,6]=(4.63+2.50)/2#
DATA[5175:5177,]; DATA[5176,6]=(2.92+2.17)/2#
DATA[5456:5458,]; DATA[5457,6]=(0.13+2.37)/2#
DATA[4707:4709,]; DATA[4708,7]=(0.63+3.29)/2#
DATA[366:369,];   DATA[368,8]=DATA[367,8]=(2.79+3.75)/2#
DATA[694:697,];   DATA[695,8]=DATA[696,8]=(2.54+1)/2#
DATA[3653:3655,]; DATA[3654,8]=(0.33+0.75)/2#
DATA[5794:5796,]; DATA[5795,8]=(1.08+3.29)/2#
DATA[6176:6178,]; DATA[6177,9]=(2.13+0.21)/2#
# plot(density(DATA))#
#DATA[DATA==0]=0.05#
#
#wind.loc=wind.loc[-12,] ## deleting ROSSLANE lon-lat#
library(sp) # char2dms#
wind.loc$y = as.numeric(char2dms(as.character(wind.loc[["Latitude"]])))#
wind.loc$x = as.numeric(char2dms(as.character(wind.loc[["Longitude"]])))#
coordsLONLAT=cbind(wind.loc$x,wind.loc$y)  ## lonlat coordinates#
#
### graphic of ireland#
coordinates(wind.loc) = ~x+y#
# map("worldHires", xlim = c(-11,-5.4), ylim = c(51,55.5))#
# plot(wind.loc, add=TRUE, pch=16)#
# text(coordinates(wind.loc), pos=1, label=wind.loc$Station)#
############# sinusoidal projecion#
if(distance=="Eucl")#
{ P.sinusoidal <- mapproject(coordsLONLAT[,1],coordsLONLAT[,2],projection="sinusoidal")#
coords<-cbind(P.sinusoidal$x,P.sinusoidal$y)*6378.388#
}#
if(distance=="Geod") coords=coordsLONLAT#
### matrix of spatial great circle or euclidean distances#
if(distance=="Geod") dists2 = rdist.earth(coords, miles=FALSE)#
if(distance=="Eucl") dists2 = dist(coords)#
#
## compact support for weight function in pairwise likelihood#
dd=max(dists2)*1+0.01#
maxtime=2.01#
# maxtime = 100#
## length of data: daily obervations for 18 years (1961-1978) at 12 location sites#
(1978-1961+1)*365*12#
length(as.vector(DATA))#
### there is a  small difference due to years with 366 days#
times = 1:nrow(DATA) # number of temporal realizations#
length(times)#
########################################
#### selecting first kk year#
########################################
kk=5#
ll=365*kk#
times=1:ll#
DATA=DATA[1:ll,]#
###########################
###########################
###########################
#### some tines series#
#par(mfrow=c(3,4))#
wind$time = ISOdate(wind$year+1900, wind$month, wind$day)#
# time series of e.g. Dublin data:#
# plot(DUB~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Dub")#
#plot(CLA~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Cla")#
#plot(RPT ~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Rpt")#
#plot(VAL~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Val")#
#plot(ROS~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Ros")#
#plot(KIL~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Kil")#
#plot(SHA~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Sha")#
#plot(BIR~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Bir")#
#plot(MUL~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Mul")#
#plot(CLO~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Clo")#
#plot(BEL~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Bel")#
#plot(MAL~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Mal")#
######## matrix covariates. #############
nsites<-dim(DATA)[2]   ##number sites#
nt<-dim(DATA)[1]       ## number times#
#
tcoords<-(1:nt)%x%rep(1,dim(coordsLONLAT)[1])#
xycoords<-(rep(1,nt)%x%as.matrix(coordsLONLAT))#
#########################################################################
#########################################################################
#### computing period for spatial sites DUB#
s<-spectrum(wind$DUB)#
periodo<-1/(s$freq[which.max(s$spec)])#
periodo#
############################################
# number of harmonics#
ns<-3#
h<-matrix(0,length(tcoords),2*ns)#
tscale<-365#
for ( i in 1: ns) {#
  h[,(2*(i-1)+1)]<-sin(2*pi*(i)*tcoords/tscale)#
  h[,(2*i)]<-cos(2*pi*(i)*tcoords/tscale)#
}#
#########################################################################
#### matrix of covariates for regression harmonic#
X=as.matrix(cbind(rep(1,nrow(h)),h))#
dim(X)#
#########################################################################
#########################################################################
############## correlation model ########################################
#########################################################################
corrmodel="exp_exp"#
scale_s = 340#
scale_t= 3#
nugget = 0 ## must be fixed#
sill = 1 ## must be fixed#
#########################################################################
#########################################################################
############### Gamma RF estimation #####################################
#########################################################################
#########################################################################
model="Gamma"#
#
mean=log(mean(DATA))#
shape = 6#
start=list(shape=shape,mean=mean,scale_s=scale_s,scale_t=scale_t,mean1=0,mean2=0,mean3=0,mean4=0,mean5=0,mean6=0)#
fixed<-list(nugget=nugget,sill=sill) #
#
GPU = 0 # 0 or 2 GPU denotes de Device we are using, in my Mac it is 0 (8 cores CPU),1 (Iris not for double),2 (AMD for double)#
local = c(1,1) #First component is 8 if GPU is 0. It is 2^n for n>=0 if GPU is 2#
#
# fit2 <- GeoFit(data=DATA,coordx=coords,coordt=times,corrmodel=corrmodel,distance=distance,#
#                maxdist=dd,maxtime=maxtime,likelihood="Marginal",type="Pairwise",model=model,X=X,#
#                start=start,fixed=fixed,GPU=GPU, local = local,varest=TRUE)#
# #
# fit2#
nti <- 43 #hasta 42 funciona#
# maxtime = 50#
# fit3 <- GeoFit(data=DATA,coordx=coords,coordt=times[1:nti],corrmodel=corrmodel,distance=distance,#
#                maxdist=dd,maxtime=maxtime,likelihood="Marginal",type="Pairwise",model=model,X=X,#
#                start=start,fixed=fixed,GPU=GPU, local = local,varest=TRUE)#
# #
# fit3#
numtime=1;spacetime_dyn=FALSE;coordx_dyn=NULL;varest=TRUE#
likelihood='Marginal';coordy=NULL;coordx <- coords;coordt <- times[1:nti];data <- DATA#
CMdl<-CkCorrModel(corrmodel)#
Stime <- CheckST(CMdl)#
# print(spacetime)#
if(Stime && is.null(coordx_dyn) && varest && likelihood=='Marginal')#
{#
  if(is.null(coordy)){coordy <- coordx[,2]#
  coordx <- coordx[,1]}#
  coordx_dyn=list()#
  datatemp=list()#
  for(k in 1:length(coordt))#
  {#
    coordx_dyn[[k]]=cbind(coordx,coordy)#
    datatemp[[k]]=data[k,]#
  }#
  data <- datatemp#
  rm(datatemp)#
}#
score <- sensmat <- varcov <- varimat <- parscale <- NULL#
### Initialization parameters:#
initparam <- WlsStart(coordx=coords, coordy=NULL, coordt=times[1:nti], coordx_dyn=coordx_dyn, corrmodel, data=data, distance="Eucl", "Fitting", fixed=fixed, grid=FALSE,#10#
                      likelihood='Marginal', maxdist=dd, maxtime=maxtime,  model=model, n=1, NULL,#16#
                      parscale, optimizer=='L-BFGS-B', radius=6378.388, start=start, taper=NULL, tapsep=NULL,#22#
                      type="Pairwise", varest=TRUE, vartype='SubSamp', weighted=FALSE, winconst=NULL, winstp=NULL,winconst_t=NULL, winstp_t=NULL, X=X)#31#
numcoord=length(initparam$coordx)#
if(initparam$spacetime) numtime=length(initparam$coordt)#
if(initparam$bivariate) numtime=2#
if(!is.null(coordx_dyn)) spacetime_dyn=TRUE#
dimat <- numcoord*numtime##
NS=cumsum(initparam$ns)#
if(is.null(dim(initparam$X)))#
{#
  X=as.matrix(rep(1,dimat))#
  if((initparam$spacetime||initparam$bivariate)&& spacetime_dyn)  X=as.matrix(rep(1,NS[numtime]))#
}#
num_betas=ncol(X) #
grid = FALSE#
if(grid)    #
{a=expand.grid(initparam$coordx,initparam$coordy);coordx=a[,1];coordy=a[,2]; #
}else {#
  if((initparam$spacetime||initparam$bivariate)&&(!spacetime_dyn)){#
    data=c(t(data))#
    coordx=rep(coordx,numtime);coordy=rep(coordy,numtime)#
  }#
  if((initparam$spacetime||initparam$bivariate)&&(spacetime_dyn)) initparam$data=unlist(initparam$data)          #
}#
if(initparam$spacetime||initparam$bivariate)   NS=c(0,NS)[-(length(initparam$ns)+1)]#
initparam$fixed#
#
dimmat <- initparam$numparam^2#
dmat <- initparam$numparam*(initparam$numparam+1)/2#
eps <- (.Machine$double.eps)^(1/3)#
param <- c(initparam$param, initparam$fixed)#
score <- double(initparam$numparam)#
paramcorr <- param[initparam$namescorr]#
nuisance <- param[initparam$namesnuis]#
sel=substr(names(nuisance),1,4)=="mean"#
mm=as.numeric(nuisance[sel])   ## mean paramteres#
other_nuis=as.numeric(nuisance[!sel]) #
nuisance=c(mm,other_nuis)#
sensmat <- double(dmat);varimat <- double(dmat)#
GD=.C('GodambeMat',as.double(mm),as.integer(initparam$bivariate),as.double(initparam$coordx),as.double(initparam$coordy),#
      as.double(initparam$coordt),as.integer(initparam$corrmodel), as.double(initparam$data),as.integer(initparam$distance),as.double(eps),#
      as.integer(initparam$flagcorr), as.integer(initparam$flagnuis),as.integer(grid),as.integer(initparam$likelihood),#
      as.double(c(X%*%mm)),as.integer(initparam$model),as.double(initparam$n),as.integer(num_betas),#
      as.integer(initparam$numparam),as.integer(initparam$numparamcorr),as.integer(length(paramcorr)),as.double(paramcorr),as.double(nuisance),#
      score=score,sensmat=sensmat,as.integer(initparam$spacetime),as.integer(initparam$type),#
      varimat=varimat,as.integer(initparam$vartype),as.double(initparam$winconst),as.double(initparam$winstp),as.double(initparam$winconst_t),as.double(initparam$winstp_t),#
      as.integer(initparam$weighted),c(t(X)),ns=as.integer(initparam$ns),NS=as.integer(NS),PACKAGE='GeoModels',DUP=TRUE,NAOK=TRUE)#
str(GD)
rm(list = ls())#
## see also  https://rdrr.io/rforge/gstat/man/wind.html#
require(gstat)#
require(mapdata)#
library(GeoModels)#
require(fields)#
require(mapproj)#
par(mfrow=c(1,1))#
#
# Wind Data: Daily average wind speeds for 1961-1978 at 12 synoptic #
# meteorological stations in the Republic of Ireland (Haslett and raftery 1989). #
# Wind speeds are in knots (1 knot = 0.5418 m/s), at each #
# of the stations of Haslett and Raftery#
#
## type of distance#
distance="Eucl" #distance="Geod"#
data("wind", package = "gstat")#
DATA=as.matrix(wind[,4:15])#
#DATA=DATA[,-3]  ### deleting ROSSLANE location site as in previous analysis#
sum(DATA==0)#
## where and when?#
which(DATA==0,arr.ind = T)#
### 16 values = to 0#
### we arbitrary replace 0 with  with the mean of the next and and the previous one (in time)#
DATA[5823:5825,]; DATA[5824,4]=(0.58+0.33)/2#
DATA[1507:1509,]; DATA[1508,6]=(1.58+2.42)/2#
DATA[2152:2154,]; DATA[2153,6]=(0.67+1.46)/2#
DATA[2351:2353,]; DATA[2352,6]=(3.21+0.92)/2#
DATA[3629:3631,]; DATA[3630,6]=(3.63+0.46)/2#
DATA[4053:4055,]; DATA[4054,6]=(4.63+2.50)/2#
DATA[5175:5177,]; DATA[5176,6]=(2.92+2.17)/2#
DATA[5456:5458,]; DATA[5457,6]=(0.13+2.37)/2#
DATA[4707:4709,]; DATA[4708,7]=(0.63+3.29)/2#
DATA[366:369,];   DATA[368,8]=DATA[367,8]=(2.79+3.75)/2#
DATA[694:697,];   DATA[695,8]=DATA[696,8]=(2.54+1)/2#
DATA[3653:3655,]; DATA[3654,8]=(0.33+0.75)/2#
DATA[5794:5796,]; DATA[5795,8]=(1.08+3.29)/2#
DATA[6176:6178,]; DATA[6177,9]=(2.13+0.21)/2#
# plot(density(DATA))#
#DATA[DATA==0]=0.05#
#
#wind.loc=wind.loc[-12,] ## deleting ROSSLANE lon-lat#
library(sp) # char2dms#
wind.loc$y = as.numeric(char2dms(as.character(wind.loc[["Latitude"]])))#
wind.loc$x = as.numeric(char2dms(as.character(wind.loc[["Longitude"]])))#
coordsLONLAT=cbind(wind.loc$x,wind.loc$y)  ## lonlat coordinates#
#
### graphic of ireland#
coordinates(wind.loc) = ~x+y#
# map("worldHires", xlim = c(-11,-5.4), ylim = c(51,55.5))#
# plot(wind.loc, add=TRUE, pch=16)#
# text(coordinates(wind.loc), pos=1, label=wind.loc$Station)#
############# sinusoidal projecion#
if(distance=="Eucl")#
{ P.sinusoidal <- mapproject(coordsLONLAT[,1],coordsLONLAT[,2],projection="sinusoidal")#
coords<-cbind(P.sinusoidal$x,P.sinusoidal$y)*6378.388#
}#
if(distance=="Geod") coords=coordsLONLAT#
### matrix of spatial great circle or euclidean distances#
if(distance=="Geod") dists2 = rdist.earth(coords, miles=FALSE)#
if(distance=="Eucl") dists2 = dist(coords)#
#
## compact support for weight function in pairwise likelihood#
dd=max(dists2)*1+0.01#
maxtime=2.01#
# maxtime = 100#
## length of data: daily obervations for 18 years (1961-1978) at 12 location sites#
(1978-1961+1)*365*12#
length(as.vector(DATA))#
### there is a  small difference due to years with 366 days#
times = 1:nrow(DATA) # number of temporal realizations#
length(times)#
########################################
#### selecting first kk year#
########################################
kk=5#
ll=365*kk#
times=1:ll#
DATA=DATA[1:ll,]#
###########################
###########################
###########################
#### some tines series#
#par(mfrow=c(3,4))#
wind$time = ISOdate(wind$year+1900, wind$month, wind$day)#
# time series of e.g. Dublin data:#
# plot(DUB~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Dub")#
#plot(CLA~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Cla")#
#plot(RPT ~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Rpt")#
#plot(VAL~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Val")#
#plot(ROS~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Ros")#
#plot(KIL~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Kil")#
#plot(SHA~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Sha")#
#plot(BIR~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Bir")#
#plot(MUL~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Mul")#
#plot(CLO~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Clo")#
#plot(BEL~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Bel")#
#plot(MAL~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Mal")#
######## matrix covariates. #############
nsites<-dim(DATA)[2]   ##number sites#
nt<-dim(DATA)[1]       ## number times#
#
tcoords<-(1:nt)%x%rep(1,dim(coordsLONLAT)[1])#
xycoords<-(rep(1,nt)%x%as.matrix(coordsLONLAT))#
#########################################################################
#########################################################################
#### computing period for spatial sites DUB#
s<-spectrum(wind$DUB)#
periodo<-1/(s$freq[which.max(s$spec)])#
periodo#
############################################
# number of harmonics#
ns<-3#
h<-matrix(0,length(tcoords),2*ns)#
tscale<-365#
for ( i in 1: ns) {#
  h[,(2*(i-1)+1)]<-sin(2*pi*(i)*tcoords/tscale)#
  h[,(2*i)]<-cos(2*pi*(i)*tcoords/tscale)#
}#
#########################################################################
#### matrix of covariates for regression harmonic#
X=as.matrix(cbind(rep(1,nrow(h)),h))#
dim(X)#
#########################################################################
#########################################################################
############## correlation model ########################################
#########################################################################
corrmodel="exp_exp"#
scale_s = 340#
scale_t= 3#
nugget = 0 ## must be fixed#
sill = 1 ## must be fixed#
#########################################################################
#########################################################################
############### Gamma RF estimation #####################################
#########################################################################
#########################################################################
model="Gamma"#
#
mean=log(mean(DATA))#
shape = 6#
start=list(shape=shape,mean=mean,scale_s=scale_s,scale_t=scale_t,mean1=0,mean2=0,mean3=0,mean4=0,mean5=0,mean6=0)#
fixed<-list(nugget=nugget,sill=sill) #
#
GPU = 0 # 0 or 2 GPU denotes de Device we are using, in my Mac it is 0 (8 cores CPU),1 (Iris not for double),2 (AMD for double)#
local = c(1,1) #First component is 8 if GPU is 0. It is 2^n for n>=0 if GPU is 2#
#
# fit2 <- GeoFit(data=DATA,coordx=coords,coordt=times,corrmodel=corrmodel,distance=distance,#
#                maxdist=dd,maxtime=maxtime,likelihood="Marginal",type="Pairwise",model=model,X=X,#
#                start=start,fixed=fixed,GPU=GPU, local = local,varest=TRUE)#
# #
# fit2#
nti <- 42#hasta 42 funciona#
# maxtime = 50#
# fit3 <- GeoFit(data=DATA[1:nti,],coordx=coords,coordt=times[1:nti],corrmodel=corrmodel,distance=distance,#
#                maxdist=dd,maxtime=maxtime,likelihood="Marginal",type="Pairwise",model=model,X=X,#
#                start=start,fixed=fixed,GPU=GPU, local = local,varest=TRUE)#
# #
# fit3#
numtime=1;spacetime_dyn=FALSE;coordx_dyn=NULL;varest=TRUE#
likelihood='Marginal';coordy=NULL;coordx <- coords;coordt <- times[1:nti];data <- DATA[1:nti,]#
CMdl<-CkCorrModel(corrmodel)#
Stime <- CheckST(CMdl)#
# print(spacetime)#
if(Stime && is.null(coordx_dyn) && varest && likelihood=='Marginal')#
{#
  if(is.null(coordy)){coordy <- coordx[,2]#
  coordx <- coordx[,1]}#
  coordx_dyn=list()#
  datatemp=list()#
  for(k in 1:length(coordt))#
  {#
    coordx_dyn[[k]]=cbind(coordx,coordy)#
    datatemp[[k]]=data[k,]#
  }#
  data <- datatemp#
  rm(datatemp)#
}#
score <- sensmat <- varcov <- varimat <- parscale <- NULL#
### Initialization parameters:#
initparam <- WlsStart(coordx=coords, coordy=NULL, coordt=times[1:nti], coordx_dyn=coordx_dyn, corrmodel, data=data, distance="Eucl", "Fitting", fixed=fixed, grid=FALSE,#10#
                      likelihood='Marginal', maxdist=dd, maxtime=maxtime,  model=model, n=1, NULL,#16#
                      parscale, optimizer=='L-BFGS-B', radius=6378.388, start=start, taper=NULL, tapsep=NULL,#22#
                      type="Pairwise", varest=TRUE, vartype='SubSamp', weighted=FALSE, winconst=NULL, winstp=NULL,winconst_t=NULL, winstp_t=NULL, X=X)#31#
numcoord=length(initparam$coordx)#
if(initparam$spacetime) numtime=length(initparam$coordt)#
if(initparam$bivariate) numtime=2#
if(!is.null(coordx_dyn)) spacetime_dyn=TRUE#
dimat <- numcoord*numtime##
NS=cumsum(initparam$ns)#
if(is.null(dim(initparam$X)))#
{#
  X=as.matrix(rep(1,dimat))#
  if((initparam$spacetime||initparam$bivariate)&& spacetime_dyn)  X=as.matrix(rep(1,NS[numtime]))#
}#
num_betas=ncol(X) #
grid = FALSE#
if(grid)    #
{a=expand.grid(initparam$coordx,initparam$coordy);coordx=a[,1];coordy=a[,2]; #
}else {#
  if((initparam$spacetime||initparam$bivariate)&&(!spacetime_dyn)){#
    data=c(t(data))#
    coordx=rep(coordx,numtime);coordy=rep(coordy,numtime)#
  }#
  if((initparam$spacetime||initparam$bivariate)&&(spacetime_dyn)) initparam$data=unlist(initparam$data)          #
}#
if(initparam$spacetime||initparam$bivariate)   NS=c(0,NS)[-(length(initparam$ns)+1)]#
initparam$fixed#
#
dimmat <- initparam$numparam^2#
dmat <- initparam$numparam*(initparam$numparam+1)/2#
eps <- (.Machine$double.eps)^(1/3)#
param <- c(initparam$param, initparam$fixed)#
score <- double(initparam$numparam)#
paramcorr <- param[initparam$namescorr]#
nuisance <- param[initparam$namesnuis]#
sel=substr(names(nuisance),1,4)=="mean"#
mm=as.numeric(nuisance[sel])   ## mean paramteres#
other_nuis=as.numeric(nuisance[!sel]) #
nuisance=c(mm,other_nuis)#
sensmat <- double(dmat);varimat <- double(dmat)#
GD=.C('GodambeMat',as.double(mm),as.integer(initparam$bivariate),as.double(initparam$coordx),as.double(initparam$coordy),#
      as.double(initparam$coordt),as.integer(initparam$corrmodel), as.double(initparam$data),as.integer(initparam$distance),as.double(eps),#
      as.integer(initparam$flagcorr), as.integer(initparam$flagnuis),as.integer(grid),as.integer(initparam$likelihood),#
      as.double(c(X%*%mm)),as.integer(initparam$model),as.double(initparam$n),as.integer(num_betas),#
      as.integer(initparam$numparam),as.integer(initparam$numparamcorr),as.integer(length(paramcorr)),as.double(paramcorr),as.double(nuisance),#
      score=score,sensmat=sensmat,as.integer(initparam$spacetime),as.integer(initparam$type),#
      varimat=varimat,as.integer(initparam$vartype),as.double(initparam$winconst),as.double(initparam$winstp),as.double(initparam$winconst_t),as.double(initparam$winstp_t),#
      as.integer(initparam$weighted),c(t(X)),ns=as.integer(initparam$ns),NS=as.integer(NS),PACKAGE='GeoModels',DUP=TRUE,NAOK=TRUE)#
str(GD)
rm(list = ls())#
## see also  https://rdrr.io/rforge/gstat/man/wind.html#
require(gstat)#
require(mapdata)#
library(GeoModels)#
require(fields)#
require(mapproj)#
par(mfrow=c(1,1))#
#
# Wind Data: Daily average wind speeds for 1961-1978 at 12 synoptic #
# meteorological stations in the Republic of Ireland (Haslett and raftery 1989). #
# Wind speeds are in knots (1 knot = 0.5418 m/s), at each #
# of the stations of Haslett and Raftery#
#
## type of distance#
distance="Eucl" #distance="Geod"#
data("wind", package = "gstat")#
DATA=as.matrix(wind[,4:15])#
#DATA=DATA[,-3]  ### deleting ROSSLANE location site as in previous analysis#
sum(DATA==0)#
## where and when?#
which(DATA==0,arr.ind = T)#
### 16 values = to 0#
### we arbitrary replace 0 with  with the mean of the next and and the previous one (in time)#
DATA[5823:5825,]; DATA[5824,4]=(0.58+0.33)/2#
DATA[1507:1509,]; DATA[1508,6]=(1.58+2.42)/2#
DATA[2152:2154,]; DATA[2153,6]=(0.67+1.46)/2#
DATA[2351:2353,]; DATA[2352,6]=(3.21+0.92)/2#
DATA[3629:3631,]; DATA[3630,6]=(3.63+0.46)/2#
DATA[4053:4055,]; DATA[4054,6]=(4.63+2.50)/2#
DATA[5175:5177,]; DATA[5176,6]=(2.92+2.17)/2#
DATA[5456:5458,]; DATA[5457,6]=(0.13+2.37)/2#
DATA[4707:4709,]; DATA[4708,7]=(0.63+3.29)/2#
DATA[366:369,];   DATA[368,8]=DATA[367,8]=(2.79+3.75)/2#
DATA[694:697,];   DATA[695,8]=DATA[696,8]=(2.54+1)/2#
DATA[3653:3655,]; DATA[3654,8]=(0.33+0.75)/2#
DATA[5794:5796,]; DATA[5795,8]=(1.08+3.29)/2#
DATA[6176:6178,]; DATA[6177,9]=(2.13+0.21)/2#
# plot(density(DATA))#
#DATA[DATA==0]=0.05#
#
#wind.loc=wind.loc[-12,] ## deleting ROSSLANE lon-lat#
library(sp) # char2dms#
wind.loc$y = as.numeric(char2dms(as.character(wind.loc[["Latitude"]])))#
wind.loc$x = as.numeric(char2dms(as.character(wind.loc[["Longitude"]])))#
coordsLONLAT=cbind(wind.loc$x,wind.loc$y)  ## lonlat coordinates#
#
### graphic of ireland#
coordinates(wind.loc) = ~x+y#
# map("worldHires", xlim = c(-11,-5.4), ylim = c(51,55.5))#
# plot(wind.loc, add=TRUE, pch=16)#
# text(coordinates(wind.loc), pos=1, label=wind.loc$Station)#
############# sinusoidal projecion#
if(distance=="Eucl")#
{ P.sinusoidal <- mapproject(coordsLONLAT[,1],coordsLONLAT[,2],projection="sinusoidal")#
coords<-cbind(P.sinusoidal$x,P.sinusoidal$y)*6378.388#
}#
if(distance=="Geod") coords=coordsLONLAT#
### matrix of spatial great circle or euclidean distances#
if(distance=="Geod") dists2 = rdist.earth(coords, miles=FALSE)#
if(distance=="Eucl") dists2 = dist(coords)#
#
## compact support for weight function in pairwise likelihood#
dd=max(dists2)*1+0.01#
maxtime=2.01#
# maxtime = 100#
## length of data: daily obervations for 18 years (1961-1978) at 12 location sites#
(1978-1961+1)*365*12#
length(as.vector(DATA))#
### there is a  small difference due to years with 366 days#
times = 1:nrow(DATA) # number of temporal realizations#
length(times)#
########################################
#### selecting first kk year#
########################################
kk=5#
ll=365*kk#
times=1:ll#
DATA=DATA[1:ll,]#
###########################
###########################
###########################
#### some tines series#
#par(mfrow=c(3,4))#
wind$time = ISOdate(wind$year+1900, wind$month, wind$day)#
# time series of e.g. Dublin data:#
# plot(DUB~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Dub")#
#plot(CLA~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Cla")#
#plot(RPT ~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Rpt")#
#plot(VAL~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Val")#
#plot(ROS~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Ros")#
#plot(KIL~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Kil")#
#plot(SHA~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Sha")#
#plot(BIR~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Bir")#
#plot(MUL~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Mul")#
#plot(CLO~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Clo")#
#plot(BEL~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Bel")#
#plot(MAL~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Mal")#
######## matrix covariates. #############
nsites<-dim(DATA)[2]   ##number sites#
nt<-dim(DATA)[1]       ## number times#
#
tcoords<-(1:nt)%x%rep(1,dim(coordsLONLAT)[1])#
xycoords<-(rep(1,nt)%x%as.matrix(coordsLONLAT))#
#########################################################################
#########################################################################
#### computing period for spatial sites DUB#
s<-spectrum(wind$DUB)#
periodo<-1/(s$freq[which.max(s$spec)])#
periodo#
############################################
# number of harmonics#
ns<-3#
h<-matrix(0,length(tcoords),2*ns)#
tscale<-365#
for ( i in 1: ns) {#
  h[,(2*(i-1)+1)]<-sin(2*pi*(i)*tcoords/tscale)#
  h[,(2*i)]<-cos(2*pi*(i)*tcoords/tscale)#
}#
#########################################################################
#### matrix of covariates for regression harmonic#
X=as.matrix(cbind(rep(1,nrow(h)),h))#
dim(X)#
#########################################################################
#########################################################################
############## correlation model ########################################
#########################################################################
corrmodel="exp_exp"#
scale_s = 340#
scale_t= 3#
nugget = 0 ## must be fixed#
sill = 1 ## must be fixed#
#########################################################################
#########################################################################
############### Gamma RF estimation #####################################
#########################################################################
#########################################################################
model="Gamma"#
#
mean=log(mean(DATA))#
shape = 6#
start=list(shape=shape,mean=mean,scale_s=scale_s,scale_t=scale_t,mean1=0,mean2=0,mean3=0,mean4=0,mean5=0,mean6=0)#
fixed<-list(nugget=nugget,sill=sill) #
#
GPU = 0 # 0 or 2 GPU denotes de Device we are using, in my Mac it is 0 (8 cores CPU),1 (Iris not for double),2 (AMD for double)#
local = c(1,1) #First component is 8 if GPU is 0. It is 2^n for n>=0 if GPU is 2#
#
# fit2 <- GeoFit(data=DATA,coordx=coords,coordt=times,corrmodel=corrmodel,distance=distance,#
#                maxdist=dd,maxtime=maxtime,likelihood="Marginal",type="Pairwise",model=model,X=X,#
#                start=start,fixed=fixed,GPU=GPU, local = local,varest=TRUE)#
# #
# fit2#
nti <- 43#hasta 42 funciona#
# maxtime = 50#
# fit3 <- GeoFit(data=DATA[1:nti,],coordx=coords,coordt=times[1:nti],corrmodel=corrmodel,distance=distance,#
#                maxdist=dd,maxtime=maxtime,likelihood="Marginal",type="Pairwise",model=model,X=X,#
#                start=start,fixed=fixed,GPU=GPU, local = local,varest=TRUE)#
# #
# fit3#
numtime=1;spacetime_dyn=FALSE;coordx_dyn=NULL;varest=TRUE#
likelihood='Marginal';coordy=NULL;coordx <- coords;coordt <- times[1:nti];data <- DATA[1:nti,]#
CMdl<-CkCorrModel(corrmodel)#
Stime <- CheckST(CMdl)#
# print(spacetime)#
if(Stime && is.null(coordx_dyn) && varest && likelihood=='Marginal')#
{#
  if(is.null(coordy)){coordy <- coordx[,2]#
  coordx <- coordx[,1]}#
  coordx_dyn=list()#
  datatemp=list()#
  for(k in 1:length(coordt))#
  {#
    coordx_dyn[[k]]=cbind(coordx,coordy)#
    datatemp[[k]]=data[k,]#
  }#
  data <- datatemp#
  rm(datatemp)#
}#
score <- sensmat <- varcov <- varimat <- parscale <- NULL#
### Initialization parameters:#
initparam <- WlsStart(coordx=coords, coordy=NULL, coordt=times[1:nti], coordx_dyn=coordx_dyn, corrmodel, data=data, distance="Eucl", "Fitting", fixed=fixed, grid=FALSE,#10#
                      likelihood='Marginal', maxdist=dd, maxtime=maxtime,  model=model, n=1, NULL,#16#
                      parscale, optimizer=='L-BFGS-B', radius=6378.388, start=start, taper=NULL, tapsep=NULL,#22#
                      type="Pairwise", varest=TRUE, vartype='SubSamp', weighted=FALSE, winconst=NULL, winstp=NULL,winconst_t=NULL, winstp_t=NULL, X=X)#31#
numcoord=length(initparam$coordx)#
if(initparam$spacetime) numtime=length(initparam$coordt)#
if(initparam$bivariate) numtime=2#
if(!is.null(coordx_dyn)) spacetime_dyn=TRUE#
dimat <- numcoord*numtime##
NS=cumsum(initparam$ns)#
if(is.null(dim(initparam$X)))#
{#
  X=as.matrix(rep(1,dimat))#
  if((initparam$spacetime||initparam$bivariate)&& spacetime_dyn)  X=as.matrix(rep(1,NS[numtime]))#
}#
num_betas=ncol(X) #
grid = FALSE#
if(grid)    #
{a=expand.grid(initparam$coordx,initparam$coordy);coordx=a[,1];coordy=a[,2]; #
}else {#
  if((initparam$spacetime||initparam$bivariate)&&(!spacetime_dyn)){#
    data=c(t(data))#
    coordx=rep(coordx,numtime);coordy=rep(coordy,numtime)#
  }#
  if((initparam$spacetime||initparam$bivariate)&&(spacetime_dyn)) initparam$data=unlist(initparam$data)          #
}#
if(initparam$spacetime||initparam$bivariate)   NS=c(0,NS)[-(length(initparam$ns)+1)]#
initparam$fixed#
#
dimmat <- initparam$numparam^2#
dmat <- initparam$numparam*(initparam$numparam+1)/2#
eps <- (.Machine$double.eps)^(1/3)#
param <- c(initparam$param, initparam$fixed)#
score <- double(initparam$numparam)#
paramcorr <- param[initparam$namescorr]#
nuisance <- param[initparam$namesnuis]#
sel=substr(names(nuisance),1,4)=="mean"#
mm=as.numeric(nuisance[sel])   ## mean paramteres#
other_nuis=as.numeric(nuisance[!sel]) #
nuisance=c(mm,other_nuis)#
sensmat <- double(dmat);varimat <- double(dmat)#
GD=.C('GodambeMat',as.double(mm),as.integer(initparam$bivariate),as.double(initparam$coordx),as.double(initparam$coordy),#
      as.double(initparam$coordt),as.integer(initparam$corrmodel), as.double(initparam$data),as.integer(initparam$distance),as.double(eps),#
      as.integer(initparam$flagcorr), as.integer(initparam$flagnuis),as.integer(grid),as.integer(initparam$likelihood),#
      as.double(c(X%*%mm)),as.integer(initparam$model),as.double(initparam$n),as.integer(num_betas),#
      as.integer(initparam$numparam),as.integer(initparam$numparamcorr),as.integer(length(paramcorr)),as.double(paramcorr),as.double(nuisance),#
      score=score,sensmat=sensmat,as.integer(initparam$spacetime),as.integer(initparam$type),#
      varimat=varimat,as.integer(initparam$vartype),as.double(initparam$winconst),as.double(initparam$winstp),as.double(initparam$winconst_t),as.double(initparam$winstp_t),#
      as.integer(initparam$weighted),c(t(X)),ns=as.integer(initparam$ns),NS=as.integer(NS),PACKAGE='GeoModels',DUP=TRUE,NAOK=TRUE)#
str(GD)
nti
rm(list = ls())#
## see also  https://rdrr.io/rforge/gstat/man/wind.html#
require(gstat)#
require(mapdata)#
library(GeoModels)#
require(fields)#
require(mapproj)#
par(mfrow=c(1,1))#
#
# Wind Data: Daily average wind speeds for 1961-1978 at 12 synoptic #
# meteorological stations in the Republic of Ireland (Haslett and raftery 1989). #
# Wind speeds are in knots (1 knot = 0.5418 m/s), at each #
# of the stations of Haslett and Raftery#
#
## type of distance#
distance="Eucl" #distance="Geod"#
data("wind", package = "gstat")#
DATA=as.matrix(wind[,4:15])#
#DATA=DATA[,-3]  ### deleting ROSSLANE location site as in previous analysis#
sum(DATA==0)#
## where and when?#
which(DATA==0,arr.ind = T)#
### 16 values = to 0#
### we arbitrary replace 0 with  with the mean of the next and and the previous one (in time)#
DATA[5823:5825,]; DATA[5824,4]=(0.58+0.33)/2#
DATA[1507:1509,]; DATA[1508,6]=(1.58+2.42)/2#
DATA[2152:2154,]; DATA[2153,6]=(0.67+1.46)/2#
DATA[2351:2353,]; DATA[2352,6]=(3.21+0.92)/2#
DATA[3629:3631,]; DATA[3630,6]=(3.63+0.46)/2#
DATA[4053:4055,]; DATA[4054,6]=(4.63+2.50)/2#
DATA[5175:5177,]; DATA[5176,6]=(2.92+2.17)/2#
DATA[5456:5458,]; DATA[5457,6]=(0.13+2.37)/2#
DATA[4707:4709,]; DATA[4708,7]=(0.63+3.29)/2#
DATA[366:369,];   DATA[368,8]=DATA[367,8]=(2.79+3.75)/2#
DATA[694:697,];   DATA[695,8]=DATA[696,8]=(2.54+1)/2#
DATA[3653:3655,]; DATA[3654,8]=(0.33+0.75)/2#
DATA[5794:5796,]; DATA[5795,8]=(1.08+3.29)/2#
DATA[6176:6178,]; DATA[6177,9]=(2.13+0.21)/2#
# plot(density(DATA))#
#DATA[DATA==0]=0.05#
#
#wind.loc=wind.loc[-12,] ## deleting ROSSLANE lon-lat#
library(sp) # char2dms#
wind.loc$y = as.numeric(char2dms(as.character(wind.loc[["Latitude"]])))#
wind.loc$x = as.numeric(char2dms(as.character(wind.loc[["Longitude"]])))#
coordsLONLAT=cbind(wind.loc$x,wind.loc$y)  ## lonlat coordinates#
#
### graphic of ireland#
coordinates(wind.loc) = ~x+y#
# map("worldHires", xlim = c(-11,-5.4), ylim = c(51,55.5))#
# plot(wind.loc, add=TRUE, pch=16)#
# text(coordinates(wind.loc), pos=1, label=wind.loc$Station)#
############# sinusoidal projecion#
if(distance=="Eucl")#
{ P.sinusoidal <- mapproject(coordsLONLAT[,1],coordsLONLAT[,2],projection="sinusoidal")#
coords<-cbind(P.sinusoidal$x,P.sinusoidal$y)*6378.388#
}#
if(distance=="Geod") coords=coordsLONLAT#
### matrix of spatial great circle or euclidean distances#
if(distance=="Geod") dists2 = rdist.earth(coords, miles=FALSE)#
if(distance=="Eucl") dists2 = dist(coords)#
#
## compact support for weight function in pairwise likelihood#
dd=max(dists2)*1+0.01#
maxtime=2.01#
# maxtime = 100#
## length of data: daily obervations for 18 years (1961-1978) at 12 location sites#
(1978-1961+1)*365*12#
length(as.vector(DATA))#
### there is a  small difference due to years with 366 days#
times = 1:nrow(DATA) # number of temporal realizations#
length(times)#
########################################
#### selecting first kk year#
########################################
kk=5#
ll=365*kk#
times=1:ll#
DATA=DATA[1:ll,]#
###########################
###########################
###########################
#### some tines series#
#par(mfrow=c(3,4))#
wind$time = ISOdate(wind$year+1900, wind$month, wind$day)#
# time series of e.g. Dublin data:#
# plot(DUB~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Dub")#
#plot(CLA~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Cla")#
#plot(RPT ~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Rpt")#
#plot(VAL~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Val")#
#plot(ROS~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Ros")#
#plot(KIL~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Kil")#
#plot(SHA~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Sha")#
#plot(BIR~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Bir")#
#plot(MUL~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Mul")#
#plot(CLO~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Clo")#
#plot(BEL~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Bel")#
#plot(MAL~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Mal")#
######## matrix covariates. #############
nsites<-dim(DATA)[2]   ##number sites#
nt<-dim(DATA)[1]       ## number times#
#
tcoords<-(1:nt)%x%rep(1,dim(coordsLONLAT)[1])#
xycoords<-(rep(1,nt)%x%as.matrix(coordsLONLAT))#
#########################################################################
#########################################################################
#### computing period for spatial sites DUB#
s<-spectrum(wind$DUB)#
periodo<-1/(s$freq[which.max(s$spec)])#
periodo#
############################################
# number of harmonics#
ns<-3#
h<-matrix(0,length(tcoords),2*ns)#
tscale<-365#
for ( i in 1: ns) {#
  h[,(2*(i-1)+1)]<-sin(2*pi*(i)*tcoords/tscale)#
  h[,(2*i)]<-cos(2*pi*(i)*tcoords/tscale)#
}#
#########################################################################
#### matrix of covariates for regression harmonic#
X=as.matrix(cbind(rep(1,nrow(h)),h))#
dim(X)#
#########################################################################
#########################################################################
############## correlation model ########################################
#########################################################################
corrmodel="exp_exp"#
scale_s = 340#
scale_t= 3#
nugget = 0 ## must be fixed#
sill = 1 ## must be fixed#
#########################################################################
#########################################################################
############### Gamma RF estimation #####################################
#########################################################################
#########################################################################
model="Gamma"#
#
mean=log(mean(DATA))#
shape = 6#
start=list(shape=shape,mean=mean,scale_s=scale_s,scale_t=scale_t,mean1=0,mean2=0,mean3=0,mean4=0,mean5=0,mean6=0)#
fixed<-list(nugget=nugget,sill=sill) #
#
GPU = 0 # 0 or 2 GPU denotes de Device we are using, in my Mac it is 0 (8 cores CPU),1 (Iris not for double),2 (AMD for double)#
local = c(1,1) #First component is 8 if GPU is 0. It is 2^n for n>=0 if GPU is 2#
#
# fit2 <- GeoFit(data=DATA,coordx=coords,coordt=times,corrmodel=corrmodel,distance=distance,#
#                maxdist=dd,maxtime=maxtime,likelihood="Marginal",type="Pairwise",model=model,X=X,#
#                start=start,fixed=fixed,GPU=GPU, local = local,varest=TRUE)#
# #
# fit2#
nti <- 43#hasta 42 funciona#
# maxtime = 50#
# fit3 <- GeoFit(data=DATA[1:nti,],coordx=coords,coordt=times[1:nti],corrmodel=corrmodel,distance=distance,#
#                maxdist=dd,maxtime=maxtime,likelihood="Marginal",type="Pairwise",model=model,X=X,#
#                start=start,fixed=fixed,GPU=GPU, local = local,varest=TRUE)#
# #
# fit3#
numtime=1;spacetime_dyn=FALSE;coordx_dyn=NULL;varest=TRUE#
likelihood='Marginal';coordy=NULL;coordx <- coords;coordt <- times[1:nti];data <- DATA[1:nti,]#
CMdl<-CkCorrModel(corrmodel)#
Stime <- CheckST(CMdl)#
# print(spacetime)#
if(Stime && is.null(coordx_dyn) && varest && likelihood=='Marginal')#
{#
  if(is.null(coordy)){coordy <- coordx[,2]#
  coordx <- coordx[,1]}#
  coordx_dyn=list()#
  datatemp=list()#
  for(k in 1:length(coordt))#
  {#
    coordx_dyn[[k]]=cbind(coordx,coordy)#
    datatemp[[k]]=data[k,]#
  }#
  data <- datatemp#
  rm(datatemp)#
}#
score <- sensmat <- varcov <- varimat <- parscale <- NULL#
### Initialization parameters:#
initparam <- WlsStart(coordx=coords, coordy=NULL, coordt=times[1:nti], coordx_dyn=coordx_dyn, corrmodel, data=data, distance="Eucl", "Fitting", fixed=fixed, grid=FALSE,#10#
                      likelihood='Marginal', maxdist=dd, maxtime=maxtime,  model=model, n=1, NULL,#16#
                      parscale, optimizer=='L-BFGS-B', radius=6378.388, start=start, taper=NULL, tapsep=NULL,#22#
                      type="Pairwise", varest=TRUE, vartype='SubSamp', weighted=FALSE, winconst=NULL, winstp=NULL,winconst_t=NULL, winstp_t=NULL, X=X)#31#
numcoord=length(initparam$coordx)#
if(initparam$spacetime) numtime=length(initparam$coordt)#
if(initparam$bivariate) numtime=2#
if(!is.null(coordx_dyn)) spacetime_dyn=TRUE#
dimat <- numcoord*numtime##
NS=cumsum(initparam$ns)#
if(is.null(dim(initparam$X)))#
{#
  X=as.matrix(rep(1,dimat))#
  if((initparam$spacetime||initparam$bivariate)&& spacetime_dyn)  X=as.matrix(rep(1,NS[numtime]))#
}#
num_betas=ncol(X) #
grid = FALSE#
if(grid)    #
{a=expand.grid(initparam$coordx,initparam$coordy);coordx=a[,1];coordy=a[,2]; #
}else {#
  if((initparam$spacetime||initparam$bivariate)&&(!spacetime_dyn)){#
    data=c(t(data))#
    coordx=rep(coordx,numtime);coordy=rep(coordy,numtime)#
  }#
  if((initparam$spacetime||initparam$bivariate)&&(spacetime_dyn)) initparam$data=unlist(initparam$data)          #
}#
if(initparam$spacetime||initparam$bivariate)   NS=c(0,NS)[-(length(initparam$ns)+1)]#
initparam$fixed#
#
dimmat <- initparam$numparam^2#
dmat <- initparam$numparam*(initparam$numparam+1)/2#
eps <- (.Machine$double.eps)^(1/3)#
param <- c(initparam$param, initparam$fixed)#
score <- double(initparam$numparam)#
paramcorr <- param[initparam$namescorr]#
nuisance <- param[initparam$namesnuis]#
sel=substr(names(nuisance),1,4)=="mean"#
mm=as.numeric(nuisance[sel])   ## mean paramteres#
other_nuis=as.numeric(nuisance[!sel]) #
nuisance=c(mm,other_nuis)#
sensmat <- double(dmat);varimat <- double(dmat)#
GD=.C('GodambeMat',as.double(mm),as.integer(initparam$bivariate),as.double(initparam$coordx),as.double(initparam$coordy),#
      as.double(initparam$coordt),as.integer(initparam$corrmodel), as.double(initparam$data),as.integer(initparam$distance),as.double(eps),#
      as.integer(initparam$flagcorr), as.integer(initparam$flagnuis),as.integer(grid),as.integer(initparam$likelihood),#
      as.double(c(X%*%mm)),as.integer(initparam$model),as.double(initparam$n),as.integer(num_betas),#
      as.integer(initparam$numparam),as.integer(initparam$numparamcorr),as.integer(length(paramcorr)),as.double(paramcorr),as.double(nuisance),#
      score=score,sensmat=sensmat,as.integer(initparam$spacetime),as.integer(initparam$type),#
      varimat=varimat,as.integer(initparam$vartype),as.double(initparam$winconst),as.double(initparam$winstp),as.double(initparam$winconst_t),as.double(initparam$winstp_t),#
      as.integer(initparam$weighted),c(t(X)),ns=as.integer(initparam$ns),NS=as.integer(NS),PACKAGE='GeoModels',DUP=TRUE,NAOK=TRUE)#
str(GD)
rm(list = ls())#
## see also  https://rdrr.io/rforge/gstat/man/wind.html#
require(gstat)#
require(mapdata)#
library(GeoModels)#
require(fields)#
require(mapproj)#
par(mfrow=c(1,1))#
#
# Wind Data: Daily average wind speeds for 1961-1978 at 12 synoptic #
# meteorological stations in the Republic of Ireland (Haslett and raftery 1989). #
# Wind speeds are in knots (1 knot = 0.5418 m/s), at each #
# of the stations of Haslett and Raftery#
#
## type of distance#
distance="Eucl" #distance="Geod"#
data("wind", package = "gstat")#
DATA=as.matrix(wind[,4:15])#
#DATA=DATA[,-3]  ### deleting ROSSLANE location site as in previous analysis#
sum(DATA==0)#
## where and when?#
which(DATA==0,arr.ind = T)#
### 16 values = to 0#
### we arbitrary replace 0 with  with the mean of the next and and the previous one (in time)#
DATA[5823:5825,]; DATA[5824,4]=(0.58+0.33)/2#
DATA[1507:1509,]; DATA[1508,6]=(1.58+2.42)/2#
DATA[2152:2154,]; DATA[2153,6]=(0.67+1.46)/2#
DATA[2351:2353,]; DATA[2352,6]=(3.21+0.92)/2#
DATA[3629:3631,]; DATA[3630,6]=(3.63+0.46)/2#
DATA[4053:4055,]; DATA[4054,6]=(4.63+2.50)/2#
DATA[5175:5177,]; DATA[5176,6]=(2.92+2.17)/2#
DATA[5456:5458,]; DATA[5457,6]=(0.13+2.37)/2#
DATA[4707:4709,]; DATA[4708,7]=(0.63+3.29)/2#
DATA[366:369,];   DATA[368,8]=DATA[367,8]=(2.79+3.75)/2#
DATA[694:697,];   DATA[695,8]=DATA[696,8]=(2.54+1)/2#
DATA[3653:3655,]; DATA[3654,8]=(0.33+0.75)/2#
DATA[5794:5796,]; DATA[5795,8]=(1.08+3.29)/2#
DATA[6176:6178,]; DATA[6177,9]=(2.13+0.21)/2#
# plot(density(DATA))#
#DATA[DATA==0]=0.05#
#
#wind.loc=wind.loc[-12,] ## deleting ROSSLANE lon-lat#
library(sp) # char2dms#
wind.loc$y = as.numeric(char2dms(as.character(wind.loc[["Latitude"]])))#
wind.loc$x = as.numeric(char2dms(as.character(wind.loc[["Longitude"]])))#
coordsLONLAT=cbind(wind.loc$x,wind.loc$y)  ## lonlat coordinates#
#
### graphic of ireland#
coordinates(wind.loc) = ~x+y#
# map("worldHires", xlim = c(-11,-5.4), ylim = c(51,55.5))#
# plot(wind.loc, add=TRUE, pch=16)#
# text(coordinates(wind.loc), pos=1, label=wind.loc$Station)#
############# sinusoidal projecion#
if(distance=="Eucl")#
{ P.sinusoidal <- mapproject(coordsLONLAT[,1],coordsLONLAT[,2],projection="sinusoidal")#
coords<-cbind(P.sinusoidal$x,P.sinusoidal$y)*6378.388#
}#
if(distance=="Geod") coords=coordsLONLAT#
### matrix of spatial great circle or euclidean distances#
if(distance=="Geod") dists2 = rdist.earth(coords, miles=FALSE)#
if(distance=="Eucl") dists2 = dist(coords)#
#
## compact support for weight function in pairwise likelihood#
dd=max(dists2)*1+0.01#
maxtime=2.01#
# maxtime = 100#
## length of data: daily obervations for 18 years (1961-1978) at 12 location sites#
(1978-1961+1)*365*12#
length(as.vector(DATA))#
### there is a  small difference due to years with 366 days#
times = 1:nrow(DATA) # number of temporal realizations#
length(times)#
########################################
#### selecting first kk year#
########################################
kk=5#
ll=365*kk#
times=1:ll#
DATA=DATA[1:ll,]#
###########################
###########################
###########################
#### some tines series#
#par(mfrow=c(3,4))#
wind$time = ISOdate(wind$year+1900, wind$month, wind$day)#
# time series of e.g. Dublin data:#
# plot(DUB~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Dub")#
#plot(CLA~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Cla")#
#plot(RPT ~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Rpt")#
#plot(VAL~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Val")#
#plot(ROS~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Ros")#
#plot(KIL~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Kil")#
#plot(SHA~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Sha")#
#plot(BIR~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Bir")#
#plot(MUL~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Mul")#
#plot(CLO~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Clo")#
#plot(BEL~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Bel")#
#plot(MAL~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Mal")#
######## matrix covariates. #############
nsites<-dim(DATA)[2]   ##number sites#
nt<-dim(DATA)[1]       ## number times#
#
tcoords<-(1:nt)%x%rep(1,dim(coordsLONLAT)[1])#
xycoords<-(rep(1,nt)%x%as.matrix(coordsLONLAT))#
#########################################################################
#########################################################################
#### computing period for spatial sites DUB#
s<-spectrum(wind$DUB)#
periodo<-1/(s$freq[which.max(s$spec)])#
periodo#
############################################
# number of harmonics#
ns<-3#
h<-matrix(0,length(tcoords),2*ns)#
tscale<-365#
for ( i in 1: ns) {#
  h[,(2*(i-1)+1)]<-sin(2*pi*(i)*tcoords/tscale)#
  h[,(2*i)]<-cos(2*pi*(i)*tcoords/tscale)#
}#
#########################################################################
#### matrix of covariates for regression harmonic#
X=as.matrix(cbind(rep(1,nrow(h)),h))#
dim(X)#
#########################################################################
#########################################################################
############## correlation model ########################################
#########################################################################
corrmodel="exp_exp"#
scale_s = 340#
scale_t= 3#
nugget = 0 ## must be fixed#
sill = 1 ## must be fixed#
#########################################################################
#########################################################################
############### Gamma RF estimation #####################################
#########################################################################
#########################################################################
model="Gamma"#
#
mean=log(mean(DATA))#
shape = 6#
start=list(shape=shape,mean=mean,scale_s=scale_s,scale_t=scale_t,mean1=0,mean2=0,mean3=0,mean4=0,mean5=0,mean6=0)#
fixed<-list(nugget=nugget,sill=sill) #
#
GPU = 0 # 0 or 2 GPU denotes de Device we are using, in my Mac it is 0 (8 cores CPU),1 (Iris not for double),2 (AMD for double)#
local = c(1,1) #First component is 8 if GPU is 0. It is 2^n for n>=0 if GPU is 2#
#
# fit2 <- GeoFit(data=DATA,coordx=coords,coordt=times,corrmodel=corrmodel,distance=distance,#
#                maxdist=dd,maxtime=maxtime,likelihood="Marginal",type="Pairwise",model=model,X=X,#
#                start=start,fixed=fixed,GPU=GPU, local = local,varest=TRUE)#
# #
# fit2#
nti <- 45#hasta 42 funciona#
# maxtime = 50#
# fit3 <- GeoFit(data=DATA[1:nti,],coordx=coords,coordt=times[1:nti],corrmodel=corrmodel,distance=distance,#
#                maxdist=dd,maxtime=maxtime,likelihood="Marginal",type="Pairwise",model=model,X=X,#
#                start=start,fixed=fixed,GPU=GPU, local = local,varest=TRUE)#
# #
# fit3#
numtime=1;spacetime_dyn=FALSE;coordx_dyn=NULL;varest=TRUE#
likelihood='Marginal';coordy=NULL;coordx <- coords;coordt <- times[1:nti];data <- DATA[1:nti,]#
CMdl<-CkCorrModel(corrmodel)#
Stime <- CheckST(CMdl)#
# print(spacetime)#
if(Stime && is.null(coordx_dyn) && varest && likelihood=='Marginal')#
{#
  if(is.null(coordy)){coordy <- coordx[,2]#
  coordx <- coordx[,1]}#
  coordx_dyn=list()#
  datatemp=list()#
  for(k in 1:length(coordt))#
  {#
    coordx_dyn[[k]]=cbind(coordx,coordy)#
    datatemp[[k]]=data[k,]#
  }#
  data <- datatemp#
  rm(datatemp)#
}#
score <- sensmat <- varcov <- varimat <- parscale <- NULL#
### Initialization parameters:#
initparam <- WlsStart(coordx=coords, coordy=NULL, coordt=times[1:nti], coordx_dyn=coordx_dyn, corrmodel, data=data, distance="Eucl", "Fitting", fixed=fixed, grid=FALSE,#10#
                      likelihood='Marginal', maxdist=dd, maxtime=maxtime,  model=model, n=1, NULL,#16#
                      parscale, optimizer=='L-BFGS-B', radius=6378.388, start=start, taper=NULL, tapsep=NULL,#22#
                      type="Pairwise", varest=TRUE, vartype='SubSamp', weighted=FALSE, winconst=NULL, winstp=NULL,winconst_t=NULL, winstp_t=NULL, X=X)#31#
numcoord=length(initparam$coordx)#
if(initparam$spacetime) numtime=length(initparam$coordt)#
if(initparam$bivariate) numtime=2#
if(!is.null(coordx_dyn)) spacetime_dyn=TRUE#
dimat <- numcoord*numtime##
NS=cumsum(initparam$ns)#
if(is.null(dim(initparam$X)))#
{#
  X=as.matrix(rep(1,dimat))#
  if((initparam$spacetime||initparam$bivariate)&& spacetime_dyn)  X=as.matrix(rep(1,NS[numtime]))#
}#
num_betas=ncol(X) #
grid = FALSE#
if(grid)    #
{a=expand.grid(initparam$coordx,initparam$coordy);coordx=a[,1];coordy=a[,2]; #
}else {#
  if((initparam$spacetime||initparam$bivariate)&&(!spacetime_dyn)){#
    data=c(t(data))#
    coordx=rep(coordx,numtime);coordy=rep(coordy,numtime)#
  }#
  if((initparam$spacetime||initparam$bivariate)&&(spacetime_dyn)) initparam$data=unlist(initparam$data)          #
}#
if(initparam$spacetime||initparam$bivariate)   NS=c(0,NS)[-(length(initparam$ns)+1)]#
initparam$fixed#
#
dimmat <- initparam$numparam^2#
dmat <- initparam$numparam*(initparam$numparam+1)/2#
eps <- (.Machine$double.eps)^(1/3)#
param <- c(initparam$param, initparam$fixed)#
score <- double(initparam$numparam)#
paramcorr <- param[initparam$namescorr]#
nuisance <- param[initparam$namesnuis]#
sel=substr(names(nuisance),1,4)=="mean"#
mm=as.numeric(nuisance[sel])   ## mean paramteres#
other_nuis=as.numeric(nuisance[!sel]) #
nuisance=c(mm,other_nuis)#
sensmat <- double(dmat);varimat <- double(dmat)#
GD=.C('GodambeMat',as.double(mm),as.integer(initparam$bivariate),as.double(initparam$coordx),as.double(initparam$coordy),#
      as.double(initparam$coordt),as.integer(initparam$corrmodel), as.double(initparam$data),as.integer(initparam$distance),as.double(eps),#
      as.integer(initparam$flagcorr), as.integer(initparam$flagnuis),as.integer(grid),as.integer(initparam$likelihood),#
      as.double(c(X%*%mm)),as.integer(initparam$model),as.double(initparam$n),as.integer(num_betas),#
      as.integer(initparam$numparam),as.integer(initparam$numparamcorr),as.integer(length(paramcorr)),as.double(paramcorr),as.double(nuisance),#
      score=score,sensmat=sensmat,as.integer(initparam$spacetime),as.integer(initparam$type),#
      varimat=varimat,as.integer(initparam$vartype),as.double(initparam$winconst),as.double(initparam$winstp),as.double(initparam$winconst_t),as.double(initparam$winstp_t),#
      as.integer(initparam$weighted),c(t(X)),ns=as.integer(initparam$ns),NS=as.integer(NS),PACKAGE='GeoModels',DUP=TRUE,NAOK=TRUE)#
str(GD)
rm(list = ls())#
## see also  https://rdrr.io/rforge/gstat/man/wind.html#
require(gstat)#
require(mapdata)#
library(GeoModels)#
require(fields)#
require(mapproj)#
par(mfrow=c(1,1))#
#
# Wind Data: Daily average wind speeds for 1961-1978 at 12 synoptic #
# meteorological stations in the Republic of Ireland (Haslett and raftery 1989). #
# Wind speeds are in knots (1 knot = 0.5418 m/s), at each #
# of the stations of Haslett and Raftery#
#
## type of distance#
distance="Eucl" #distance="Geod"#
data("wind", package = "gstat")#
DATA=as.matrix(wind[,4:15])#
#DATA=DATA[,-3]  ### deleting ROSSLANE location site as in previous analysis#
sum(DATA==0)#
## where and when?#
which(DATA==0,arr.ind = T)#
### 16 values = to 0#
### we arbitrary replace 0 with  with the mean of the next and and the previous one (in time)#
DATA[5823:5825,]; DATA[5824,4]=(0.58+0.33)/2#
DATA[1507:1509,]; DATA[1508,6]=(1.58+2.42)/2#
DATA[2152:2154,]; DATA[2153,6]=(0.67+1.46)/2#
DATA[2351:2353,]; DATA[2352,6]=(3.21+0.92)/2#
DATA[3629:3631,]; DATA[3630,6]=(3.63+0.46)/2#
DATA[4053:4055,]; DATA[4054,6]=(4.63+2.50)/2#
DATA[5175:5177,]; DATA[5176,6]=(2.92+2.17)/2#
DATA[5456:5458,]; DATA[5457,6]=(0.13+2.37)/2#
DATA[4707:4709,]; DATA[4708,7]=(0.63+3.29)/2#
DATA[366:369,];   DATA[368,8]=DATA[367,8]=(2.79+3.75)/2#
DATA[694:697,];   DATA[695,8]=DATA[696,8]=(2.54+1)/2#
DATA[3653:3655,]; DATA[3654,8]=(0.33+0.75)/2#
DATA[5794:5796,]; DATA[5795,8]=(1.08+3.29)/2#
DATA[6176:6178,]; DATA[6177,9]=(2.13+0.21)/2#
# plot(density(DATA))#
#DATA[DATA==0]=0.05#
#
#wind.loc=wind.loc[-12,] ## deleting ROSSLANE lon-lat#
library(sp) # char2dms#
wind.loc$y = as.numeric(char2dms(as.character(wind.loc[["Latitude"]])))#
wind.loc$x = as.numeric(char2dms(as.character(wind.loc[["Longitude"]])))#
coordsLONLAT=cbind(wind.loc$x,wind.loc$y)  ## lonlat coordinates#
#
### graphic of ireland#
coordinates(wind.loc) = ~x+y#
# map("worldHires", xlim = c(-11,-5.4), ylim = c(51,55.5))#
# plot(wind.loc, add=TRUE, pch=16)#
# text(coordinates(wind.loc), pos=1, label=wind.loc$Station)#
############# sinusoidal projecion#
if(distance=="Eucl")#
{ P.sinusoidal <- mapproject(coordsLONLAT[,1],coordsLONLAT[,2],projection="sinusoidal")#
coords<-cbind(P.sinusoidal$x,P.sinusoidal$y)*6378.388#
}#
if(distance=="Geod") coords=coordsLONLAT#
### matrix of spatial great circle or euclidean distances#
if(distance=="Geod") dists2 = rdist.earth(coords, miles=FALSE)#
if(distance=="Eucl") dists2 = dist(coords)#
#
## compact support for weight function in pairwise likelihood#
dd=max(dists2)*1+0.01#
maxtime=2.01#
# maxtime = 100#
## length of data: daily obervations for 18 years (1961-1978) at 12 location sites#
(1978-1961+1)*365*12#
length(as.vector(DATA))#
### there is a  small difference due to years with 366 days#
times = 1:nrow(DATA) # number of temporal realizations#
length(times)#
########################################
#### selecting first kk year#
########################################
kk=5#
ll=365*kk#
times=1:ll#
DATA=DATA[1:ll,]#
###########################
###########################
###########################
#### some tines series#
#par(mfrow=c(3,4))#
wind$time = ISOdate(wind$year+1900, wind$month, wind$day)#
# time series of e.g. Dublin data:#
# plot(DUB~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Dub")#
#plot(CLA~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Cla")#
#plot(RPT ~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Rpt")#
#plot(VAL~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Val")#
#plot(ROS~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Ros")#
#plot(KIL~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Kil")#
#plot(SHA~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Sha")#
#plot(BIR~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Bir")#
#plot(MUL~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Mul")#
#plot(CLO~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Clo")#
#plot(BEL~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Bel")#
#plot(MAL~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Mal")#
######## matrix covariates. #############
nsites<-dim(DATA)[2]   ##number sites#
nt<-dim(DATA)[1]       ## number times#
#
tcoords<-(1:nt)%x%rep(1,dim(coordsLONLAT)[1])#
xycoords<-(rep(1,nt)%x%as.matrix(coordsLONLAT))#
#########################################################################
#########################################################################
#### computing period for spatial sites DUB#
s<-spectrum(wind$DUB)#
periodo<-1/(s$freq[which.max(s$spec)])#
periodo#
############################################
# number of harmonics#
ns<-3#
h<-matrix(0,length(tcoords),2*ns)#
tscale<-365#
for ( i in 1: ns) {#
  h[,(2*(i-1)+1)]<-sin(2*pi*(i)*tcoords/tscale)#
  h[,(2*i)]<-cos(2*pi*(i)*tcoords/tscale)#
}#
#########################################################################
#### matrix of covariates for regression harmonic#
X=as.matrix(cbind(rep(1,nrow(h)),h))#
dim(X)#
#########################################################################
#########################################################################
############## correlation model ########################################
#########################################################################
corrmodel="exp_exp"#
scale_s = 340#
scale_t= 3#
nugget = 0 ## must be fixed#
sill = 1 ## must be fixed#
#########################################################################
#########################################################################
############### Gamma RF estimation #####################################
#########################################################################
#########################################################################
model="Gamma"#
#
mean=log(mean(DATA))#
shape = 6#
start=list(shape=shape,mean=mean,scale_s=scale_s,scale_t=scale_t,mean1=0,mean2=0,mean3=0,mean4=0,mean5=0,mean6=0)#
fixed<-list(nugget=nugget,sill=sill) #
#
GPU = 0 # 0 or 2 GPU denotes de Device we are using, in my Mac it is 0 (8 cores CPU),1 (Iris not for double),2 (AMD for double)#
local = c(1,1) #First component is 8 if GPU is 0. It is 2^n for n>=0 if GPU is 2#
#
# fit2 <- GeoFit(data=DATA,coordx=coords,coordt=times,corrmodel=corrmodel,distance=distance,#
#                maxdist=dd,maxtime=maxtime,likelihood="Marginal",type="Pairwise",model=model,X=X,#
#                start=start,fixed=fixed,GPU=GPU, local = local,varest=TRUE)#
# #
# fit2#
nti <- 20#hasta 42 funciona#
# maxtime = 50#
# fit3 <- GeoFit(data=DATA[1:nti,],coordx=coords,coordt=times[1:nti],corrmodel=corrmodel,distance=distance,#
#                maxdist=dd,maxtime=maxtime,likelihood="Marginal",type="Pairwise",model=model,X=X,#
#                start=start,fixed=fixed,GPU=GPU, local = local,varest=TRUE)#
# #
# fit3#
#
# fit3 <- GeoFit(data=DATA[1:nti,],coordx=coords,coordt=times[1:nti],corrmodel=corrmodel,distance=distance,#
#                maxdist=dd,maxtime=maxtime,likelihood="Marginal",type="Pairwise",model=model,X=X,#
#                start=start,fixed=fixed,varest=TRUE)#
# #
# fit3#
numtime=1;spacetime_dyn=FALSE;coordx_dyn=NULL;varest=TRUE#
likelihood='Marginal';coordy=NULL;coordx <- coords;coordt <- times[1:nti];data <- DATA[1:nti,]#
CMdl<-CkCorrModel(corrmodel)#
Stime <- CheckST(CMdl)#
# print(spacetime)#
if(Stime && is.null(coordx_dyn) && varest && likelihood=='Marginal')#
{#
  if(is.null(coordy)){coordy <- coordx[,2]#
  coordx <- coordx[,1]}#
  coordx_dyn=list()#
  datatemp=list()#
  for(k in 1:length(coordt))#
  {#
    coordx_dyn[[k]]=cbind(coordx,coordy)#
    datatemp[[k]]=data[k,]#
  }#
  data <- datatemp#
  rm(datatemp)#
}#
score <- sensmat <- varcov <- varimat <- parscale <- NULL#
### Initialization parameters:#
initparam <- WlsStart(coordx=coords, coordy=NULL, coordt=times[1:nti], coordx_dyn=coordx_dyn, corrmodel, data=data, distance="Eucl", "Fitting", fixed=fixed, grid=FALSE,#10#
                      likelihood='Marginal', maxdist=dd, maxtime=maxtime,  model=model, n=1, NULL,#16#
                      parscale, optimizer=='L-BFGS-B', radius=6378.388, start=start, taper=NULL, tapsep=NULL,#22#
                      type="Pairwise", varest=TRUE, vartype='SubSamp', weighted=FALSE, winconst=NULL, winstp=NULL,winconst_t=NULL, winstp_t=NULL, X=X)#31#
numcoord=length(initparam$coordx)#
if(initparam$spacetime) numtime=length(initparam$coordt)#
if(initparam$bivariate) numtime=2#
if(!is.null(coordx_dyn)) spacetime_dyn=TRUE#
dimat <- numcoord*numtime##
NS=cumsum(initparam$ns)#
if(is.null(dim(initparam$X)))#
{#
  X=as.matrix(rep(1,dimat))#
  if((initparam$spacetime||initparam$bivariate)&& spacetime_dyn)  X=as.matrix(rep(1,NS[numtime]))#
}#
num_betas=ncol(X) #
grid = FALSE#
if(grid)    #
{a=expand.grid(initparam$coordx,initparam$coordy);coordx=a[,1];coordy=a[,2]; #
}else {#
  if((initparam$spacetime||initparam$bivariate)&&(!spacetime_dyn)){#
    data=c(t(data))#
    coordx=rep(coordx,numtime);coordy=rep(coordy,numtime)#
  }#
  if((initparam$spacetime||initparam$bivariate)&&(spacetime_dyn)) initparam$data=unlist(initparam$data)          #
}#
if(initparam$spacetime||initparam$bivariate)   NS=c(0,NS)[-(length(initparam$ns)+1)]#
initparam$fixed#
#
dimmat <- initparam$numparam^2#
dmat <- initparam$numparam*(initparam$numparam+1)/2#
eps <- (.Machine$double.eps)^(1/3)#
param <- c(initparam$param, initparam$fixed)#
score <- double(initparam$numparam)#
paramcorr <- param[initparam$namescorr]#
nuisance <- param[initparam$namesnuis]#
sel=substr(names(nuisance),1,4)=="mean"#
mm=as.numeric(nuisance[sel])   ## mean paramteres#
other_nuis=as.numeric(nuisance[!sel]) #
nuisance=c(mm,other_nuis)#
sensmat <- double(dmat);varimat <- double(dmat)#
GD=.C('GodambeMat',as.double(mm),as.integer(initparam$bivariate),as.double(initparam$coordx),as.double(initparam$coordy),#
      as.double(initparam$coordt),as.integer(initparam$corrmodel), as.double(initparam$data),as.integer(initparam$distance),as.double(eps),#
      as.integer(initparam$flagcorr), as.integer(initparam$flagnuis),as.integer(grid),as.integer(initparam$likelihood),#
      as.double(c(X%*%mm)),as.integer(initparam$model),as.double(initparam$n),as.integer(num_betas),#
      as.integer(initparam$numparam),as.integer(initparam$numparamcorr),as.integer(length(paramcorr)),as.double(paramcorr),as.double(nuisance),#
      score=score,sensmat=sensmat,as.integer(initparam$spacetime),as.integer(initparam$type),#
      varimat=varimat,as.integer(initparam$vartype),as.double(initparam$winconst),as.double(initparam$winstp),as.double(initparam$winconst_t),as.double(initparam$winstp_t),#
      as.integer(initparam$weighted),c(t(X)),ns=as.integer(initparam$ns),NS=as.integer(NS),PACKAGE='GeoModels',DUP=TRUE,NAOK=TRUE)#
str(GD)
rm(list = ls())#
## see also  https://rdrr.io/rforge/gstat/man/wind.html#
require(gstat)#
require(mapdata)#
library(GeoModels)#
require(fields)#
require(mapproj)#
par(mfrow=c(1,1))#
#
# Wind Data: Daily average wind speeds for 1961-1978 at 12 synoptic #
# meteorological stations in the Republic of Ireland (Haslett and raftery 1989). #
# Wind speeds are in knots (1 knot = 0.5418 m/s), at each #
# of the stations of Haslett and Raftery#
#
## type of distance#
distance="Eucl" #distance="Geod"#
data("wind", package = "gstat")#
DATA=as.matrix(wind[,4:15])#
#DATA=DATA[,-3]  ### deleting ROSSLANE location site as in previous analysis#
sum(DATA==0)#
## where and when?#
which(DATA==0,arr.ind = T)#
### 16 values = to 0#
### we arbitrary replace 0 with  with the mean of the next and and the previous one (in time)#
DATA[5823:5825,]; DATA[5824,4]=(0.58+0.33)/2#
DATA[1507:1509,]; DATA[1508,6]=(1.58+2.42)/2#
DATA[2152:2154,]; DATA[2153,6]=(0.67+1.46)/2#
DATA[2351:2353,]; DATA[2352,6]=(3.21+0.92)/2#
DATA[3629:3631,]; DATA[3630,6]=(3.63+0.46)/2#
DATA[4053:4055,]; DATA[4054,6]=(4.63+2.50)/2#
DATA[5175:5177,]; DATA[5176,6]=(2.92+2.17)/2#
DATA[5456:5458,]; DATA[5457,6]=(0.13+2.37)/2#
DATA[4707:4709,]; DATA[4708,7]=(0.63+3.29)/2#
DATA[366:369,];   DATA[368,8]=DATA[367,8]=(2.79+3.75)/2#
DATA[694:697,];   DATA[695,8]=DATA[696,8]=(2.54+1)/2#
DATA[3653:3655,]; DATA[3654,8]=(0.33+0.75)/2#
DATA[5794:5796,]; DATA[5795,8]=(1.08+3.29)/2#
DATA[6176:6178,]; DATA[6177,9]=(2.13+0.21)/2#
# plot(density(DATA))#
#DATA[DATA==0]=0.05#
#
#wind.loc=wind.loc[-12,] ## deleting ROSSLANE lon-lat#
library(sp) # char2dms#
wind.loc$y = as.numeric(char2dms(as.character(wind.loc[["Latitude"]])))#
wind.loc$x = as.numeric(char2dms(as.character(wind.loc[["Longitude"]])))#
coordsLONLAT=cbind(wind.loc$x,wind.loc$y)  ## lonlat coordinates#
#
### graphic of ireland#
coordinates(wind.loc) = ~x+y#
# map("worldHires", xlim = c(-11,-5.4), ylim = c(51,55.5))#
# plot(wind.loc, add=TRUE, pch=16)#
# text(coordinates(wind.loc), pos=1, label=wind.loc$Station)#
############# sinusoidal projecion#
if(distance=="Eucl")#
{ P.sinusoidal <- mapproject(coordsLONLAT[,1],coordsLONLAT[,2],projection="sinusoidal")#
coords<-cbind(P.sinusoidal$x,P.sinusoidal$y)*6378.388#
}#
if(distance=="Geod") coords=coordsLONLAT#
### matrix of spatial great circle or euclidean distances#
if(distance=="Geod") dists2 = rdist.earth(coords, miles=FALSE)#
if(distance=="Eucl") dists2 = dist(coords)#
#
## compact support for weight function in pairwise likelihood#
dd=max(dists2)*1+0.01#
maxtime=2.01#
# maxtime = 100#
## length of data: daily obervations for 18 years (1961-1978) at 12 location sites#
(1978-1961+1)*365*12#
length(as.vector(DATA))#
### there is a  small difference due to years with 366 days#
times = 1:nrow(DATA) # number of temporal realizations#
length(times)#
########################################
#### selecting first kk year#
########################################
kk=5#
ll=365*kk#
times=1:ll#
DATA=DATA[1:ll,]#
###########################
###########################
###########################
#### some tines series#
#par(mfrow=c(3,4))#
wind$time = ISOdate(wind$year+1900, wind$month, wind$day)#
# time series of e.g. Dublin data:#
# plot(DUB~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Dub")#
#plot(CLA~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Cla")#
#plot(RPT ~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Rpt")#
#plot(VAL~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Val")#
#plot(ROS~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Ros")#
#plot(KIL~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Kil")#
#plot(SHA~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Sha")#
#plot(BIR~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Bir")#
#plot(MUL~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Mul")#
#plot(CLO~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Clo")#
#plot(BEL~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Bel")#
#plot(MAL~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Mal")#
######## matrix covariates. #############
nsites<-dim(DATA)[2]   ##number sites#
nt<-dim(DATA)[1]       ## number times#
#
tcoords<-(1:nt)%x%rep(1,dim(coordsLONLAT)[1])#
xycoords<-(rep(1,nt)%x%as.matrix(coordsLONLAT))#
#########################################################################
#########################################################################
#### computing period for spatial sites DUB#
s<-spectrum(wind$DUB)#
periodo<-1/(s$freq[which.max(s$spec)])#
periodo#
############################################
# number of harmonics#
ns<-3#
h<-matrix(0,length(tcoords),2*ns)#
tscale<-365#
for ( i in 1: ns) {#
  h[,(2*(i-1)+1)]<-sin(2*pi*(i)*tcoords/tscale)#
  h[,(2*i)]<-cos(2*pi*(i)*tcoords/tscale)#
}#
#########################################################################
#### matrix of covariates for regression harmonic#
X=as.matrix(cbind(rep(1,nrow(h)),h))#
dim(X)#
#########################################################################
#########################################################################
############## correlation model ########################################
#########################################################################
corrmodel="exp_exp"#
scale_s = 340#
scale_t= 3#
nugget = 0 ## must be fixed#
sill = 1 ## must be fixed#
#########################################################################
#########################################################################
############### Gamma RF estimation #####################################
#########################################################################
#########################################################################
model="Gamma"#
#
mean=log(mean(DATA))#
shape = 6#
start=list(shape=shape,mean=mean,scale_s=scale_s,scale_t=scale_t,mean1=0,mean2=0,mean3=0,mean4=0,mean5=0,mean6=0)#
fixed<-list(nugget=nugget,sill=sill) #
#
GPU = 0 # 0 or 2 GPU denotes de Device we are using, in my Mac it is 0 (8 cores CPU),1 (Iris not for double),2 (AMD for double)#
local = c(1,1) #First component is 8 if GPU is 0. It is 2^n for n>=0 if GPU is 2#
#
# fit2 <- GeoFit(data=DATA,coordx=coords,coordt=times,corrmodel=corrmodel,distance=distance,#
#                maxdist=dd,maxtime=maxtime,likelihood="Marginal",type="Pairwise",model=model,X=X,#
#                start=start,fixed=fixed,GPU=GPU, local = local,varest=TRUE)#
# #
# fit2#
nti <- 12#hasta 42 funciona#
# maxtime = 50#
# fit3 <- GeoFit(data=DATA[1:nti,],coordx=coords,coordt=times[1:nti],corrmodel=corrmodel,distance=distance,#
#                maxdist=dd,maxtime=maxtime,likelihood="Marginal",type="Pairwise",model=model,X=X,#
#                start=start,fixed=fixed,GPU=GPU, local = local,varest=TRUE)#
# #
# fit3#
#
# fit3 <- GeoFit(data=DATA[1:nti,],coordx=coords,coordt=times[1:nti],corrmodel=corrmodel,distance=distance,#
#                maxdist=dd,maxtime=maxtime,likelihood="Marginal",type="Pairwise",model=model,X=X,#
#                start=start,fixed=fixed,varest=TRUE)#
# #
# fit3#
numtime=1;spacetime_dyn=FALSE;coordx_dyn=NULL;varest=TRUE#
likelihood='Marginal';coordy=NULL;coordx <- coords;coordt <- times[1:nti];data <- DATA[1:nti,]#
CMdl<-CkCorrModel(corrmodel)#
Stime <- CheckST(CMdl)#
# print(spacetime)#
if(Stime && is.null(coordx_dyn) && varest && likelihood=='Marginal')#
{#
  if(is.null(coordy)){coordy <- coordx[,2]#
  coordx <- coordx[,1]}#
  coordx_dyn=list()#
  datatemp=list()#
  for(k in 1:length(coordt))#
  {#
    coordx_dyn[[k]]=cbind(coordx,coordy)#
    datatemp[[k]]=data[k,]#
  }#
  data <- datatemp#
  rm(datatemp)#
}#
score <- sensmat <- varcov <- varimat <- parscale <- NULL#
### Initialization parameters:#
initparam <- WlsStart(coordx=coords, coordy=NULL, coordt=times[1:nti], coordx_dyn=coordx_dyn, corrmodel, data=data, distance="Eucl", "Fitting", fixed=fixed, grid=FALSE,#10#
                      likelihood='Marginal', maxdist=dd, maxtime=maxtime,  model=model, n=1, NULL,#16#
                      parscale, optimizer=='L-BFGS-B', radius=6378.388, start=start, taper=NULL, tapsep=NULL,#22#
                      type="Pairwise", varest=TRUE, vartype='SubSamp', weighted=FALSE, winconst=NULL, winstp=NULL,winconst_t=NULL, winstp_t=NULL, X=X)#31#
numcoord=length(initparam$coordx)#
if(initparam$spacetime) numtime=length(initparam$coordt)#
if(initparam$bivariate) numtime=2#
if(!is.null(coordx_dyn)) spacetime_dyn=TRUE#
dimat <- numcoord*numtime##
NS=cumsum(initparam$ns)#
if(is.null(dim(initparam$X)))#
{#
  X=as.matrix(rep(1,dimat))#
  if((initparam$spacetime||initparam$bivariate)&& spacetime_dyn)  X=as.matrix(rep(1,NS[numtime]))#
}#
num_betas=ncol(X) #
grid = FALSE#
if(grid)    #
{a=expand.grid(initparam$coordx,initparam$coordy);coordx=a[,1];coordy=a[,2]; #
}else {#
  if((initparam$spacetime||initparam$bivariate)&&(!spacetime_dyn)){#
    data=c(t(data))#
    coordx=rep(coordx,numtime);coordy=rep(coordy,numtime)#
  }#
  if((initparam$spacetime||initparam$bivariate)&&(spacetime_dyn)) initparam$data=unlist(initparam$data)          #
}#
if(initparam$spacetime||initparam$bivariate)   NS=c(0,NS)[-(length(initparam$ns)+1)]#
initparam$fixed#
#
dimmat <- initparam$numparam^2#
dmat <- initparam$numparam*(initparam$numparam+1)/2#
eps <- (.Machine$double.eps)^(1/3)#
param <- c(initparam$param, initparam$fixed)#
score <- double(initparam$numparam)#
paramcorr <- param[initparam$namescorr]#
nuisance <- param[initparam$namesnuis]#
sel=substr(names(nuisance),1,4)=="mean"#
mm=as.numeric(nuisance[sel])   ## mean paramteres#
other_nuis=as.numeric(nuisance[!sel]) #
nuisance=c(mm,other_nuis)#
sensmat <- double(dmat);varimat <- double(dmat)#
GD=.C('GodambeMat',as.double(mm),as.integer(initparam$bivariate),as.double(initparam$coordx),as.double(initparam$coordy),#
      as.double(initparam$coordt),as.integer(initparam$corrmodel), as.double(initparam$data),as.integer(initparam$distance),as.double(eps),#
      as.integer(initparam$flagcorr), as.integer(initparam$flagnuis),as.integer(grid),as.integer(initparam$likelihood),#
      as.double(c(X%*%mm)),as.integer(initparam$model),as.double(initparam$n),as.integer(num_betas),#
      as.integer(initparam$numparam),as.integer(initparam$numparamcorr),as.integer(length(paramcorr)),as.double(paramcorr),as.double(nuisance),#
      score=score,sensmat=sensmat,as.integer(initparam$spacetime),as.integer(initparam$type),#
      varimat=varimat,as.integer(initparam$vartype),as.double(initparam$winconst),as.double(initparam$winstp),as.double(initparam$winconst_t),as.double(initparam$winstp_t),#
      as.integer(initparam$weighted),c(t(X)),ns=as.integer(initparam$ns),NS=as.integer(NS),PACKAGE='GeoModels',DUP=TRUE,NAOK=TRUE)#
str(GD)#
# fit3 <- GeoFit(data=DATA[1:nti,],coordx=coords,coordt=times[1:nti],corrmodel=corrmodel,distance=distance,#
#                maxdist=dd,maxtime=maxtime,likelihood="Marginal",type="Pairwise",model=model,X=X,#
#                start=start,fixed=fixed,GPU=GPU, local = local,varest=TRUE)#
# #
# fit3
summary(dist(coords))
rm(list = ls())#
## see also  https://rdrr.io/rforge/gstat/man/wind.html#
require(gstat)#
require(mapdata)#
library(GeoModels)#
require(fields)#
require(mapproj)#
par(mfrow=c(1,1))#
#
# Wind Data: Daily average wind speeds for 1961-1978 at 12 synoptic #
# meteorological stations in the Republic of Ireland (Haslett and raftery 1989). #
# Wind speeds are in knots (1 knot = 0.5418 m/s), at each #
# of the stations of Haslett and Raftery#
#
## type of distance#
distance="Eucl" #distance="Geod"#
data("wind", package = "gstat")#
DATA=as.matrix(wind[,4:15])#
#DATA=DATA[,-3]  ### deleting ROSSLANE location site as in previous analysis#
sum(DATA==0)#
## where and when?#
which(DATA==0,arr.ind = T)#
### 16 values = to 0#
### we arbitrary replace 0 with  with the mean of the next and and the previous one (in time)#
DATA[5823:5825,]; DATA[5824,4]=(0.58+0.33)/2#
DATA[1507:1509,]; DATA[1508,6]=(1.58+2.42)/2#
DATA[2152:2154,]; DATA[2153,6]=(0.67+1.46)/2#
DATA[2351:2353,]; DATA[2352,6]=(3.21+0.92)/2#
DATA[3629:3631,]; DATA[3630,6]=(3.63+0.46)/2#
DATA[4053:4055,]; DATA[4054,6]=(4.63+2.50)/2#
DATA[5175:5177,]; DATA[5176,6]=(2.92+2.17)/2#
DATA[5456:5458,]; DATA[5457,6]=(0.13+2.37)/2#
DATA[4707:4709,]; DATA[4708,7]=(0.63+3.29)/2#
DATA[366:369,];   DATA[368,8]=DATA[367,8]=(2.79+3.75)/2#
DATA[694:697,];   DATA[695,8]=DATA[696,8]=(2.54+1)/2#
DATA[3653:3655,]; DATA[3654,8]=(0.33+0.75)/2#
DATA[5794:5796,]; DATA[5795,8]=(1.08+3.29)/2#
DATA[6176:6178,]; DATA[6177,9]=(2.13+0.21)/2#
# plot(density(DATA))#
#DATA[DATA==0]=0.05#
#
#wind.loc=wind.loc[-12,] ## deleting ROSSLANE lon-lat#
library(sp) # char2dms#
wind.loc$y = as.numeric(char2dms(as.character(wind.loc[["Latitude"]])))#
wind.loc$x = as.numeric(char2dms(as.character(wind.loc[["Longitude"]])))#
coordsLONLAT=cbind(wind.loc$x,wind.loc$y)  ## lonlat coordinates#
#
### graphic of ireland#
coordinates(wind.loc) = ~x+y#
# map("worldHires", xlim = c(-11,-5.4), ylim = c(51,55.5))#
# plot(wind.loc, add=TRUE, pch=16)#
# text(coordinates(wind.loc), pos=1, label=wind.loc$Station)#
############# sinusoidal projecion#
if(distance=="Eucl")#
{ P.sinusoidal <- mapproject(coordsLONLAT[,1],coordsLONLAT[,2],projection="sinusoidal")#
coords<-cbind(P.sinusoidal$x,P.sinusoidal$y)*6378.388#
}#
if(distance=="Geod") coords=coordsLONLAT#
### matrix of spatial great circle or euclidean distances#
if(distance=="Geod") dists2 = rdist.earth(coords, miles=FALSE)#
if(distance=="Eucl") dists2 = dist(coords)#
#
## compact support for weight function in pairwise likelihood#
dd=max(dists2)*1+0.01#
maxtime=2.01#
# maxtime = 100#
## length of data: daily obervations for 18 years (1961-1978) at 12 location sites#
(1978-1961+1)*365*12#
length(as.vector(DATA))#
### there is a  small difference due to years with 366 days#
times = 1:nrow(DATA) # number of temporal realizations#
length(times)#
########################################
#### selecting first kk year#
########################################
kk=5#
ll=365*kk#
times=1:ll#
DATA=DATA[1:ll,]#
###########################
###########################
###########################
#### some tines series#
#par(mfrow=c(3,4))#
wind$time = ISOdate(wind$year+1900, wind$month, wind$day)#
# time series of e.g. Dublin data:#
# plot(DUB~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Dub")#
#plot(CLA~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Cla")#
#plot(RPT ~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Rpt")#
#plot(VAL~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Val")#
#plot(ROS~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Ros")#
#plot(KIL~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Kil")#
#plot(SHA~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Sha")#
#plot(BIR~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Bir")#
#plot(MUL~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Mul")#
#plot(CLO~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Clo")#
#plot(BEL~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Bel")#
#plot(MAL~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Mal")#
######## matrix covariates. #############
nsites<-dim(DATA)[2]   ##number sites#
nt<-dim(DATA)[1]       ## number times#
#
tcoords<-(1:nt)%x%rep(1,dim(coordsLONLAT)[1])#
xycoords<-(rep(1,nt)%x%as.matrix(coordsLONLAT))#
#########################################################################
#########################################################################
#### computing period for spatial sites DUB#
s<-spectrum(wind$DUB)#
periodo<-1/(s$freq[which.max(s$spec)])#
periodo#
############################################
# number of harmonics#
ns<-3#
h<-matrix(0,length(tcoords),2*ns)#
tscale<-365#
for ( i in 1: ns) {#
  h[,(2*(i-1)+1)]<-sin(2*pi*(i)*tcoords/tscale)#
  h[,(2*i)]<-cos(2*pi*(i)*tcoords/tscale)#
}#
#########################################################################
#### matrix of covariates for regression harmonic#
X=as.matrix(cbind(rep(1,nrow(h)),h))#
dim(X)#
#########################################################################
#########################################################################
############## correlation model ########################################
#########################################################################
corrmodel="exp_exp"#
scale_s = 340#
scale_t= 3#
nugget = 0 ## must be fixed#
sill = 1 ## must be fixed#
#########################################################################
#########################################################################
############### Gamma RF estimation #####################################
#########################################################################
#########################################################################
model="Gamma"#
#
mean=log(mean(DATA))#
shape = 6#
start=list(shape=shape,mean=mean,scale_s=scale_s,scale_t=scale_t,mean1=0,mean2=0,mean3=0,mean4=0,mean5=0,mean6=0)#
fixed<-list(nugget=nugget,sill=sill) #
#
GPU = 0 # 0 or 2 GPU denotes de Device we are using, in my Mac it is 0 (8 cores CPU),1 (Iris not for double),2 (AMD for double)#
local = c(1,1) #First component is 8 if GPU is 0. It is 2^n for n>=0 if GPU is 2#
#
# fit2 <- GeoFit(data=DATA,coordx=coords,coordt=times,corrmodel=corrmodel,distance=distance,#
#                maxdist=dd,maxtime=maxtime,likelihood="Marginal",type="Pairwise",model=model,X=X,#
#                start=start,fixed=fixed,GPU=GPU, local = local,varest=TRUE)#
# #
# fit2#
nti <- 12#hasta 42 funciona#
# maxtime = 50#
# fit3 <- GeoFit(data=DATA[1:nti,],coordx=coords,coordt=times[1:nti],corrmodel=corrmodel,distance=distance,#
#                maxdist=dd,maxtime=maxtime,likelihood="Marginal",type="Pairwise",model=model,X=X,#
#                start=start,fixed=fixed,GPU=GPU, local = local,varest=TRUE)#
# #
# fit3#
#
# fit3 <- GeoFit(data=DATA[1:nti,],coordx=coords,coordt=times[1:nti],corrmodel=corrmodel,distance=distance,#
#                maxdist=dd,maxtime=maxtime,likelihood="Marginal",type="Pairwise",model=model,X=X,#
#                start=start,fixed=fixed,varest=TRUE)#
# #
# fit3#
numtime=1;spacetime_dyn=FALSE;coordx_dyn=NULL;varest=TRUE#
likelihood='Marginal';coordy=NULL;coordx <- coords;coordt <- times[1:nti];data <- DATA[1:nti,]#
CMdl<-CkCorrModel(corrmodel)#
Stime <- CheckST(CMdl)#
# print(spacetime)#
if(Stime && is.null(coordx_dyn) && varest && likelihood=='Marginal')#
{#
  if(is.null(coordy)){coordy <- coordx[,2]#
  coordx <- coordx[,1]}#
  coordx_dyn=list()#
  datatemp=list()#
  for(k in 1:length(coordt))#
  {#
    coordx_dyn[[k]]=cbind(coordx,coordy)#
    datatemp[[k]]=data[k,]#
  }#
  data <- datatemp#
  rm(datatemp)#
}#
score <- sensmat <- varcov <- varimat <- parscale <- NULL#
### Initialization parameters:#
initparam <- WlsStart(coordx=coords, coordy=NULL, coordt=times[1:nti], coordx_dyn=coordx_dyn, corrmodel, data=data, distance="Eucl", "Fitting", fixed=fixed, grid=FALSE,#10#
                      likelihood='Marginal', maxdist=dd, maxtime=maxtime,  model=model, n=1, NULL,#16#
                      parscale, optimizer=='L-BFGS-B', radius=6378.388, start=start, taper=NULL, tapsep=NULL,#22#
                      type="Pairwise", varest=TRUE, vartype='SubSamp', weighted=FALSE, winconst=NULL, winstp=NULL,winconst_t=NULL, winstp_t=NULL, X=X)#31#
numcoord=length(initparam$coordx)#
if(initparam$spacetime) numtime=length(initparam$coordt)#
if(initparam$bivariate) numtime=2#
if(!is.null(coordx_dyn)) spacetime_dyn=TRUE#
dimat <- numcoord*numtime##
NS=cumsum(initparam$ns)#
if(is.null(dim(initparam$X)))#
{#
  X=as.matrix(rep(1,dimat))#
  if((initparam$spacetime||initparam$bivariate)&& spacetime_dyn)  X=as.matrix(rep(1,NS[numtime]))#
}#
num_betas=ncol(X) #
grid = FALSE#
if(grid)    #
{a=expand.grid(initparam$coordx,initparam$coordy);coordx=a[,1];coordy=a[,2]; #
}else {#
  if((initparam$spacetime||initparam$bivariate)&&(!spacetime_dyn)){#
    data=c(t(data))#
    coordx=rep(coordx,numtime);coordy=rep(coordy,numtime)#
  }#
  if((initparam$spacetime||initparam$bivariate)&&(spacetime_dyn)) initparam$data=unlist(initparam$data)          #
}#
if(initparam$spacetime||initparam$bivariate)   NS=c(0,NS)[-(length(initparam$ns)+1)]#
initparam$fixed#
#
dimmat <- initparam$numparam^2#
dmat <- initparam$numparam*(initparam$numparam+1)/2#
eps <- (.Machine$double.eps)^(1/3)#
param <- c(initparam$param, initparam$fixed)#
score <- double(initparam$numparam)#
paramcorr <- param[initparam$namescorr]#
nuisance <- param[initparam$namesnuis]#
sel=substr(names(nuisance),1,4)=="mean"#
mm=as.numeric(nuisance[sel])   ## mean paramteres#
other_nuis=as.numeric(nuisance[!sel]) #
nuisance=c(mm,other_nuis)#
sensmat <- double(dmat);varimat <- double(dmat)#
GD=.C('GodambeMat',as.double(mm),as.integer(initparam$bivariate),as.double(initparam$coordx),as.double(initparam$coordy),#
      as.double(initparam$coordt),as.integer(initparam$corrmodel), as.double(initparam$data),as.integer(initparam$distance),as.double(eps),#
      as.integer(initparam$flagcorr), as.integer(initparam$flagnuis),as.integer(grid),as.integer(initparam$likelihood),#
      as.double(c(X%*%mm)),as.integer(initparam$model),as.double(initparam$n),as.integer(num_betas),#
      as.integer(initparam$numparam),as.integer(initparam$numparamcorr),as.integer(length(paramcorr)),as.double(paramcorr),as.double(nuisance),#
      score=score,sensmat=sensmat,as.integer(initparam$spacetime),as.integer(initparam$type),#
      varimat=varimat,as.integer(initparam$vartype),as.double(initparam$winconst),as.double(initparam$winstp),as.double(initparam$winconst_t),as.double(initparam$winstp_t),#
      as.integer(initparam$weighted),c(t(X)),ns=as.integer(initparam$ns),NS=as.integer(NS),PACKAGE='GeoModels',DUP=TRUE,NAOK=TRUE)#
str(GD)#
# fit3 <- GeoFit(data=DATA[1:nti,],coordx=coords,coordt=times[1:nti],corrmodel=corrmodel,distance=distance,#
#                maxdist=dd,maxtime=maxtime,likelihood="Marginal",type="Pairwise",model=model,X=X,#
#                start=start,fixed=fixed,GPU=GPU, local = local,varest=TRUE)#
# #
# fit3
rm(list = ls())#
## see also  https://rdrr.io/rforge/gstat/man/wind.html#
require(gstat)#
require(mapdata)#
library(GeoModels)#
require(fields)#
require(mapproj)#
par(mfrow=c(1,1))#
#
# Wind Data: Daily average wind speeds for 1961-1978 at 12 synoptic #
# meteorological stations in the Republic of Ireland (Haslett and raftery 1989). #
# Wind speeds are in knots (1 knot = 0.5418 m/s), at each #
# of the stations of Haslett and Raftery#
#
## type of distance#
distance="Eucl" #distance="Geod"#
data("wind", package = "gstat")#
DATA=as.matrix(wind[,4:15])#
#DATA=DATA[,-3]  ### deleting ROSSLANE location site as in previous analysis#
sum(DATA==0)#
## where and when?#
which(DATA==0,arr.ind = T)#
### 16 values = to 0#
### we arbitrary replace 0 with  with the mean of the next and and the previous one (in time)#
DATA[5823:5825,]; DATA[5824,4]=(0.58+0.33)/2#
DATA[1507:1509,]; DATA[1508,6]=(1.58+2.42)/2#
DATA[2152:2154,]; DATA[2153,6]=(0.67+1.46)/2#
DATA[2351:2353,]; DATA[2352,6]=(3.21+0.92)/2#
DATA[3629:3631,]; DATA[3630,6]=(3.63+0.46)/2#
DATA[4053:4055,]; DATA[4054,6]=(4.63+2.50)/2#
DATA[5175:5177,]; DATA[5176,6]=(2.92+2.17)/2#
DATA[5456:5458,]; DATA[5457,6]=(0.13+2.37)/2#
DATA[4707:4709,]; DATA[4708,7]=(0.63+3.29)/2#
DATA[366:369,];   DATA[368,8]=DATA[367,8]=(2.79+3.75)/2#
DATA[694:697,];   DATA[695,8]=DATA[696,8]=(2.54+1)/2#
DATA[3653:3655,]; DATA[3654,8]=(0.33+0.75)/2#
DATA[5794:5796,]; DATA[5795,8]=(1.08+3.29)/2#
DATA[6176:6178,]; DATA[6177,9]=(2.13+0.21)/2#
# plot(density(DATA))#
#DATA[DATA==0]=0.05#
#
#wind.loc=wind.loc[-12,] ## deleting ROSSLANE lon-lat#
library(sp) # char2dms#
wind.loc$y = as.numeric(char2dms(as.character(wind.loc[["Latitude"]])))#
wind.loc$x = as.numeric(char2dms(as.character(wind.loc[["Longitude"]])))#
coordsLONLAT=cbind(wind.loc$x,wind.loc$y)  ## lonlat coordinates#
#
### graphic of ireland#
coordinates(wind.loc) = ~x+y#
# map("worldHires", xlim = c(-11,-5.4), ylim = c(51,55.5))#
# plot(wind.loc, add=TRUE, pch=16)#
# text(coordinates(wind.loc), pos=1, label=wind.loc$Station)#
############# sinusoidal projecion#
if(distance=="Eucl")#
{ P.sinusoidal <- mapproject(coordsLONLAT[,1],coordsLONLAT[,2],projection="sinusoidal")#
coords<-cbind(P.sinusoidal$x,P.sinusoidal$y)*6378.388#
}#
if(distance=="Geod") coords=coordsLONLAT#
### matrix of spatial great circle or euclidean distances#
if(distance=="Geod") dists2 = rdist.earth(coords, miles=FALSE)#
if(distance=="Eucl") dists2 = dist(coords)#
#
## compact support for weight function in pairwise likelihood#
dd=max(dists2)*1+0.01#
maxtime=2.01#
# maxtime = 100#
## length of data: daily obervations for 18 years (1961-1978) at 12 location sites#
(1978-1961+1)*365*12#
length(as.vector(DATA))#
### there is a  small difference due to years with 366 days#
times = 1:nrow(DATA) # number of temporal realizations#
length(times)#
########################################
#### selecting first kk year#
########################################
kk=5#
ll=365*kk#
times=1:ll#
DATA=DATA[1:ll,]#
###########################
###########################
###########################
#### some tines series#
#par(mfrow=c(3,4))#
wind$time = ISOdate(wind$year+1900, wind$month, wind$day)#
# time series of e.g. Dublin data:#
# plot(DUB~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Dub")#
#plot(CLA~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Cla")#
#plot(RPT ~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Rpt")#
#plot(VAL~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Val")#
#plot(ROS~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Ros")#
#plot(KIL~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Kil")#
#plot(SHA~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Sha")#
#plot(BIR~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Bir")#
#plot(MUL~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Mul")#
#plot(CLO~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Clo")#
#plot(BEL~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Bel")#
#plot(MAL~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Mal")#
######## matrix covariates. #############
nsites<-dim(DATA)[2]   ##number sites#
nt<-dim(DATA)[1]       ## number times#
#
tcoords<-(1:nt)%x%rep(1,dim(coordsLONLAT)[1])#
xycoords<-(rep(1,nt)%x%as.matrix(coordsLONLAT))#
#########################################################################
#########################################################################
#### computing period for spatial sites DUB#
s<-spectrum(wind$DUB)#
periodo<-1/(s$freq[which.max(s$spec)])#
periodo#
############################################
# number of harmonics#
ns<-3#
h<-matrix(0,length(tcoords),2*ns)#
tscale<-365#
for ( i in 1: ns) {#
  h[,(2*(i-1)+1)]<-sin(2*pi*(i)*tcoords/tscale)#
  h[,(2*i)]<-cos(2*pi*(i)*tcoords/tscale)#
}#
#########################################################################
#### matrix of covariates for regression harmonic#
X=as.matrix(cbind(rep(1,nrow(h)),h))#
dim(X)#
#########################################################################
#########################################################################
############## correlation model ########################################
#########################################################################
corrmodel="exp_exp"#
scale_s = 340#
scale_t= 3#
nugget = 0 ## must be fixed#
sill = 1 ## must be fixed#
#########################################################################
#########################################################################
############### Gamma RF estimation #####################################
#########################################################################
#########################################################################
model="Gamma"#
#
mean=log(mean(DATA))#
shape = 6#
start=list(shape=shape,mean=mean,scale_s=scale_s,scale_t=scale_t,mean1=0,mean2=0,mean3=0,mean4=0,mean5=0,mean6=0)#
fixed<-list(nugget=nugget,sill=sill) #
#
GPU = 0 # 0 or 2 GPU denotes de Device we are using, in my Mac it is 0 (8 cores CPU),1 (Iris not for double),2 (AMD for double)#
local = c(1,1) #First component is 8 if GPU is 0. It is 2^n for n>=0 if GPU is 2#
#
# fit2 <- GeoFit(data=DATA,coordx=coords,coordt=times,corrmodel=corrmodel,distance=distance,#
#                maxdist=dd,maxtime=maxtime,likelihood="Marginal",type="Pairwise",model=model,X=X,#
#                start=start,fixed=fixed,GPU=GPU, local = local,varest=TRUE)#
# #
# fit2#
nti <- 20#hasta 42 funciona#
# maxtime = 50#
# fit3 <- GeoFit(data=DATA[1:nti,],coordx=coords,coordt=times[1:nti],corrmodel=corrmodel,distance=distance,#
#                maxdist=dd,maxtime=maxtime,likelihood="Marginal",type="Pairwise",model=model,X=X,#
#                start=start,fixed=fixed,GPU=GPU, local = local,varest=TRUE)#
# #
# fit3#
#
# fit3 <- GeoFit(data=DATA[1:nti,],coordx=coords,coordt=times[1:nti],corrmodel=corrmodel,distance=distance,#
#                maxdist=dd,maxtime=maxtime,likelihood="Marginal",type="Pairwise",model=model,X=X,#
#                start=start,fixed=fixed,varest=TRUE)#
# #
# fit3#
numtime=1;spacetime_dyn=FALSE;coordx_dyn=NULL;varest=TRUE#
likelihood='Marginal';coordy=NULL;coordx <- coords;coordt <- times[1:nti];data <- DATA[1:nti,]#
CMdl<-CkCorrModel(corrmodel)#
Stime <- CheckST(CMdl)#
# print(spacetime)#
if(Stime && is.null(coordx_dyn) && varest && likelihood=='Marginal')#
{#
  if(is.null(coordy)){coordy <- coordx[,2]#
  coordx <- coordx[,1]}#
  coordx_dyn=list()#
  datatemp=list()#
  for(k in 1:length(coordt))#
  {#
    coordx_dyn[[k]]=cbind(coordx,coordy)#
    datatemp[[k]]=data[k,]#
  }#
  data <- datatemp#
  rm(datatemp)#
}#
score <- sensmat <- varcov <- varimat <- parscale <- NULL#
### Initialization parameters:#
initparam <- WlsStart(coordx=coords, coordy=NULL, coordt=times[1:nti], coordx_dyn=coordx_dyn, corrmodel, data=data, distance="Eucl", "Fitting", fixed=fixed, grid=FALSE,#10#
                      likelihood='Marginal', maxdist=dd, maxtime=maxtime,  model=model, n=1, NULL,#16#
                      parscale, optimizer=='L-BFGS-B', radius=6378.388, start=start, taper=NULL, tapsep=NULL,#22#
                      type="Pairwise", varest=TRUE, vartype='SubSamp', weighted=FALSE, winconst=NULL, winstp=NULL,winconst_t=NULL, winstp_t=NULL, X=X)#31#
numcoord=length(initparam$coordx)#
if(initparam$spacetime) numtime=length(initparam$coordt)#
if(initparam$bivariate) numtime=2#
if(!is.null(coordx_dyn)) spacetime_dyn=TRUE#
dimat <- numcoord*numtime##
NS=cumsum(initparam$ns)#
if(is.null(dim(initparam$X)))#
{#
  X=as.matrix(rep(1,dimat))#
  if((initparam$spacetime||initparam$bivariate)&& spacetime_dyn)  X=as.matrix(rep(1,NS[numtime]))#
}#
num_betas=ncol(X) #
grid = FALSE#
if(grid)    #
{a=expand.grid(initparam$coordx,initparam$coordy);coordx=a[,1];coordy=a[,2]; #
}else {#
  if((initparam$spacetime||initparam$bivariate)&&(!spacetime_dyn)){#
    data=c(t(data))#
    coordx=rep(coordx,numtime);coordy=rep(coordy,numtime)#
  }#
  if((initparam$spacetime||initparam$bivariate)&&(spacetime_dyn)) initparam$data=unlist(initparam$data)          #
}#
if(initparam$spacetime||initparam$bivariate)   NS=c(0,NS)[-(length(initparam$ns)+1)]#
initparam$fixed#
#
dimmat <- initparam$numparam^2#
dmat <- initparam$numparam*(initparam$numparam+1)/2#
eps <- (.Machine$double.eps)^(1/3)#
param <- c(initparam$param, initparam$fixed)#
score <- double(initparam$numparam)#
paramcorr <- param[initparam$namescorr]#
nuisance <- param[initparam$namesnuis]#
sel=substr(names(nuisance),1,4)=="mean"#
mm=as.numeric(nuisance[sel])   ## mean paramteres#
other_nuis=as.numeric(nuisance[!sel]) #
nuisance=c(mm,other_nuis)#
sensmat <- double(dmat);varimat <- double(dmat)#
GD=.C('GodambeMat',as.double(mm),as.integer(initparam$bivariate),as.double(initparam$coordx),as.double(initparam$coordy),#
      as.double(initparam$coordt),as.integer(initparam$corrmodel), as.double(initparam$data),as.integer(initparam$distance),as.double(eps),#
      as.integer(initparam$flagcorr), as.integer(initparam$flagnuis),as.integer(grid),as.integer(initparam$likelihood),#
      as.double(c(X%*%mm)),as.integer(initparam$model),as.double(initparam$n),as.integer(num_betas),#
      as.integer(initparam$numparam),as.integer(initparam$numparamcorr),as.integer(length(paramcorr)),as.double(paramcorr),as.double(nuisance),#
      score=score,sensmat=sensmat,as.integer(initparam$spacetime),as.integer(initparam$type),#
      varimat=varimat,as.integer(initparam$vartype),as.double(initparam$winconst),as.double(initparam$winstp),as.double(initparam$winconst_t),as.double(initparam$winstp_t),#
      as.integer(initparam$weighted),c(t(X)),ns=as.integer(initparam$ns),NS=as.integer(NS),PACKAGE='GeoModels',DUP=TRUE,NAOK=TRUE)#
str(GD)#
# fit3 <- GeoFit(data=DATA[1:nti,],coordx=coords,coordt=times[1:nti],corrmodel=corrmodel,distance=distance,#
#                maxdist=dd,maxtime=maxtime,likelihood="Marginal",type="Pairwise",model=model,X=X,#
#                start=start,fixed=fixed,GPU=GPU, local = local,varest=TRUE)#
# #
# fit3
fit3 <- GeoFit(data=DATA[1:nti,],coordx=coords,coordt=times[1:nti],corrmodel=corrmodel,distance=distance,#
               maxdist=dd,maxtime=maxtime,likelihood="Marginal",type="Pairwise",model=model,X=X,#
               start=start,fixed=fixed,GPU=GPU, local = local,varest=TRUE)#
#
fit3
rm(list = ls())#
## see also  https://rdrr.io/rforge/gstat/man/wind.html#
require(gstat)#
require(mapdata)#
library(GeoModels)#
require(fields)#
require(mapproj)#
par(mfrow=c(1,1))#
#
# Wind Data: Daily average wind speeds for 1961-1978 at 12 synoptic #
# meteorological stations in the Republic of Ireland (Haslett and raftery 1989). #
# Wind speeds are in knots (1 knot = 0.5418 m/s), at each #
# of the stations of Haslett and Raftery#
#
## type of distance#
distance="Eucl" #distance="Geod"#
data("wind", package = "gstat")#
DATA=as.matrix(wind[,4:15])#
#DATA=DATA[,-3]  ### deleting ROSSLANE location site as in previous analysis#
sum(DATA==0)#
## where and when?#
which(DATA==0,arr.ind = T)#
### 16 values = to 0#
### we arbitrary replace 0 with  with the mean of the next and and the previous one (in time)#
DATA[5823:5825,]; DATA[5824,4]=(0.58+0.33)/2#
DATA[1507:1509,]; DATA[1508,6]=(1.58+2.42)/2#
DATA[2152:2154,]; DATA[2153,6]=(0.67+1.46)/2#
DATA[2351:2353,]; DATA[2352,6]=(3.21+0.92)/2#
DATA[3629:3631,]; DATA[3630,6]=(3.63+0.46)/2#
DATA[4053:4055,]; DATA[4054,6]=(4.63+2.50)/2#
DATA[5175:5177,]; DATA[5176,6]=(2.92+2.17)/2#
DATA[5456:5458,]; DATA[5457,6]=(0.13+2.37)/2#
DATA[4707:4709,]; DATA[4708,7]=(0.63+3.29)/2#
DATA[366:369,];   DATA[368,8]=DATA[367,8]=(2.79+3.75)/2#
DATA[694:697,];   DATA[695,8]=DATA[696,8]=(2.54+1)/2#
DATA[3653:3655,]; DATA[3654,8]=(0.33+0.75)/2#
DATA[5794:5796,]; DATA[5795,8]=(1.08+3.29)/2#
DATA[6176:6178,]; DATA[6177,9]=(2.13+0.21)/2#
# plot(density(DATA))#
#DATA[DATA==0]=0.05#
#
#wind.loc=wind.loc[-12,] ## deleting ROSSLANE lon-lat#
library(sp) # char2dms#
wind.loc$y = as.numeric(char2dms(as.character(wind.loc[["Latitude"]])))#
wind.loc$x = as.numeric(char2dms(as.character(wind.loc[["Longitude"]])))#
coordsLONLAT=cbind(wind.loc$x,wind.loc$y)  ## lonlat coordinates#
#
### graphic of ireland#
coordinates(wind.loc) = ~x+y#
# map("worldHires", xlim = c(-11,-5.4), ylim = c(51,55.5))#
# plot(wind.loc, add=TRUE, pch=16)#
# text(coordinates(wind.loc), pos=1, label=wind.loc$Station)#
############# sinusoidal projecion#
if(distance=="Eucl")#
{ P.sinusoidal <- mapproject(coordsLONLAT[,1],coordsLONLAT[,2],projection="sinusoidal")#
coords<-cbind(P.sinusoidal$x,P.sinusoidal$y)*6378.388#
}#
if(distance=="Geod") coords=coordsLONLAT#
### matrix of spatial great circle or euclidean distances#
if(distance=="Geod") dists2 = rdist.earth(coords, miles=FALSE)#
if(distance=="Eucl") dists2 = dist(coords)#
#
## compact support for weight function in pairwise likelihood#
dd=max(dists2)*1+0.01#
maxtime=2.01#
# maxtime = 100#
## length of data: daily obervations for 18 years (1961-1978) at 12 location sites#
(1978-1961+1)*365*12#
length(as.vector(DATA))#
### there is a  small difference due to years with 366 days#
times = 1:nrow(DATA) # number of temporal realizations#
length(times)#
########################################
#### selecting first kk year#
########################################
kk=5#
ll=365*kk#
times=1:ll#
DATA=DATA[1:ll,]#
###########################
###########################
###########################
#### some tines series#
#par(mfrow=c(3,4))#
wind$time = ISOdate(wind$year+1900, wind$month, wind$day)#
# time series of e.g. Dublin data:#
# plot(DUB~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Dub")#
#plot(CLA~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Cla")#
#plot(RPT ~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Rpt")#
#plot(VAL~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Val")#
#plot(ROS~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Ros")#
#plot(KIL~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Kil")#
#plot(SHA~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Sha")#
#plot(BIR~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Bir")#
#plot(MUL~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Mul")#
#plot(CLO~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Clo")#
#plot(BEL~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Bel")#
#plot(MAL~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Mal")#
######## matrix covariates. #############
nsites<-dim(DATA)[2]   ##number sites#
nt<-dim(DATA)[1]       ## number times#
#
tcoords<-(1:nt)%x%rep(1,dim(coordsLONLAT)[1])#
xycoords<-(rep(1,nt)%x%as.matrix(coordsLONLAT))#
#########################################################################
#########################################################################
#### computing period for spatial sites DUB#
s<-spectrum(wind$DUB)#
periodo<-1/(s$freq[which.max(s$spec)])#
periodo#
############################################
# number of harmonics#
ns<-3#
h<-matrix(0,length(tcoords),2*ns)#
tscale<-365#
for ( i in 1: ns) {#
  h[,(2*(i-1)+1)]<-sin(2*pi*(i)*tcoords/tscale)#
  h[,(2*i)]<-cos(2*pi*(i)*tcoords/tscale)#
}#
#########################################################################
#### matrix of covariates for regression harmonic#
X=as.matrix(cbind(rep(1,nrow(h)),h))#
dim(X)#
#########################################################################
#########################################################################
############## correlation model ########################################
#########################################################################
corrmodel="exp_exp"#
scale_s = 340#
scale_t= 3#
nugget = 0 ## must be fixed#
sill = 1 ## must be fixed#
#########################################################################
#########################################################################
############### Gamma RF estimation #####################################
#########################################################################
#########################################################################
model="Gamma"#
#
mean=log(mean(DATA))#
shape = 6#
start=list(shape=shape,mean=mean,scale_s=scale_s,scale_t=scale_t,mean1=0,mean2=0,mean3=0,mean4=0,mean5=0,mean6=0)#
fixed<-list(nugget=nugget,sill=sill) #
#
GPU = 0 # 0 or 2 GPU denotes de Device we are using, in my Mac it is 0 (8 cores CPU),1 (Iris not for double),2 (AMD for double)#
local = c(1,1) #First component is 8 if GPU is 0. It is 2^n for n>=0 if GPU is 2#
#
# fit2 <- GeoFit(data=DATA,coordx=coords,coordt=times,corrmodel=corrmodel,distance=distance,#
#                maxdist=dd,maxtime=maxtime,likelihood="Marginal",type="Pairwise",model=model,X=X,#
#                start=start,fixed=fixed,GPU=GPU, local = local,varest=TRUE)#
# #
# fit2#
nti <- 20#hasta 42 funciona. 1825 total#
# maxtime = 50#
# fit3 <- GeoFit(data=DATA[1:nti,],coordx=coords,coordt=times[1:nti],corrmodel=corrmodel,distance=distance,#
#                maxdist=dd,maxtime=maxtime,likelihood="Marginal",type="Pairwise",model=model,X=X,#
#                start=start,fixed=fixed,GPU=GPU, local = local,varest=TRUE)#
# #
# fit3#
#
# fit3 <- GeoFit(data=DATA[1:nti,],coordx=coords,coordt=times[1:nti],corrmodel=corrmodel,distance=distance,#
#                maxdist=dd,maxtime=maxtime,likelihood="Marginal",type="Pairwise",model=model,X=X,#
#                start=start,fixed=fixed,varest=TRUE)#
# #
# fit3#
numtime=1;spacetime_dyn=FALSE;coordx_dyn=NULL;varest=TRUE#
likelihood='Marginal';coordy=NULL;coordx <- coords;coordt <- times[1:nti];data <- DATA[1:nti,]#
CMdl<-CkCorrModel(corrmodel)#
Stime <- CheckST(CMdl)#
# print(spacetime)#
if(Stime && is.null(coordx_dyn) && varest && likelihood=='Marginal')#
{#
  if(is.null(coordy)){coordy <- coordx[,2]#
  coordx <- coordx[,1]}#
  coordx_dyn=list()#
  datatemp=list()#
  for(k in 1:length(coordt))#
  {#
    coordx_dyn[[k]]=cbind(coordx,coordy)#
    datatemp[[k]]=data[k,]#
  }#
  data <- datatemp#
  rm(datatemp)#
}#
score <- sensmat <- varcov <- varimat <- parscale <- NULL#
### Initialization parameters:#
initparam <- WlsStart(coordx=coords, coordy=NULL, coordt=times[1:nti], coordx_dyn=coordx_dyn, corrmodel, data=data, distance="Eucl", "Fitting", fixed=fixed, grid=FALSE,#10#
                      likelihood='Marginal', maxdist=dd, maxtime=maxtime,  model=model, n=1, NULL,#16#
                      parscale, optimizer=='L-BFGS-B', radius=6378.388, start=start, taper=NULL, tapsep=NULL,#22#
                      type="Pairwise", varest=TRUE, vartype='SubSamp', weighted=FALSE, winconst=NULL, winstp=NULL,winconst_t=NULL, winstp_t=NULL, X=X)#31#
numcoord=length(initparam$coordx)#
if(initparam$spacetime) numtime=length(initparam$coordt)#
if(initparam$bivariate) numtime=2#
if(!is.null(coordx_dyn)) spacetime_dyn=TRUE#
dimat <- numcoord*numtime##
NS=cumsum(initparam$ns)#
if(is.null(dim(initparam$X)))#
{#
  X=as.matrix(rep(1,dimat))#
  if((initparam$spacetime||initparam$bivariate)&& spacetime_dyn)  X=as.matrix(rep(1,NS[numtime]))#
}#
num_betas=ncol(X) #
grid = FALSE#
if(grid)    #
{a=expand.grid(initparam$coordx,initparam$coordy);coordx=a[,1];coordy=a[,2]; #
}else {#
  if((initparam$spacetime||initparam$bivariate)&&(!spacetime_dyn)){#
    data=c(t(data))#
    coordx=rep(coordx,numtime);coordy=rep(coordy,numtime)#
  }#
  if((initparam$spacetime||initparam$bivariate)&&(spacetime_dyn)) initparam$data=unlist(initparam$data)          #
}#
if(initparam$spacetime||initparam$bivariate)   NS=c(0,NS)[-(length(initparam$ns)+1)]#
initparam$fixed#
#
dimmat <- initparam$numparam^2#
dmat <- initparam$numparam*(initparam$numparam+1)/2#
eps <- (.Machine$double.eps)^(1/3)#
param <- c(initparam$param, initparam$fixed)#
score <- double(initparam$numparam)#
paramcorr <- param[initparam$namescorr]#
nuisance <- param[initparam$namesnuis]#
sel=substr(names(nuisance),1,4)=="mean"#
mm=as.numeric(nuisance[sel])   ## mean paramteres#
other_nuis=as.numeric(nuisance[!sel]) #
nuisance=c(mm,other_nuis)#
sensmat <- double(dmat);varimat <- double(dmat)#
GD=.C('GodambeMat',as.double(mm),as.integer(initparam$bivariate),as.double(initparam$coordx),as.double(initparam$coordy),#
      as.double(initparam$coordt),as.integer(initparam$corrmodel), as.double(initparam$data),as.integer(initparam$distance),as.double(eps),#
      as.integer(initparam$flagcorr), as.integer(initparam$flagnuis),as.integer(grid),as.integer(initparam$likelihood),#
      as.double(c(X%*%mm)),as.integer(initparam$model),as.double(initparam$n),as.integer(num_betas),#
      as.integer(initparam$numparam),as.integer(initparam$numparamcorr),as.integer(length(paramcorr)),as.double(paramcorr),as.double(nuisance),#
      score=score,sensmat=sensmat,as.integer(initparam$spacetime),as.integer(initparam$type),#
      varimat=varimat,as.integer(initparam$vartype),as.double(initparam$winconst),as.double(initparam$winstp),as.double(initparam$winconst_t),as.double(initparam$winstp_t),#
      as.integer(initparam$weighted),c(t(X)),ns=as.integer(initparam$ns),NS=as.integer(NS),PACKAGE='GeoModels',DUP=TRUE,NAOK=TRUE)#
str(GD)#
# fit3 <- GeoFit(data=DATA[1:nti,],coordx=coords,coordt=times[1:nti],corrmodel=corrmodel,distance=distance,#
#                maxdist=dd,maxtime=maxtime,likelihood="Marginal",type="Pairwise",model=model,X=X,#
#                start=start,fixed=fixed,GPU=GPU, local = local,varest=TRUE)#
# #
# fit3
rm(list = ls())#
## see also  https://rdrr.io/rforge/gstat/man/wind.html#
require(gstat)#
require(mapdata)#
library(GeoModels)#
require(fields)#
require(mapproj)#
par(mfrow=c(1,1))#
#
# Wind Data: Daily average wind speeds for 1961-1978 at 12 synoptic #
# meteorological stations in the Republic of Ireland (Haslett and raftery 1989). #
# Wind speeds are in knots (1 knot = 0.5418 m/s), at each #
# of the stations of Haslett and Raftery#
#
## type of distance#
distance="Eucl" #distance="Geod"#
data("wind", package = "gstat")#
DATA=as.matrix(wind[,4:15])#
#DATA=DATA[,-3]  ### deleting ROSSLANE location site as in previous analysis#
sum(DATA==0)#
## where and when?#
which(DATA==0,arr.ind = T)#
### 16 values = to 0#
### we arbitrary replace 0 with  with the mean of the next and and the previous one (in time)#
DATA[5823:5825,]; DATA[5824,4]=(0.58+0.33)/2#
DATA[1507:1509,]; DATA[1508,6]=(1.58+2.42)/2#
DATA[2152:2154,]; DATA[2153,6]=(0.67+1.46)/2#
DATA[2351:2353,]; DATA[2352,6]=(3.21+0.92)/2#
DATA[3629:3631,]; DATA[3630,6]=(3.63+0.46)/2#
DATA[4053:4055,]; DATA[4054,6]=(4.63+2.50)/2#
DATA[5175:5177,]; DATA[5176,6]=(2.92+2.17)/2#
DATA[5456:5458,]; DATA[5457,6]=(0.13+2.37)/2#
DATA[4707:4709,]; DATA[4708,7]=(0.63+3.29)/2#
DATA[366:369,];   DATA[368,8]=DATA[367,8]=(2.79+3.75)/2#
DATA[694:697,];   DATA[695,8]=DATA[696,8]=(2.54+1)/2#
DATA[3653:3655,]; DATA[3654,8]=(0.33+0.75)/2#
DATA[5794:5796,]; DATA[5795,8]=(1.08+3.29)/2#
DATA[6176:6178,]; DATA[6177,9]=(2.13+0.21)/2#
# plot(density(DATA))#
#DATA[DATA==0]=0.05#
#
#wind.loc=wind.loc[-12,] ## deleting ROSSLANE lon-lat#
library(sp) # char2dms#
wind.loc$y = as.numeric(char2dms(as.character(wind.loc[["Latitude"]])))#
wind.loc$x = as.numeric(char2dms(as.character(wind.loc[["Longitude"]])))#
coordsLONLAT=cbind(wind.loc$x,wind.loc$y)  ## lonlat coordinates#
#
### graphic of ireland#
coordinates(wind.loc) = ~x+y#
# map("worldHires", xlim = c(-11,-5.4), ylim = c(51,55.5))#
# plot(wind.loc, add=TRUE, pch=16)#
# text(coordinates(wind.loc), pos=1, label=wind.loc$Station)#
############# sinusoidal projecion#
if(distance=="Eucl")#
{ P.sinusoidal <- mapproject(coordsLONLAT[,1],coordsLONLAT[,2],projection="sinusoidal")#
coords<-cbind(P.sinusoidal$x,P.sinusoidal$y)*6378.388#
}#
if(distance=="Geod") coords=coordsLONLAT#
### matrix of spatial great circle or euclidean distances#
if(distance=="Geod") dists2 = rdist.earth(coords, miles=FALSE)#
if(distance=="Eucl") dists2 = dist(coords)#
#
## compact support for weight function in pairwise likelihood#
dd=max(dists2)*1+0.01#
maxtime=2.01#
# maxtime = 100#
## length of data: daily obervations for 18 years (1961-1978) at 12 location sites#
(1978-1961+1)*365*12#
length(as.vector(DATA))#
### there is a  small difference due to years with 366 days#
times = 1:nrow(DATA) # number of temporal realizations#
length(times)#
########################################
#### selecting first kk year#
########################################
kk=5#
ll=365*kk#
times=1:ll#
DATA=DATA[1:ll,]#
###########################
###########################
###########################
#### some tines series#
#par(mfrow=c(3,4))#
wind$time = ISOdate(wind$year+1900, wind$month, wind$day)#
# time series of e.g. Dublin data:#
# plot(DUB~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Dub")#
#plot(CLA~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Cla")#
#plot(RPT ~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Rpt")#
#plot(VAL~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Val")#
#plot(ROS~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Ros")#
#plot(KIL~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Kil")#
#plot(SHA~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Sha")#
#plot(BIR~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Bir")#
#plot(MUL~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Mul")#
#plot(CLO~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Clo")#
#plot(BEL~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Bel")#
#plot(MAL~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Mal")#
######## matrix covariates. #############
nsites<-dim(DATA)[2]   ##number sites#
nt<-dim(DATA)[1]       ## number times#
#
tcoords<-(1:nt)%x%rep(1,dim(coordsLONLAT)[1])#
xycoords<-(rep(1,nt)%x%as.matrix(coordsLONLAT))#
#########################################################################
#########################################################################
#### computing period for spatial sites DUB#
s<-spectrum(wind$DUB)#
periodo<-1/(s$freq[which.max(s$spec)])#
periodo#
############################################
# number of harmonics#
ns<-3#
h<-matrix(0,length(tcoords),2*ns)#
tscale<-365#
for ( i in 1: ns) {#
  h[,(2*(i-1)+1)]<-sin(2*pi*(i)*tcoords/tscale)#
  h[,(2*i)]<-cos(2*pi*(i)*tcoords/tscale)#
}#
#########################################################################
#### matrix of covariates for regression harmonic#
X=as.matrix(cbind(rep(1,nrow(h)),h))#
dim(X)#
#########################################################################
#########################################################################
############## correlation model ########################################
#########################################################################
corrmodel="exp_exp"#
scale_s = 340#
scale_t= 3#
nugget = 0 ## must be fixed#
sill = 1 ## must be fixed#
#########################################################################
#########################################################################
############### Gamma RF estimation #####################################
#########################################################################
#########################################################################
model="Gamma"#
#
mean=log(mean(DATA))#
shape = 6#
start=list(shape=shape,mean=mean,scale_s=scale_s,scale_t=scale_t,mean1=0,mean2=0,mean3=0,mean4=0,mean5=0,mean6=0)#
fixed<-list(nugget=nugget,sill=sill) #
#
GPU = 0 # 0 or 2 GPU denotes de Device we are using, in my Mac it is 0 (8 cores CPU),1 (Iris not for double),2 (AMD for double)#
local = c(1,1) #First component is 8 if GPU is 0. It is 2^n for n>=0 if GPU is 2#
#
# fit2 <- GeoFit(data=DATA,coordx=coords,coordt=times,corrmodel=corrmodel,distance=distance,#
#                maxdist=dd,maxtime=maxtime,likelihood="Marginal",type="Pairwise",model=model,X=X,#
#                start=start,fixed=fixed,GPU=GPU, local = local,varest=TRUE)#
# #
# fit2#
nti <- 4#hasta 42 funciona. 1825 total#
# maxtime = 50#
# fit3 <- GeoFit(data=DATA[1:nti,],coordx=coords,coordt=times[1:nti],corrmodel=corrmodel,distance=distance,#
#                maxdist=dd,maxtime=maxtime,likelihood="Marginal",type="Pairwise",model=model,X=X,#
#                start=start,fixed=fixed,GPU=GPU, local = local,varest=TRUE)#
# #
# fit3#
#
# fit3 <- GeoFit(data=DATA[1:nti,],coordx=coords,coordt=times[1:nti],corrmodel=corrmodel,distance=distance,#
#                maxdist=dd,maxtime=maxtime,likelihood="Marginal",type="Pairwise",model=model,X=X,#
#                start=start,fixed=fixed,varest=TRUE)#
# #
# fit3#
numtime=1;spacetime_dyn=FALSE;coordx_dyn=NULL;varest=TRUE#
likelihood='Marginal';coordy=NULL;coordx <- coords;coordt <- times[1:nti];data <- DATA[1:nti,]#
CMdl<-CkCorrModel(corrmodel)#
Stime <- CheckST(CMdl)#
# print(spacetime)#
if(Stime && is.null(coordx_dyn) && varest && likelihood=='Marginal')#
{#
  if(is.null(coordy)){coordy <- coordx[,2]#
  coordx <- coordx[,1]}#
  coordx_dyn=list()#
  datatemp=list()#
  for(k in 1:length(coordt))#
  {#
    coordx_dyn[[k]]=cbind(coordx,coordy)#
    datatemp[[k]]=data[k,]#
  }#
  data <- datatemp#
  rm(datatemp)#
}#
score <- sensmat <- varcov <- varimat <- parscale <- NULL#
### Initialization parameters:#
initparam <- WlsStart(coordx=coords, coordy=NULL, coordt=times[1:nti], coordx_dyn=coordx_dyn, corrmodel, data=data, distance="Eucl", "Fitting", fixed=fixed, grid=FALSE,#10#
                      likelihood='Marginal', maxdist=dd, maxtime=maxtime,  model=model, n=1, NULL,#16#
                      parscale, optimizer=='L-BFGS-B', radius=6378.388, start=start, taper=NULL, tapsep=NULL,#22#
                      type="Pairwise", varest=TRUE, vartype='SubSamp', weighted=FALSE, winconst=NULL, winstp=NULL,winconst_t=NULL, winstp_t=NULL, X=X)#31#
numcoord=length(initparam$coordx)#
if(initparam$spacetime) numtime=length(initparam$coordt)#
if(initparam$bivariate) numtime=2#
if(!is.null(coordx_dyn)) spacetime_dyn=TRUE#
dimat <- numcoord*numtime##
NS=cumsum(initparam$ns)#
if(is.null(dim(initparam$X)))#
{#
  X=as.matrix(rep(1,dimat))#
  if((initparam$spacetime||initparam$bivariate)&& spacetime_dyn)  X=as.matrix(rep(1,NS[numtime]))#
}#
num_betas=ncol(X) #
grid = FALSE#
if(grid)    #
{a=expand.grid(initparam$coordx,initparam$coordy);coordx=a[,1];coordy=a[,2]; #
}else {#
  if((initparam$spacetime||initparam$bivariate)&&(!spacetime_dyn)){#
    data=c(t(data))#
    coordx=rep(coordx,numtime);coordy=rep(coordy,numtime)#
  }#
  if((initparam$spacetime||initparam$bivariate)&&(spacetime_dyn)) initparam$data=unlist(initparam$data)          #
}#
if(initparam$spacetime||initparam$bivariate)   NS=c(0,NS)[-(length(initparam$ns)+1)]#
initparam$fixed#
#
dimmat <- initparam$numparam^2#
dmat <- initparam$numparam*(initparam$numparam+1)/2#
eps <- (.Machine$double.eps)^(1/3)#
param <- c(initparam$param, initparam$fixed)#
score <- double(initparam$numparam)#
paramcorr <- param[initparam$namescorr]#
nuisance <- param[initparam$namesnuis]#
sel=substr(names(nuisance),1,4)=="mean"#
mm=as.numeric(nuisance[sel])   ## mean paramteres#
other_nuis=as.numeric(nuisance[!sel]) #
nuisance=c(mm,other_nuis)#
sensmat <- double(dmat);varimat <- double(dmat)#
GD=.C('GodambeMat',as.double(mm),as.integer(initparam$bivariate),as.double(initparam$coordx),as.double(initparam$coordy),#
      as.double(initparam$coordt),as.integer(initparam$corrmodel), as.double(initparam$data),as.integer(initparam$distance),as.double(eps),#
      as.integer(initparam$flagcorr), as.integer(initparam$flagnuis),as.integer(grid),as.integer(initparam$likelihood),#
      as.double(c(X%*%mm)),as.integer(initparam$model),as.double(initparam$n),as.integer(num_betas),#
      as.integer(initparam$numparam),as.integer(initparam$numparamcorr),as.integer(length(paramcorr)),as.double(paramcorr),as.double(nuisance),#
      score=score,sensmat=sensmat,as.integer(initparam$spacetime),as.integer(initparam$type),#
      varimat=varimat,as.integer(initparam$vartype),as.double(initparam$winconst),as.double(initparam$winstp),as.double(initparam$winconst_t),as.double(initparam$winstp_t),#
      as.integer(initparam$weighted),c(t(X)),ns=as.integer(initparam$ns),NS=as.integer(NS),PACKAGE='GeoModels',DUP=TRUE,NAOK=TRUE)#
str(GD)#
# fit3 <- GeoFit(data=DATA[1:nti,],coordx=coords,coordt=times[1:nti],corrmodel=corrmodel,distance=distance,#
#                maxdist=dd,maxtime=maxtime,likelihood="Marginal",type="Pairwise",model=model,X=X,#
#                start=start,fixed=fixed,GPU=GPU, local = local,varest=TRUE)#
# #
# fit3
rm(list = ls())#
## see also  https://rdrr.io/rforge/gstat/man/wind.html#
require(gstat)#
require(mapdata)#
library(GeoModels)#
require(fields)#
require(mapproj)#
par(mfrow=c(1,1))#
#
# Wind Data: Daily average wind speeds for 1961-1978 at 12 synoptic #
# meteorological stations in the Republic of Ireland (Haslett and raftery 1989). #
# Wind speeds are in knots (1 knot = 0.5418 m/s), at each #
# of the stations of Haslett and Raftery#
#
## type of distance#
distance="Eucl" #distance="Geod"#
data("wind", package = "gstat")#
DATA=as.matrix(wind[,4:15])#
#DATA=DATA[,-3]  ### deleting ROSSLANE location site as in previous analysis#
sum(DATA==0)#
## where and when?#
which(DATA==0,arr.ind = T)#
### 16 values = to 0#
### we arbitrary replace 0 with  with the mean of the next and and the previous one (in time)#
DATA[5823:5825,]; DATA[5824,4]=(0.58+0.33)/2#
DATA[1507:1509,]; DATA[1508,6]=(1.58+2.42)/2#
DATA[2152:2154,]; DATA[2153,6]=(0.67+1.46)/2#
DATA[2351:2353,]; DATA[2352,6]=(3.21+0.92)/2#
DATA[3629:3631,]; DATA[3630,6]=(3.63+0.46)/2#
DATA[4053:4055,]; DATA[4054,6]=(4.63+2.50)/2#
DATA[5175:5177,]; DATA[5176,6]=(2.92+2.17)/2#
DATA[5456:5458,]; DATA[5457,6]=(0.13+2.37)/2#
DATA[4707:4709,]; DATA[4708,7]=(0.63+3.29)/2#
DATA[366:369,];   DATA[368,8]=DATA[367,8]=(2.79+3.75)/2#
DATA[694:697,];   DATA[695,8]=DATA[696,8]=(2.54+1)/2#
DATA[3653:3655,]; DATA[3654,8]=(0.33+0.75)/2#
DATA[5794:5796,]; DATA[5795,8]=(1.08+3.29)/2#
DATA[6176:6178,]; DATA[6177,9]=(2.13+0.21)/2#
# plot(density(DATA))#
#DATA[DATA==0]=0.05#
#
#wind.loc=wind.loc[-12,] ## deleting ROSSLANE lon-lat#
library(sp) # char2dms#
wind.loc$y = as.numeric(char2dms(as.character(wind.loc[["Latitude"]])))#
wind.loc$x = as.numeric(char2dms(as.character(wind.loc[["Longitude"]])))#
coordsLONLAT=cbind(wind.loc$x,wind.loc$y)  ## lonlat coordinates#
#
### graphic of ireland#
coordinates(wind.loc) = ~x+y#
# map("worldHires", xlim = c(-11,-5.4), ylim = c(51,55.5))#
# plot(wind.loc, add=TRUE, pch=16)#
# text(coordinates(wind.loc), pos=1, label=wind.loc$Station)#
############# sinusoidal projecion#
if(distance=="Eucl")#
{ P.sinusoidal <- mapproject(coordsLONLAT[,1],coordsLONLAT[,2],projection="sinusoidal")#
coords<-cbind(P.sinusoidal$x,P.sinusoidal$y)*6378.388#
}#
if(distance=="Geod") coords=coordsLONLAT#
### matrix of spatial great circle or euclidean distances#
if(distance=="Geod") dists2 = rdist.earth(coords, miles=FALSE)#
if(distance=="Eucl") dists2 = dist(coords)#
#
## compact support for weight function in pairwise likelihood#
dd=max(dists2)*1+0.01#
maxtime=2.01#
# maxtime = 100#
## length of data: daily obervations for 18 years (1961-1978) at 12 location sites#
(1978-1961+1)*365*12#
length(as.vector(DATA))#
### there is a  small difference due to years with 366 days#
times = 1:nrow(DATA) # number of temporal realizations#
length(times)#
########################################
#### selecting first kk year#
########################################
kk=5#
ll=365*kk#
times=1:ll#
DATA=DATA[1:ll,]#
###########################
###########################
###########################
#### some tines series#
#par(mfrow=c(3,4))#
wind$time = ISOdate(wind$year+1900, wind$month, wind$day)#
# time series of e.g. Dublin data:#
# plot(DUB~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Dub")#
#plot(CLA~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Cla")#
#plot(RPT ~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Rpt")#
#plot(VAL~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Val")#
#plot(ROS~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Ros")#
#plot(KIL~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Kil")#
#plot(SHA~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Sha")#
#plot(BIR~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Bir")#
#plot(MUL~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Mul")#
#plot(CLO~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Clo")#
#plot(BEL~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Bel")#
#plot(MAL~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Mal")#
######## matrix covariates. #############
nsites<-dim(DATA)[2]   ##number sites#
nt<-dim(DATA)[1]       ## number times#
#
tcoords<-(1:nt)%x%rep(1,dim(coordsLONLAT)[1])#
xycoords<-(rep(1,nt)%x%as.matrix(coordsLONLAT))#
#########################################################################
#########################################################################
#### computing period for spatial sites DUB#
s<-spectrum(wind$DUB)#
periodo<-1/(s$freq[which.max(s$spec)])#
periodo#
############################################
# number of harmonics#
ns<-3#
h<-matrix(0,length(tcoords),2*ns)#
tscale<-365#
for ( i in 1: ns) {#
  h[,(2*(i-1)+1)]<-sin(2*pi*(i)*tcoords/tscale)#
  h[,(2*i)]<-cos(2*pi*(i)*tcoords/tscale)#
}#
#########################################################################
#### matrix of covariates for regression harmonic#
X=as.matrix(cbind(rep(1,nrow(h)),h))#
dim(X)#
#########################################################################
#########################################################################
############## correlation model ########################################
#########################################################################
corrmodel="exp_exp"#
scale_s = 340#
scale_t= 3#
nugget = 0 ## must be fixed#
sill = 1 ## must be fixed#
#########################################################################
#########################################################################
############### Gamma RF estimation #####################################
#########################################################################
#########################################################################
model="Gamma"#
#
mean=log(mean(DATA))#
shape = 6#
start=list(shape=shape,mean=mean,scale_s=scale_s,scale_t=scale_t,mean1=0,mean2=0,mean3=0,mean4=0,mean5=0,mean6=0)#
fixed<-list(nugget=nugget,sill=sill) #
#
GPU = 0 # 0 or 2 GPU denotes de Device we are using, in my Mac it is 0 (8 cores CPU),1 (Iris not for double),2 (AMD for double)#
local = c(1,1) #First component is 8 if GPU is 0. It is 2^n for n>=0 if GPU is 2#
#
# fit2 <- GeoFit(data=DATA,coordx=coords,coordt=times,corrmodel=corrmodel,distance=distance,#
#                maxdist=dd,maxtime=maxtime,likelihood="Marginal",type="Pairwise",model=model,X=X,#
#                start=start,fixed=fixed,GPU=GPU, local = local,varest=TRUE)#
# #
# fit2#
nti <- 10#hasta 42 funciona. 1825 total#
# maxtime = 50#
# fit3 <- GeoFit(data=DATA[1:nti,],coordx=coords,coordt=times[1:nti],corrmodel=corrmodel,distance=distance,#
#                maxdist=dd,maxtime=maxtime,likelihood="Marginal",type="Pairwise",model=model,X=X,#
#                start=start,fixed=fixed,GPU=GPU, local = local,varest=TRUE)#
# #
# fit3#
#
# fit3 <- GeoFit(data=DATA[1:nti,],coordx=coords,coordt=times[1:nti],corrmodel=corrmodel,distance=distance,#
#                maxdist=dd,maxtime=maxtime,likelihood="Marginal",type="Pairwise",model=model,X=X,#
#                start=start,fixed=fixed,varest=TRUE)#
# #
# fit3#
numtime=1;spacetime_dyn=FALSE;coordx_dyn=NULL;varest=TRUE#
likelihood='Marginal';coordy=NULL;coordx <- coords;coordt <- times[1:nti];data <- DATA[1:nti,]#
CMdl<-CkCorrModel(corrmodel)#
Stime <- CheckST(CMdl)#
# print(spacetime)#
if(Stime && is.null(coordx_dyn) && varest && likelihood=='Marginal')#
{#
  if(is.null(coordy)){coordy <- coordx[,2]#
  coordx <- coordx[,1]}#
  coordx_dyn=list()#
  datatemp=list()#
  for(k in 1:length(coordt))#
  {#
    coordx_dyn[[k]]=cbind(coordx,coordy)#
    datatemp[[k]]=data[k,]#
  }#
  data <- datatemp#
  rm(datatemp)#
}#
score <- sensmat <- varcov <- varimat <- parscale <- NULL#
### Initialization parameters:#
initparam <- WlsStart(coordx=coords, coordy=NULL, coordt=times[1:nti], coordx_dyn=coordx_dyn, corrmodel, data=data, distance="Eucl", "Fitting", fixed=fixed, grid=FALSE,#10#
                      likelihood='Marginal', maxdist=dd, maxtime=maxtime,  model=model, n=1, NULL,#16#
                      parscale, optimizer=='L-BFGS-B', radius=6378.388, start=start, taper=NULL, tapsep=NULL,#22#
                      type="Pairwise", varest=TRUE, vartype='SubSamp', weighted=FALSE, winconst=NULL, winstp=NULL,winconst_t=NULL, winstp_t=NULL, X=X)#31#
numcoord=length(initparam$coordx)#
if(initparam$spacetime) numtime=length(initparam$coordt)#
if(initparam$bivariate) numtime=2#
if(!is.null(coordx_dyn)) spacetime_dyn=TRUE#
dimat <- numcoord*numtime##
NS=cumsum(initparam$ns)#
if(is.null(dim(initparam$X)))#
{#
  X=as.matrix(rep(1,dimat))#
  if((initparam$spacetime||initparam$bivariate)&& spacetime_dyn)  X=as.matrix(rep(1,NS[numtime]))#
}#
num_betas=ncol(X) #
grid = FALSE#
if(grid)    #
{a=expand.grid(initparam$coordx,initparam$coordy);coordx=a[,1];coordy=a[,2]; #
}else {#
  if((initparam$spacetime||initparam$bivariate)&&(!spacetime_dyn)){#
    data=c(t(data))#
    coordx=rep(coordx,numtime);coordy=rep(coordy,numtime)#
  }#
  if((initparam$spacetime||initparam$bivariate)&&(spacetime_dyn)) initparam$data=unlist(initparam$data)          #
}#
if(initparam$spacetime||initparam$bivariate)   NS=c(0,NS)[-(length(initparam$ns)+1)]#
initparam$fixed#
#
dimmat <- initparam$numparam^2#
dmat <- initparam$numparam*(initparam$numparam+1)/2#
eps <- (.Machine$double.eps)^(1/3)#
param <- c(initparam$param, initparam$fixed)#
score <- double(initparam$numparam)#
paramcorr <- param[initparam$namescorr]#
nuisance <- param[initparam$namesnuis]#
sel=substr(names(nuisance),1,4)=="mean"#
mm=as.numeric(nuisance[sel])   ## mean paramteres#
other_nuis=as.numeric(nuisance[!sel]) #
nuisance=c(mm,other_nuis)#
sensmat <- double(dmat);varimat <- double(dmat)#
GD=.C('GodambeMat',as.double(mm),as.integer(initparam$bivariate),as.double(initparam$coordx),as.double(initparam$coordy),#
      as.double(initparam$coordt),as.integer(initparam$corrmodel), as.double(initparam$data),as.integer(initparam$distance),as.double(eps),#
      as.integer(initparam$flagcorr), as.integer(initparam$flagnuis),as.integer(grid),as.integer(initparam$likelihood),#
      as.double(c(X%*%mm)),as.integer(initparam$model),as.double(initparam$n),as.integer(num_betas),#
      as.integer(initparam$numparam),as.integer(initparam$numparamcorr),as.integer(length(paramcorr)),as.double(paramcorr),as.double(nuisance),#
      score=score,sensmat=sensmat,as.integer(initparam$spacetime),as.integer(initparam$type),#
      varimat=varimat,as.integer(initparam$vartype),as.double(initparam$winconst),as.double(initparam$winstp),as.double(initparam$winconst_t),as.double(initparam$winstp_t),#
      as.integer(initparam$weighted),c(t(X)),ns=as.integer(initparam$ns),NS=as.integer(NS),PACKAGE='GeoModels',DUP=TRUE,NAOK=TRUE)#
str(GD)#
# fit3 <- GeoFit(data=DATA[1:nti,],coordx=coords,coordt=times[1:nti],corrmodel=corrmodel,distance=distance,#
#                maxdist=dd,maxtime=maxtime,likelihood="Marginal",type="Pairwise",model=model,X=X,#
#                start=start,fixed=fixed,GPU=GPU, local = local,varest=TRUE)#
# #
# fit3
rm(list = ls())#
## see also  https://rdrr.io/rforge/gstat/man/wind.html#
require(gstat)#
require(mapdata)#
library(GeoModels)#
require(fields)#
require(mapproj)#
par(mfrow=c(1,1))#
#
# Wind Data: Daily average wind speeds for 1961-1978 at 12 synoptic #
# meteorological stations in the Republic of Ireland (Haslett and raftery 1989). #
# Wind speeds are in knots (1 knot = 0.5418 m/s), at each #
# of the stations of Haslett and Raftery#
#
## type of distance#
distance="Eucl" #distance="Geod"#
data("wind", package = "gstat")#
DATA=as.matrix(wind[,4:15])#
#DATA=DATA[,-3]  ### deleting ROSSLANE location site as in previous analysis#
sum(DATA==0)#
## where and when?#
which(DATA==0,arr.ind = T)#
### 16 values = to 0#
### we arbitrary replace 0 with  with the mean of the next and and the previous one (in time)#
DATA[5823:5825,]; DATA[5824,4]=(0.58+0.33)/2#
DATA[1507:1509,]; DATA[1508,6]=(1.58+2.42)/2#
DATA[2152:2154,]; DATA[2153,6]=(0.67+1.46)/2#
DATA[2351:2353,]; DATA[2352,6]=(3.21+0.92)/2#
DATA[3629:3631,]; DATA[3630,6]=(3.63+0.46)/2#
DATA[4053:4055,]; DATA[4054,6]=(4.63+2.50)/2#
DATA[5175:5177,]; DATA[5176,6]=(2.92+2.17)/2#
DATA[5456:5458,]; DATA[5457,6]=(0.13+2.37)/2#
DATA[4707:4709,]; DATA[4708,7]=(0.63+3.29)/2#
DATA[366:369,];   DATA[368,8]=DATA[367,8]=(2.79+3.75)/2#
DATA[694:697,];   DATA[695,8]=DATA[696,8]=(2.54+1)/2#
DATA[3653:3655,]; DATA[3654,8]=(0.33+0.75)/2#
DATA[5794:5796,]; DATA[5795,8]=(1.08+3.29)/2#
DATA[6176:6178,]; DATA[6177,9]=(2.13+0.21)/2#
# plot(density(DATA))#
#DATA[DATA==0]=0.05#
#
#wind.loc=wind.loc[-12,] ## deleting ROSSLANE lon-lat#
library(sp) # char2dms#
wind.loc$y = as.numeric(char2dms(as.character(wind.loc[["Latitude"]])))#
wind.loc$x = as.numeric(char2dms(as.character(wind.loc[["Longitude"]])))#
coordsLONLAT=cbind(wind.loc$x,wind.loc$y)  ## lonlat coordinates#
#
### graphic of ireland#
coordinates(wind.loc) = ~x+y#
# map("worldHires", xlim = c(-11,-5.4), ylim = c(51,55.5))#
# plot(wind.loc, add=TRUE, pch=16)#
# text(coordinates(wind.loc), pos=1, label=wind.loc$Station)#
############# sinusoidal projecion#
if(distance=="Eucl")#
{ P.sinusoidal <- mapproject(coordsLONLAT[,1],coordsLONLAT[,2],projection="sinusoidal")#
coords<-cbind(P.sinusoidal$x,P.sinusoidal$y)*6378.388#
}#
if(distance=="Geod") coords=coordsLONLAT#
### matrix of spatial great circle or euclidean distances#
if(distance=="Geod") dists2 = rdist.earth(coords, miles=FALSE)#
if(distance=="Eucl") dists2 = dist(coords)#
#
## compact support for weight function in pairwise likelihood#
dd=max(dists2)*1+0.01#
maxtime=2.01#
# maxtime = 100#
## length of data: daily obervations for 18 years (1961-1978) at 12 location sites#
(1978-1961+1)*365*12#
length(as.vector(DATA))#
### there is a  small difference due to years with 366 days#
times = 1:nrow(DATA) # number of temporal realizations#
length(times)#
########################################
#### selecting first kk year#
########################################
kk=5#
ll=365*kk#
times=1:ll#
DATA=DATA[1:ll,]#
###########################
###########################
###########################
#### some tines series#
#par(mfrow=c(3,4))#
wind$time = ISOdate(wind$year+1900, wind$month, wind$day)#
# time series of e.g. Dublin data:#
# plot(DUB~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Dub")#
#plot(CLA~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Cla")#
#plot(RPT ~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Rpt")#
#plot(VAL~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Val")#
#plot(ROS~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Ros")#
#plot(KIL~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Kil")#
#plot(SHA~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Sha")#
#plot(BIR~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Bir")#
#plot(MUL~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Mul")#
#plot(CLO~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Clo")#
#plot(BEL~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Bel")#
#plot(MAL~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Mal")#
######## matrix covariates. #############
nsites<-dim(DATA)[2]   ##number sites#
nt<-dim(DATA)[1]       ## number times#
#
tcoords<-(1:nt)%x%rep(1,dim(coordsLONLAT)[1])#
xycoords<-(rep(1,nt)%x%as.matrix(coordsLONLAT))#
#########################################################################
#########################################################################
#### computing period for spatial sites DUB#
s<-spectrum(wind$DUB)#
periodo<-1/(s$freq[which.max(s$spec)])#
periodo#
############################################
# number of harmonics#
ns<-3#
h<-matrix(0,length(tcoords),2*ns)#
tscale<-365#
for ( i in 1: ns) {#
  h[,(2*(i-1)+1)]<-sin(2*pi*(i)*tcoords/tscale)#
  h[,(2*i)]<-cos(2*pi*(i)*tcoords/tscale)#
}#
#########################################################################
#### matrix of covariates for regression harmonic#
X=as.matrix(cbind(rep(1,nrow(h)),h))#
dim(X)#
#########################################################################
#########################################################################
############## correlation model ########################################
#########################################################################
corrmodel="exp_exp"#
scale_s = 340#
scale_t= 3#
nugget = 0 ## must be fixed#
sill = 1 ## must be fixed#
#########################################################################
#########################################################################
############### Gamma RF estimation #####################################
#########################################################################
#########################################################################
model="Gamma"#
#
mean=log(mean(DATA))#
shape = 6#
start=list(shape=shape,mean=mean,scale_s=scale_s,scale_t=scale_t,mean1=0,mean2=0,mean3=0,mean4=0,mean5=0,mean6=0)#
fixed<-list(nugget=nugget,sill=sill) #
#
GPU = 0 # 0 or 2 GPU denotes de Device we are using, in my Mac it is 0 (8 cores CPU),1 (Iris not for double),2 (AMD for double)#
local = c(1,1) #First component is 8 if GPU is 0. It is 2^n for n>=0 if GPU is 2#
#
# fit2 <- GeoFit(data=DATA,coordx=coords,coordt=times,corrmodel=corrmodel,distance=distance,#
#                maxdist=dd,maxtime=maxtime,likelihood="Marginal",type="Pairwise",model=model,X=X,#
#                start=start,fixed=fixed,GPU=GPU, local = local,varest=TRUE)#
# #
# fit2#
nti <- 10#hasta 42 funciona. 1825 total#
# maxtime = 50#
# fit3 <- GeoFit(data=DATA[1:nti,],coordx=coords,coordt=times[1:nti],corrmodel=corrmodel,distance=distance,#
#                maxdist=dd,maxtime=maxtime,likelihood="Marginal",type="Pairwise",model=model,X=X,#
#                start=start,fixed=fixed,GPU=GPU, local = local,varest=TRUE)#
# #
# fit3#
#
# fit3 <- GeoFit(data=DATA[1:nti,],coordx=coords,coordt=times[1:nti],corrmodel=corrmodel,distance=distance,#
#                maxdist=dd,maxtime=maxtime,likelihood="Marginal",type="Pairwise",model=model,X=X,#
#                start=start,fixed=fixed,varest=TRUE)#
# #
# fit3#
numtime=1;spacetime_dyn=FALSE;coordx_dyn=NULL;varest=TRUE#
likelihood='Marginal';coordy=NULL;coordx <- coords;coordt <- times[1:nti];data <- DATA[1:nti,]#
CMdl<-CkCorrModel(corrmodel)#
Stime <- CheckST(CMdl)#
# print(spacetime)#
if(Stime && is.null(coordx_dyn) && varest && likelihood=='Marginal')#
{#
  if(is.null(coordy)){coordy <- coordx[,2]#
  coordx <- coordx[,1]}#
  coordx_dyn=list()#
  datatemp=list()#
  for(k in 1:length(coordt))#
  {#
    coordx_dyn[[k]]=cbind(coordx,coordy)#
    datatemp[[k]]=data[k,]#
  }#
  data <- datatemp#
  rm(datatemp)#
}#
score <- sensmat <- varcov <- varimat <- parscale <- NULL#
### Initialization parameters:#
initparam <- WlsStart(coordx=coords, coordy=NULL, coordt=times[1:nti], coordx_dyn=coordx_dyn, corrmodel, data=data, distance="Eucl", "Fitting", fixed=fixed, grid=FALSE,#10#
                      likelihood='Marginal', maxdist=dd, maxtime=maxtime,  model=model, n=1, NULL,#16#
                      parscale, optimizer=='L-BFGS-B', radius=6378.388, start=start, taper=NULL, tapsep=NULL,#22#
                      type="Pairwise", varest=TRUE, vartype='SubSamp', weighted=FALSE, winconst=NULL, winstp=NULL,winconst_t=NULL, winstp_t=NULL, X=X)#31#
numcoord=length(initparam$coordx)#
if(initparam$spacetime) numtime=length(initparam$coordt)#
if(initparam$bivariate) numtime=2#
if(!is.null(coordx_dyn)) spacetime_dyn=TRUE#
dimat <- numcoord*numtime##
NS=cumsum(initparam$ns)#
if(is.null(dim(initparam$X)))#
{#
  X=as.matrix(rep(1,dimat))#
  if((initparam$spacetime||initparam$bivariate)&& spacetime_dyn)  X=as.matrix(rep(1,NS[numtime]))#
}#
num_betas=ncol(X) #
grid = FALSE#
if(grid)    #
{a=expand.grid(initparam$coordx,initparam$coordy);coordx=a[,1];coordy=a[,2]; #
}else {#
  if((initparam$spacetime||initparam$bivariate)&&(!spacetime_dyn)){#
    data=c(t(data))#
    coordx=rep(coordx,numtime);coordy=rep(coordy,numtime)#
  }#
  if((initparam$spacetime||initparam$bivariate)&&(spacetime_dyn)) initparam$data=unlist(initparam$data)          #
}#
if(initparam$spacetime||initparam$bivariate)   NS=c(0,NS)[-(length(initparam$ns)+1)]#
initparam$fixed#
#
dimmat <- initparam$numparam^2#
dmat <- initparam$numparam*(initparam$numparam+1)/2#
eps <- (.Machine$double.eps)^(1/3)#
param <- c(initparam$param, initparam$fixed)#
score <- double(initparam$numparam)#
paramcorr <- param[initparam$namescorr]#
nuisance <- param[initparam$namesnuis]#
sel=substr(names(nuisance),1,4)=="mean"#
mm=as.numeric(nuisance[sel])   ## mean paramteres#
other_nuis=as.numeric(nuisance[!sel]) #
nuisance=c(mm,other_nuis)#
sensmat <- double(dmat);varimat <- double(dmat)#
GD=.C('GodambeMat',as.double(mm),as.integer(initparam$bivariate),as.double(initparam$coordx),as.double(initparam$coordy),#
      as.double(initparam$coordt),as.integer(initparam$corrmodel), as.double(initparam$data),as.integer(initparam$distance),as.double(eps),#
      as.integer(initparam$flagcorr), as.integer(initparam$flagnuis),as.integer(grid),as.integer(initparam$likelihood),#
      as.double(c(X%*%mm)),as.integer(initparam$model),as.double(initparam$n),as.integer(num_betas),#
      as.integer(initparam$numparam),as.integer(initparam$numparamcorr),as.integer(length(paramcorr)),as.double(paramcorr),as.double(nuisance),#
      score=score,sensmat=sensmat,as.integer(initparam$spacetime),as.integer(initparam$type),#
      varimat=varimat,as.integer(initparam$vartype),as.double(initparam$winconst),as.double(initparam$winstp),as.double(initparam$winconst_t),as.double(initparam$winstp_t),#
      as.integer(initparam$weighted),c(t(X)),ns=as.integer(initparam$ns),NS=as.integer(NS),PACKAGE='GeoModels',DUP=TRUE,NAOK=TRUE)#
str(GD)#
fit3 <- GeoFit(data=DATA[1:nti,],coordx=coords,coordt=times[1:nti],corrmodel=corrmodel,distance=distance,#
               maxdist=dd,maxtime=maxtime,likelihood="Marginal",type="Pairwise",model=model,X=X,#
               start=start,fixed=fixed,GPU=GPU, local = local,varest=TRUE)#
#
fit3
rm(list = ls())#
## see also  https://rdrr.io/rforge/gstat/man/wind.html#
require(gstat)#
require(mapdata)#
library(GeoModels)#
require(fields)#
require(mapproj)#
par(mfrow=c(1,1))#
#
# Wind Data: Daily average wind speeds for 1961-1978 at 12 synoptic #
# meteorological stations in the Republic of Ireland (Haslett and raftery 1989). #
# Wind speeds are in knots (1 knot = 0.5418 m/s), at each #
# of the stations of Haslett and Raftery#
#
## type of distance#
distance="Eucl" #distance="Geod"#
data("wind", package = "gstat")#
DATA=as.matrix(wind[,4:15])#
#DATA=DATA[,-3]  ### deleting ROSSLANE location site as in previous analysis#
sum(DATA==0)#
## where and when?#
which(DATA==0,arr.ind = T)#
### 16 values = to 0#
### we arbitrary replace 0 with  with the mean of the next and and the previous one (in time)#
DATA[5823:5825,]; DATA[5824,4]=(0.58+0.33)/2#
DATA[1507:1509,]; DATA[1508,6]=(1.58+2.42)/2#
DATA[2152:2154,]; DATA[2153,6]=(0.67+1.46)/2#
DATA[2351:2353,]; DATA[2352,6]=(3.21+0.92)/2#
DATA[3629:3631,]; DATA[3630,6]=(3.63+0.46)/2#
DATA[4053:4055,]; DATA[4054,6]=(4.63+2.50)/2#
DATA[5175:5177,]; DATA[5176,6]=(2.92+2.17)/2#
DATA[5456:5458,]; DATA[5457,6]=(0.13+2.37)/2#
DATA[4707:4709,]; DATA[4708,7]=(0.63+3.29)/2#
DATA[366:369,];   DATA[368,8]=DATA[367,8]=(2.79+3.75)/2#
DATA[694:697,];   DATA[695,8]=DATA[696,8]=(2.54+1)/2#
DATA[3653:3655,]; DATA[3654,8]=(0.33+0.75)/2#
DATA[5794:5796,]; DATA[5795,8]=(1.08+3.29)/2#
DATA[6176:6178,]; DATA[6177,9]=(2.13+0.21)/2#
# plot(density(DATA))#
#DATA[DATA==0]=0.05#
#
#wind.loc=wind.loc[-12,] ## deleting ROSSLANE lon-lat#
library(sp) # char2dms#
wind.loc$y = as.numeric(char2dms(as.character(wind.loc[["Latitude"]])))#
wind.loc$x = as.numeric(char2dms(as.character(wind.loc[["Longitude"]])))#
coordsLONLAT=cbind(wind.loc$x,wind.loc$y)  ## lonlat coordinates#
#
### graphic of ireland#
coordinates(wind.loc) = ~x+y#
# map("worldHires", xlim = c(-11,-5.4), ylim = c(51,55.5))#
# plot(wind.loc, add=TRUE, pch=16)#
# text(coordinates(wind.loc), pos=1, label=wind.loc$Station)#
############# sinusoidal projecion#
if(distance=="Eucl")#
{ P.sinusoidal <- mapproject(coordsLONLAT[,1],coordsLONLAT[,2],projection="sinusoidal")#
coords<-cbind(P.sinusoidal$x,P.sinusoidal$y)*6378.388#
}#
if(distance=="Geod") coords=coordsLONLAT#
### matrix of spatial great circle or euclidean distances#
if(distance=="Geod") dists2 = rdist.earth(coords, miles=FALSE)#
if(distance=="Eucl") dists2 = dist(coords)#
#
## compact support for weight function in pairwise likelihood#
dd=max(dists2)*1+0.01#
maxtime=2.01#
# maxtime = 100#
## length of data: daily obervations for 18 years (1961-1978) at 12 location sites#
(1978-1961+1)*365*12#
length(as.vector(DATA))#
### there is a  small difference due to years with 366 days#
times = 1:nrow(DATA) # number of temporal realizations#
length(times)#
########################################
#### selecting first kk year#
########################################
kk=5#
ll=365*kk#
times=1:ll#
DATA=DATA[1:ll,]#
###########################
###########################
###########################
#### some tines series#
#par(mfrow=c(3,4))#
wind$time = ISOdate(wind$year+1900, wind$month, wind$day)#
# time series of e.g. Dublin data:#
# plot(DUB~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Dub")#
#plot(CLA~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Cla")#
#plot(RPT ~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Rpt")#
#plot(VAL~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Val")#
#plot(ROS~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Ros")#
#plot(KIL~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Kil")#
#plot(SHA~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Sha")#
#plot(BIR~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Bir")#
#plot(MUL~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Mul")#
#plot(CLO~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Clo")#
#plot(BEL~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Bel")#
#plot(MAL~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Mal")#
######## matrix covariates. #############
nsites<-dim(DATA)[2]   ##number sites#
nt<-dim(DATA)[1]       ## number times#
#
tcoords<-(1:nt)%x%rep(1,dim(coordsLONLAT)[1])#
xycoords<-(rep(1,nt)%x%as.matrix(coordsLONLAT))#
#########################################################################
#########################################################################
#### computing period for spatial sites DUB#
s<-spectrum(wind$DUB)#
periodo<-1/(s$freq[which.max(s$spec)])#
periodo#
############################################
# number of harmonics#
ns<-3#
h<-matrix(0,length(tcoords),2*ns)#
tscale<-365#
for ( i in 1: ns) {#
  h[,(2*(i-1)+1)]<-sin(2*pi*(i)*tcoords/tscale)#
  h[,(2*i)]<-cos(2*pi*(i)*tcoords/tscale)#
}#
#########################################################################
#### matrix of covariates for regression harmonic#
X=as.matrix(cbind(rep(1,nrow(h)),h))#
dim(X)#
#########################################################################
#########################################################################
############## correlation model ########################################
#########################################################################
corrmodel="exp_exp"#
scale_s = 340#
scale_t= 3#
nugget = 0 ## must be fixed#
sill = 1 ## must be fixed#
#########################################################################
#########################################################################
############### Gamma RF estimation #####################################
#########################################################################
#########################################################################
model="Gamma"#
#
mean=log(mean(DATA))#
shape = 6#
start=list(shape=shape,mean=mean,scale_s=scale_s,scale_t=scale_t,mean1=0,mean2=0,mean3=0,mean4=0,mean5=0,mean6=0)#
fixed<-list(nugget=nugget,sill=sill) #
#
GPU = 0 # 0 or 2 GPU denotes de Device we are using, in my Mac it is 0 (8 cores CPU),1 (Iris not for double),2 (AMD for double)#
local = c(1,1) #First component is 8 if GPU is 0. It is 2^n for n>=0 if GPU is 2#
#
# fit2 <- GeoFit(data=DATA,coordx=coords,coordt=times,corrmodel=corrmodel,distance=distance,#
#                maxdist=dd,maxtime=maxtime,likelihood="Marginal",type="Pairwise",model=model,X=X,#
#                start=start,fixed=fixed,GPU=GPU, local = local,varest=TRUE)#
# #
# fit2#
nti <- 100#hasta 42 funciona. 1825 total#
# maxtime = 50#
# fit3 <- GeoFit(data=DATA[1:nti,],coordx=coords,coordt=times[1:nti],corrmodel=corrmodel,distance=distance,#
#                maxdist=dd,maxtime=maxtime,likelihood="Marginal",type="Pairwise",model=model,X=X,#
#                start=start,fixed=fixed,GPU=GPU, local = local,varest=TRUE)#
# #
# fit3#
#
# fit3 <- GeoFit(data=DATA[1:nti,],coordx=coords,coordt=times[1:nti],corrmodel=corrmodel,distance=distance,#
#                maxdist=dd,maxtime=maxtime,likelihood="Marginal",type="Pairwise",model=model,X=X,#
#                start=start,fixed=fixed,varest=TRUE)#
# #
# fit3#
numtime=1;spacetime_dyn=FALSE;coordx_dyn=NULL;varest=TRUE#
likelihood='Marginal';coordy=NULL;coordx <- coords;coordt <- times[1:nti];data <- DATA[1:nti,]#
CMdl<-CkCorrModel(corrmodel)#
Stime <- CheckST(CMdl)#
# print(spacetime)#
if(Stime && is.null(coordx_dyn) && varest && likelihood=='Marginal')#
{#
  if(is.null(coordy)){coordy <- coordx[,2]#
  coordx <- coordx[,1]}#
  coordx_dyn=list()#
  datatemp=list()#
  for(k in 1:length(coordt))#
  {#
    coordx_dyn[[k]]=cbind(coordx,coordy)#
    datatemp[[k]]=data[k,]#
  }#
  data <- datatemp#
  rm(datatemp)#
}#
score <- sensmat <- varcov <- varimat <- parscale <- NULL#
### Initialization parameters:#
initparam <- WlsStart(coordx=coords, coordy=NULL, coordt=times[1:nti], coordx_dyn=coordx_dyn, corrmodel, data=data, distance="Eucl", "Fitting", fixed=fixed, grid=FALSE,#10#
                      likelihood='Marginal', maxdist=dd, maxtime=maxtime,  model=model, n=1, NULL,#16#
                      parscale, optimizer=='L-BFGS-B', radius=6378.388, start=start, taper=NULL, tapsep=NULL,#22#
                      type="Pairwise", varest=TRUE, vartype='SubSamp', weighted=FALSE, winconst=NULL, winstp=NULL,winconst_t=NULL, winstp_t=NULL, X=X)#31#
numcoord=length(initparam$coordx)#
if(initparam$spacetime) numtime=length(initparam$coordt)#
if(initparam$bivariate) numtime=2#
if(!is.null(coordx_dyn)) spacetime_dyn=TRUE#
dimat <- numcoord*numtime##
NS=cumsum(initparam$ns)#
if(is.null(dim(initparam$X)))#
{#
  X=as.matrix(rep(1,dimat))#
  if((initparam$spacetime||initparam$bivariate)&& spacetime_dyn)  X=as.matrix(rep(1,NS[numtime]))#
}#
num_betas=ncol(X) #
grid = FALSE#
if(grid)    #
{a=expand.grid(initparam$coordx,initparam$coordy);coordx=a[,1];coordy=a[,2]; #
}else {#
  if((initparam$spacetime||initparam$bivariate)&&(!spacetime_dyn)){#
    data=c(t(data))#
    coordx=rep(coordx,numtime);coordy=rep(coordy,numtime)#
  }#
  if((initparam$spacetime||initparam$bivariate)&&(spacetime_dyn)) initparam$data=unlist(initparam$data)          #
}#
if(initparam$spacetime||initparam$bivariate)   NS=c(0,NS)[-(length(initparam$ns)+1)]#
initparam$fixed#
#
dimmat <- initparam$numparam^2#
dmat <- initparam$numparam*(initparam$numparam+1)/2#
eps <- (.Machine$double.eps)^(1/3)#
param <- c(initparam$param, initparam$fixed)#
score <- double(initparam$numparam)#
paramcorr <- param[initparam$namescorr]#
nuisance <- param[initparam$namesnuis]#
sel=substr(names(nuisance),1,4)=="mean"#
mm=as.numeric(nuisance[sel])   ## mean paramteres#
other_nuis=as.numeric(nuisance[!sel]) #
nuisance=c(mm,other_nuis)#
sensmat <- double(dmat);varimat <- double(dmat)#
GD=.C('GodambeMat',as.double(mm),as.integer(initparam$bivariate),as.double(initparam$coordx),as.double(initparam$coordy),#
      as.double(initparam$coordt),as.integer(initparam$corrmodel), as.double(initparam$data),as.integer(initparam$distance),as.double(eps),#
      as.integer(initparam$flagcorr), as.integer(initparam$flagnuis),as.integer(grid),as.integer(initparam$likelihood),#
      as.double(c(X%*%mm)),as.integer(initparam$model),as.double(initparam$n),as.integer(num_betas),#
      as.integer(initparam$numparam),as.integer(initparam$numparamcorr),as.integer(length(paramcorr)),as.double(paramcorr),as.double(nuisance),#
      score=score,sensmat=sensmat,as.integer(initparam$spacetime),as.integer(initparam$type),#
      varimat=varimat,as.integer(initparam$vartype),as.double(initparam$winconst),as.double(initparam$winstp),as.double(initparam$winconst_t),as.double(initparam$winstp_t),#
      as.integer(initparam$weighted),c(t(X)),ns=as.integer(initparam$ns),NS=as.integer(NS),PACKAGE='GeoModels',DUP=TRUE,NAOK=TRUE)#
str(GD)#
# fit3 <- GeoFit(data=DATA[1:nti,],coordx=coords,coordt=times[1:nti],corrmodel=corrmodel,distance=distance,#
#                maxdist=dd,maxtime=maxtime,likelihood="Marginal",type="Pairwise",model=model,X=X,#
#                start=start,fixed=fixed,GPU=GPU, local = local,varest=TRUE)#
# #
# fit3
rm(list = ls())#
## see also  https://rdrr.io/rforge/gstat/man/wind.html#
require(gstat)#
require(mapdata)#
library(GeoModels)#
require(fields)#
require(mapproj)#
par(mfrow=c(1,1))#
#
# Wind Data: Daily average wind speeds for 1961-1978 at 12 synoptic #
# meteorological stations in the Republic of Ireland (Haslett and raftery 1989). #
# Wind speeds are in knots (1 knot = 0.5418 m/s), at each #
# of the stations of Haslett and Raftery#
#
## type of distance#
distance="Eucl" #distance="Geod"#
data("wind", package = "gstat")#
DATA=as.matrix(wind[,4:15])#
#DATA=DATA[,-3]  ### deleting ROSSLANE location site as in previous analysis#
sum(DATA==0)#
## where and when?#
which(DATA==0,arr.ind = T)#
### 16 values = to 0#
### we arbitrary replace 0 with  with the mean of the next and and the previous one (in time)#
DATA[5823:5825,]; DATA[5824,4]=(0.58+0.33)/2#
DATA[1507:1509,]; DATA[1508,6]=(1.58+2.42)/2#
DATA[2152:2154,]; DATA[2153,6]=(0.67+1.46)/2#
DATA[2351:2353,]; DATA[2352,6]=(3.21+0.92)/2#
DATA[3629:3631,]; DATA[3630,6]=(3.63+0.46)/2#
DATA[4053:4055,]; DATA[4054,6]=(4.63+2.50)/2#
DATA[5175:5177,]; DATA[5176,6]=(2.92+2.17)/2#
DATA[5456:5458,]; DATA[5457,6]=(0.13+2.37)/2#
DATA[4707:4709,]; DATA[4708,7]=(0.63+3.29)/2#
DATA[366:369,];   DATA[368,8]=DATA[367,8]=(2.79+3.75)/2#
DATA[694:697,];   DATA[695,8]=DATA[696,8]=(2.54+1)/2#
DATA[3653:3655,]; DATA[3654,8]=(0.33+0.75)/2#
DATA[5794:5796,]; DATA[5795,8]=(1.08+3.29)/2#
DATA[6176:6178,]; DATA[6177,9]=(2.13+0.21)/2#
# plot(density(DATA))#
#DATA[DATA==0]=0.05#
#
#wind.loc=wind.loc[-12,] ## deleting ROSSLANE lon-lat#
library(sp) # char2dms#
wind.loc$y = as.numeric(char2dms(as.character(wind.loc[["Latitude"]])))#
wind.loc$x = as.numeric(char2dms(as.character(wind.loc[["Longitude"]])))#
coordsLONLAT=cbind(wind.loc$x,wind.loc$y)  ## lonlat coordinates#
#
### graphic of ireland#
coordinates(wind.loc) = ~x+y#
# map("worldHires", xlim = c(-11,-5.4), ylim = c(51,55.5))#
# plot(wind.loc, add=TRUE, pch=16)#
# text(coordinates(wind.loc), pos=1, label=wind.loc$Station)#
############# sinusoidal projecion#
if(distance=="Eucl")#
{ P.sinusoidal <- mapproject(coordsLONLAT[,1],coordsLONLAT[,2],projection="sinusoidal")#
coords<-cbind(P.sinusoidal$x,P.sinusoidal$y)*6378.388#
}#
if(distance=="Geod") coords=coordsLONLAT#
### matrix of spatial great circle or euclidean distances#
if(distance=="Geod") dists2 = rdist.earth(coords, miles=FALSE)#
if(distance=="Eucl") dists2 = dist(coords)#
#
## compact support for weight function in pairwise likelihood#
dd=max(dists2)*1+0.01#
maxtime=2.01#
# maxtime = 100#
## length of data: daily obervations for 18 years (1961-1978) at 12 location sites#
(1978-1961+1)*365*12#
length(as.vector(DATA))#
### there is a  small difference due to years with 366 days#
times = 1:nrow(DATA) # number of temporal realizations#
length(times)#
########################################
#### selecting first kk year#
########################################
kk=5#
ll=365*kk#
times=1:ll#
DATA=DATA[1:ll,]#
###########################
###########################
###########################
#### some tines series#
#par(mfrow=c(3,4))#
wind$time = ISOdate(wind$year+1900, wind$month, wind$day)#
# time series of e.g. Dublin data:#
# plot(DUB~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Dub")#
#plot(CLA~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Cla")#
#plot(RPT ~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Rpt")#
#plot(VAL~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Val")#
#plot(ROS~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Ros")#
#plot(KIL~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Kil")#
#plot(SHA~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Sha")#
#plot(BIR~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Bir")#
#plot(MUL~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Mul")#
#plot(CLO~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Clo")#
#plot(BEL~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Bel")#
#plot(MAL~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Mal")#
######## matrix covariates. #############
nsites<-dim(DATA)[2]   ##number sites#
nt<-dim(DATA)[1]       ## number times#
#
tcoords<-(1:nt)%x%rep(1,dim(coordsLONLAT)[1])#
xycoords<-(rep(1,nt)%x%as.matrix(coordsLONLAT))#
#########################################################################
#########################################################################
#### computing period for spatial sites DUB#
s<-spectrum(wind$DUB)#
periodo<-1/(s$freq[which.max(s$spec)])#
periodo#
############################################
# number of harmonics#
ns<-3#
h<-matrix(0,length(tcoords),2*ns)#
tscale<-365#
for ( i in 1: ns) {#
  h[,(2*(i-1)+1)]<-sin(2*pi*(i)*tcoords/tscale)#
  h[,(2*i)]<-cos(2*pi*(i)*tcoords/tscale)#
}#
#########################################################################
#### matrix of covariates for regression harmonic#
X=as.matrix(cbind(rep(1,nrow(h)),h))#
dim(X)#
#########################################################################
#########################################################################
############## correlation model ########################################
#########################################################################
corrmodel="exp_exp"#
scale_s = 340#
scale_t= 3#
nugget = 0 ## must be fixed#
sill = 1 ## must be fixed#
#########################################################################
#########################################################################
############### Gamma RF estimation #####################################
#########################################################################
#########################################################################
model="Gamma"#
#
mean=log(mean(DATA))#
shape = 6#
start=list(shape=shape,mean=mean,scale_s=scale_s,scale_t=scale_t,mean1=0,mean2=0,mean3=0,mean4=0,mean5=0,mean6=0)#
fixed<-list(nugget=nugget,sill=sill) #
#
GPU = 0 # 0 or 2 GPU denotes de Device we are using, in my Mac it is 0 (8 cores CPU),1 (Iris not for double),2 (AMD for double)#
local = c(1,1) #First component is 8 if GPU is 0. It is 2^n for n>=0 if GPU is 2#
#
# fit2 <- GeoFit(data=DATA,coordx=coords,coordt=times,corrmodel=corrmodel,distance=distance,#
#                maxdist=dd,maxtime=maxtime,likelihood="Marginal",type="Pairwise",model=model,X=X,#
#                start=start,fixed=fixed,GPU=GPU, local = local,varest=TRUE)#
# #
# fit2#
nti <- 20#hasta 42 funciona. 1825 total#
# maxtime = 50#
# fit3 <- GeoFit(data=DATA[1:nti,],coordx=coords,coordt=times[1:nti],corrmodel=corrmodel,distance=distance,#
#                maxdist=dd,maxtime=maxtime,likelihood="Marginal",type="Pairwise",model=model,X=X,#
#                start=start,fixed=fixed,GPU=GPU, local = local,varest=TRUE)#
# #
# fit3#
#
# fit3 <- GeoFit(data=DATA[1:nti,],coordx=coords,coordt=times[1:nti],corrmodel=corrmodel,distance=distance,#
#                maxdist=dd,maxtime=maxtime,likelihood="Marginal",type="Pairwise",model=model,X=X,#
#                start=start,fixed=fixed,varest=TRUE)#
# #
# fit3#
numtime=1;spacetime_dyn=FALSE;coordx_dyn=NULL;varest=TRUE#
likelihood='Marginal';coordy=NULL;coordx <- coords;coordt <- times[1:nti];data <- DATA[1:nti,]#
CMdl<-CkCorrModel(corrmodel)#
Stime <- CheckST(CMdl)#
# print(spacetime)#
if(Stime && is.null(coordx_dyn) && varest && likelihood=='Marginal')#
{#
  if(is.null(coordy)){coordy <- coordx[,2]#
  coordx <- coordx[,1]}#
  coordx_dyn=list()#
  datatemp=list()#
  for(k in 1:length(coordt))#
  {#
    coordx_dyn[[k]]=cbind(coordx,coordy)#
    datatemp[[k]]=data[k,]#
  }#
  data <- datatemp#
  rm(datatemp)#
}#
score <- sensmat <- varcov <- varimat <- parscale <- NULL#
### Initialization parameters:#
initparam <- WlsStart(coordx=coords, coordy=NULL, coordt=times[1:nti], coordx_dyn=coordx_dyn, corrmodel, data=data, distance="Eucl", "Fitting", fixed=fixed, grid=FALSE,#10#
                      likelihood='Marginal', maxdist=dd, maxtime=maxtime,  model=model, n=1, NULL,#16#
                      parscale, optimizer=='L-BFGS-B', radius=6378.388, start=start, taper=NULL, tapsep=NULL,#22#
                      type="Pairwise", varest=TRUE, vartype='SubSamp', weighted=FALSE, winconst=NULL, winstp=NULL,winconst_t=NULL, winstp_t=NULL, X=X)#31#
numcoord=length(initparam$coordx)#
if(initparam$spacetime) numtime=length(initparam$coordt)#
if(initparam$bivariate) numtime=2#
if(!is.null(coordx_dyn)) spacetime_dyn=TRUE#
dimat <- numcoord*numtime##
NS=cumsum(initparam$ns)#
if(is.null(dim(initparam$X)))#
{#
  X=as.matrix(rep(1,dimat))#
  if((initparam$spacetime||initparam$bivariate)&& spacetime_dyn)  X=as.matrix(rep(1,NS[numtime]))#
}#
num_betas=ncol(X) #
grid = FALSE#
if(grid)    #
{a=expand.grid(initparam$coordx,initparam$coordy);coordx=a[,1];coordy=a[,2]; #
}else {#
  if((initparam$spacetime||initparam$bivariate)&&(!spacetime_dyn)){#
    data=c(t(data))#
    coordx=rep(coordx,numtime);coordy=rep(coordy,numtime)#
  }#
  if((initparam$spacetime||initparam$bivariate)&&(spacetime_dyn)) initparam$data=unlist(initparam$data)          #
}#
if(initparam$spacetime||initparam$bivariate)   NS=c(0,NS)[-(length(initparam$ns)+1)]#
initparam$fixed#
#
dimmat <- initparam$numparam^2#
dmat <- initparam$numparam*(initparam$numparam+1)/2#
eps <- (.Machine$double.eps)^(1/3)#
param <- c(initparam$param, initparam$fixed)#
score <- double(initparam$numparam)#
paramcorr <- param[initparam$namescorr]#
nuisance <- param[initparam$namesnuis]#
sel=substr(names(nuisance),1,4)=="mean"#
mm=as.numeric(nuisance[sel])   ## mean paramteres#
other_nuis=as.numeric(nuisance[!sel]) #
nuisance=c(mm,other_nuis)#
sensmat <- double(dmat);varimat <- double(dmat)#
GD=.C('GodambeMat',as.double(mm),as.integer(initparam$bivariate),as.double(initparam$coordx),as.double(initparam$coordy),#
      as.double(initparam$coordt),as.integer(initparam$corrmodel), as.double(initparam$data),as.integer(initparam$distance),as.double(eps),#
      as.integer(initparam$flagcorr), as.integer(initparam$flagnuis),as.integer(grid),as.integer(initparam$likelihood),#
      as.double(c(X%*%mm)),as.integer(initparam$model),as.double(initparam$n),as.integer(num_betas),#
      as.integer(initparam$numparam),as.integer(initparam$numparamcorr),as.integer(length(paramcorr)),as.double(paramcorr),as.double(nuisance),#
      score=score,sensmat=sensmat,as.integer(initparam$spacetime),as.integer(initparam$type),#
      varimat=varimat,as.integer(initparam$vartype),as.double(initparam$winconst),as.double(initparam$winstp),as.double(initparam$winconst_t),as.double(initparam$winstp_t),#
      as.integer(initparam$weighted),c(t(X)),ns=as.integer(initparam$ns),NS=as.integer(NS),PACKAGE='GeoModels',DUP=TRUE,NAOK=TRUE)#
str(GD)#
# fit3 <- GeoFit(data=DATA[1:nti,],coordx=coords,coordt=times[1:nti],corrmodel=corrmodel,distance=distance,#
#                maxdist=dd,maxtime=maxtime,likelihood="Marginal",type="Pairwise",model=model,X=X,#
#                start=start,fixed=fixed,GPU=GPU, local = local,varest=TRUE)#
# #
# fit3
rm(list = ls())#
## see also  https://rdrr.io/rforge/gstat/man/wind.html#
require(gstat)#
require(mapdata)#
library(GeoModels)#
require(fields)#
require(mapproj)#
par(mfrow=c(1,1))#
#
# Wind Data: Daily average wind speeds for 1961-1978 at 12 synoptic #
# meteorological stations in the Republic of Ireland (Haslett and raftery 1989). #
# Wind speeds are in knots (1 knot = 0.5418 m/s), at each #
# of the stations of Haslett and Raftery#
#
## type of distance#
distance="Eucl" #distance="Geod"#
data("wind", package = "gstat")#
DATA=as.matrix(wind[,4:15])#
#DATA=DATA[,-3]  ### deleting ROSSLANE location site as in previous analysis#
sum(DATA==0)#
## where and when?#
which(DATA==0,arr.ind = T)#
### 16 values = to 0#
### we arbitrary replace 0 with  with the mean of the next and and the previous one (in time)#
DATA[5823:5825,]; DATA[5824,4]=(0.58+0.33)/2#
DATA[1507:1509,]; DATA[1508,6]=(1.58+2.42)/2#
DATA[2152:2154,]; DATA[2153,6]=(0.67+1.46)/2#
DATA[2351:2353,]; DATA[2352,6]=(3.21+0.92)/2#
DATA[3629:3631,]; DATA[3630,6]=(3.63+0.46)/2#
DATA[4053:4055,]; DATA[4054,6]=(4.63+2.50)/2#
DATA[5175:5177,]; DATA[5176,6]=(2.92+2.17)/2#
DATA[5456:5458,]; DATA[5457,6]=(0.13+2.37)/2#
DATA[4707:4709,]; DATA[4708,7]=(0.63+3.29)/2#
DATA[366:369,];   DATA[368,8]=DATA[367,8]=(2.79+3.75)/2#
DATA[694:697,];   DATA[695,8]=DATA[696,8]=(2.54+1)/2#
DATA[3653:3655,]; DATA[3654,8]=(0.33+0.75)/2#
DATA[5794:5796,]; DATA[5795,8]=(1.08+3.29)/2#
DATA[6176:6178,]; DATA[6177,9]=(2.13+0.21)/2#
# plot(density(DATA))#
#DATA[DATA==0]=0.05#
#
#wind.loc=wind.loc[-12,] ## deleting ROSSLANE lon-lat#
library(sp) # char2dms#
wind.loc$y = as.numeric(char2dms(as.character(wind.loc[["Latitude"]])))#
wind.loc$x = as.numeric(char2dms(as.character(wind.loc[["Longitude"]])))#
coordsLONLAT=cbind(wind.loc$x,wind.loc$y)  ## lonlat coordinates#
#
### graphic of ireland#
coordinates(wind.loc) = ~x+y#
# map("worldHires", xlim = c(-11,-5.4), ylim = c(51,55.5))#
# plot(wind.loc, add=TRUE, pch=16)#
# text(coordinates(wind.loc), pos=1, label=wind.loc$Station)#
############# sinusoidal projecion#
if(distance=="Eucl")#
{ P.sinusoidal <- mapproject(coordsLONLAT[,1],coordsLONLAT[,2],projection="sinusoidal")#
coords<-cbind(P.sinusoidal$x,P.sinusoidal$y)*6378.388#
}#
if(distance=="Geod") coords=coordsLONLAT#
### matrix of spatial great circle or euclidean distances#
if(distance=="Geod") dists2 = rdist.earth(coords, miles=FALSE)#
if(distance=="Eucl") dists2 = dist(coords)#
#
## compact support for weight function in pairwise likelihood#
dd=max(dists2)*1+0.01#
maxtime=2.01#
# maxtime = 100#
## length of data: daily obervations for 18 years (1961-1978) at 12 location sites#
(1978-1961+1)*365*12#
length(as.vector(DATA))#
### there is a  small difference due to years with 366 days#
times = 1:nrow(DATA) # number of temporal realizations#
length(times)#
########################################
#### selecting first kk year#
########################################
kk=5#
ll=365*kk#
times=1:ll#
DATA=DATA[1:ll,]#
###########################
###########################
###########################
#### some tines series#
#par(mfrow=c(3,4))#
wind$time = ISOdate(wind$year+1900, wind$month, wind$day)#
# time series of e.g. Dublin data:#
# plot(DUB~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Dub")#
#plot(CLA~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Cla")#
#plot(RPT ~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Rpt")#
#plot(VAL~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Val")#
#plot(ROS~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Ros")#
#plot(KIL~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Kil")#
#plot(SHA~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Sha")#
#plot(BIR~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Bir")#
#plot(MUL~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Mul")#
#plot(CLO~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Clo")#
#plot(BEL~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Bel")#
#plot(MAL~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Mal")#
######## matrix covariates. #############
nsites<-dim(DATA)[2]   ##number sites#
nt<-dim(DATA)[1]       ## number times#
#
tcoords<-(1:nt)%x%rep(1,dim(coordsLONLAT)[1])#
xycoords<-(rep(1,nt)%x%as.matrix(coordsLONLAT))#
#########################################################################
#########################################################################
#### computing period for spatial sites DUB#
s<-spectrum(wind$DUB)#
periodo<-1/(s$freq[which.max(s$spec)])#
periodo#
############################################
# number of harmonics#
ns<-3#
h<-matrix(0,length(tcoords),2*ns)#
tscale<-365#
for ( i in 1: ns) {#
  h[,(2*(i-1)+1)]<-sin(2*pi*(i)*tcoords/tscale)#
  h[,(2*i)]<-cos(2*pi*(i)*tcoords/tscale)#
}#
#########################################################################
#### matrix of covariates for regression harmonic#
X=as.matrix(cbind(rep(1,nrow(h)),h))#
dim(X)#
#########################################################################
#########################################################################
############## correlation model ########################################
#########################################################################
corrmodel="exp_exp"#
scale_s = 340#
scale_t= 3#
nugget = 0 ## must be fixed#
sill = 1 ## must be fixed#
#########################################################################
#########################################################################
############### Gamma RF estimation #####################################
#########################################################################
#########################################################################
model="Gamma"#
#
mean=log(mean(DATA))#
shape = 6#
start=list(shape=shape,mean=mean,scale_s=scale_s,scale_t=scale_t,mean1=0,mean2=0,mean3=0,mean4=0,mean5=0,mean6=0)#
fixed<-list(nugget=nugget,sill=sill) #
#
GPU = 0 # 0 or 2 GPU denotes de Device we are using, in my Mac it is 0 (8 cores CPU),1 (Iris not for double),2 (AMD for double)#
local = c(1,1) #First component is 8 if GPU is 0. It is 2^n for n>=0 if GPU is 2#
#
# fit2 <- GeoFit(data=DATA,coordx=coords,coordt=times,corrmodel=corrmodel,distance=distance,#
#                maxdist=dd,maxtime=maxtime,likelihood="Marginal",type="Pairwise",model=model,X=X,#
#                start=start,fixed=fixed,GPU=GPU, local = local,varest=TRUE)#
# #
# fit2#
nti <- 50#hasta 42 funciona. 1825 total#
# maxtime = 50#
# fit3 <- GeoFit(data=DATA[1:nti,],coordx=coords,coordt=times[1:nti],corrmodel=corrmodel,distance=distance,#
#                maxdist=dd,maxtime=maxtime,likelihood="Marginal",type="Pairwise",model=model,X=X,#
#                start=start,fixed=fixed,GPU=GPU, local = local,varest=TRUE)#
# #
# fit3#
#
# fit3 <- GeoFit(data=DATA[1:nti,],coordx=coords,coordt=times[1:nti],corrmodel=corrmodel,distance=distance,#
#                maxdist=dd,maxtime=maxtime,likelihood="Marginal",type="Pairwise",model=model,X=X,#
#                start=start,fixed=fixed,varest=TRUE)#
# #
# fit3#
numtime=1;spacetime_dyn=FALSE;coordx_dyn=NULL;varest=TRUE#
likelihood='Marginal';coordy=NULL;coordx <- coords;coordt <- times[1:nti];data <- DATA[1:nti,]#
CMdl<-CkCorrModel(corrmodel)#
Stime <- CheckST(CMdl)#
# print(spacetime)#
if(Stime && is.null(coordx_dyn) && varest && likelihood=='Marginal')#
{#
  if(is.null(coordy)){coordy <- coordx[,2]#
  coordx <- coordx[,1]}#
  coordx_dyn=list()#
  datatemp=list()#
  for(k in 1:length(coordt))#
  {#
    coordx_dyn[[k]]=cbind(coordx,coordy)#
    datatemp[[k]]=data[k,]#
  }#
  data <- datatemp#
  rm(datatemp)#
}#
score <- sensmat <- varcov <- varimat <- parscale <- NULL#
### Initialization parameters:#
initparam <- WlsStart(coordx=coords, coordy=NULL, coordt=times[1:nti], coordx_dyn=coordx_dyn, corrmodel, data=data, distance="Eucl", "Fitting", fixed=fixed, grid=FALSE,#10#
                      likelihood='Marginal', maxdist=dd, maxtime=maxtime,  model=model, n=1, NULL,#16#
                      parscale, optimizer=='L-BFGS-B', radius=6378.388, start=start, taper=NULL, tapsep=NULL,#22#
                      type="Pairwise", varest=TRUE, vartype='SubSamp', weighted=FALSE, winconst=NULL, winstp=NULL,winconst_t=NULL, winstp_t=NULL, X=X)#31#
numcoord=length(initparam$coordx)#
if(initparam$spacetime) numtime=length(initparam$coordt)#
if(initparam$bivariate) numtime=2#
if(!is.null(coordx_dyn)) spacetime_dyn=TRUE#
dimat <- numcoord*numtime##
NS=cumsum(initparam$ns)#
if(is.null(dim(initparam$X)))#
{#
  X=as.matrix(rep(1,dimat))#
  if((initparam$spacetime||initparam$bivariate)&& spacetime_dyn)  X=as.matrix(rep(1,NS[numtime]))#
}#
num_betas=ncol(X) #
grid = FALSE#
if(grid)    #
{a=expand.grid(initparam$coordx,initparam$coordy);coordx=a[,1];coordy=a[,2]; #
}else {#
  if((initparam$spacetime||initparam$bivariate)&&(!spacetime_dyn)){#
    data=c(t(data))#
    coordx=rep(coordx,numtime);coordy=rep(coordy,numtime)#
  }#
  if((initparam$spacetime||initparam$bivariate)&&(spacetime_dyn)) initparam$data=unlist(initparam$data)          #
}#
if(initparam$spacetime||initparam$bivariate)   NS=c(0,NS)[-(length(initparam$ns)+1)]#
initparam$fixed#
#
dimmat <- initparam$numparam^2#
dmat <- initparam$numparam*(initparam$numparam+1)/2#
eps <- (.Machine$double.eps)^(1/3)#
param <- c(initparam$param, initparam$fixed)#
score <- double(initparam$numparam)#
paramcorr <- param[initparam$namescorr]#
nuisance <- param[initparam$namesnuis]#
sel=substr(names(nuisance),1,4)=="mean"#
mm=as.numeric(nuisance[sel])   ## mean paramteres#
other_nuis=as.numeric(nuisance[!sel]) #
nuisance=c(mm,other_nuis)#
sensmat <- double(dmat);varimat <- double(dmat)#
GD=.C('GodambeMat',as.double(mm),as.integer(initparam$bivariate),as.double(initparam$coordx),as.double(initparam$coordy),#
      as.double(initparam$coordt),as.integer(initparam$corrmodel), as.double(initparam$data),as.integer(initparam$distance),as.double(eps),#
      as.integer(initparam$flagcorr), as.integer(initparam$flagnuis),as.integer(grid),as.integer(initparam$likelihood),#
      as.double(c(X%*%mm)),as.integer(initparam$model),as.double(initparam$n),as.integer(num_betas),#
      as.integer(initparam$numparam),as.integer(initparam$numparamcorr),as.integer(length(paramcorr)),as.double(paramcorr),as.double(nuisance),#
      score=score,sensmat=sensmat,as.integer(initparam$spacetime),as.integer(initparam$type),#
      varimat=varimat,as.integer(initparam$vartype),as.double(initparam$winconst),as.double(initparam$winstp),as.double(initparam$winconst_t),as.double(initparam$winstp_t),#
      as.integer(initparam$weighted),c(t(X)),ns=as.integer(initparam$ns),NS=as.integer(NS),PACKAGE='GeoModels',DUP=TRUE,NAOK=TRUE)#
str(GD)#
# fit3 <- GeoFit(data=DATA[1:nti,],coordx=coords,coordt=times[1:nti],corrmodel=corrmodel,distance=distance,#
#                maxdist=dd,maxtime=maxtime,likelihood="Marginal",type="Pairwise",model=model,X=X,#
#                start=start,fixed=fixed,GPU=GPU, local = local,varest=TRUE)#
# #
# fit3
rm(list = ls())#
## see also  https://rdrr.io/rforge/gstat/man/wind.html#
require(gstat)#
require(mapdata)#
library(GeoModels)#
require(fields)#
require(mapproj)#
par(mfrow=c(1,1))#
#
# Wind Data: Daily average wind speeds for 1961-1978 at 12 synoptic #
# meteorological stations in the Republic of Ireland (Haslett and raftery 1989). #
# Wind speeds are in knots (1 knot = 0.5418 m/s), at each #
# of the stations of Haslett and Raftery#
#
## type of distance#
distance="Eucl" #distance="Geod"#
data("wind", package = "gstat")#
DATA=as.matrix(wind[,4:15])#
#DATA=DATA[,-3]  ### deleting ROSSLANE location site as in previous analysis#
sum(DATA==0)#
## where and when?#
which(DATA==0,arr.ind = T)#
### 16 values = to 0#
### we arbitrary replace 0 with  with the mean of the next and and the previous one (in time)#
DATA[5823:5825,]; DATA[5824,4]=(0.58+0.33)/2#
DATA[1507:1509,]; DATA[1508,6]=(1.58+2.42)/2#
DATA[2152:2154,]; DATA[2153,6]=(0.67+1.46)/2#
DATA[2351:2353,]; DATA[2352,6]=(3.21+0.92)/2#
DATA[3629:3631,]; DATA[3630,6]=(3.63+0.46)/2#
DATA[4053:4055,]; DATA[4054,6]=(4.63+2.50)/2#
DATA[5175:5177,]; DATA[5176,6]=(2.92+2.17)/2#
DATA[5456:5458,]; DATA[5457,6]=(0.13+2.37)/2#
DATA[4707:4709,]; DATA[4708,7]=(0.63+3.29)/2#
DATA[366:369,];   DATA[368,8]=DATA[367,8]=(2.79+3.75)/2#
DATA[694:697,];   DATA[695,8]=DATA[696,8]=(2.54+1)/2#
DATA[3653:3655,]; DATA[3654,8]=(0.33+0.75)/2#
DATA[5794:5796,]; DATA[5795,8]=(1.08+3.29)/2#
DATA[6176:6178,]; DATA[6177,9]=(2.13+0.21)/2#
# plot(density(DATA))#
#DATA[DATA==0]=0.05#
#
#wind.loc=wind.loc[-12,] ## deleting ROSSLANE lon-lat#
library(sp) # char2dms#
wind.loc$y = as.numeric(char2dms(as.character(wind.loc[["Latitude"]])))#
wind.loc$x = as.numeric(char2dms(as.character(wind.loc[["Longitude"]])))#
coordsLONLAT=cbind(wind.loc$x,wind.loc$y)  ## lonlat coordinates#
#
### graphic of ireland#
coordinates(wind.loc) = ~x+y#
# map("worldHires", xlim = c(-11,-5.4), ylim = c(51,55.5))#
# plot(wind.loc, add=TRUE, pch=16)#
# text(coordinates(wind.loc), pos=1, label=wind.loc$Station)#
############# sinusoidal projecion#
if(distance=="Eucl")#
{ P.sinusoidal <- mapproject(coordsLONLAT[,1],coordsLONLAT[,2],projection="sinusoidal")#
coords<-cbind(P.sinusoidal$x,P.sinusoidal$y)*6378.388#
}#
if(distance=="Geod") coords=coordsLONLAT#
### matrix of spatial great circle or euclidean distances#
if(distance=="Geod") dists2 = rdist.earth(coords, miles=FALSE)#
if(distance=="Eucl") dists2 = dist(coords)#
#
## compact support for weight function in pairwise likelihood#
dd=max(dists2)*1+0.01#
maxtime=2.01#
# maxtime = 100#
## length of data: daily obervations for 18 years (1961-1978) at 12 location sites#
(1978-1961+1)*365*12#
length(as.vector(DATA))#
### there is a  small difference due to years with 366 days#
times = 1:nrow(DATA) # number of temporal realizations#
length(times)#
########################################
#### selecting first kk year#
########################################
kk=5#
ll=365*kk#
times=1:ll#
DATA=DATA[1:ll,]#
###########################
###########################
###########################
#### some tines series#
#par(mfrow=c(3,4))#
wind$time = ISOdate(wind$year+1900, wind$month, wind$day)#
# time series of e.g. Dublin data:#
# plot(DUB~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Dub")#
#plot(CLA~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Cla")#
#plot(RPT ~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Rpt")#
#plot(VAL~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Val")#
#plot(ROS~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Ros")#
#plot(KIL~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Kil")#
#plot(SHA~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Sha")#
#plot(BIR~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Bir")#
#plot(MUL~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Mul")#
#plot(CLO~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Clo")#
#plot(BEL~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Bel")#
#plot(MAL~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Mal")#
######## matrix covariates. #############
nsites<-dim(DATA)[2]   ##number sites#
nt<-dim(DATA)[1]       ## number times#
#
tcoords<-(1:nt)%x%rep(1,dim(coordsLONLAT)[1])#
xycoords<-(rep(1,nt)%x%as.matrix(coordsLONLAT))#
#########################################################################
#########################################################################
#### computing period for spatial sites DUB#
s<-spectrum(wind$DUB)#
periodo<-1/(s$freq[which.max(s$spec)])#
periodo#
############################################
# number of harmonics#
ns<-3#
h<-matrix(0,length(tcoords),2*ns)#
tscale<-365#
for ( i in 1: ns) {#
  h[,(2*(i-1)+1)]<-sin(2*pi*(i)*tcoords/tscale)#
  h[,(2*i)]<-cos(2*pi*(i)*tcoords/tscale)#
}#
#########################################################################
#### matrix of covariates for regression harmonic#
X=as.matrix(cbind(rep(1,nrow(h)),h))#
dim(X)#
#########################################################################
#########################################################################
############## correlation model ########################################
#########################################################################
corrmodel="exp_exp"#
scale_s = 340#
scale_t= 3#
nugget = 0 ## must be fixed#
sill = 1 ## must be fixed#
#########################################################################
#########################################################################
############### Gamma RF estimation #####################################
#########################################################################
#########################################################################
model="Gamma"#
#
mean=log(mean(DATA))#
shape = 6#
start=list(shape=shape,mean=mean,scale_s=scale_s,scale_t=scale_t,mean1=0,mean2=0,mean3=0,mean4=0,mean5=0,mean6=0)#
fixed<-list(nugget=nugget,sill=sill) #
#
GPU = 0 # 0 or 2 GPU denotes de Device we are using, in my Mac it is 0 (8 cores CPU),1 (Iris not for double),2 (AMD for double)#
local = c(1,1) #First component is 8 if GPU is 0. It is 2^n for n>=0 if GPU is 2#
#
# fit2 <- GeoFit(data=DATA,coordx=coords,coordt=times,corrmodel=corrmodel,distance=distance,#
#                maxdist=dd,maxtime=maxtime,likelihood="Marginal",type="Pairwise",model=model,X=X,#
#                start=start,fixed=fixed,GPU=GPU, local = local,varest=TRUE)#
# #
# fit2#
nti <- 20#hasta 42 funciona. 1825 total#
# maxtime = 50#
# fit3 <- GeoFit(data=DATA[1:nti,],coordx=coords,coordt=times[1:nti],corrmodel=corrmodel,distance=distance,#
#                maxdist=dd,maxtime=maxtime,likelihood="Marginal",type="Pairwise",model=model,X=X,#
#                start=start,fixed=fixed,GPU=GPU, local = local,varest=TRUE)#
# #
# fit3#
#
# fit3 <- GeoFit(data=DATA[1:nti,],coordx=coords,coordt=times[1:nti],corrmodel=corrmodel,distance=distance,#
#                maxdist=dd,maxtime=maxtime,likelihood="Marginal",type="Pairwise",model=model,X=X,#
#                start=start,fixed=fixed,varest=TRUE)#
# #
# fit3#
numtime=1;spacetime_dyn=FALSE;coordx_dyn=NULL;varest=TRUE#
likelihood='Marginal';coordy=NULL;coordx <- coords;coordt <- times[1:nti];data <- DATA[1:nti,]#
CMdl<-CkCorrModel(corrmodel)#
Stime <- CheckST(CMdl)#
# print(spacetime)#
if(Stime && is.null(coordx_dyn) && varest && likelihood=='Marginal')#
{#
  if(is.null(coordy)){coordy <- coordx[,2]#
  coordx <- coordx[,1]}#
  coordx_dyn=list()#
  datatemp=list()#
  for(k in 1:length(coordt))#
  {#
    coordx_dyn[[k]]=cbind(coordx,coordy)#
    datatemp[[k]]=data[k,]#
  }#
  data <- datatemp#
  rm(datatemp)#
}#
score <- sensmat <- varcov <- varimat <- parscale <- NULL#
### Initialization parameters:#
initparam <- WlsStart(coordx=coords, coordy=NULL, coordt=times[1:nti], coordx_dyn=coordx_dyn, corrmodel, data=data, distance="Eucl", "Fitting", fixed=fixed, grid=FALSE,#10#
                      likelihood='Marginal', maxdist=dd, maxtime=maxtime,  model=model, n=1, NULL,#16#
                      parscale, optimizer=='L-BFGS-B', radius=6378.388, start=start, taper=NULL, tapsep=NULL,#22#
                      type="Pairwise", varest=TRUE, vartype='SubSamp', weighted=FALSE, winconst=NULL, winstp=NULL,winconst_t=NULL, winstp_t=NULL, X=X)#31#
numcoord=length(initparam$coordx)#
if(initparam$spacetime) numtime=length(initparam$coordt)#
if(initparam$bivariate) numtime=2#
if(!is.null(coordx_dyn)) spacetime_dyn=TRUE#
dimat <- numcoord*numtime##
NS=cumsum(initparam$ns)#
if(is.null(dim(initparam$X)))#
{#
  X=as.matrix(rep(1,dimat))#
  if((initparam$spacetime||initparam$bivariate)&& spacetime_dyn)  X=as.matrix(rep(1,NS[numtime]))#
}#
num_betas=ncol(X) #
grid = FALSE#
if(grid)    #
{a=expand.grid(initparam$coordx,initparam$coordy);coordx=a[,1];coordy=a[,2]; #
}else {#
  if((initparam$spacetime||initparam$bivariate)&&(!spacetime_dyn)){#
    data=c(t(data))#
    coordx=rep(coordx,numtime);coordy=rep(coordy,numtime)#
  }#
  if((initparam$spacetime||initparam$bivariate)&&(spacetime_dyn)) initparam$data=unlist(initparam$data)          #
}#
if(initparam$spacetime||initparam$bivariate)   NS=c(0,NS)[-(length(initparam$ns)+1)]#
initparam$fixed#
#
dimmat <- initparam$numparam^2#
dmat <- initparam$numparam*(initparam$numparam+1)/2#
eps <- (.Machine$double.eps)^(1/3)#
param <- c(initparam$param, initparam$fixed)#
score <- double(initparam$numparam)#
paramcorr <- param[initparam$namescorr]#
nuisance <- param[initparam$namesnuis]#
sel=substr(names(nuisance),1,4)=="mean"#
mm=as.numeric(nuisance[sel])   ## mean paramteres#
other_nuis=as.numeric(nuisance[!sel]) #
nuisance=c(mm,other_nuis)#
sensmat <- double(dmat);varimat <- double(dmat)#
GD=.C('GodambeMat',as.double(mm),as.integer(initparam$bivariate),as.double(initparam$coordx),as.double(initparam$coordy),#
      as.double(initparam$coordt),as.integer(initparam$corrmodel), as.double(initparam$data),as.integer(initparam$distance),as.double(eps),#
      as.integer(initparam$flagcorr), as.integer(initparam$flagnuis),as.integer(grid),as.integer(initparam$likelihood),#
      as.double(c(X%*%mm)),as.integer(initparam$model),as.double(initparam$n),as.integer(num_betas),#
      as.integer(initparam$numparam),as.integer(initparam$numparamcorr),as.integer(length(paramcorr)),as.double(paramcorr),as.double(nuisance),#
      score=score,sensmat=sensmat,as.integer(initparam$spacetime),as.integer(initparam$type),#
      varimat=varimat,as.integer(initparam$vartype),as.double(initparam$winconst),as.double(initparam$winstp),as.double(initparam$winconst_t),as.double(initparam$winstp_t),#
      as.integer(initparam$weighted),c(t(X)),ns=as.integer(initparam$ns),NS=as.integer(NS),PACKAGE='GeoModels',DUP=TRUE,NAOK=TRUE)#
str(GD)#
# fit3 <- GeoFit(data=DATA[1:nti,],coordx=coords,coordt=times[1:nti],corrmodel=corrmodel,distance=distance,#
#                maxdist=dd,maxtime=maxtime,likelihood="Marginal",type="Pairwise",model=model,X=X,#
#                start=start,fixed=fixed,GPU=GPU, local = local,varest=TRUE)#
# #
# fit3
rm(list = ls())#
## see also  https://rdrr.io/rforge/gstat/man/wind.html#
require(gstat)#
require(mapdata)#
library(GeoModels)#
require(fields)#
require(mapproj)#
par(mfrow=c(1,1))#
#
# Wind Data: Daily average wind speeds for 1961-1978 at 12 synoptic #
# meteorological stations in the Republic of Ireland (Haslett and raftery 1989). #
# Wind speeds are in knots (1 knot = 0.5418 m/s), at each #
# of the stations of Haslett and Raftery#
#
## type of distance#
distance="Eucl" #distance="Geod"#
data("wind", package = "gstat")#
DATA=as.matrix(wind[,4:15])#
#DATA=DATA[,-3]  ### deleting ROSSLANE location site as in previous analysis#
sum(DATA==0)#
## where and when?#
which(DATA==0,arr.ind = T)#
### 16 values = to 0#
### we arbitrary replace 0 with  with the mean of the next and and the previous one (in time)#
DATA[5823:5825,]; DATA[5824,4]=(0.58+0.33)/2#
DATA[1507:1509,]; DATA[1508,6]=(1.58+2.42)/2#
DATA[2152:2154,]; DATA[2153,6]=(0.67+1.46)/2#
DATA[2351:2353,]; DATA[2352,6]=(3.21+0.92)/2#
DATA[3629:3631,]; DATA[3630,6]=(3.63+0.46)/2#
DATA[4053:4055,]; DATA[4054,6]=(4.63+2.50)/2#
DATA[5175:5177,]; DATA[5176,6]=(2.92+2.17)/2#
DATA[5456:5458,]; DATA[5457,6]=(0.13+2.37)/2#
DATA[4707:4709,]; DATA[4708,7]=(0.63+3.29)/2#
DATA[366:369,];   DATA[368,8]=DATA[367,8]=(2.79+3.75)/2#
DATA[694:697,];   DATA[695,8]=DATA[696,8]=(2.54+1)/2#
DATA[3653:3655,]; DATA[3654,8]=(0.33+0.75)/2#
DATA[5794:5796,]; DATA[5795,8]=(1.08+3.29)/2#
DATA[6176:6178,]; DATA[6177,9]=(2.13+0.21)/2#
# plot(density(DATA))#
#DATA[DATA==0]=0.05#
#
#wind.loc=wind.loc[-12,] ## deleting ROSSLANE lon-lat#
library(sp) # char2dms#
wind.loc$y = as.numeric(char2dms(as.character(wind.loc[["Latitude"]])))#
wind.loc$x = as.numeric(char2dms(as.character(wind.loc[["Longitude"]])))#
coordsLONLAT=cbind(wind.loc$x,wind.loc$y)  ## lonlat coordinates#
#
### graphic of ireland#
coordinates(wind.loc) = ~x+y#
# map("worldHires", xlim = c(-11,-5.4), ylim = c(51,55.5))#
# plot(wind.loc, add=TRUE, pch=16)#
# text(coordinates(wind.loc), pos=1, label=wind.loc$Station)#
############# sinusoidal projecion#
if(distance=="Eucl")#
{ P.sinusoidal <- mapproject(coordsLONLAT[,1],coordsLONLAT[,2],projection="sinusoidal")#
coords<-cbind(P.sinusoidal$x,P.sinusoidal$y)*6378.388#
}#
if(distance=="Geod") coords=coordsLONLAT#
### matrix of spatial great circle or euclidean distances#
if(distance=="Geod") dists2 = rdist.earth(coords, miles=FALSE)#
if(distance=="Eucl") dists2 = dist(coords)#
#
## compact support for weight function in pairwise likelihood#
dd=max(dists2)*1+0.01#
maxtime=2.01#
# maxtime = 100#
## length of data: daily obervations for 18 years (1961-1978) at 12 location sites#
(1978-1961+1)*365*12#
length(as.vector(DATA))#
### there is a  small difference due to years with 366 days#
times = 1:nrow(DATA) # number of temporal realizations#
length(times)#
########################################
#### selecting first kk year#
########################################
kk=5#
ll=365*kk#
times=1:ll#
DATA=DATA[1:ll,]#
###########################
###########################
###########################
#### some tines series#
#par(mfrow=c(3,4))#
wind$time = ISOdate(wind$year+1900, wind$month, wind$day)#
# time series of e.g. Dublin data:#
# plot(DUB~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Dub")#
#plot(CLA~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Cla")#
#plot(RPT ~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Rpt")#
#plot(VAL~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Val")#
#plot(ROS~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Ros")#
#plot(KIL~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Kil")#
#plot(SHA~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Sha")#
#plot(BIR~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Bir")#
#plot(MUL~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Mul")#
#plot(CLO~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Clo")#
#plot(BEL~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Bel")#
#plot(MAL~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Mal")#
######## matrix covariates. #############
nsites<-dim(DATA)[2]   ##number sites#
nt<-dim(DATA)[1]       ## number times#
#
tcoords<-(1:nt)%x%rep(1,dim(coordsLONLAT)[1])#
xycoords<-(rep(1,nt)%x%as.matrix(coordsLONLAT))#
#########################################################################
#########################################################################
#### computing period for spatial sites DUB#
s<-spectrum(wind$DUB)#
periodo<-1/(s$freq[which.max(s$spec)])#
periodo#
############################################
# number of harmonics#
ns<-3#
h<-matrix(0,length(tcoords),2*ns)#
tscale<-365#
for ( i in 1: ns) {#
  h[,(2*(i-1)+1)]<-sin(2*pi*(i)*tcoords/tscale)#
  h[,(2*i)]<-cos(2*pi*(i)*tcoords/tscale)#
}#
#########################################################################
#### matrix of covariates for regression harmonic#
X=as.matrix(cbind(rep(1,nrow(h)),h))#
dim(X)#
#########################################################################
#########################################################################
############## correlation model ########################################
#########################################################################
corrmodel="exp_exp"#
scale_s = 340#
scale_t= 3#
nugget = 0 ## must be fixed#
sill = 1 ## must be fixed#
#########################################################################
#########################################################################
############### Gamma RF estimation #####################################
#########################################################################
#########################################################################
model="Gamma"#
#
mean=log(mean(DATA))#
shape = 6#
start=list(shape=shape,mean=mean,scale_s=scale_s,scale_t=scale_t,mean1=0,mean2=0,mean3=0,mean4=0,mean5=0,mean6=0)#
fixed<-list(nugget=nugget,sill=sill) #
#
GPU = 0 # 0 or 2 GPU denotes de Device we are using, in my Mac it is 0 (8 cores CPU),1 (Iris not for double),2 (AMD for double)#
local = c(1,1) #First component is 8 if GPU is 0. It is 2^n for n>=0 if GPU is 2#
#
# fit2 <- GeoFit(data=DATA,coordx=coords,coordt=times,corrmodel=corrmodel,distance=distance,#
#                maxdist=dd,maxtime=maxtime,likelihood="Marginal",type="Pairwise",model=model,X=X,#
#                start=start,fixed=fixed,GPU=GPU, local = local,varest=TRUE)#
# #
# fit2#
nti <- 5#hasta 42 funciona. 1825 total#
# maxtime = 50#
# fit3 <- GeoFit(data=DATA[1:nti,],coordx=coords,coordt=times[1:nti],corrmodel=corrmodel,distance=distance,#
#                maxdist=dd,maxtime=maxtime,likelihood="Marginal",type="Pairwise",model=model,X=X,#
#                start=start,fixed=fixed,GPU=GPU, local = local,varest=TRUE)#
# #
# fit3#
#
# fit3 <- GeoFit(data=DATA[1:nti,],coordx=coords,coordt=times[1:nti],corrmodel=corrmodel,distance=distance,#
#                maxdist=dd,maxtime=maxtime,likelihood="Marginal",type="Pairwise",model=model,X=X,#
#                start=start,fixed=fixed,varest=TRUE)#
# #
# fit3#
numtime=1;spacetime_dyn=FALSE;coordx_dyn=NULL;varest=TRUE#
likelihood='Marginal';coordy=NULL;coordx <- coords;coordt <- times[1:nti];data <- DATA[1:nti,]#
CMdl<-CkCorrModel(corrmodel)#
Stime <- CheckST(CMdl)#
# print(spacetime)#
if(Stime && is.null(coordx_dyn) && varest && likelihood=='Marginal')#
{#
  if(is.null(coordy)){coordy <- coordx[,2]#
  coordx <- coordx[,1]}#
  coordx_dyn=list()#
  datatemp=list()#
  for(k in 1:length(coordt))#
  {#
    coordx_dyn[[k]]=cbind(coordx,coordy)#
    datatemp[[k]]=data[k,]#
  }#
  data <- datatemp#
  rm(datatemp)#
}#
score <- sensmat <- varcov <- varimat <- parscale <- NULL#
### Initialization parameters:#
initparam <- WlsStart(coordx=coords, coordy=NULL, coordt=times[1:nti], coordx_dyn=coordx_dyn, corrmodel, data=data, distance="Eucl", "Fitting", fixed=fixed, grid=FALSE,#10#
                      likelihood='Marginal', maxdist=dd, maxtime=maxtime,  model=model, n=1, NULL,#16#
                      parscale, optimizer=='L-BFGS-B', radius=6378.388, start=start, taper=NULL, tapsep=NULL,#22#
                      type="Pairwise", varest=TRUE, vartype='SubSamp', weighted=FALSE, winconst=NULL, winstp=NULL,winconst_t=NULL, winstp_t=NULL, X=X)#31#
numcoord=length(initparam$coordx)#
if(initparam$spacetime) numtime=length(initparam$coordt)#
if(initparam$bivariate) numtime=2#
if(!is.null(coordx_dyn)) spacetime_dyn=TRUE#
dimat <- numcoord*numtime##
NS=cumsum(initparam$ns)#
if(is.null(dim(initparam$X)))#
{#
  X=as.matrix(rep(1,dimat))#
  if((initparam$spacetime||initparam$bivariate)&& spacetime_dyn)  X=as.matrix(rep(1,NS[numtime]))#
}#
num_betas=ncol(X) #
grid = FALSE#
if(grid)    #
{a=expand.grid(initparam$coordx,initparam$coordy);coordx=a[,1];coordy=a[,2]; #
}else {#
  if((initparam$spacetime||initparam$bivariate)&&(!spacetime_dyn)){#
    data=c(t(data))#
    coordx=rep(coordx,numtime);coordy=rep(coordy,numtime)#
  }#
  if((initparam$spacetime||initparam$bivariate)&&(spacetime_dyn)) initparam$data=unlist(initparam$data)          #
}#
if(initparam$spacetime||initparam$bivariate)   NS=c(0,NS)[-(length(initparam$ns)+1)]#
initparam$fixed#
#
dimmat <- initparam$numparam^2#
dmat <- initparam$numparam*(initparam$numparam+1)/2#
eps <- (.Machine$double.eps)^(1/3)#
param <- c(initparam$param, initparam$fixed)#
score <- double(initparam$numparam)#
paramcorr <- param[initparam$namescorr]#
nuisance <- param[initparam$namesnuis]#
sel=substr(names(nuisance),1,4)=="mean"#
mm=as.numeric(nuisance[sel])   ## mean paramteres#
other_nuis=as.numeric(nuisance[!sel]) #
nuisance=c(mm,other_nuis)#
sensmat <- double(dmat);varimat <- double(dmat)#
GD=.C('GodambeMat',as.double(mm),as.integer(initparam$bivariate),as.double(initparam$coordx),as.double(initparam$coordy),#
      as.double(initparam$coordt),as.integer(initparam$corrmodel), as.double(initparam$data),as.integer(initparam$distance),as.double(eps),#
      as.integer(initparam$flagcorr), as.integer(initparam$flagnuis),as.integer(grid),as.integer(initparam$likelihood),#
      as.double(c(X%*%mm)),as.integer(initparam$model),as.double(initparam$n),as.integer(num_betas),#
      as.integer(initparam$numparam),as.integer(initparam$numparamcorr),as.integer(length(paramcorr)),as.double(paramcorr),as.double(nuisance),#
      score=score,sensmat=sensmat,as.integer(initparam$spacetime),as.integer(initparam$type),#
      varimat=varimat,as.integer(initparam$vartype),as.double(initparam$winconst),as.double(initparam$winstp),as.double(initparam$winconst_t),as.double(initparam$winstp_t),#
      as.integer(initparam$weighted),c(t(X)),ns=as.integer(initparam$ns),NS=as.integer(NS),PACKAGE='GeoModels',DUP=TRUE,NAOK=TRUE)#
str(GD)#
# fit3 <- GeoFit(data=DATA[1:nti,],coordx=coords,coordt=times[1:nti],corrmodel=corrmodel,distance=distance,#
#                maxdist=dd,maxtime=maxtime,likelihood="Marginal",type="Pairwise",model=model,X=X,#
#                start=start,fixed=fixed,GPU=GPU, local = local,varest=TRUE)#
# #
# fit3
data
rm(list = ls())#
## see also  https://rdrr.io/rforge/gstat/man/wind.html#
require(gstat)#
require(mapdata)#
library(GeoModels)#
require(fields)#
require(mapproj)#
par(mfrow=c(1,1))#
#
# Wind Data: Daily average wind speeds for 1961-1978 at 12 synoptic #
# meteorological stations in the Republic of Ireland (Haslett and raftery 1989). #
# Wind speeds are in knots (1 knot = 0.5418 m/s), at each #
# of the stations of Haslett and Raftery#
#
## type of distance#
distance="Eucl" #distance="Geod"#
data("wind", package = "gstat")#
DATA=as.matrix(wind[,4:15])#
#DATA=DATA[,-3]  ### deleting ROSSLANE location site as in previous analysis#
sum(DATA==0)#
## where and when?#
which(DATA==0,arr.ind = T)#
### 16 values = to 0#
### we arbitrary replace 0 with  with the mean of the next and and the previous one (in time)#
DATA[5823:5825,]; DATA[5824,4]=(0.58+0.33)/2#
DATA[1507:1509,]; DATA[1508,6]=(1.58+2.42)/2#
DATA[2152:2154,]; DATA[2153,6]=(0.67+1.46)/2#
DATA[2351:2353,]; DATA[2352,6]=(3.21+0.92)/2#
DATA[3629:3631,]; DATA[3630,6]=(3.63+0.46)/2#
DATA[4053:4055,]; DATA[4054,6]=(4.63+2.50)/2#
DATA[5175:5177,]; DATA[5176,6]=(2.92+2.17)/2#
DATA[5456:5458,]; DATA[5457,6]=(0.13+2.37)/2#
DATA[4707:4709,]; DATA[4708,7]=(0.63+3.29)/2#
DATA[366:369,];   DATA[368,8]=DATA[367,8]=(2.79+3.75)/2#
DATA[694:697,];   DATA[695,8]=DATA[696,8]=(2.54+1)/2#
DATA[3653:3655,]; DATA[3654,8]=(0.33+0.75)/2#
DATA[5794:5796,]; DATA[5795,8]=(1.08+3.29)/2#
DATA[6176:6178,]; DATA[6177,9]=(2.13+0.21)/2#
# plot(density(DATA))#
#DATA[DATA==0]=0.05#
#
#wind.loc=wind.loc[-12,] ## deleting ROSSLANE lon-lat#
library(sp) # char2dms#
wind.loc$y = as.numeric(char2dms(as.character(wind.loc[["Latitude"]])))#
wind.loc$x = as.numeric(char2dms(as.character(wind.loc[["Longitude"]])))#
coordsLONLAT=cbind(wind.loc$x,wind.loc$y)  ## lonlat coordinates#
#
### graphic of ireland#
coordinates(wind.loc) = ~x+y#
# map("worldHires", xlim = c(-11,-5.4), ylim = c(51,55.5))#
# plot(wind.loc, add=TRUE, pch=16)#
# text(coordinates(wind.loc), pos=1, label=wind.loc$Station)#
############# sinusoidal projecion#
if(distance=="Eucl")#
{ P.sinusoidal <- mapproject(coordsLONLAT[,1],coordsLONLAT[,2],projection="sinusoidal")#
coords<-cbind(P.sinusoidal$x,P.sinusoidal$y)*6378.388#
}#
if(distance=="Geod") coords=coordsLONLAT#
### matrix of spatial great circle or euclidean distances#
if(distance=="Geod") dists2 = rdist.earth(coords, miles=FALSE)#
if(distance=="Eucl") dists2 = dist(coords)#
#
## compact support for weight function in pairwise likelihood#
dd=max(dists2)*1+0.01#
maxtime=2.01#
# maxtime = 100#
## length of data: daily obervations for 18 years (1961-1978) at 12 location sites#
(1978-1961+1)*365*12#
length(as.vector(DATA))#
### there is a  small difference due to years with 366 days#
times = 1:nrow(DATA) # number of temporal realizations#
length(times)#
########################################
#### selecting first kk year#
########################################
kk=5#
ll=365*kk#
times=1:ll#
DATA=DATA[1:ll,]#
###########################
###########################
###########################
#### some tines series#
#par(mfrow=c(3,4))#
wind$time = ISOdate(wind$year+1900, wind$month, wind$day)#
# time series of e.g. Dublin data:#
# plot(DUB~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Dub")#
#plot(CLA~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Cla")#
#plot(RPT ~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Rpt")#
#plot(VAL~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Val")#
#plot(ROS~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Ros")#
#plot(KIL~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Kil")#
#plot(SHA~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Sha")#
#plot(BIR~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Bir")#
#plot(MUL~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Mul")#
#plot(CLO~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Clo")#
#plot(BEL~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Bel")#
#plot(MAL~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Mal")#
######## matrix covariates. #############
nsites<-dim(DATA)[2]   ##number sites#
nt<-dim(DATA)[1]       ## number times#
#
tcoords<-(1:nt)%x%rep(1,dim(coordsLONLAT)[1])#
xycoords<-(rep(1,nt)%x%as.matrix(coordsLONLAT))#
#########################################################################
#########################################################################
#### computing period for spatial sites DUB#
s<-spectrum(wind$DUB)#
periodo<-1/(s$freq[which.max(s$spec)])#
periodo#
############################################
# number of harmonics#
ns<-3#
h<-matrix(0,length(tcoords),2*ns)#
tscale<-365#
for ( i in 1: ns) {#
  h[,(2*(i-1)+1)]<-sin(2*pi*(i)*tcoords/tscale)#
  h[,(2*i)]<-cos(2*pi*(i)*tcoords/tscale)#
}#
#########################################################################
#### matrix of covariates for regression harmonic#
X=as.matrix(cbind(rep(1,nrow(h)),h))#
dim(X)#
#########################################################################
#########################################################################
############## correlation model ########################################
#########################################################################
corrmodel="exp_exp"#
scale_s = 340#
scale_t= 3#
nugget = 0 ## must be fixed#
sill = 1 ## must be fixed#
#########################################################################
#########################################################################
############### Gamma RF estimation #####################################
#########################################################################
#########################################################################
model="Gamma"#
#
mean=log(mean(DATA))#
shape = 6#
start=list(shape=shape,mean=mean,scale_s=scale_s,scale_t=scale_t,mean1=0,mean2=0,mean3=0,mean4=0,mean5=0,mean6=0)#
fixed<-list(nugget=nugget,sill=sill) #
#
GPU = 0 # 0 or 2 GPU denotes de Device we are using, in my Mac it is 0 (8 cores CPU),1 (Iris not for double),2 (AMD for double)#
local = c(1,1) #First component is 8 if GPU is 0. It is 2^n for n>=0 if GPU is 2#
#
# fit2 <- GeoFit(data=DATA,coordx=coords,coordt=times,corrmodel=corrmodel,distance=distance,#
#                maxdist=dd,maxtime=maxtime,likelihood="Marginal",type="Pairwise",model=model,X=X,#
#                start=start,fixed=fixed,GPU=GPU, local = local,varest=TRUE)#
# #
# fit2#
nti <- 5#hasta 42 funciona. 1825 total#
# maxtime = 50#
# fit3 <- GeoFit(data=DATA[1:nti,],coordx=coords,coordt=times[1:nti],corrmodel=corrmodel,distance=distance,#
#                maxdist=dd,maxtime=maxtime,likelihood="Marginal",type="Pairwise",model=model,X=X,#
#                start=start,fixed=fixed,GPU=GPU, local = local,varest=TRUE)#
# #
# fit3#
#
# fit3 <- GeoFit(data=DATA[1:nti,],coordx=coords,coordt=times[1:nti],corrmodel=corrmodel,distance=distance,#
#                maxdist=dd,maxtime=maxtime,likelihood="Marginal",type="Pairwise",model=model,X=X,#
#                start=start,fixed=fixed,varest=TRUE)#
# #
# fit3#
numtime=1;spacetime_dyn=FALSE;coordx_dyn=NULL;varest=TRUE#
likelihood='Marginal';coordy=NULL;coordx <- coords;coordt <- times[1:nti];data <- DATA[1:nti,]#
CMdl<-CkCorrModel(corrmodel)#
Stime <- CheckST(CMdl)#
# print(spacetime)#
if(Stime && is.null(coordx_dyn) && varest && likelihood=='Marginal')#
{#
  if(is.null(coordy)){coordy <- coordx[,2]#
  coordx <- coordx[,1]}#
  coordx_dyn=list()#
  datatemp=list()#
  for(k in 1:length(coordt))#
  {#
    coordx_dyn[[k]]=cbind(coordx,coordy)#
    datatemp[[k]]=data[k,]#
  }#
  data <- datatemp#
  rm(datatemp)#
}#
score <- sensmat <- varcov <- varimat <- parscale <- NULL#
### Initialization parameters:#
initparam <- WlsStart(coordx=coords, coordy=NULL, coordt=times[1:nti], coordx_dyn=coordx_dyn, corrmodel, data=data, distance="Eucl", "Fitting", fixed=fixed, grid=FALSE,#10#
                      likelihood='Marginal', maxdist=dd, maxtime=maxtime,  model=model, n=1, NULL,#16#
                      parscale, optimizer=='L-BFGS-B', radius=6378.388, start=start, taper=NULL, tapsep=NULL,#22#
                      type="Pairwise", varest=TRUE, vartype='SubSamp', weighted=FALSE, winconst=NULL, winstp=NULL,winconst_t=NULL, winstp_t=NULL, X=X)#31#
numcoord=length(initparam$coordx)#
if(initparam$spacetime) numtime=length(initparam$coordt)#
if(initparam$bivariate) numtime=2#
if(!is.null(coordx_dyn)) spacetime_dyn=TRUE#
dimat <- numcoord*numtime##
NS=cumsum(initparam$ns)#
if(is.null(dim(initparam$X)))#
{#
  X=as.matrix(rep(1,dimat))#
  if((initparam$spacetime||initparam$bivariate)&& spacetime_dyn)  X=as.matrix(rep(1,NS[numtime]))#
}#
num_betas=ncol(X) #
grid = FALSE#
if(grid)    #
{a=expand.grid(initparam$coordx,initparam$coordy);coordx=a[,1];coordy=a[,2]; #
}else {#
  if((initparam$spacetime||initparam$bivariate)&&(!spacetime_dyn)){#
    data=c(t(data))#
    coordx=rep(coordx,numtime);coordy=rep(coordy,numtime)#
  }#
  if((initparam$spacetime||initparam$bivariate)&&(spacetime_dyn)) initparam$data=unlist(initparam$data)          #
}#
if(initparam$spacetime||initparam$bivariate)   NS=c(0,NS)[-(length(initparam$ns)+1)]#
initparam$fixed#
#
dimmat <- initparam$numparam^2#
dmat <- initparam$numparam*(initparam$numparam+1)/2#
eps <- (.Machine$double.eps)^(1/3)#
param <- c(initparam$param, initparam$fixed)#
score <- double(initparam$numparam)#
paramcorr <- param[initparam$namescorr]#
nuisance <- param[initparam$namesnuis]#
sel=substr(names(nuisance),1,4)=="mean"#
mm=as.numeric(nuisance[sel])   ## mean paramteres#
other_nuis=as.numeric(nuisance[!sel]) #
nuisance=c(mm,other_nuis)#
sensmat <- double(dmat);varimat <- double(dmat)#
GD=.C('GodambeMat',as.double(mm),as.integer(initparam$bivariate),as.double(initparam$coordx),as.double(initparam$coordy),#
      as.double(initparam$coordt),as.integer(initparam$corrmodel), as.double(initparam$data),as.integer(initparam$distance),as.double(eps),#
      as.integer(initparam$flagcorr), as.integer(initparam$flagnuis),as.integer(grid),as.integer(initparam$likelihood),#
      as.double(c(X%*%mm)),as.integer(initparam$model),as.double(initparam$n),as.integer(num_betas),#
      as.integer(initparam$numparam),as.integer(initparam$numparamcorr),as.integer(length(paramcorr)),as.double(paramcorr),as.double(nuisance),#
      score=score,sensmat=sensmat,as.integer(initparam$spacetime),as.integer(initparam$type),#
      varimat=varimat,as.integer(initparam$vartype),as.double(initparam$winconst),as.double(initparam$winstp),as.double(initparam$winconst_t),as.double(initparam$winstp_t),#
      as.integer(initparam$weighted),c(t(X)),ns=as.integer(initparam$ns),NS=as.integer(NS),PACKAGE='GeoModels',DUP=TRUE,NAOK=TRUE)#
str(GD)#
# fit3 <- GeoFit(data=DATA[1:nti,],coordx=coords,coordt=times[1:nti],corrmodel=corrmodel,distance=distance,#
#                maxdist=dd,maxtime=maxtime,likelihood="Marginal",type="Pairwise",model=model,X=X,#
#                start=start,fixed=fixed,GPU=GPU, local = local,varest=TRUE)#
# #
# fit3
rm(list = ls())#
## see also  https://rdrr.io/rforge/gstat/man/wind.html#
require(gstat)#
require(mapdata)#
library(GeoModels)#
require(fields)#
require(mapproj)#
par(mfrow=c(1,1))#
#
# Wind Data: Daily average wind speeds for 1961-1978 at 12 synoptic #
# meteorological stations in the Republic of Ireland (Haslett and raftery 1989). #
# Wind speeds are in knots (1 knot = 0.5418 m/s), at each #
# of the stations of Haslett and Raftery#
#
## type of distance#
distance="Eucl" #distance="Geod"#
data("wind", package = "gstat")#
DATA=as.matrix(wind[,4:15])#
#DATA=DATA[,-3]  ### deleting ROSSLANE location site as in previous analysis#
sum(DATA==0)#
## where and when?#
which(DATA==0,arr.ind = T)#
### 16 values = to 0#
### we arbitrary replace 0 with  with the mean of the next and and the previous one (in time)#
DATA[5823:5825,]; DATA[5824,4]=(0.58+0.33)/2#
DATA[1507:1509,]; DATA[1508,6]=(1.58+2.42)/2#
DATA[2152:2154,]; DATA[2153,6]=(0.67+1.46)/2#
DATA[2351:2353,]; DATA[2352,6]=(3.21+0.92)/2#
DATA[3629:3631,]; DATA[3630,6]=(3.63+0.46)/2#
DATA[4053:4055,]; DATA[4054,6]=(4.63+2.50)/2#
DATA[5175:5177,]; DATA[5176,6]=(2.92+2.17)/2#
DATA[5456:5458,]; DATA[5457,6]=(0.13+2.37)/2#
DATA[4707:4709,]; DATA[4708,7]=(0.63+3.29)/2#
DATA[366:369,];   DATA[368,8]=DATA[367,8]=(2.79+3.75)/2#
DATA[694:697,];   DATA[695,8]=DATA[696,8]=(2.54+1)/2#
DATA[3653:3655,]; DATA[3654,8]=(0.33+0.75)/2#
DATA[5794:5796,]; DATA[5795,8]=(1.08+3.29)/2#
DATA[6176:6178,]; DATA[6177,9]=(2.13+0.21)/2#
# plot(density(DATA))#
#DATA[DATA==0]=0.05#
#
#wind.loc=wind.loc[-12,] ## deleting ROSSLANE lon-lat#
library(sp) # char2dms#
wind.loc$y = as.numeric(char2dms(as.character(wind.loc[["Latitude"]])))#
wind.loc$x = as.numeric(char2dms(as.character(wind.loc[["Longitude"]])))#
coordsLONLAT=cbind(wind.loc$x,wind.loc$y)  ## lonlat coordinates#
#
### graphic of ireland#
coordinates(wind.loc) = ~x+y#
# map("worldHires", xlim = c(-11,-5.4), ylim = c(51,55.5))#
# plot(wind.loc, add=TRUE, pch=16)#
# text(coordinates(wind.loc), pos=1, label=wind.loc$Station)#
############# sinusoidal projecion#
if(distance=="Eucl")#
{ P.sinusoidal <- mapproject(coordsLONLAT[,1],coordsLONLAT[,2],projection="sinusoidal")#
coords<-cbind(P.sinusoidal$x,P.sinusoidal$y)*6378.388#
}#
if(distance=="Geod") coords=coordsLONLAT#
### matrix of spatial great circle or euclidean distances#
if(distance=="Geod") dists2 = rdist.earth(coords, miles=FALSE)#
if(distance=="Eucl") dists2 = dist(coords)#
#
## compact support for weight function in pairwise likelihood#
dd=max(dists2)*1+0.01#
maxtime=2.01#
# maxtime = 100#
## length of data: daily obervations for 18 years (1961-1978) at 12 location sites#
(1978-1961+1)*365*12#
length(as.vector(DATA))#
### there is a  small difference due to years with 366 days#
times = 1:nrow(DATA) # number of temporal realizations#
length(times)#
########################################
#### selecting first kk year#
########################################
kk=5#
ll=365*kk#
times=1:ll#
DATA=DATA[1:ll,]#
###########################
###########################
###########################
#### some tines series#
#par(mfrow=c(3,4))#
wind$time = ISOdate(wind$year+1900, wind$month, wind$day)#
# time series of e.g. Dublin data:#
# plot(DUB~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Dub")#
#plot(CLA~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Cla")#
#plot(RPT ~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Rpt")#
#plot(VAL~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Val")#
#plot(ROS~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Ros")#
#plot(KIL~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Kil")#
#plot(SHA~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Sha")#
#plot(BIR~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Bir")#
#plot(MUL~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Mul")#
#plot(CLO~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Clo")#
#plot(BEL~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Bel")#
#plot(MAL~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Mal")#
######## matrix covariates. #############
nsites<-dim(DATA)[2]   ##number sites#
nt<-dim(DATA)[1]       ## number times#
#
nti <- 100#
nt <- nti#
#
tcoords<-(1:nt)%x%rep(1,dim(coordsLONLAT)[1])#
xycoords<-(rep(1,nt)%x%as.matrix(coordsLONLAT))#
#########################################################################
#########################################################################
#### computing period for spatial sites DUB#
s<-spectrum(wind$DUB)#
periodo<-1/(s$freq[which.max(s$spec)])#
periodo#
############################################
# number of harmonics#
ns<-3#
h<-matrix(0,length(tcoords),2*ns)#
tscale<-365#
for ( i in 1: ns) {#
  h[,(2*(i-1)+1)]<-sin(2*pi*(i)*tcoords/tscale)#
  h[,(2*i)]<-cos(2*pi*(i)*tcoords/tscale)#
}#
#########################################################################
#### matrix of covariates for regression harmonic#
X=as.matrix(cbind(rep(1,nrow(h)),h))#
dim(X)#
#########################################################################
#########################################################################
############## correlation model ########################################
#########################################################################
corrmodel="exp_exp"#
scale_s = 340#
scale_t= 3#
nugget = 0 ## must be fixed#
sill = 1 ## must be fixed#
#########################################################################
#########################################################################
############### Gamma RF estimation #####################################
#########################################################################
#########################################################################
model="Gamma"#
#
mean=log(mean(DATA))#
shape = 6#
start=list(shape=shape,mean=mean,scale_s=scale_s,scale_t=scale_t,mean1=0,mean2=0,mean3=0,mean4=0,mean5=0,mean6=0)#
fixed<-list(nugget=nugget,sill=sill) #
#
GPU = 0 # 0 or 2 GPU denotes de Device we are using, in my Mac it is 0 (8 cores CPU),1 (Iris not for double),2 (AMD for double)#
local = c(1,1) #First component is 8 if GPU is 0. It is 2^n for n>=0 if GPU is 2#
#
# fit2 <- GeoFit(data=DATA,coordx=coords,coordt=times,corrmodel=corrmodel,distance=distance,#
#                maxdist=dd,maxtime=maxtime,likelihood="Marginal",type="Pairwise",model=model,X=X,#
#                start=start,fixed=fixed,GPU=GPU, local = local,varest=TRUE)#
# #
# fit2#
#hasta 42 funciona. 1825 total#
npts <- 12#
# maxtime = 50#
# fit3 <- GeoFit(data=DATA[1:nti,],coordx=coords,coordt=times[1:nti],corrmodel=corrmodel,distance=distance,#
#                maxdist=dd,maxtime=maxtime,likelihood="Marginal",type="Pairwise",model=model,X=X,#
#                start=start,fixed=fixed,GPU=GPU, local = local,varest=TRUE)#
# #
# fit3#
#
# fit3 <- GeoFit(data=DATA[1:nti,],coordx=coords,coordt=times[1:nti],corrmodel=corrmodel,distance=distance,#
#                maxdist=dd,maxtime=maxtime,likelihood="Marginal",type="Pairwise",model=model,X=X,#
#                start=start,fixed=fixed,varest=TRUE)#
# #
# fit3#
numtime=1;spacetime_dyn=FALSE;coordx_dyn=NULL;varest=TRUE#
likelihood='Marginal';coordy=NULL;coordx <- coords[1:npts,];coordt <- times[1:nti];data <- DATA[1:nti,1:npts]#
CMdl<-CkCorrModel(corrmodel)#
Stime <- CheckST(CMdl)#
# print(spacetime)#
if(Stime && is.null(coordx_dyn) && varest && likelihood=='Marginal')#
{#
  if(is.null(coordy)){coordy <- coordx[,2]#
  coordx <- coordx[,1]}#
  coordx_dyn=list()#
  datatemp=list()#
  for(k in 1:length(coordt))#
  {#
    coordx_dyn[[k]]=cbind(coordx,coordy)#
    datatemp[[k]]=data[k,]#
  }#
  data <- datatemp#
  rm(datatemp)#
}#
score <- sensmat <- varcov <- varimat <- parscale <- NULL#
### Initialization parameters:#
# X=X[1:nti,]#
initparam <- WlsStart(coordx=coords, coordy=NULL, coordt=times[1:nti], coordx_dyn=coordx_dyn, corrmodel, data=data, distance="Eucl", "Fitting", fixed=fixed, grid=FALSE,#10#
                      likelihood='Marginal', maxdist=dd, maxtime=maxtime,  model=model, n=1, NULL,#16#
                      parscale, optimizer=='L-BFGS-B', radius=6378.388, start=start, taper=NULL, tapsep=NULL,#22#
                      type="Pairwise", varest=TRUE, vartype='SubSamp', weighted=FALSE, winconst=NULL, winstp=NULL,winconst_t=NULL, winstp_t=NULL, X = X)#31#
numcoord=length(initparam$coordx)#
if(initparam$spacetime) numtime=length(initparam$coordt)#
if(initparam$bivariate) numtime=2#
if(!is.null(coordx_dyn)) spacetime_dyn=TRUE#
dimat <- numcoord*numtime##
NS=cumsum(initparam$ns)#
if(is.null(dim(initparam$X)))#
{#
  X=as.matrix(rep(1,dimat))#
  if((initparam$spacetime||initparam$bivariate)&& spacetime_dyn)  X=as.matrix(rep(1,NS[numtime]))#
}#
num_betas=ncol(X) #
grid = FALSE#
if(grid)    #
{a=expand.grid(initparam$coordx,initparam$coordy);coordx=a[,1];coordy=a[,2]; #
}else {#
  if((initparam$spacetime||initparam$bivariate)&&(!spacetime_dyn)){#
    data=c(t(data))#
    coordx=rep(coordx,numtime);coordy=rep(coordy,numtime)#
  }#
  if((initparam$spacetime||initparam$bivariate)&&(spacetime_dyn)) initparam$data=unlist(initparam$data)          #
}#
if(initparam$spacetime||initparam$bivariate)   NS=c(0,NS)[-(length(initparam$ns)+1)]#
initparam$fixed#
#
dimmat <- initparam$numparam^2#
dmat <- initparam$numparam*(initparam$numparam+1)/2#
eps <- (.Machine$double.eps)^(1/3)#
param <- c(initparam$param, initparam$fixed)#
score <- double(initparam$numparam)#
paramcorr <- param[initparam$namescorr]#
nuisance <- param[initparam$namesnuis]#
sel=substr(names(nuisance),1,4)=="mean"#
mm=as.numeric(nuisance[sel])   ## mean paramteres#
other_nuis=as.numeric(nuisance[!sel]) #
nuisance=c(mm,other_nuis)#
sensmat <- double(dmat);varimat <- double(dmat)#
GD=.C('GodambeMat',as.double(mm),as.integer(initparam$bivariate),as.double(initparam$coordx),as.double(initparam$coordy),#
      as.double(initparam$coordt),as.integer(initparam$corrmodel), as.double(initparam$data),as.integer(initparam$distance),as.double(eps),#
      as.integer(initparam$flagcorr), as.integer(initparam$flagnuis),as.integer(grid),as.integer(initparam$likelihood),#
      as.double(c(X%*%mm)),as.integer(initparam$model),as.double(initparam$n),as.integer(num_betas),#
      as.integer(initparam$numparam),as.integer(initparam$numparamcorr),as.integer(length(paramcorr)),as.double(paramcorr),as.double(nuisance),#
      score=score,sensmat=sensmat,as.integer(initparam$spacetime),as.integer(initparam$type),#
      varimat=varimat,as.integer(initparam$vartype),as.double(initparam$winconst),as.double(initparam$winstp),as.double(initparam$winconst_t),as.double(initparam$winstp_t),#
      as.integer(initparam$weighted),c(t(X)),ns=as.integer(initparam$ns),NS=as.integer(NS),PACKAGE='GeoModels',DUP=TRUE,NAOK=TRUE)#
str(GD)#
# fit3 <- GeoFit(data=DATA[1:nti,],coordx=coords,coordt=times[1:nti],corrmodel=corrmodel,distance=distance,#
#                maxdist=dd,maxtime=maxtime,likelihood="Marginal",type="Pairwise",model=model,X=X,#
#                start=start,fixed=fixed,GPU=GPU, local = local,varest=TRUE)#
# #
# fit3
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="Gamma"#
set.seed(112)#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,1,0.5)#1#
coordx_dyn=list()#
#
maxN=100#130#
for(k in 1:length(coordt))#
{#
  NN=sample(1:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
# coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 1#
sill <- 1#
nugget <- 0#
shape=6#
scale_s <- 0.2/3#
scale_t <- 0.2/3#
param<-list(mean=mean, sill=sill,nugget=nugget,shape=shape,scale_s=scale_s,scale_t=scale_t)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget,sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,shape = shape, mean = mean)#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
CPUtime = proc.time()#
fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
               corrmodel=corrmodel,maxtime=0.3,maxdist=0.3,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,model = model,varest = TRUE)#
CPUtime = proc.time()-CPUtime#
print(fit1)
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="Gamma"#
set.seed(112)#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,1,0.5)#1#
coordx_dyn=list()#
#
maxN=100#130#
for(k in 1:length(coordt))#
{#
  NN=sample(1:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
# coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 1#
sill <- 1#
nugget <- 0#
shape=6#
scale_s <- 0.2/3#
scale_t <- 0.2/3#
param<-list(mean=mean, sill=sill,nugget=nugget,shape=shape,scale_s=scale_s,scale_t=scale_t)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget,sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,shape = shape, mean = mean)#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxtime=1,maxdist=1#
CPUtime = proc.time()#
fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
               corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,model = model,varest = TRUE)#
CPUtime = proc.time()-CPUtime#
print(fit1)
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="Gamma"#
set.seed(112)#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,1,0.5)#1#
coordx_dyn=list()#
#
maxN=100#130#
for(k in 1:length(coordt))#
{#
  NN=sample(1:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
# coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 1#
sill <- 1#
nugget <- 0#
shape=6#
scale_s <- 0.2/3#
scale_t <- 0.2/3#
param<-list(mean=mean, sill=sill,nugget=nugget,shape=shape,scale_s=scale_s,scale_t=scale_t)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget,sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,shape = shape, mean = mean)#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxtime=1;maxdist=1#
CPUtime = proc.time()#
fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
               corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,model = model,varest = TRUE)#
CPUtime = proc.time()-CPUtime#
print(fit1)
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="Gamma"#
set.seed(112)#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,50,0.5)#1#
coordx_dyn=list()#
#
maxN=100#130#
for(k in 1:length(coordt))#
{#
  NN=sample(1:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
# coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 1#
sill <- 1#
nugget <- 0#
shape=6#
scale_s <- 0.2/3#
scale_t <- 0.2/3#
param<-list(mean=mean, sill=sill,nugget=nugget,shape=shape,scale_s=scale_s,scale_t=scale_t)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget,sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,shape = shape, mean = mean)#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxtime=1;maxdist=1#
CPUtime = proc.time()#
fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
               corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,model = model,varest = TRUE)#
CPUtime = proc.time()-CPUtime#
print(fit1)
# GeoModels, Gamma Testing#
# VMO#
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="Gamma"#
set.seed(112)#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,50,0.5)#1#
coordx_dyn=list()#
#
maxN=100#130#
for(k in 1:length(coordt))#
{#
  NN=sample(1:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
# coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 1#
sill <- 1#
nugget <- 0#
shape=6#
scale_s <- 1/3#
scale_t <- 1/3#
param<-list(mean=mean, sill=sill,nugget=nugget,shape=shape,scale_s=scale_s,scale_t=scale_t)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget,sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,shape = shape, mean = mean)#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxtime=1;maxdist=1#
CPUtime = proc.time()#
fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
               corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,model = model,varest = TRUE)#
CPUtime = proc.time()-CPUtime#
print(fit1)#
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
################################################################
############ Examples of spatial RFs #################
################################################################
model="Gaussian";shape=4;n=1#
# Define the spatial-coordinates of the points:#
coordt=seq(0,15,1.5)#1#
coordx_dyn=list()#
#
maxN=150#130#
set.seed(112)#
for(k in 1:length(coordt))#
{#
  NN=sample(1:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
# coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
mean <- 0#
sill <- 1#
nugget <- 0#
scale_s <- 0.2/3#
scale_t <- 1/3#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget,sill=sill)#
# Starting value for the estimated parameters#
start<-list(mean=mean,scale_s=scale_s,scale_t=scale_t)#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel="Exp_Exp",model=model,#
              param=param)$data#
maxtime=1;maxdist=1#
CPUtime = proc.time()#
fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
               corrmodel="Exp_Exp",maxtime=maxtime,maxdist=maxdist,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,varest=TRUE)#
CPUtime = proc.time()-CPUtime#
print(fit1)#
score <- sensmat <- varcov <- varimat <- parscale <- NULL#
### Initialization parameters:#
initparam <- WlsStart(coordx=NULL, coordy=NULL, coordt=coordt, coordx_dyn=coordx_dyn, corrmodel, data=ss1, distance="Eucl", "Fitting", fixed=fixed, grid=FALSE,#10#
                      likelihood='Marginal', maxdist=maxdist, maxtime=maxtime,  model=model, n=1, NULL,#16#
                      parscale, optimizer=='L-BFGS-B', radius=6378.388, start=start, taper=NULL, tapsep=NULL,#22#
                      type="Pairwise", varest=TRUE, vartype='SubSamp', weighted=FALSE, winconst=NULL, winstp=NULL,winconst_t=NULL, winstp_t=NULL, X=NULL)#31#
numcoord=length(initparam$coordx);numtime=1;spacetime_dyn=FALSE#
if(initparam$spacetime) numtime=length(initparam$coordt)#
if(initparam$bivariate) numtime=2#
if(!is.null(coordx_dyn)) spacetime_dyn=TRUE#
dimat <- numcoord*numtime##
NS=cumsum(initparam$ns)#
if(is.null(dim(initparam$X)))#
{#
  X=as.matrix(rep(1,dimat))#
  if((initparam$spacetime||initparam$bivariate)&& spacetime_dyn)  X=as.matrix(rep(1,NS[numtime]))#
}#
num_betas=ncol(X) #
grid = FALSE#
if(grid)    #
{a=expand.grid(initparam$coordx,initparam$coordy);coordx=a[,1];coordy=a[,2]; #
}else {#
  if((initparam$spacetime||initparam$bivariate)&&(!spacetime_dyn)){#
    data=c(t(data))#
    coordx=rep(coordx,numtime);coordy=rep(coordy,numtime)#
  }#
  if((initparam$spacetime||initparam$bivariate)&&(spacetime_dyn)) initparam$data=unlist(initparam$data)          #
}#
if(initparam$spacetime||initparam$bivariate)   NS=c(0,NS)[-(length(initparam$ns)+1)]#
initparam$fixed#
#
dimmat <- initparam$numparam^2#
dmat <- initparam$numparam*(initparam$numparam+1)/2#
eps <- (.Machine$double.eps)^(1/3)#
param <- c(initparam$param, initparam$fixed)#
score <- double(initparam$numparam)#
paramcorr <- param[initparam$namescorr]#
nuisance <- param[initparam$namesnuis]#
sel=substr(names(nuisance),1,4)=="mean"#
mm=as.numeric(nuisance[sel])   ## mean paramteres#
other_nuis=as.numeric(nuisance[!sel]) #
nuisance=c(mm,other_nuis)#
sensmat <- double(dmat);varimat <- double(dmat)#
GD=.C('GodambeMat',as.double(mm),as.integer(initparam$bivariate),as.double(initparam$coordx),as.double(initparam$coordy),#
      as.double(initparam$coordt),as.integer(initparam$corrmodel), as.double(initparam$data),as.integer(initparam$distance),as.double(eps),#
      as.integer(initparam$flagcorr), as.integer(initparam$flagnuis),as.integer(grid),as.integer(initparam$likelihood),#
      as.double(c(X%*%mm)),as.integer(initparam$model),as.double(initparam$n),as.integer(num_betas),#
      as.integer(initparam$numparam),as.integer(initparam$numparamcorr),as.integer(length(paramcorr)),as.double(paramcorr),as.double(nuisance),#
      score=score,sensmat=sensmat,as.integer(initparam$spacetime),as.integer(initparam$type),#
      varimat=varimat,as.integer(initparam$vartype),as.double(initparam$winconst),as.double(initparam$winstp),as.double(initparam$winconst_t),as.double(initparam$winstp_t),#
      as.integer(initparam$weighted),c(t(X)),ns=as.integer(initparam$ns),NS=as.integer(NS),PACKAGE='GeoModels',DUP=TRUE,NAOK=TRUE)#
str(GD)#
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="Gamma"#
set.seed(112)#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,1,0.5)#1#
coordx_dyn=list()#
#
maxN=100#130#
for(k in 1:length(coordt))#
{#
  NN=sample(1:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 1#
sill <- 1#
nugget <- 0#
shape=6#
scale_s <- 0.2/3#
scale_t <- 0.2/3#
param<-list(mean=mean, sill=sill,nugget=nugget,shape=shape,scale_s=scale_s,scale_t=scale_t)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget,sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,shape = shape, mean = mean)#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxdist = 2;maxtime=2#
CPUtime = proc.time()#
fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
               corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,model = model)#
CPUtime = proc.time()-CPUtime#
print(fit1)#
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="Gaussian";shape=4;n=1#
set.seed(112)#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,20,1.5)# step:1.5#
#
N=100  # number of location sites#
x <- runif(N, 0, 1)#
# set.seed(5)#
y <- runif(N, 0, 1)#
coords <- cbind(x,y)#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 0.1#
sill <- 1#
nugget <- 0#
scale_s <- .3#
scale_t <- .3#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
fixed<-list(nugget=nugget, sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,mean = mean )#
set.seed(2)#
ss1 <- GeoSim(coordx=coords, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxtime=2;maxdist=0.1#
GPU = 0#
local = c(1,1)#
fit1 <- GeoFit(data=ss1,coordx=coords,coordt=coordt,#
               corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,model = model,varest = TRUE,GPU = GPU, local = local)#
print(fit1)#
fit1$param
# GeoModels, Gamma Testing#
# VMO#
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="Gamma"#
set.seed(112)#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,50,0.5)#1#
coordx_dyn=list()#
#
maxN=100#130#
for(k in 1:length(coordt))#
{#
  NN=sample(1:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
# coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 1#
sill <- 1#
nugget <- 0#
shape=6#
scale_s <- 3/3#
scale_t <- 3/3#
param<-list(mean=mean, sill=sill,nugget=nugget,shape=shape,scale_s=scale_s,scale_t=scale_t)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget,sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,shape = shape, mean = mean)#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxtime=1;maxdist=1#
CPUtime = proc.time()#
fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
               corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,model = model,varest = TRUE)#
CPUtime = proc.time()-CPUtime#
print(fit1)
# GeoModels, Gamma Testing#
# VMO#
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="Gamma"#
set.seed(112)#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,20,0.5)#1#
coordx_dyn=list()#
#
maxN=100#130#
for(k in 1:length(coordt))#
{#
  NN=sample(1:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
# coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 1#
sill <- 1#
nugget <- 0#
shape=6#
scale_s <- 3/3#
scale_t <- 3/3#
param<-list(mean=mean, sill=sill,nugget=nugget,shape=shape,scale_s=scale_s,scale_t=scale_t)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget,sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,shape = shape, mean = mean)#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxtime=1;maxdist=1#
CPUtime = proc.time()#
#
fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
               corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,model = model,varest = TRUE)#
CPUtime = proc.time()-CPUtime#
print(fit1)
# GeoModels, Gamma Testing#
# VMO#
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="Gamma"#
set.seed(112)#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,20,0.5)#1#
coordx_dyn=list()#
#
maxN=100#130#
for(k in 1:length(coordt))#
{#
  NN=sample(1:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
# coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 1#
sill <- 1#
nugget <- 0#
shape=6#
scale_s <- 3/3#
scale_t <- 3/3#
param<-list(mean=mean, sill=sill,nugget=nugget,shape=shape,scale_s=scale_s,scale_t=scale_t)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget,sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,shape = shape, mean = mean)#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxtime=1;maxdist=1#
CPUtime = proc.time()#
GPU = 0#
local = c(1,1)#
fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
               corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,model = model,varest = TRUE,GPU = GPU, local = local)#
CPUtime = proc.time()-CPUtime#
print(fit1)
# GeoModels, Gamma Testing#
# VMO#
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="Gamma"#
set.seed(112)#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,20,0.5)#1#
coordx_dyn=list()#
#
maxN=100#130#
for(k in 1:length(coordt))#
{#
  NN=sample(1:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
# coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 1#
sill <- 1#
nugget <- 0#
shape=6#
scale_s <- 3/3#
scale_t <- 3/3#
param<-list(mean=mean, sill=sill,nugget=nugget,shape=shape,scale_s=scale_s,scale_t=scale_t)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget,sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,shape = shape, mean = mean)#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxtime=1;maxdist=1#
CPUtime = proc.time()#
GPU = 0#
local = c(1,1)#
fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
               corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,model = model,GPU = GPU, local = local)#
CPUtime = proc.time()-CPUtime#
print(fit1)
# GeoModels, Gamma Testing#
# VMO#
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="Gamma"#
set.seed(112)#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,20,0.5)#1#
coordx_dyn=list()#
#
maxN=100#130#
for(k in 1:length(coordt))#
{#
  NN=sample(1:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
# coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 1#
sill <- 1#
nugget <- 0#
shape=6#
scale_s <- 3/3#
scale_t <- 3/3#
param<-list(mean=mean, sill=sill,nugget=nugget,shape=shape,scale_s=scale_s,scale_t=scale_t)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget,sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,shape = shape, mean = mean)#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxtime=1;maxdist=1#
CPUtime = proc.time()#
GPU = 0#
local = c(1,1)#
fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
               corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,model = model,varest = TRUE,GPU = GPU, local = local)#
CPUtime = proc.time()-CPUtime#
print(fit1)
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="Gaussian";shape=4;n=1#
set.seed(112)#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,2,1)# step:1.5#
#
N=6 # number of location sites#
set.seed(112)#
x <- runif(N, 0, 1)#
# set.seed(5)#
set.seed(114)#
y <- runif(N, 0, 1)#
coords <- cbind(x,y)#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 0.1#
sill <- 1#
nugget <- 0#
scale_s <- .3/3#
scale_t <- 6/3#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
fixed<-list(nugget=nugget, sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,mean = mean )#
set.seed(2)#
ss1 <- GeoSim(coordx=coords, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxtime=2;maxdist=2#
GPU = 0#
local = c(1,1)#
# fit1 <- GeoFit(data=ss1,coordx=coords,coordt=coordt,#
#                corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
#                likelihood="Marginal",type="Pairwise",#
#                start=start,fixed=fixed,model = model,varest = TRUE,GPU = GPU, local = local)#
# print(fit1)#
# fit1$param#
data <- ss1;coordx <- coords[,1];coordy <- coords[,2]#
numtime=1;spacetime_dyn=FALSE;coordx_dyn=NULL;varest=TRUE#
likelihood='Marginal';#
CMdl<-CkCorrModel(corrmodel)#
Stime <- CheckST(CMdl)#
# print(spacetime)#
if(Stime && is.null(coordx_dyn) && varest && likelihood=='Marginal')#
{#
  if(is.null(coordy)){coordy <- coordx[,2]#
  coordx <- coordx[,1]}#
  coordx_dyn=list()#
  datatemp=list()#
  for(k in 1:length(coordt))#
  {#
    coordx_dyn[[k]]=cbind(coordx,coordy)#
    datatemp[[k]]=data[k,]#
  }#
  data <- datatemp#
  rm(datatemp)#
}#
score <- sensmat <- varcov <- varimat <- parscale <- NULL#
### Initialization parameters:#
initparam <- WlsStart(coordx=coords, coordy=NULL, coordt=coordt, coordx_dyn=coordx_dyn, corrmodel, data=ss1, distance="Eucl", "Fitting", fixed=fixed, grid=FALSE,#10#
                      likelihood='Marginal', maxdist=maxdist, maxtime=maxtime,  model=model, n=1, NULL,#16#
                      parscale, optimizer=='L-BFGS-B', radius=6378.388, start=start, taper=NULL, tapsep=NULL,#22#
                      type="Pairwise", varest=TRUE, vartype='SubSamp', weighted=FALSE, winconst=NULL, winstp=NULL,winconst_t=NULL, winstp_t=NULL, X=NULL)#31#
numcoord=length(initparam$coordx);numtime=1;spacetime_dyn=FALSE#
if(initparam$spacetime) numtime=length(initparam$coordt)#
if(initparam$bivariate) numtime=2#
if(!is.null(coordx_dyn)) spacetime_dyn=TRUE#
dimat <- numcoord*numtime##
NS=cumsum(initparam$ns)#
if(is.null(dim(initparam$X)))#
{#
  X=as.matrix(rep(1,dimat))#
  if((initparam$spacetime||initparam$bivariate)&& spacetime_dyn)  X=as.matrix(rep(1,NS[numtime]))#
}#
num_betas=ncol(X) #
grid = FALSE#
if(grid)    #
{a=expand.grid(initparam$coordx,initparam$coordy);coordx=a[,1];coordy=a[,2]; #
}else {#
  if((initparam$spacetime||initparam$bivariate)&&(!spacetime_dyn)){#
    data=c(t(data))#
    coordx=rep(coordx,numtime);coordy=rep(coordy,numtime)#
  }#
  if((initparam$spacetime||initparam$bivariate)&&(spacetime_dyn)) initparam$data=unlist(initparam$data)          #
}#
if(initparam$spacetime||initparam$bivariate)   NS=c(0,NS)[-(length(initparam$ns)+1)]#
initparam$fixed#
#
dimmat <- initparam$numparam^2#
dmat <- initparam$numparam*(initparam$numparam+1)/2#
eps <- (.Machine$double.eps)^(1/3)#
param <- c(initparam$param, initparam$fixed)#
score <- double(initparam$numparam)#
paramcorr <- param[initparam$namescorr]#
nuisance <- param[initparam$namesnuis]#
sel=substr(names(nuisance),1,4)=="mean"#
mm=as.numeric(nuisance[sel])   ## mean paramteres#
other_nuis=as.numeric(nuisance[!sel]) #
nuisance=c(mm,other_nuis)#
sensmat <- double(dmat);varimat <- double(dmat)#
GD=.C('GodambeMat',as.double(mm),as.integer(initparam$bivariate),as.double(initparam$coordx),as.double(initparam$coordy),#
      as.double(initparam$coordt),as.integer(initparam$corrmodel), as.double(initparam$data),as.integer(initparam$distance),as.double(eps),#
      as.integer(initparam$flagcorr), as.integer(initparam$flagnuis),as.integer(grid),as.integer(initparam$likelihood),#
      as.double(c(X%*%mm)),as.integer(initparam$model),as.double(initparam$n),as.integer(num_betas),#
      as.integer(initparam$numparam),as.integer(initparam$numparamcorr),as.integer(length(paramcorr)),as.double(paramcorr),as.double(nuisance),#
      score=score,sensmat=sensmat,as.integer(initparam$spacetime),as.integer(initparam$type),#
      varimat=varimat,as.integer(initparam$vartype),as.double(initparam$winconst),as.double(initparam$winstp),as.double(initparam$winconst_t),as.double(initparam$winstp_t),#
      as.integer(initparam$weighted),c(t(X)),ns=as.integer(initparam$ns),NS=as.integer(NS),PACKAGE='GeoModels',DUP=TRUE,NAOK=TRUE)#
str(GD)
coords
ss1
### Test gaussian with no dim#
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="Gaussian";shape=4;n=1#
set.seed(112)#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,2,1)# step:1.5#
#
N=6 # number of location sites#
set.seed(112)#
x <- runif(N, 0, 1)#
# set.seed(5)#
set.seed(114)#
y <- runif(N, 0, 1)#
coords <- cbind(x,y)#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 0.1#
sill <- 1#
nugget <- 0#
scale_s <- .3/3#
scale_t <- 6/3#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
fixed<-list(nugget=nugget, sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,mean = mean )#
set.seed(2)#
ss1 <- GeoSim(coordx=coords, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxtime=2;maxdist=2#
GPU = 0#
local = c(1,1)#
# fit1 <- GeoFit(data=ss1,coordx=coords,coordt=coordt,#
#                corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
#                likelihood="Marginal",type="Pairwise",#
#                start=start,fixed=fixed,model = model,varest = TRUE,GPU = GPU, local = local)#
# print(fit1)#
# fit1$param#
#
fit1 <- GeoFit(data=ss1,coordx=coords,coordt=coordt,#
               corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,model = model,GPU = GPU, local = local,varest = TRUE)#
print(fit1)#
fit1$param
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="Gaussian";shape=4;n=1#
set.seed(112)#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,5,1)# step:1.5#
#
N=6 # number of location sites#
set.seed(112)#
x <- runif(N, 0, 1)#
# set.seed(5)#
set.seed(114)#
y <- runif(N, 0, 1)#
coords <- cbind(x,y)#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 0.1#
sill <- 1#
nugget <- 0#
scale_s <- .3/3#
scale_t <- 6/3#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
fixed<-list(nugget=nugget, sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,mean = mean )#
set.seed(2)#
ss1 <- GeoSim(coordx=coords, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxtime=2;maxdist=2#
GPU = 0#
local = c(1,1)#
# fit1 <- GeoFit(data=ss1,coordx=coords,coordt=coordt,#
#                corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
#                likelihood="Marginal",type="Pairwise",#
#                start=start,fixed=fixed,model = model,varest = TRUE,GPU = GPU, local = local)#
# print(fit1)#
# fit1$param#
#
fit1 <- GeoFit(data=ss1,coordx=coords,coordt=coordt,#
               corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,model = model,GPU = GPU, local = local,varest = TRUE)#
print(fit1)#
fit1$param
coords
coordt
data
ss1
### Test gaussian with no dim#
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="Gaussian";shape=4;n=1#
set.seed(112)#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,2,1)# step:1.5#
#
N=6 # number of location sites#
set.seed(112)#
x <- runif(N, 0, 1)#
# set.seed(5)#
set.seed(114)#
y <- runif(N, 0, 1)#
coords <- cbind(x,y)#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 0.1#
sill <- 1#
nugget <- 0#
scale_s <- .3/3#
scale_t <- 6/3#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
fixed<-list(nugget=nugget, sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,mean = mean )#
set.seed(2)#
ss1 <- GeoSim(coordx=coords, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxtime=2;maxdist=2#
GPU = 0#
local = c(1,1)#
# fit1 <- GeoFit(data=ss1,coordx=coords,coordt=coordt,#
#                corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
#                likelihood="Marginal",type="Pairwise",#
#                start=start,fixed=fixed,model = model,varest = TRUE,GPU = GPU, local = local)#
# print(fit1)#
# fit1$param#
#
fit1 <- GeoFit(data=ss1,coordx=coords,coordt=coordt,#
               corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,model = model,GPU = GPU, local = local,varest = TRUE)#
print(fit1)#
fit1$param
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="Gaussian";shape=4;n=1#
set.seed(112)#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,5,1)# step:1.5#
#
N=6 # number of location sites#
set.seed(112)#
x <- runif(N, 0, 1)#
# set.seed(5)#
set.seed(114)#
y <- runif(N, 0, 1)#
coords <- cbind(x,y)#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 0.1#
sill <- 1#
nugget <- 0#
scale_s <- .3/3#
scale_t <- 6/3#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
fixed<-list(nugget=nugget, sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,mean = mean )#
set.seed(2)#
ss1 <- GeoSim(coordx=coords, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxtime=2;maxdist=2#
GPU = 0#
local = c(1,1)#
# fit1 <- GeoFit(data=ss1,coordx=coords,coordt=coordt,#
#                corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
#                likelihood="Marginal",type="Pairwise",#
#                start=start,fixed=fixed,model = model,varest = TRUE,GPU = GPU, local = local)#
# print(fit1)#
# fit1$param#
#
fit1 <- GeoFit(data=ss1,coordx=coords,coordt=coordt,#
               corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,model = model,GPU = GPU, local = local,varest = TRUE)#
print(fit1)#
fit1$param
data
ss1
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="Gaussian";shape=4;n=1#
set.seed(112)#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,7,1)# step:1.5#
#
N=6 # number of location sites#
set.seed(112)#
x <- runif(N, 0, 1)#
# set.seed(5)#
set.seed(114)#
y <- runif(N, 0, 1)#
coords <- cbind(x,y)#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 0.1#
sill <- 1#
nugget <- 0#
scale_s <- .3/3#
scale_t <- 6/3#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
fixed<-list(nugget=nugget, sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,mean = mean )#
set.seed(2)#
ss1 <- GeoSim(coordx=coords, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxtime=2;maxdist=2#
GPU = 0#
local = c(1,1)#
# fit1 <- GeoFit(data=ss1,coordx=coords,coordt=coordt,#
#                corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
#                likelihood="Marginal",type="Pairwise",#
#                start=start,fixed=fixed,model = model,varest = TRUE,GPU = GPU, local = local)#
# print(fit1)#
# fit1$param#
#
fit1 <- GeoFit(data=ss1,coordx=coords,coordt=coordt,#
               corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,model = model,GPU = GPU, local = local,varest = TRUE)#
print(fit1)#
fit1$param
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="Gaussian";shape=4;n=1#
set.seed(112)#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,3,.5)# step:1.5#
#
N=6 # number of location sites#
set.seed(112)#
x <- runif(N, 0, 1)#
# set.seed(5)#
set.seed(114)#
y <- runif(N, 0, 1)#
coords <- cbind(x,y)#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 0.1#
sill <- 1#
nugget <- 0#
scale_s <- .3/3#
scale_t <- 6/3#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
fixed<-list(nugget=nugget, sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,mean = mean )#
set.seed(2)#
ss1 <- GeoSim(coordx=coords, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxtime=2;maxdist=2#
GPU = 0#
local = c(1,1)#
# fit1 <- GeoFit(data=ss1,coordx=coords,coordt=coordt,#
#                corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
#                likelihood="Marginal",type="Pairwise",#
#                start=start,fixed=fixed,model = model,varest = TRUE,GPU = GPU, local = local)#
# print(fit1)#
# fit1$param#
#
fit1 <- GeoFit(data=ss1,coordx=coords,coordt=coordt,#
               corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,model = model,GPU = GPU, local = local,varest = TRUE)#
print(fit1)#
fit1$param
### Test gaussian with no dim#
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="Gaussian";shape=4;n=1#
set.seed(112)#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,3,1.5)# step:1.5#
#
N=6 # number of location sites#
set.seed(112)#
x <- runif(N, 0, 1)#
# set.seed(5)#
set.seed(114)#
y <- runif(N, 0, 1)#
coords <- cbind(x,y)#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 0.1#
sill <- 1#
nugget <- 0#
scale_s <- .3/3#
scale_t <- 6/3#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
fixed<-list(nugget=nugget, sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,mean = mean )#
set.seed(2)#
ss1 <- GeoSim(coordx=coords, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxtime=2;maxdist=2#
GPU = 0#
local = c(1,1)#
# fit1 <- GeoFit(data=ss1,coordx=coords,coordt=coordt,#
#                corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
#                likelihood="Marginal",type="Pairwise",#
#                start=start,fixed=fixed,model = model,varest = TRUE,GPU = GPU, local = local)#
# print(fit1)#
# fit1$param#
#
fit1 <- GeoFit(data=ss1,coordx=coords,coordt=coordt,#
               corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,model = model,GPU = GPU, local = local,varest = TRUE)#
print(fit1)#
fit1$param
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="Gaussian";shape=4;n=1#
set.seed(112)#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,20,1.5)# step:1.5#
#
N=300 # number of location sites#
set.seed(112)#
x <- runif(N, 0, 1)#
# set.seed(5)#
set.seed(114)#
y <- runif(N, 0, 1)#
coords <- cbind(x,y)#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 0.1#
sill <- 1#
nugget <- 0#
scale_s <- .3/3#
scale_t <- 6/3#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
fixed<-list(nugget=nugget, sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,mean = mean )#
set.seed(2)#
ss1 <- GeoSim(coordx=coords, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxtime=2;maxdist=2#
GPU = 0#
local = c(1,1)#
# fit1 <- GeoFit(data=ss1,coordx=coords,coordt=coordt,#
#                corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
#                likelihood="Marginal",type="Pairwise",#
#                start=start,fixed=fixed,model = model,varest = TRUE,GPU = GPU, local = local)#
# print(fit1)#
# fit1$param#
#
fit1 <- GeoFit(data=ss1,coordx=coords,coordt=coordt,#
               corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,model = model,GPU = GPU, local = local,varest = TRUE)#
print(fit1)#
fit1$param
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="Gaussian";shape=4;n=1#
set.seed(112)#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,5,1)# step:1.5#
#
N=6 # number of location sites#
set.seed(112)#
x <- runif(N, 0, 1)#
# set.seed(5)#
set.seed(114)#
y <- runif(N, 0, 1)#
coords <- cbind(x,y)#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 0.1#
sill <- 1#
nugget <- 0#
scale_s <- .5/3#
scale_t <- 6/3#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
fixed<-list(nugget=nugget, sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,mean = mean )#
set.seed(2)#
ss1 <- GeoSim(coordx=coords, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxtime=2;maxdist=2#
GPU = 0#
local = c(1,1)#
# fit1 <- GeoFit(data=ss1,coordx=coords,coordt=coordt,#
#                corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
#                likelihood="Marginal",type="Pairwise",#
#                start=start,fixed=fixed,model = model,varest = TRUE,GPU = GPU, local = local)#
# print(fit1)#
# fit1$param#
#
fit1 <- GeoFit(data=ss1,coordx=coords,coordt=coordt,#
               corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,model = model,GPU = GPU, local = local,varest = TRUE)#
print(fit1)#
fit1$param
### Test gaussian with no dim#
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="Gaussian";shape=4;n=1#
set.seed(112)#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,7,1)# step:1.5#
#
N=6 # number of location sites#
set.seed(112)#
x <- runif(N, 0, 1)#
# set.seed(5)#
set.seed(114)#
y <- runif(N, 0, 1)#
coords <- cbind(x,y)#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 0.1#
sill <- 1#
nugget <- 0#
scale_s <- .5/3#
scale_t <- 6/3#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
fixed<-list(nugget=nugget, sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,mean = mean )#
set.seed(2)#
ss1 <- GeoSim(coordx=coords, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxtime=2;maxdist=2#
GPU = 0#
local = c(1,1)#
# fit1 <- GeoFit(data=ss1,coordx=coords,coordt=coordt,#
#                corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
#                likelihood="Marginal",type="Pairwise",#
#                start=start,fixed=fixed,model = model,varest = TRUE,GPU = GPU, local = local)#
# print(fit1)#
# fit1$param#
#
fit1 <- GeoFit(data=ss1,coordx=coords,coordt=coordt,#
               corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,model = model,GPU = GPU, local = local,varest = TRUE)#
print(fit1)#
fit1$param
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="Gamma"#
set.seed(112)#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,150)#1#
coordx_dyn=list()#
#
N=12 # number of location sites#
set.seed(112)#
x <- runif(N, 0, 1)#
# set.seed(5)#
set.seed(114)#
y <- runif(N, 0, 1)#
coords <- cbind(x,y)#
# coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 1#
sill <- 1#
nugget <- 0#
shape=3#
scale_s <- .7/3#
scale_t <- 2/3#
param<-list(mean=mean, sill=sill,nugget=nugget,shape=shape,scale_s=scale_s,scale_t=scale_t)#
fixed<-list(nugget=nugget,sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,shape = shape, mean = mean)#
set.seed(2)#
ss1 <- GeoSim(coordx=coords, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxtime=2;maxdist=2#
CPUtime = proc.time()#
GPU = 0#
local = c(1,1)#
fit1 <- GeoFit(data=ss1,coordx=coords,coordt=coordt,#
               corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,model = model,GPU = GPU, local = local,varest = TRUE)#
CPUtime = proc.time()-CPUtime#
print(fit1)
str(coords)
str(coordt)
12*151
12*1000
12*1900
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="Gaussian";shape=4;n=1#
set.seed(112)#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,7,1)# step:1.5#
#
N=6 # number of location sites#
set.seed(112)#
x <- runif(N, 0, 1)#
# set.seed(5)#
set.seed(114)#
y <- runif(N, 0, 1)#
coords <- cbind(x,y)#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 0.1#
sill <- 1#
nugget <- 0#
scale_s <- .5/3#
scale_t <- 6/3#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
fixed<-list(nugget=nugget, sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,mean = mean )#
set.seed(2)#
ss1 <- GeoSim(coordx=coords, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxtime=2;maxdist=2#
GPU = 0#
local = c(1,1)#
# fit1 <- GeoFit(data=ss1,coordx=coords,coordt=coordt,#
#                corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
#                likelihood="Marginal",type="Pairwise",#
#                start=start,fixed=fixed,model = model,varest = TRUE,GPU = GPU, local = local)#
# print(fit1)#
# fit1$param#
#
fit1 <- GeoFit(data=ss1,coordx=coords,coordt=coordt,#
               corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,model = model,GPU = GPU, local = local,varest = TRUE)#
print(fit1)#
fit1$param
coords
times
coordt
8*6
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="Gaussian";shape=4;n=1#
set.seed(112)#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,200,1)# coordt=seq(0,7,1)#
#
N=12 # number of location sites 6#
set.seed(112)#
x <- runif(N, 0, 1)#
# set.seed(5)#
set.seed(114)#
y <- runif(N, 0, 1)#
coords <- cbind(x,y)#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 0.1#
sill <- 1#
nugget <- 0#
scale_s <- .5/3#
scale_t <- 6/3#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
fixed<-list(nugget=nugget, sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,mean = mean )#
set.seed(2)#
ss1 <- GeoSim(coordx=coords, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxtime=2;maxdist=2#
GPU = 0#
local = c(1,1)#
# fit1 <- GeoFit(data=ss1,coordx=coords,coordt=coordt,#
#                corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
#                likelihood="Marginal",type="Pairwise",#
#                start=start,fixed=fixed,model = model,varest = TRUE,GPU = GPU, local = local)#
# print(fit1)#
# fit1$param#
#
fit1 <- GeoFit(data=ss1,coordx=coords,coordt=coordt,#
               corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,model = model,GPU = GPU, local = local,varest = TRUE)#
print(fit1)#
fit1$param
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="Gamma"#
set.seed(112)#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,150)#1#
coordx_dyn=list()#
#
N=12 # number of location sites#
set.seed(112)#
x <- runif(N, 0, 1)#
# set.seed(5)#
set.seed(114)#
y <- runif(N, 0, 1)#
coords <- cbind(x,y)#
# coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 1#
sill <- 1#
nugget <- 0#
shape=3#
scale_s <- .7/3#
scale_t <- 2/3#
param<-list(mean=mean, sill=sill,nugget=nugget,shape=shape,scale_s=scale_s,scale_t=scale_t)#
fixed<-list(nugget=nugget,sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,shape = shape, mean = mean)#
set.seed(2)#
ss1 <- GeoSim(coordx=coords, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxtime=2;maxdist=2#
CPUtime = proc.time()#
GPU = 0#
local = c(1,1)#
fit1 <- GeoFit(data=ss1,coordx=coords,coordt=coordt,#
               corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,model = model,GPU = GPU, local = local,varest = TRUE)#
CPUtime = proc.time()-CPUtime#
print(fit1)
start
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="Gamma"#
set.seed(112)#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,150)#1#
coordx_dyn=list()#
#
N=12 # number of location sites#
set.seed(112)#
x <- runif(N, 0, 1)#
# set.seed(5)#
set.seed(114)#
y <- runif(N, 0, 1)#
coords <- cbind(x,y)#
# coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 1#
sill <- 1#
nugget <- 0#
shape=3#
scale_s <- .7/3#
scale_t <- 2/3#
param<-list(mean=mean, sill=sill,nugget=nugget,shape=shape,scale_s=scale_s,scale_t=scale_t)#
fixed<-list(nugget=nugget,sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,shape = shape, mean = mean)#
set.seed(2)#
ss1 <- GeoSim(coordx=coords, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxtime=2;maxdist=2#
CPUtime = proc.time()#
GPU = 0#
local = c(1,1)#
fit1 <- GeoFit(data=ss1,coordx=coords,coordt=coordt,#
               corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,model = model,GPU = GPU, local = local,varest = TRUE)#
CPUtime = proc.time()-CPUtime#
print(fit1)
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="Gamma"#
set.seed(112)#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,100)#1#
coordx_dyn=list()#
#
N=10 # number of location sites#
set.seed(112)#
x <- runif(N, 0, 1)#
# set.seed(5)#
set.seed(114)#
y <- runif(N, 0, 1)#
coords <- cbind(x,y)#
# coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 1#
sill <- 1#
nugget <- 0#
shape=3#
scale_s <- .7/3#
scale_t <- 2/3#
param<-list(mean=mean, sill=sill,nugget=nugget,shape=shape,scale_s=scale_s,scale_t=scale_t)#
fixed<-list(nugget=nugget,sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,shape = shape, mean = mean)#
set.seed(2)#
ss1 <- GeoSim(coordx=coords, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxtime=2;maxdist=2#
CPUtime = proc.time()#
GPU = 0#
local = c(1,1)#
fit1 <- GeoFit(data=ss1,coordx=coords,coordt=coordt,#
               corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,model = model,GPU = GPU, local = local,varest = TRUE)#
CPUtime = proc.time()-CPUtime#
print(fit1)
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="Gamma"#
set.seed(112)#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,100)#1#
coordx_dyn=list()#
#
N=10 # number of location sites#
set.seed(112)#
x <- runif(N, 0, 1)#
# set.seed(5)#
set.seed(114)#
y <- runif(N, 0, 1)#
coords <- cbind(x,y)#
# coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 1#
sill <- 1#
nugget <- 0#
shape=3#
scale_s <- .7/3#
scale_t <- 2/3#
param<-list(mean=mean, sill=sill,nugget=nugget,shape=shape,scale_s=scale_s,scale_t=scale_t)#
fixed<-list(nugget=nugget,sill = sill, mean = mean)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,shape = shape)#
set.seed(2)#
ss1 <- GeoSim(coordx=coords, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxtime=2;maxdist=2#
CPUtime = proc.time()#
GPU = 0#
local = c(1,1)#
fit1 <- GeoFit(data=ss1,coordx=coords,coordt=coordt,#
               corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,model = model,GPU = GPU, local = local,varest = TRUE)#
CPUtime = proc.time()-CPUtime#
print(fit1)
stqrt
start
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="Gaussian";shape=4;n=1#
set.seed(112)#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,200,1)# coordt=seq(0,7,1)#
#
N=12 # number of location sites 6#
set.seed(112)#
x <- runif(N, 0, 1)#
# set.seed(5)#
set.seed(114)#
y <- runif(N, 0, 1)#
coords <- cbind(x,y)#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 0.1#
sill <- 1#
nugget <- 0#
scale_s <- .5/3#
scale_t <- 6/3#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
fixed<-list(nugget=nugget, sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,mean = mean )#
set.seed(2)#
ss1 <- GeoSim(coordx=coords, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxtime=2;maxdist=2#
GPU = 0#
local = c(1,1)#
# fit1 <- GeoFit(data=ss1,coordx=coords,coordt=coordt,#
#                corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
#                likelihood="Marginal",type="Pairwise",#
#                start=start,fixed=fixed,model = model,varest = TRUE,GPU = GPU, local = local)#
# print(fit1)#
# fit1$param#
#
fit1 <- GeoFit(data=ss1,coordx=coords,coordt=coordt,#
               corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,model = model,GPU = GPU, local = local,varest = TRUE)#
print(fit1)#
fit1$param
start
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
################################################################
############ Examples of spatial RFs #################
################################################################
model="Gaussian";shape=4;n=1#
# Define the spatial-coordinates of the points:#
coordt=seq(0,40,1)#1#
coordx_dyn=list()#
#
maxN=50#130#
set.seed(112)#
for(k in 1:length(coordt))#
{#
  NN=sample(1:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
# coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
mean <- 0#
sill <- 1#
nugget <- 0#
scale_s <- 0.5/3#
scale_t <- 6/3#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget,sill=sill)#
# Starting value for the estimated parameters#
start<-list(mean=mean,scale_s=scale_s,scale_t=scale_t)#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel="Exp_Exp",model=model,#
              param=param)$data#
maxtime=1;maxdist=1#
CPUtime = proc.time()#
fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
               corrmodel="Exp_Exp",maxtime=maxtime,maxdist=maxdist,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,varest = TRUE,GPU=0,local=c(1,1))#
CPUtime = proc.time()-CPUtime#
print(fit1)
start
str(coords)
str(coordt)
41*981
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
################################################################
############ Examples of spatial RFs #################
################################################################
model="Gaussian";shape=4;n=1#
# Define the spatial-coordinates of the points:#
coordt=seq(0,40,1)#1#
coordx_dyn=list()#
#
maxN=50#130#
set.seed(112)#
for(k in 1:length(coordt))#
{#
  NN=sample(1:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
# coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
mean <- 0#
sill <- 1#
nugget <- 0#
scale_s <- 0.5/3#
scale_t <- 6/3#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget,sill=sill)#
# Starting value for the estimated parameters#
start<-list(mean=mean,scale_s=scale_s,scale_t=scale_t)#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel="Exp_Exp",model=model,#
              param=param)$data#
maxtime=1;maxdist=1#
CPUtime = proc.time()#
fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
               corrmodel="Exp_Exp",maxtime=maxtime,maxdist=maxdist,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,varest = TRUE,GPU=0,local=c(1,1))#
CPUtime = proc.time()-CPUtime#
print(fit1)
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
################################################################
############ Examples of spatial RFs #################
################################################################
model="Gaussian";shape=4;n=1#
# Define the spatial-coordinates of the points:#
coordt=seq(0,100,1)#1#
coordx_dyn=list()#
#
maxN=12#130#
#
for(k in 1:length(coordt))#
{#
  set.seed(k)#
  # NN=sample(1:maxN,size=1)#
  NN=maxN#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
# coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
mean <- 0#
sill <- 1#
nugget <- 0#
scale_s <- 0.5/3#
scale_t <- 6/3#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget,sill=sill)#
# Starting value for the estimated parameters#
start<-list(mean=mean,scale_s=scale_s,scale_t=scale_t)#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel="Exp_Exp",model=model,#
              param=param)$data#
maxtime=2;maxdist=1#
CPUtime = proc.time()#
fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
               corrmodel="Exp_Exp",maxtime=maxtime,maxdist=maxdist,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,varest = TRUE,GPU=0,local=c(1,1))#
CPUtime = proc.time()-CPUtime#
print(fit1)
length(coordx_dyn)
srt(coordx_dyn)
str(coordx_dyn)
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
################################################################
############ Examples of spatial RFs #################
################################################################
model="Gaussian";shape=4;n=1#
# Define the spatial-coordinates of the points:#
coordt=seq(0,100,1)#1#
coordx_dyn=list()#
#
maxN=12#130#
#
for(k in 1:length(coordt))#
{#
  set.seed(k)#
  # NN=sample(1:maxN,size=1)#
  NN=maxN#
  # print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
# coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
mean <- 0#
sill <- 1#
nugget <- 0#
scale_s <- 0.5/3#
scale_t <- 6/3#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget,sill=sill)#
# Starting value for the estimated parameters#
start<-list(mean=mean,scale_s=scale_s,scale_t=scale_t)#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel="Exp_Exp",model=model,#
              param=param)$data#
maxtime=2;maxdist=1#
CPUtime = proc.time()#
fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
               corrmodel="Exp_Exp",maxtime=maxtime,maxdist=maxdist,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,varest = TRUE,GPU=0,local=c(1,1))#
CPUtime = proc.time()-CPUtime#
print(fit1)
start
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
################################################################
############ Examples of spatial RFs #################
################################################################
model="Gaussian";shape=4;n=1#
# Define the spatial-coordinates of the points:#
coordt=seq(0,100,1)#1#
coordx_dyn=list()#
#
maxN=12#130#
#
for(k in 1:length(coordt))#
{#
  set.seed(k)#
  # NN=sample(1:maxN,size=1)#
  NN=maxN#
  # print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
# coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
mean <- 0#
sill <- 1#
nugget <- 0#
scale_s <- 0.5/3#
scale_t <- 6/3#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget,sill=sill)#
# Starting value for the estimated parameters#
start<-list(mean=mean,scale_s=scale_s,scale_t=scale_t)#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel="Exp_Exp",model=model,#
              param=param)$data#
maxtime=2;maxdist=1#
CPUtime = proc.time()#
fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
               corrmodel="Exp_Exp",maxtime=maxtime,maxdist=maxdist,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,varest = TRUE,GPU=0,local=c(1,1))#
CPUtime = proc.time()-CPUtime#
print(fit1)
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="Gaussian";shape=4;n=1#
set.seed(112)#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,100,1)# coordt=seq(0,7,1)#
#
N=12 # number of location sites 6#
set.seed(112)#
x <- runif(N, 0, 1)#
# set.seed(5)#
set.seed(114)#
y <- runif(N, 0, 1)#
coords <- cbind(x,y)#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 0.1#
sill <- 1#
nugget <- 0#
scale_s <- .5/3#
scale_t <- 6/3#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
fixed<-list(nugget=nugget, sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,mean = mean )#
set.seed(2)#
ss1 <- GeoSim(coordx=coords, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxtime=2;maxdist=2#
GPU = 0#
local = c(1,1)#
# fit1 <- GeoFit(data=ss1,coordx=coords,coordt=coordt,#
#                corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
#                likelihood="Marginal",type="Pairwise",#
#                start=start,fixed=fixed,model = model,varest = TRUE,GPU = GPU, local = local)#
# print(fit1)#
# fit1$param#
#
fit1 <- GeoFit(data=ss1,coordx=coords,coordt=coordt,#
               corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,model = model,GPU = GPU, local = local,varest = TRUE)#
print(fit1)#
fit1$param
### Test gaussian with no dim#
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="Gaussian";shape=4;n=1#
set.seed(112)#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,100,1)# coordt=seq(0,7,1)#
#
N=12 # number of location sites 6#
set.seed(112)#
x <- runif(N, 0, 1)#
# set.seed(5)#
set.seed(114)#
y <- runif(N, 0, 1)#
coords <- cbind(x,y)#
set.seed(1985)#
X <- cbind(rep(1,N*length(coordt)),matrix(runif(N*length(coordt)),ncol=1))#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,2)#
mean <- 0.1#
sill <- 1#
nugget <- 0#
scale_s <- .5/3#
scale_t <- 6/3#
mean1=0.1#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t,mean1=mean1)#
fixed<-list(nugget=nugget, sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,mean = mean,mean1=mean1)#
set.seed(2)#
ss1 <- GeoSim(coordx=coords, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param,X=X)$data#
#
maxtime=2;maxdist=2#
GPU = 0#
local = c(1,1)#
# fit1 <- GeoFit(data=ss1,coordx=coords,coordt=coordt,#
#                corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
#                likelihood="Marginal",type="Pairwise",#
#                start=start,fixed=fixed,model = model,varest = TRUE,GPU = GPU, local = local)#
# print(fit1)#
# fit1$param#
fit1 <- GeoFit(data=ss1,coordx=coords,coordt=coordt,#
               corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,model = model,GPU = GPU, local = local,varest = TRUE,X=X)#
print(fit1)#
fit1$param
str(X)
library(GeoModels)#
set.seed(52)#
# Define the spatial-coordinates of the points:#
N=500#
x <- runif(N, 0, 1)#
y <- runif(N, 0, 1)#
coords <- cbind(x,y)#
X=cbind(rep(1,N),runif(N))#
mean=1; mean1=2 # regression parameters#
model="Gamma"#
corrmodel = "exp"#
NuisParam(model,FALSE,1)#
CorrParam(corrmodel)#
sill=1#
scale=0.2#
nugget=0#
shape=6#
power2=4#
param=list(mean=mean,mean1=mean1,sill=sill,scale=scale,nugget=nugget,shape = shape)#
# Simulation of a non stationary Gamma RF:#
set.seed(54)#
data <- GeoSim(coordx=coords, corrmodel=corrmodel,model=model,X=X,#
               param=param)$data#
#
fixed<-list(nugget=nugget,sill=sill)#
start<-list(mean=mean,mean1=mean1, shape=shape,scale=scale)#
#
# Maximum pairwise composite-likelihood fitting of the RF:#
GPU = 0#
local = c(1,1)#
fit1 <- GeoFit(data=data,coordx=coords,corrmodel=corrmodel, model=model,#
               maxdist=.05,likelihood="Marginal",type="Pairwise",X=X,#
               start=start,fixed=fixed,GPU = GPU, local = local)#
fit1#
print(fit1)
library(GeoModels)#
set.seed(52)#
# Define the spatial-coordinates of the points:#
N=500#
x <- runif(N, 0, 1)#
y <- runif(N, 0, 1)#
coords <- cbind(x,y)#
X=cbind(rep(1,N),runif(N))#
mean=1; mean1=2 # regression parameters#
model="Gamma"#
corrmodel = "exp"#
NuisParam(model,FALSE,1)#
CorrParam(corrmodel)#
sill=1#
scale=0.2#
nugget=0#
shape=6#
power2=4#
param=list(mean=mean,mean1=mean1,sill=sill,scale=scale,nugget=nugget,shape = shape)#
# Simulation of a non stationary Gamma RF:#
set.seed(54)#
data <- GeoSim(coordx=coords, corrmodel=corrmodel,model=model,X=X,#
               param=param)$data#
#
fixed<-list(nugget=nugget,sill=sill)#
start<-list(mean=mean,mean1=mean1, shape=shape,scale=scale)#
#
# Maximum pairwise composite-likelihood fitting of the RF:#
GPU = 0#
local = c(1,1)#
fit1 <- GeoFit(data=data,coordx=coords,corrmodel=corrmodel, model=model,#
               maxdist=.05,likelihood="Marginal",type="Pairwise",X=X,#
               start=start,fixed=fixed,GPU = GPU, local = local,varest = TRUE)#
fit1#
print(fit1)
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="Gaussian";shape=4;n=1#
set.seed(112)#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,100,1)# coordt=seq(0,7,1)#
#
N=12 # number of location sites 6#
set.seed(112)#
x <- runif(N, 0, 1)#
# set.seed(5)#
set.seed(114)#
y <- runif(N, 0, 1)#
coords <- cbind(x,y)#
set.seed(1985)#
X <- cbind(rep(1,N*length(coordt)),matrix(runif(N*length(coordt)),ncol=1))#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,2)#
mean <- 0.1#
sill <- 1#
nugget <- 0#
scale_s <- .5/3#
scale_t <- 6/3#
mean1=0.1#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t,mean1=mean1)#
fixed<-list(nugget=nugget, sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,mean = mean,mean1=mean1)#
set.seed(2)#
ss1 <- GeoSim(coordx=coords, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param,X=X)$data#
#
maxtime=2;maxdist=2#
GPU = 0#
local = c(1,1)#
# fit1 <- GeoFit(data=ss1,coordx=coords,coordt=coordt,#
#                corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
#                likelihood="Marginal",type="Pairwise",#
#                start=start,fixed=fixed,model = model,varest = TRUE,GPU = GPU, local = local)#
# print(fit1)#
# fit1$param#
fit1 <- GeoFit(data=ss1,coordx=coords,coordt=coordt,#
               corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,model = model,GPU = GPU, local = local,varest = TRUE,X=X)#
print(fit1)#
fit1$param
start
summary(coords)
summary(dust(coords))
summary(dist(coords))
summary(dist(coordt))
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="Gaussian";shape=4;n=1#
set.seed(112)#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,100,1)# coordt=seq(0,7,1)#
#
N=12 # number of location sites 6#
set.seed(112)#
x <- runif(N, 0, 1)#
# set.seed(5)#
set.seed(114)#
y <- runif(N, 0, 1)#
coords <- cbind(x,y)#
set.seed(1985)#
X <- cbind(rep(1,N*length(coordt)),matrix(runif(N*length(coordt)),ncol=1))#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,2)#
mean <- 0.1#
sill <- 1#
nugget <- 0#
scale_s <- 1/3#
scale_t <- 6/3#
mean1=0.1#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t,mean1=mean1)#
fixed<-list(nugget=nugget, sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,mean = mean,mean1=mean1)#
set.seed(2)#
ss1 <- GeoSim(coordx=coords, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param,X=X)$data#
#
maxtime=2;maxdist=2#
GPU = 0#
local = c(1,1)#
# fit1 <- GeoFit(data=ss1,coordx=coords,coordt=coordt,#
#                corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
#                likelihood="Marginal",type="Pairwise",#
#                start=start,fixed=fixed,model = model,varest = TRUE,GPU = GPU, local = local)#
# print(fit1)#
# fit1$param#
fit1 <- GeoFit(data=ss1,coordx=coords,coordt=coordt,#
               corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,model = model,GPU = GPU, local = local,varest = TRUE,X=X)#
print(fit1)#
fit1$param
start
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="Gaussian";shape=4;n=1#
set.seed(112)#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,100,1)# coordt=seq(0,7,1)#
#
N=12 # number of location sites 6#
set.seed(112)#
x <- runif(N, 0, 1)#
# set.seed(5)#
set.seed(114)#
y <- runif(N, 0, 1)#
coords <- cbind(x,y)#
set.seed(1985)#
X <- cbind(rep(1,N*length(coordt)),matrix(runif(N*length(coordt)),ncol=1))#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,2)#
mean <- 0.1#
sill <- 1#
nugget <- 0#
scale_s <- 1/3#
scale_t <- 6/3#
mean1=0.1#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t,mean1=mean1)#
fixed<-list(nugget=nugget, sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,mean = mean,mean1=mean1)#
set.seed(2)#
ss1 <- GeoSim(coordx=coords, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param,X=X)$data#
#
maxtime=2;maxdist=2#
GPU = 0#
local = c(1,1)#
# fit1 <- GeoFit(data=ss1,coordx=coords,coordt=coordt,#
#                corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
#                likelihood="Marginal",type="Pairwise",#
#                start=start,fixed=fixed,model = model,varest = TRUE,GPU = GPU, local = local)#
# print(fit1)#
# fit1$param#
fit1 <- GeoFit(data=ss1,coordx=coords,coordt=coordt,#
               corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,model = model,GPU = GPU, local = local,varest = TRUE,X=X)#
print(fit1)#
fit1$param
fit1 <- GeoFit(data=ss1,coordx=coords,coordt=coordt,#
               corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,model = model,GPU = GPU, local = local,varest = TRUE,X=X)#
print(fit1)#
fit1$param
############################################
rm(list=ls())#
#
#*** Info:#
'#
PRACTICAL RANGE = 5#
12 scenarios:#
b: 2,4,8 for window size in space and time simultaneously (3 in total).#
Weighted: 1 (Yes), 0 (No) (two in total)#
Step window: 0.5 for space and no overlap in time && no overlap in space and no overlap in time (two in total)'#
#*** End Info:#
#
########################R package########################
#
require(CompRandFld)#
require(MCMCpack)#
require(spatstat)#
require(STBEU)#
dirsol = "~/Documents/Software/STBEU/Simulations/NewCheck/Res/spacetime" # Directory where results will be#
#
################################################
# setting 1  (many locations in space a few in time)#
################################################
#
####location sites #########################################
lambda=5#
set.seed(1985)                                                                      ### not regular#
pp<-runifpoint(121, win=owin(c(-lambda,lambda),c(-lambda,lambda)))       ### not regular#
coords<-cbind(pp$x,pp$y)  #
plot(coords)#
### not regular#
####temporal instants #########################################
nt = 50 # Time points#
times=seq(1,nt,1)#
nrow(coords)#
nrow(coords)*nt#
# bns = 2 For Space#
# bnt = 2,4,6. For Time#
################################################
#
###################################################################
model=1  #   1=double exponential       2 =gneiting#
#
if (model == 1) #
{#
  # exponential model#
  cov.model <-"exp_exp"#
  cc=1#
  ######
  mean=0#
  nugget=0#
  scale_s<-3/3#
  scale_t<-3/3#
  sill=1#
  param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill)#
  fixed=list(nugget=nugget,mean=mean)#
  fix=c(nugget=nugget,mean=mean)#
}#
#
#################################################
#   parameters for the subsampling #####
################################################
coordx=coords[,1]#
coordy=coords[,2]#
LX=abs(range(coordx)[1]-range(coordx)[2])#
LY=abs(range(coordy)[1]-range(coordy)[2])#
type_subs=3    ### type of subsampling  1=in space    2= in time 3= spacetime#
#
type_dist=1                ### type of distance     1=euclidean 2=chordal  3=geodesic #
maxdistPL=max(dist(coords))*.25                  ## compact support in weights function for pairwise liklihood#
maxtimePL=ceiling(max(dist(times))*.25)#
#
i=1#
nsim<-500   ## number of simulation#
results=matrix(NA,ncol=4,nrow=5*nsim);label = 0:4#
set.seed(276)
summary)dist(coords)
summary(dist(coords))
summary(dist(coordt))
summary(dist(times))
param
############################################
rm(list=ls())#
#
#*** Info:#
'#
PRACTICAL RANGE = 3 Irregular (note the seed for the space coordinates)#
12 scenarios:#
b: 2,4,8 for window size in space and time simultaneously (3 in total).#
Weighted: 1 (Yes), 0 (No) (two in total)#
Step window: 0.5 for space and no overlap in time && no overlap in space and no overlap in time (two in total)'#
#*** End Info:#
#
########################R package########################
#
require(CompRandFld)#
require(MCMCpack)#
require(spatstat)#
require(STBEU)#
dirsol = "~/Documents/Software/STBEU/Simulations/NewCheck/Res/spacetime" # Directory where results will be#
################################################
# setting 1  (many locations in space a few in time)#
################################################
#
####location sites #########################################
lambda=5#
set.seed(1985)                                                                      ### not regular#
pp<-runifpoint(121, win=owin(c(-lambda,lambda),c(-lambda,lambda)))       ### not regular#
coords<-cbind(pp$x,pp$y)#
plot(coords)                                                        ### not regular#
####temporal instants #########################################
times=seq(1,50,1)#
nrow(coords)*length(times)#
#
################################################
###################################################################
model=1  #   1=double exponential       2 =gneiting#
#
if (model == 1) #
{#
  # exponential model#
  cov.model <-"exp_exp"#
  cc=1#
  ######
  mean=0#
  nugget=0#
  scale_s<-4/3#
  scale_t<-4/3#
  sill=1#
  param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill)#
  fixed=list(nugget=nugget,mean=mean)#
  fix=c(nugget=nugget,mean=mean)#
}#
#
#################################################
#   parameters for the subsampling #####
################################################
coordx=coords[,1]#
coordy=coords[,2]#
LX=abs(range(coordx)[1]-range(coordx)[2])#
LY=abs(range(coordy)[1]-range(coordy)[2])#
type_subs=3    ### type of subsampling  1=in space    2= in time 3= spacetime#
#
type_dist=1                ### type of distance     1=euclidean 2=chordal  3=geodesic #
maxdistPL=max(dist(coords))*.25                  ## compact support in weights function for pairwise liklihood#
maxtimePL=ceiling(max(dist(times))*.25)#
#
i=1#
nsim<-500   ## number of simulation#
results=matrix(NA,ncol=4,nrow=5*nsim);label = 0:4#
set.seed(276)
summary)dist(coords)
summary(dist(coords))
summary(dist(times))
param
############################################
rm(list=ls())#
#
#*** Info:#
'   #
PRACTICAL RANGE = 1.2/3#
12 scenarios:#
b1: 3,10 for window size in space and time.#
b2: 4,20 for window size in space and time.#
Step window: 0.5 for space && no overlap (two in total)#
#
maxdist=.25*lato_fin#
maxtime=ceiling(.25*winc_t)#
'#
#*** End Info:#
#
########################R package########################
require(CompRandFld)#
require(MCMCpack)#
require(STBEU)#
dirsol = "~/Documents/Software/STBEU/Simulations/NewCheck/Res/spacetime" # Directory where results will be #
################################################
# setting 1  (many locations in space a few in time)#
################################################
#
####location sites #########################################
lambda=5#
xx=seq(-lambda,lambda);#
coords=as.matrix(expand.grid(xx,xx))   ###regular#
# plot(coords)#
#
####temporal instants #########################################
nt = 50 # Time points 50#
times=seq(1,nt,1)#
nrow(coords)#
nrow(coords)*nt#
# bn = 2,4 Same Space#
################################################
###################################################################
model=1  #   1=double exponential       2 =gneiting#
#
if (model == 1) #
{#
  # exponential model#
  cov.model <-"exp_exp"#
  cc=1#
  ######
  mean=0#
  nugget=0#
  scale_s<-4/3#
  scale_t<-4/3#
  sill=1#
  param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill)#
  fixed=list(nugget=nugget,mean=mean)#
  fix=c(nugget=nugget,mean=mean)#
}#
#
#################################################
#   parameters for the subsampling #####
################################################
coordx=coords[,1]#
coordy=coords[,2]#
LX=abs(range(coordx)[1]-range(coordx)[2])#
LY=abs(range(coordy)[1]-range(coordy)[2])#
type_subs=3    ### type of subsampling  1=in space    2= in time 3= spacetime#
#
type_dist=1                ### type of distance     1=euclidean 2=chordal  3=geodesic #
maxdistPL=max(dist(coords))*.25                  ## compact support in weights function for pairwise liklihood#
maxtimePL=ceiling(max(dist(times))*.25)#
#
i=1#
nsim<-500   ## number of simulation#
results=matrix(NA,ncol=4,nrow=5*nsim);label = 0:4#
set.seed(276)
summary(dist(coords))
summary(dist(times))
param
4/5
4/3
3/3
5/3
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="Gaussian";shape=4;n=1#
set.seed(112)#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,100,1)# coordt=seq(0,7,1)#
#
N=12 # number of location sites 6#
set.seed(112)#
x <- runif(N, 0, 1)#
# set.seed(5)#
set.seed(114)#
y <- runif(N, 0, 1)#
coords <- cbind(x,y)#
set.seed(1985)#
X <- cbind(rep(1,N*length(coordt)),matrix(runif(N*length(coordt)),ncol=1))#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,2)#
mean <- 0.1#
sill <- 1#
nugget <- 0#
scale_s <- 1/3#
scale_t <- 6/3#
mean1=0.1#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t,mean1=mean1)#
fixed<-list(nugget=nugget, sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,mean = mean,mean1=mean1)#
set.seed(2)#
ss1 <- GeoSim(coordx=coords, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param,X=X)$data#
#
maxtime=2;maxdist=2#
GPU = 0#
local = c(1,1)#
# fit1 <- GeoFit(data=ss1,coordx=coords,coordt=coordt,#
#                corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
#                likelihood="Marginal",type="Pairwise",#
#                start=start,fixed=fixed,model = model,varest = TRUE,GPU = GPU, local = local)#
# print(fit1)#
# fit1$param#
fit1 <- GeoFit(data=ss1,coordx=coords,coordt=coordt,#
               corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,model = model,GPU = GPU, local = local,varest = TRUE,X=X)#
print(fit1)#
fit1$param
### Test gaussian with no dim#
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="Gaussian";shape=4;n=1#
set.seed(112)#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,50,1)# coordt=seq(0,7,1)#
#
N=6 # number of location sites 6#
set.seed(112)#
x <- runif(N, 0, 1)#
# set.seed(5)#
set.seed(114)#
y <- runif(N, 0, 1)#
coords <- cbind(x,y)#
set.seed(1985)#
X <- cbind(rep(1,N*length(coordt)),matrix(runif(N*length(coordt)),ncol=1))#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,2)#
mean <- 0.1#
sill <- 1#
nugget <- 0#
scale_s <- 1/3#
scale_t <- 6/3#
mean1=0.1#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t,mean1=mean1)#
fixed<-list(nugget=nugget, sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,mean = mean,mean1=mean1)#
set.seed(2)#
ss1 <- GeoSim(coordx=coords, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param,X=X)$data#
#
maxtime=2;maxdist=2#
GPU = 0#
local = c(1,1)#
# fit1 <- GeoFit(data=ss1,coordx=coords,coordt=coordt,#
#                corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
#                likelihood="Marginal",type="Pairwise",#
#                start=start,fixed=fixed,model = model,varest = TRUE,GPU = GPU, local = local)#
# print(fit1)#
# fit1$param#
fit1 <- GeoFit(data=ss1,coordx=coords,coordt=coordt,#
               corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,model = model,GPU = GPU, local = local,varest = TRUE,X=X)#
print(fit1)#
fit1$param
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="Gaussian";shape=4;n=1#
set.seed(112)#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,50,1)# coordt=seq(0,7,1)#
#
N=6 # number of location sites 6#
set.seed(112)#
x <- runif(N, 0, 1)#
# set.seed(5)#
set.seed(114)#
y <- runif(N, 0, 1)#
coords <- cbind(x,y)#
set.seed(1985)#
X <- cbind(rep(1,N*length(coordt)),matrix(runif(N*length(coordt)),ncol=1))#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,2)#
mean <- 0.1#
sill <- 1#
nugget <- 0#
scale_s <- 1/3#
scale_t <- 6/3#
mean1=0.1#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t,mean1=mean1)#
fixed<-list(nugget=nugget, sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,mean = mean,mean1=mean1)#
set.seed(2)#
ss1 <- GeoSim(coordx=coords, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param,X=X)$data#
#
maxtime=2;maxdist=2#
GPU = 0#
local = c(1,1)#
# fit1 <- GeoFit(data=ss1,coordx=coords,coordt=coordt,#
#                corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
#                likelihood="Marginal",type="Pairwise",#
#                start=start,fixed=fixed,model = model,varest = TRUE,GPU = GPU, local = local)#
# print(fit1)#
# fit1$param#
fit1 <- GeoFit(data=ss1,coordx=coords,coordt=coordt,#
               corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,model = model,GPU = GPU, local = local,varest = TRUE,X=X)#
print(fit1)#
fit1$param
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="Gaussian";shape=4;n=1#
set.seed(112)#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,100,1)# coordt=seq(0,7,1)#
#
N=12 # number of location sites 6#
set.seed(112)#
x <- runif(N, 0, 1)#
# set.seed(5)#
set.seed(114)#
y <- runif(N, 0, 1)#
coords <- cbind(x,y)#
set.seed(1985)#
X <- cbind(rep(1,N*length(coordt)),matrix(runif(N*length(coordt)),ncol=1))#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,2)#
mean <- 0.1#
sill <- 1#
nugget <- 0#
scale_s <- 1/3#
scale_t <- 6/3#
mean1=0.1#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t,mean1=mean1)#
fixed<-list(nugget=nugget, sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,mean = mean,mean1=mean1)#
set.seed(2)#
ss1 <- GeoSim(coordx=coords, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param,X=X)$data#
#
maxtime=2;maxdist=2#
GPU = 0#
local = c(1,1)#
# fit1 <- GeoFit(data=ss1,coordx=coords,coordt=coordt,#
#                corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
#                likelihood="Marginal",type="Pairwise",#
#                start=start,fixed=fixed,model = model,varest = TRUE,GPU = GPU, local = local)#
# print(fit1)#
# fit1$param#
fit1 <- GeoFit(data=ss1,coordx=coords,coordt=coordt,#
               corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,model = model,GPU = GPU, local = local,varest = TRUE,X=X)#
print(fit1)#
fit1$param
############################################
rm(list=ls())#
#
#*** Info:#
'#
PRACTICAL RANGE = 3#
12 scenarios:#
b: 2,4,8 for window size in space and time simultaneously (3 in total).#
Weighted: 1 (Yes), 0 (No) (two in total)#
Step window: 0.5 for space and no overlap in time && no overlap in space and no overlap in time (two in total)'#
#*** End Info:#
#
########################R package########################
#
require(CompRandFld)#
require(MCMCpack)#
require(STBEU)#
dirsol = "~/Documents/Software/STBEU/Simulations/NewCheck/Res/spacetime" # Directory where results will be#
################################################
# setting 1  (many locations in space a few in time)#
################################################
####location sites #########################################
lambda=5#
xx=seq(-lambda,lambda);#
coords=as.matrix(expand.grid(xx,xx))   ###regular#
# plot(coords)#
#
####temporal instants #########################################
nt = 50 # Time points 50#
times=seq(1,nt,1)#
nrow(coords)#
nrow(coords)*nt#
# bnt = 2,4,6. For Time#
################################################
#
type_dist=1                ### type of distance     1=euclidean 2=chordal  3=geodesic #
maxdist=1#
maxtime=1#
#
###################################################################
model=2  #   1=double exponential       2 =gneiting#
#
if (model == 2) {#
  # gneiting model#
  cov.model <-"gneiting"#
  cc=2#
  ######
  mean=0#
  nugget=0#
  scale_s<-4/3#
  scale_t<-4/19#
  sill=1#
  power_s=1;power_t=1;sep=0.5#
  param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill,#
             power_s=power_s,power_t=power_t,sep=sep)  #
  fixed=list(nugget=nugget,power_s=power_s,power_t=power_t,sep=sep,mean = mean)  #
  fix=c(nugget=nugget, power_s=power_s, power_t=power_t,sep=sep,mean = mean) #
}#
###################################################################
#################################################
#   parameters for the subsampling #####
################################################
coordx=coords[,1]#
coordy=coords[,2]#
LX=abs(range(coordx)[1]-range(coordx)[2])#
LY=abs(range(coordy)[1]-range(coordy)[2])#
type_subs=3    ### type of subsampling  1=in space    2= in time 3= spacetime#
#
type_dist=1                ### type of distance     1=euclidean 2=chordal  3=geodesic #
maxdistPL=max(dist(coords))*.25                  ## compact support in weights function for pairwise liklihood#
maxtimePL=ceiling(max(dist(times))*.25)#
#
i=1#
nsim<-500   ## number of simulation#
results=matrix(NA,ncol=4,nrow=5*nsim);label = 0:4#
set.seed(276)#
while(i<=nsim)#
{#
  #####################################################################################################      #
  # Simulation of the spatial Gaussian random field:#
  data <- RFsim(coordx=coords,coordt=times,corrmodel=cov.model, param=param)$data#
  mm=mean(c(data))#
  vv=var(c(data))#
  start=list(scale_s=scale_s,scale_t=scale_t,sill=vv)#
  ##################################################################################################### #
  ###### Composite likelihood based on pairs estimation ###############################################     #
  theta=c(sill=vv,scale_s=scale_s,scale_t=scale_t)                #starting value  #
  # Maximum composite-likelihood fitting of the random field:#
  # **************************scenario 0/4A main NOT weighted estimation***#
  fitA <- FitComposite(data=data,coordx=coords,coordt=times,#
                       corrmodel=cov.model,maxtime=maxtimePL,maxdist=maxdistPL,#
                       likelihood="Marginal",type="Pairwise",#
                       start=start,fixed=fixed,weighted=F)#
  eu_par0=c(fitA$param[1],fitA$param[2],fitA$param[3])#
  print(fitA$param)#
  names(eu_par0)=names(fitA$param)#
  # **************************scenario 1/4 bs = 3,bt = 10, no overlaping  ***#
  #################################################
  #   parameters for the subsampling #####
  ################################################
  lato_fin=3  #changing window size 2,4#
  lx=lato_fin          #lunghezza lato x quadrato subfinestra#
  ly=lato_fin          #lunghezza lato y quadrato subfinestra#
  winc=c(lx/sqrt(LX),ly/sqrt(LY))#
  winstp= 1  ###   1/lato_fin complete overlapping   1 "no" overlapping#
  ################################################
  winc_t=3#
  winstp_t= 1  ###   1/lato_fin complete overlapping   1 "no" overlapping#
  ################################################
  weighted=0#
  maxdist=lato_fin#
  maxtime=ceiling(winc_t)#
  ### eucliden likelihood ################ #
  res1=STBEUFit(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc_s=winc,winstp_s = winstp,winc_t = winc_t,winstp_t = winstp_t,type_subs,weighted)#
  eu_par1=c(res1$par[2],res1$par[3],res1$par[1])#
  names(eu_par1)=names(fitA$param)#
  # print(eu_par1)#
  # **************************scenario 2/4 bs = 4,bt = 20, no overlaping  ***#
  #################################################
  #   parameters for the subsampling #####
  ################################################
  lato_fin=4  #changing window size 2,4#
  lx=lato_fin          #lunghezza lato x quadrato subfinestra#
  ly=lato_fin          #lunghezza lato y quadrato subfinestra#
  winc=c(lx/sqrt(LX),ly/sqrt(LY))#
  winstp= 1  ###   1/lato_fin complete overlapping   1 "no" overlapping#
  ################################################
  winc_t=4#
  winstp_t= 1  ###   1/lato_fin complete overlapping   1 "no" overlapping#
  ################################################
  maxdist=lato_fin#
  maxtime=ceiling(winc_t)#
  ### eucliden likelihood ################ #
  res2=STBEUFit(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc_s=winc,winstp_s = winstp,winc_t = winc_t,winstp_t = winstp_t,type_subs,weighted)#
  eu_par2=c(res2$par[2],res2$par[3],res2$par[1])#
  names(eu_par2)=names(fitA$param)#
  # print(eu_par2)#
  # **************************scenario 3/4 bs = 3,bt=10 overlaping (.5) ***#
  #################################################
  #   parameters for the subsampling #####
  ################################################
  lato_fin=3  #changing window size 2,4#
  lx=lato_fin          #lunghezza lato x quadrato subfinestra#
  ly=lato_fin          #lunghezza lato y quadrato subfinestra#
  winc=c(lx/sqrt(LX),ly/sqrt(LY))#
  winstp= .5  ###   1/lato_fin complete overlapping   1 "no" overlapping#
  ################################################
  winc_t=3#
  winstp_t= .5  ###   1/lato_fin complete overlapping   1 "no" overlapping#
  ################################################
  maxdist=lato_fin#
  maxtime=ceiling(winc_t)#
  ### eucliden likelihood ################ #
  res3=STBEUFit(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc_s=winc,winstp_s = winstp,winc_t = winc_t,winstp_t = winstp_t,type_subs,weighted)#
  eu_par3=c(res3$par[2],res3$par[3],res3$par[1])#
  names(eu_par3)=names(fitA$param)#
  # print(eu_par3)#
  # **************************scenario 4/4 bs = 4,bt=20, overlaping (.5), weighted. ***#
  #################################################
  #   parameters for the subsampling #####
  ################################################
  lato_fin=4  #changing window size 2,4,8#
  lx=lato_fin          #lunghezza lato x quadrato subfinestra#
  ly=lato_fin          #lunghezza lato y quadrato subfinestra#
  winc=c(lx/sqrt(LX),ly/sqrt(LY))#
  winstp= .5  ###   1/lato_fin complete overlapping   1 "no" overlapping#
  ################################################
  winc_t=4#
  winstp_t= .5  ###   1/lato_fin complete overlapping   1 "no" overlapping#
  ################################################
  maxdist=lato_fin#
  maxtime=ceiling(winc_t)#
  ### eucliden likelihood ################ #
  res4=STBEUFit(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc_s=winc,winstp_s = winstp,winc_t = winc_t,winstp_t = winstp_t,type_subs,weighted)#
  eu_par4=c(res4$par[2],res4$par[3],res4$par[1])#
  names(eu_par4)=names(fitA$param)#
  # print(eu_par4)#
  results[(5*(i)-4):((5*(i)-4)+4),]=cbind(label,rbind(eu_par0=eu_par0,eu_par1,eu_par2,eu_par3,eu_par4))#
  colnames(results)=c("setting",names(fitA$param))#
  print(i)#
  i=i+1#
  setwd(dirsol)#
  write.csv(results, "regular_results_spacetimeGN2.csv")#
}
