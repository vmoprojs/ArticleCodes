mean(data)
summary(coords)
start
theta
summary(times)
type_subs
############################################
rm(list=ls())#
#
#*** Info:#
'#
PRACTICAL RANGE = 3 Irregular (note the seed for the space coordinates)#
12 scenarios:#
b: 2,4,8 for window size in space and time simultaneously (3 in total).#
Weighted: 1 (Yes), 0 (No) (two in total)#
Step window: 0.5 for space and no overlap in time && no overlap in space and no overlap in time (two in total)'#
#*** End Info:#
#
########################R package########################
#
require(CompRandFld)#
require(MCMCpack)#
require(spatstat)#
source("~/Documents/UV/Tesis/OpenCL/Task18/eu_like/euclidean_cl_st_ocl.R")#
dyn.load("~/Documents/UV/Tesis/OpenCL/Task18/eu_like/euc_like_cl_st_Open.so")#
################################################
# setting 1  (many locations in space a few in time)#
################################################
#
####location sites #########################################
lambda=4#
#xx=seq(-lambda,lambda);#
#coords=as.matrix(expand.grid(xx,xx))   ###regular#
#nrow(coords)#
#
set.seed(67)                                                                      ### not regular#
pp<-runifpoint(81, win=owin(c(-lambda,lambda),c(-lambda,lambda)))       ### not regular#
coords<-cbind(pp$x,pp$y)#
plot(coords)                                                        ### not regular#
nrow(coords)#
####temporal instants #########################################
times=seq(1,90,1)#
#
################################################
#
type_dist=1                ### type of distance     1=euclidean 2=chordal  3=geodesic #
maxdist=1#
maxtime=1#
#
###################################################################
model=1  #   1=double exponential       2 =gneiting#
#
if (model == 1) {#
  # exponential model#
  cov.model <-"exp_exp"#
  cc=1#
  ######
  mean=0#
  nugget=0#
  scale_s<-.4 #practical range/3 (space)#
  scale_t<-.4 #practical range/3 (time)#
  sill=1#
  param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill)  #
  fixed=list(nugget=0)#
  fix=nugget#
}#
if (model == 2) {#
  # gneiting model#
  cov.model <-"gneiting"#
  cc=2#
  ######
  mean=0#
  nugget=0#
  scale_s<-3/3#
  scale_t<-3/20#
  sill=1#
  power_s=1;power_t=1;sep=0.5#
  param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill,#
             power_s=power_s,power_t=power_t,sep=sep)  #
  fixed=list(nugget=0,power_s=power_s,power_t=power_t,sep=sep)   #
  fix=c(nugget, power_s, power_t,sep) #
}#
###################################################################
###################################################################
###################################################################
#
coordx=coords[,1]#
coordy=coords[,2]#
LX=abs(range(coordx)[1]-range(coordx)[2])#
LY=abs(range(coordy)[1]-range(coordy)[2])#
type_subs=3   ### type of subsampling  1=in space    2= in time  3 =spacetime#
results_PLA=NULL#
results_EU1=results_EU2=results_EU3=results_EU4=NULL#
results_EU5=results_EU6=results_EU7=results_EU8=NULL#
results_EU9=results_EU10=results_EU11=results_EU12=NULL#
#
i=1#
nsim<-1000   ## number of simulation#
set.seed(67)#
# Simulation of the  Gaussian random field:#
data <- RFsim(coordx=coords,coordt=times,corrmodel=cov.model, param=param)$data#
#####################################################################################################      #
##################################################################################################### #
mm=mean(c(data))#
vv=var(c(data))#
start=list(mean=mm,scale_s=scale_s,scale_t=scale_t,sill=vv)#
theta=c(mm,vv,scale_s,scale_t)                #starting value  #
lato_fin=2  #changing window size#
lx=lato_fin          #lunghezza lato x quadrato subfinestra#
ly=lato_fin          #lunghezza lato y quadrato subfinestra#
winc=c(lx/sqrt(LX),ly/sqrt(LY))#
winstp= .5###   1/lato_fin complete overlapping in space  1 "no" overlapping in space#
################################################
winc_t=lato_fin   ###  length of temporal window#
winstp_t=1 ###   0.5 half overlapping  1 "no" overlapping#
################################################
#
weighted=0                                          #weigthed version  1=yes 0=no#
maxdist=1#
maxtime=1#
### eucliden likelihood ################ #
res4=euclidean_cl_st(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,winc_t,winstp_t,type_subs,weighted)#
eu_par4=c(res4$par[1],res4$par[3],res4$par[4],res4$par[2])#
names(eu_par4)=names(fitA$param)#
print(eu_par4)#
library(STBEU)#
STBEUFit(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,winc_t,winstp_t,type_subs,weighted)
############################################
rm(list=ls())#
#
#*** Info:#
'#
PRACTICAL RANGE = 3 Irregular (note the seed for the space coordinates)#
12 scenarios:#
b: 2,4,8 for window size in space and time simultaneously (3 in total).#
Weighted: 1 (Yes), 0 (No) (two in total)#
Step window: 0.5 for space and no overlap in time && no overlap in space and no overlap in time (two in total)'#
#*** End Info:#
#
########################R package########################
#
require(CompRandFld)#
require(MCMCpack)#
require(spatstat)#
source("~/Documents/UV/Tesis/OpenCL/Task18/eu_like/euclidean_cl_st_ocl.R")#
dyn.load("~/Documents/UV/Tesis/OpenCL/Task18/eu_like/euc_like_cl_st_Open.so")#
################################################
# setting 1  (many locations in space a few in time)#
################################################
#
####location sites #########################################
lambda=4#
#xx=seq(-lambda,lambda);#
#coords=as.matrix(expand.grid(xx,xx))   ###regular#
#nrow(coords)#
#
set.seed(67)                                                                      ### not regular#
pp<-runifpoint(81, win=owin(c(-lambda,lambda),c(-lambda,lambda)))       ### not regular#
coords<-cbind(pp$x,pp$y)#
plot(coords)                                                        ### not regular#
nrow(coords)#
####temporal instants #########################################
times=seq(1,90,1)#
#
################################################
#
type_dist=1                ### type of distance     1=euclidean 2=chordal  3=geodesic #
maxdist=1#
maxtime=1#
#
###################################################################
model=1  #   1=double exponential       2 =gneiting#
#
if (model == 1) {#
  # exponential model#
  cov.model <-"exp_exp"#
  cc=1#
  ######
  mean=0#
  nugget=0#
  scale_s<-.4 #practical range/3 (space)#
  scale_t<-.4 #practical range/3 (time)#
  sill=1#
  param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill)  #
  fixed=list(nugget=0)#
  fix=nugget#
}#
if (model == 2) {#
  # gneiting model#
  cov.model <-"gneiting"#
  cc=2#
  ######
  mean=0#
  nugget=0#
  scale_s<-3/3#
  scale_t<-3/20#
  sill=1#
  power_s=1;power_t=1;sep=0.5#
  param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill,#
             power_s=power_s,power_t=power_t,sep=sep)  #
  fixed=list(nugget=0,power_s=power_s,power_t=power_t,sep=sep)   #
  fix=c(nugget, power_s, power_t,sep) #
}#
###################################################################
###################################################################
###################################################################
#
coordx=coords[,1]#
coordy=coords[,2]#
LX=abs(range(coordx)[1]-range(coordx)[2])#
LY=abs(range(coordy)[1]-range(coordy)[2])#
type_subs=3   ### type of subsampling  1=in space    2= in time  3 =spacetime#
results_PLA=NULL#
results_EU1=results_EU2=results_EU3=results_EU4=NULL#
results_EU5=results_EU6=results_EU7=results_EU8=NULL#
results_EU9=results_EU10=results_EU11=results_EU12=NULL#
#
i=1#
nsim<-1000   ## number of simulation#
set.seed(67)#
# Simulation of the  Gaussian random field:#
data <- RFsim(coordx=coords,coordt=times,corrmodel=cov.model, param=param)$data#
#####################################################################################################      #
##################################################################################################### #
mm=mean(c(data))#
vv=var(c(data))#
start=list(mean=mm,scale_s=scale_s,scale_t=scale_t,sill=vv)#
theta=c(mm,vv,scale_s,scale_t)                #starting value  #
lato_fin=2  #changing window size#
lx=lato_fin          #lunghezza lato x quadrato subfinestra#
ly=lato_fin          #lunghezza lato y quadrato subfinestra#
winc=c(lx/sqrt(LX),ly/sqrt(LY))#
winstp= .5###   1/lato_fin complete overlapping in space  1 "no" overlapping in space#
################################################
winc_t=lato_fin   ###  length of temporal window#
winstp_t=1 ###   0.5 half overlapping  1 "no" overlapping#
################################################
#
weighted=0                                          #weigthed version  1=yes 0=no#
maxdist=1#
maxtime=1#
### eucliden likelihood ################ #
res4=euclidean_cl_st(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,winc_t,winstp_t,type_subs,weighted)#
eu_par4=c(res4$par[1],res4$par[3],res4$par[4],res4$par[2])#
names(eu_par4)=names(fitA$param)#
print(eu_par4)#
dyn.unload("~/Documents/UV/Tesis/OpenCL/Task18/eu_like/euc_like_cl_st_Open.so")#
library(STBEU)#
STBEUFit(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,winc_t,winstp_t,type_subs,weighted)
theta
weighted
maxdit
maxdist
maxtime
fix
rm(eucl_st_ocl)
STBEUFit(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,winc_t,winstp_t,type_subs,weighted)
rm(list=ls())#
#
require(CompRandFld)#
require(MCMCpack)#
require(spatstat)#
library(STBEU)#
################################################
# setting 1  (many locations in space a few in time)#
################################################
#
####location sites #########################################
lambda=4#
#xx=seq(-lambda,lambda);#
#coords=as.matrix(expand.grid(xx,xx))   ###regular#
#nrow(coords)#
#
set.seed(67)                                                                      ### not regular#
pp<-runifpoint(200, win=owin(c(-lambda,lambda),c(-lambda,lambda)))       ### not regular#
coords<-cbind(pp$x,pp$y)#
# plot(coords)                                                        ### not regular#
nrow(coords)#
####temporal instants #########################################
times=seq(1,10,1)#
model=1  #   1=double exponential       2 =gneiting#
#
type_dist=1                ### type of distance     1=euclidean 2=chordal  3=geodesic #
# maxdist=round(length(seq(-lambda,lambda))*.25,0)#
# maxtime=round(300*.15,0)#
maxdist=1#
maxtime=1#round(NT/4,0)#
#
###################################################################
#
if (model == 1) {#
  # exponential model#
  cov.model <-"exp_exp"#
  cc=1#
  ######
  mean=0#
  nugget=0#
  scale_s<-.4#
  scale_t<-1.2/3#
  sill=1#
  param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill)  #
  fixed=list(nugget=0)#
  fix=c(nugget = nugget)#
}#
if (model == 2) {#
  # gneiting model#
  cov.model <-"gneiting"#
  cc=2#
  ######
  mean=0#
  nugget=0#
  scale_s<-1#
  scale_t<-1.2/20#
  sill=1#
  power_s=1;power_t=1;sep=0.5#
  param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill,#
             power_s=power_s,power_t=power_t,sep=sep)  #
  fixed=list(nugget=0,power_s=power_s,power_t=power_t,sep=sep)   #
  fix=c(nugget=nugget, power_s=power_s, power_t=power_t,sep=sep) #
}#
###################################################################
set.seed(67)#
###################################################################
# Simulation of the  Gaussian random field:#
data <- RFsim(coordx=coords,coordt=times,corrmodel=cov.model, param=param)$data#
# data <- matrix(rnorm(nrow(coords)*length(times)),ncol=nrow(coords),nrow=length(times))#
###################################################################
mm=mean(c(data))#
vv=var(c(data))#
coordx=coords[,1]#
coordy=coords[,2]#
LX=abs(range(coordx)[1]-range(coordx)[2])#
LY=abs(range(coordy)[1]-range(coordy)[2])#
#################################################
#   parameters for the subsampling #####
################################################
lato_fin=2  #changing window size#
lx=lato_fin          #lunghezza lato x quadrato subfinestra#
ly=lato_fin          #lunghezza lato y quadrato subfinestra#
winc=c(lx/sqrt(LX),ly/sqrt(LY))#
winstp= 0.5###   1/lato_fin complete overlapping in space  1 "no" overlapping in space#
################################################
winc_t=lato_fin   ###  length of temporal window#
winstp_t=1 ###   0.5 half overlapping  1 "no" overlapping#
################################################
theta=c(mean = mm,sill=vv,scale_s=scale_s,scale_t = scale_t)                #starting value  #
weighted=0                                          #weigthed version  1=yes 0=no#
### eucliden likelihood ################ #
type_subs=3   ### type of subsampling  1=in space    2= in time  3 =spacetime#
# ### Eucliden likelihood################ #
tCPU = proc.time()#
res=STBEUFit(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,winc_t,winstp_t,type_subs,weighted)#
tCPU = proc.time()-tCPU#
print(res$par)
rm(list=ls())#
#
require(CompRandFld)#
require(MCMCpack)#
require(spatstat)#
library(STBEU)#
################################################
# setting 1  (many locations in space a few in time)#
################################################
#
####location sites #########################################
lambda=4#
#xx=seq(-lambda,lambda);#
#coords=as.matrix(expand.grid(xx,xx))   ###regular#
#nrow(coords)#
#
set.seed(67)                                                                      ### not regular#
pp<-runifpoint(200, win=owin(c(-lambda,lambda),c(-lambda,lambda)))       ### not regular#
coords<-cbind(pp$x,pp$y)#
# plot(coords)                                                        ### not regular#
nrow(coords)#
####temporal instants #########################################
times=seq(1,10,1)#
model=1  #   1=double exponential       2 =gneiting#
#
type_dist=1                ### type of distance     1=euclidean 2=chordal  3=geodesic #
# maxdist=round(length(seq(-lambda,lambda))*.25,0)#
# maxtime=round(300*.15,0)#
maxdist=1#
maxtime=1#round(NT/4,0)#
#
###################################################################
#
if (model == 1) {#
  # exponential model#
  cov.model <-"exp_exp"#
  cc=1#
  ######
  mean=0#
  nugget=0#
  scale_s<-.4#
  scale_t<-1.2/3#
  sill=1#
  param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill)  #
  fixed=list(nugget=0)#
  fix=c(nugget = nugget)#
}#
if (model == 2) {#
  # gneiting model#
  cov.model <-"gneiting"#
  cc=2#
  ######
  mean=0#
  nugget=0#
  scale_s<-1#
  scale_t<-1.2/20#
  sill=1#
  power_s=1;power_t=1;sep=0.5#
  param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill,#
             power_s=power_s,power_t=power_t,sep=sep)  #
  fixed=list(nugget=0,power_s=power_s,power_t=power_t,sep=sep)   #
  fix=c(nugget=nugget, power_s=power_s, power_t=power_t,sep=sep) #
}#
###################################################################
set.seed(67)#
###################################################################
# Simulation of the  Gaussian random field:#
data <- RFsim(coordx=coords,coordt=times,corrmodel=cov.model, param=param)$data#
# data <- matrix(rnorm(nrow(coords)*length(times)),ncol=nrow(coords),nrow=length(times))#
###################################################################
mm=mean(c(data))#
vv=var(c(data))#
coordx=coords[,1]#
coordy=coords[,2]#
LX=abs(range(coordx)[1]-range(coordx)[2])#
LY=abs(range(coordy)[1]-range(coordy)[2])#
#################################################
#   parameters for the subsampling #####
################################################
lato_fin=2  #changing window size#
lx=lato_fin          #lunghezza lato x quadrato subfinestra#
ly=lato_fin          #lunghezza lato y quadrato subfinestra#
winc=c(lx/sqrt(LX),ly/sqrt(LY))#
winstp= .5###   1/lato_fin complete overlapping in space  1 "no" overlapping in space#
################################################
winc_t=lato_fin   ###  length of temporal window#
winstp_t=1  ###   0.5 half overlapping  1 "no" overlapping#
################################################
theta=c(mean = mm,sill=vv,scale_s=scale_s,scale_t = scale_t)                #starting value  #
weighted=0                                          #weigthed version  1=yes 0=no#
### eucliden likelihood ################ #
type_subs=3   ### type of subsampling  1=in space    2= in time  3 =spacetime#
# ### Eucliden likelihood################ #
tCPU = proc.time()#
res=STBEUFit(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,winc_t,winstp_t,type_subs,weighted)#
tCPU = proc.time()-tCPU#
print(res$par)
lato_fin=2  #changing window size#
lx=lato_fin          #lunghezza lato x quadrato subfinestra#
ly=lato_fin          #lunghezza lato y quadrato subfinestra#
winc=c(lx/sqrt(LX),ly/sqrt(LY))#
winstp= .5###   1/lato_fin complete overlapping in space  1 "no" overlapping in space#
################################################
winc_t=lato_fin   ###  length of temporal window#
winstp_t=1  ###   0.5 half overlapping  1 "no" overlapping#
################################################
theta=c(mean = mm,sill=vv,scale_s=scale_s,scale_t = scale_t)                #starting value  #
weighted=0                                          #weigthed version  1=yes 0=no#
### eucliden likelihood ################ #
type_subs=3   ### type of subsampling  1=in space    2= in time  3 =spacetime#
# ### Eucliden likelihood################ #
tCPU = proc.time()#
res=STBEUFit(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,winc_t,winstp_t,type_subs,weighted)#
tCPU = proc.time()-tCPU#
print(res$par)
rm(list=ls())#
#
require(CompRandFld)#
require(MCMCpack)#
require(spatstat)#
library(STBEU)#
################################################
# setting 1  (many locations in space a few in time)#
################################################
#
####location sites #########################################
lambda=4#
#xx=seq(-lambda,lambda);#
#coords=as.matrix(expand.grid(xx,xx))   ###regular#
#nrow(coords)#
#
set.seed(67)                                                                      ### not regular#
pp<-runifpoint(200, win=owin(c(-lambda,lambda),c(-lambda,lambda)))       ### not regular#
coords<-cbind(pp$x,pp$y)#
# plot(coords)                                                        ### not regular#
nrow(coords)#
####temporal instants #########################################
times=seq(1,10,1)#
model=1  #   1=double exponential       2 =gneiting#
#
type_dist=1                ### type of distance     1=euclidean 2=chordal  3=geodesic #
# maxdist=round(length(seq(-lambda,lambda))*.25,0)#
# maxtime=round(300*.15,0)#
maxdist=1#
maxtime=1#round(NT/4,0)#
#
###################################################################
#
if (model == 1) {#
  # exponential model#
  cov.model <-"exp_exp"#
  cc=1#
  ######
  mean=0#
  nugget=0#
  scale_s<-.4#
  scale_t<-1.2/3#
  sill=1#
  param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill)  #
  fixed=list(nugget=0)#
  fix=c(nugget = nugget)#
}#
if (model == 2) {#
  # gneiting model#
  cov.model <-"gneiting"#
  cc=2#
  ######
  mean=0#
  nugget=0#
  scale_s<-1#
  scale_t<-1.2/20#
  sill=1#
  power_s=1;power_t=1;sep=0.5#
  param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill,#
             power_s=power_s,power_t=power_t,sep=sep)  #
  fixed=list(nugget=0,power_s=power_s,power_t=power_t,sep=sep)   #
  fix=c(nugget=nugget, power_s=power_s, power_t=power_t,sep=sep) #
}#
###################################################################
set.seed(67)#
###################################################################
# Simulation of the  Gaussian random field:#
data <- RFsim(coordx=coords,coordt=times,corrmodel=cov.model, param=param)$data#
# data <- matrix(rnorm(nrow(coords)*length(times)),ncol=nrow(coords),nrow=length(times))#
###################################################################
mm=mean(c(data))#
vv=var(c(data))#
coordx=coords[,1]#
coordy=coords[,2]#
LX=abs(range(coordx)[1]-range(coordx)[2])#
LY=abs(range(coordy)[1]-range(coordy)[2])#
#################################################
#   parameters for the subsampling #####
################################################
lato_fin=2  #changing window size#
lx=lato_fin          #lunghezza lato x quadrato subfinestra#
ly=lato_fin          #lunghezza lato y quadrato subfinestra#
winc=c(lx/sqrt(LX),ly/sqrt(LY))#
winstp= .5###   1/lato_fin complete overlapping in space  1 "no" overlapping in space#
################################################
winc_t=lato_fin   ###  length of temporal window#
winstp_t=1  ###   0.5 half overlapping  1 "no" overlapping#
################################################
theta=c(mean = mm,sill=vv,scale_s=scale_s,scale_t = scale_t)                #starting value  #
weighted=0                                          #weigthed version  1=yes 0=no#
### eucliden likelihood ################ #
type_subs=3   ### type of subsampling  1=in space    2= in time  3 =spacetime#
# ### Eucliden likelihood################ #
tCPU = proc.time()#
res=STBEUFit(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,winc_t,winstp_t,type_subs,weighted)#
tCPU = proc.time()-tCPU#
print(res$par)
theta
rm(list=ls())#
#
require(CompRandFld)#
require(MCMCpack)#
require(spatstat)#
library(STBEU)#
################################################
# setting 1  (many locations in space a few in time)#
################################################
#
####location sites #########################################
lambda=4#
#xx=seq(-lambda,lambda);#
#coords=as.matrix(expand.grid(xx,xx))   ###regular#
#nrow(coords)#
#
set.seed(67)                                                                      ### not regular#
pp<-runifpoint(200, win=owin(c(-lambda,lambda),c(-lambda,lambda)))       ### not regular#
coords<-cbind(pp$x,pp$y)#
# plot(coords)                                                        ### not regular#
nrow(coords)#
####temporal instants #########################################
times=seq(1,10,1)#
model=1  #   1=double exponential       2 =gneiting#
#
type_dist=1                ### type of distance     1=euclidean 2=chordal  3=geodesic #
# maxdist=round(length(seq(-lambda,lambda))*.25,0)#
# maxtime=round(300*.15,0)#
maxdist=1#
maxtime=1#round(NT/4,0)#
#
###################################################################
#
if (model == 1) {#
  # exponential model#
  cov.model <-"exp_exp"#
  cc=1#
  ######
  mean=0#
  nugget=0#
  scale_s<-.4#
  scale_t<-1.2/3#
  sill=1#
  param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill)  #
  fixed=list(nugget=0)#
  fix=c(nugget = nugget)#
}#
if (model == 2) {#
  # gneiting model#
  cov.model <-"gneiting"#
  cc=2#
  ######
  mean=0#
  nugget=0#
  scale_s<-1#
  scale_t<-1.2/20#
  sill=1#
  power_s=1;power_t=1;sep=0.5#
  param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill,#
             power_s=power_s,power_t=power_t,sep=sep)  #
  fixed=list(nugget=0,power_s=power_s,power_t=power_t,sep=sep)   #
  fix=c(nugget=nugget, power_s=power_s, power_t=power_t,sep=sep) #
}#
###################################################################
set.seed(67)#
###################################################################
# Simulation of the  Gaussian random field:#
data <- RFsim(coordx=coords,coordt=times,corrmodel=cov.model, param=param)$data#
# data <- matrix(rnorm(nrow(coords)*length(times)),ncol=nrow(coords),nrow=length(times))#
###################################################################
mm=mean(c(data))#
vv=var(c(data))#
coordx=coords[,1]#
coordy=coords[,2]#
LX=abs(range(coordx)[1]-range(coordx)[2])#
LY=abs(range(coordy)[1]-range(coordy)[2])#
#################################################
#   parameters for the subsampling #####
################################################
lato_fin=2  #changing window size#
lx=lato_fin          #lunghezza lato x quadrato subfinestra#
ly=lato_fin          #lunghezza lato y quadrato subfinestra#
winc=c(lx/sqrt(LX),ly/sqrt(LY))#
winstp= .5###   1/lato_fin complete overlapping in space  1 "no" overlapping in space#
################################################
winc_t=lato_fin   ###  length of temporal window#
winstp_t=1  ###   0.5 half overlapping  1 "no" overlapping#
################################################
theta=c(mean = mm,sill=vv,scale_s=scale_s,scale_t = scale_t)                #starting value  #
weighted=0                                          #weigthed version  1=yes 0=no#
### eucliden likelihood ################ #
type_subs=3   ### type of subsampling  1=in space    2= in time  3 =spacetime#
# ### Eucliden likelihood################ #
tCPU = proc.time()#
res=STBEUFit(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,winc_t,winstp_t,type_subs,weighted)#
tCPU = proc.time()-tCPU#
print(res$par)
winstp= 1###   1/lato_fin complete overlapping in space  1 "no" overlapping in space#
################################################
winc_t=lato_fin   ###  length of temporal window#
winstp_t=1  ###   0.5 half overlapping  1 "no" overlapping#
################################################
theta=c(mean = mm,sill=vv,scale_s=scale_s,scale_t = scale_t)                #starting value  #
weighted=0                                          #weigthed version  1=yes 0=no#
### eucliden likelihood ################ #
type_subs=3   ### type of subsampling  1=in space    2= in time  3 =spacetime#
# ### Eucliden likelihood################ #
tCPU = proc.time()#
res=STBEUFit(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,winc_t,winstp_t,type_subs,weighted)#
tCPU = proc.time()-tCPU#
print(res$par)
rm(list=ls())#
#
require(CompRandFld)#
require(MCMCpack)#
require(spatstat)#
library(STBEU)#
################################################
# setting 1  (many locations in space a few in time)#
################################################
#
####location sites #########################################
lambda=4#
#xx=seq(-lambda,lambda);#
#coords=as.matrix(expand.grid(xx,xx))   ###regular#
#nrow(coords)#
#
set.seed(67)                                                                      ### not regular#
pp<-runifpoint(200, win=owin(c(-lambda,lambda),c(-lambda,lambda)))       ### not regular#
coords<-cbind(pp$x,pp$y)#
# plot(coords)                                                        ### not regular#
nrow(coords)#
####temporal instants #########################################
times=seq(1,10,1)#
model=1  #   1=double exponential       2 =gneiting#
#
type_dist=1                ### type of distance     1=euclidean 2=chordal  3=geodesic #
# maxdist=round(length(seq(-lambda,lambda))*.25,0)#
# maxtime=round(300*.15,0)#
maxdist=1#
maxtime=1#round(NT/4,0)#
#
###################################################################
#
if (model == 1) {#
  # exponential model#
  cov.model <-"exp_exp"#
  cc=1#
  ######
  mean=0#
  nugget=0#
  scale_s<-.4#
  scale_t<-1.2/3#
  sill=1#
  param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill)  #
  fixed=list(nugget=0)#
  fix=c(nugget = nugget)#
}#
if (model == 2) {#
  # gneiting model#
  cov.model <-"gneiting"#
  cc=2#
  ######
  mean=0#
  nugget=0#
  scale_s<-1#
  scale_t<-1.2/20#
  sill=1#
  power_s=1;power_t=1;sep=0.5#
  param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill,#
             power_s=power_s,power_t=power_t,sep=sep)  #
  fixed=list(nugget=0,power_s=power_s,power_t=power_t,sep=sep)   #
  fix=c(nugget=nugget, power_s=power_s, power_t=power_t,sep=sep) #
}#
###################################################################
set.seed(67)#
###################################################################
# Simulation of the  Gaussian random field:#
data <- RFsim(coordx=coords,coordt=times,corrmodel=cov.model, param=param)$data#
# data <- matrix(rnorm(nrow(coords)*length(times)),ncol=nrow(coords),nrow=length(times))#
###################################################################
mm=mean(c(data))#
vv=var(c(data))#
coordx=coords[,1]#
coordy=coords[,2]#
LX=abs(range(coordx)[1]-range(coordx)[2])#
LY=abs(range(coordy)[1]-range(coordy)[2])#
#################################################
#   parameters for the subsampling #####
################################################
lato_fin=2  #changing window size#
lx=lato_fin          #lunghezza lato x quadrato subfinestra#
ly=lato_fin          #lunghezza lato y quadrato subfinestra#
winc=c(lx/sqrt(LX),ly/sqrt(LY))#
winstp= .5###   1/lato_fin complete overlapping in space  1 "no" overlapping in space#
################################################
winc_t=lato_fin   ###  length of temporal window#
winstp_t=1  ###   0.5 half overlapping  1 "no" overlapping#
################################################
theta=c(mean = mm,sill=vv,scale_s=scale_s,scale_t = scale_t)                #starting value  #
weighted=0                                          #weigthed version  1=yes 0=no#
### eucliden likelihood ################ #
type_subs=3   ### type of subsampling  1=in space    2= in time  3 =spacetime#
# ### Eucliden likelihood################ #
tCPU = proc.time()#
res=STBEUFit(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,winc_t,winstp_t,type_subs,weighted)#
tCPU = proc.time()-tCPU#
print(res$par)
rm(list=ls())#
#
require(CompRandFld)#
require(MCMCpack)#
require(spatstat)#
library(STBEU)#
################################################
# setting 1  (many locations in space a few in time)#
################################################
#
####location sites #########################################
lambda=4#
#xx=seq(-lambda,lambda);#
#coords=as.matrix(expand.grid(xx,xx))   ###regular#
#nrow(coords)#
#
set.seed(67)                                                                      ### not regular#
pp<-runifpoint(10, win=owin(c(-lambda,lambda),c(-lambda,lambda)))       ### not regular#
coords<-cbind(pp$x,pp$y)#
# plot(coords)                                                        ### not regular#
nrow(coords)#
####temporal instants #########################################
times=seq(1,20,1)#
model=1  #   1=double exponential       2 =gneiting#
#
type_dist=1                ### type of distance     1=euclidean 2=chordal  3=geodesic #
# maxdist=round(length(seq(-lambda,lambda))*.25,0)#
# maxtime=round(300*.15,0)#
maxdist=1#
maxtime=1#round(NT/4,0)#
#
###################################################################
#
if (model == 1) {#
  # exponential model#
  cov.model <-"exp_exp"#
  cc=1#
  ######
  mean=0#
  nugget=0#
  scale_s<-.4#
  scale_t<-1.2/3#
  sill=1#
  param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill)  #
  fixed=list(nugget=0)#
  fix=c(nugget = nugget)#
}#
if (model == 2) {#
  # gneiting model#
  cov.model <-"gneiting"#
  cc=2#
  ######
  mean=0#
  nugget=0#
  scale_s<-1#
  scale_t<-1.2/20#
  sill=1#
  power_s=1;power_t=1;sep=0.5#
  param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill,#
             power_s=power_s,power_t=power_t,sep=sep)  #
  fixed=list(nugget=0,power_s=power_s,power_t=power_t,sep=sep)   #
  fix=c(nugget=nugget, power_s=power_s, power_t=power_t,sep=sep) #
}#
###################################################################
set.seed(67)#
###################################################################
# Simulation of the  Gaussian random field:#
data <- RFsim(coordx=coords,coordt=times,corrmodel=cov.model, param=param)$data#
# data <- matrix(rnorm(nrow(coords)*length(times)),ncol=nrow(coords),nrow=length(times))#
###################################################################
mm=mean(c(data))#
vv=var(c(data))#
coordx=coords[,1]#
coordy=coords[,2]#
LX=abs(range(coordx)[1]-range(coordx)[2])#
LY=abs(range(coordy)[1]-range(coordy)[2])#
#################################################
#   parameters for the subsampling #####
################################################
lato_fin=3  #changing window size#
lx=lato_fin          #lunghezza lato x quadrato subfinestra#
ly=lato_fin          #lunghezza lato y quadrato subfinestra#
winc=c(lx/sqrt(LX),ly/sqrt(LY))#
winstp= .5###   1/lato_fin complete overlapping in space  1 "no" overlapping in space#
################################################
winc_t=4  ###  length of temporal window#
winstp_t=.5  ###   0.5 half overlapping  1 "no" overlapping#
################################################
theta=c(mean = mm,sill=vv,scale_s=scale_s,scale_t = scale_t)                #starting value  #
weighted=0                                          #weigthed version  1=yes 0=no#
### eucliden likelihood ################ #
type_subs=2   ### type of subsampling  1=in space    2= in time  3 =spacetime#
# ### Eucliden likelihood################ #
tCPU = proc.time()#
res=STBEUFit(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc_s=0,winstp_s=0,winc_t,winstp_t,type_subs,weighted)#
tCPU = proc.time()-tCPU#
print(res$par)
winstp_t=1  ###   0.5 half overlapping  1 "no" overlapping#
################################################
theta=c(mean = mm,sill=vv,scale_s=scale_s,scale_t = scale_t)                #starting value  #
weighted=0                                          #weigthed version  1=yes 0=no#
### eucliden likelihood ################ #
type_subs=2   ### type of subsampling  1=in space    2= in time  3 =spacetime#
# ### Eucliden likelihood################ #
tCPU = proc.time()#
res=STBEUFit(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc_s=0,winstp_s=0,winc_t,winstp_t,type_subs,weighted)#
tCPU = proc.time()-tCPU#
print(res$par)
rm(list=ls())#
#
require(CompRandFld)#
require(MCMCpack)#
require(spatstat)#
library(STBEU)#
################################################
# setting 1  (many locations in space a few in time)#
################################################
#
####location sites #########################################
lambda=4#
#xx=seq(-lambda,lambda);#
#coords=as.matrix(expand.grid(xx,xx))   ###regular#
#nrow(coords)#
#
set.seed(67)                                                                      ### not regular#
pp<-runifpoint(5, win=owin(c(-lambda,lambda),c(-lambda,lambda)))       ### not regular#
coords<-cbind(pp$x,pp$y)#
# plot(coords)                                                        ### not regular#
nrow(coords)#
####temporal instants #########################################
times=seq(1,20,1)#
model=1  #   1=double exponential       2 =gneiting#
#
type_dist=1                ### type of distance     1=euclidean 2=chordal  3=geodesic #
# maxdist=round(length(seq(-lambda,lambda))*.25,0)#
# maxtime=round(300*.15,0)#
maxdist=1#
maxtime=1#round(NT/4,0)#
#
###################################################################
#
if (model == 1) {#
  # exponential model#
  cov.model <-"exp_exp"#
  cc=1#
  ######
  mean=0#
  nugget=0#
  scale_s<-.4#
  scale_t<-1.2/3#
  sill=1#
  param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill)  #
  fixed=list(nugget=0)#
  fix=c(nugget = nugget)#
}#
if (model == 2) {#
  # gneiting model#
  cov.model <-"gneiting"#
  cc=2#
  ######
  mean=0#
  nugget=0#
  scale_s<-1#
  scale_t<-1.2/20#
  sill=1#
  power_s=1;power_t=1;sep=0.5#
  param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill,#
             power_s=power_s,power_t=power_t,sep=sep)  #
  fixed=list(nugget=0,power_s=power_s,power_t=power_t,sep=sep)   #
  fix=c(nugget=nugget, power_s=power_s, power_t=power_t,sep=sep) #
}#
###################################################################
set.seed(67)#
###################################################################
# Simulation of the  Gaussian random field:#
data <- RFsim(coordx=coords,coordt=times,corrmodel=cov.model, param=param)$data#
# data <- matrix(rnorm(nrow(coords)*length(times)),ncol=nrow(coords),nrow=length(times))#
###################################################################
mm=mean(c(data))#
vv=var(c(data))#
coordx=coords[,1]#
coordy=coords[,2]#
LX=abs(range(coordx)[1]-range(coordx)[2])#
LY=abs(range(coordy)[1]-range(coordy)[2])#
#################################################
#   parameters for the subsampling #####
################################################
lato_fin=3  #changing window size#
lx=lato_fin          #lunghezza lato x quadrato subfinestra#
ly=lato_fin          #lunghezza lato y quadrato subfinestra#
winc=c(lx/sqrt(LX),ly/sqrt(LY))#
winstp= .5###   1/lato_fin complete overlapping in space  1 "no" overlapping in space#
################################################
winc_t=4  ###  length of temporal window#
winstp_t=.5  ###   0.5 half overlapping  1 "no" overlapping#
################################################
theta=c(mean = mm,sill=vv,scale_s=scale_s,scale_t = scale_t)                #starting value  #
weighted=0                                          #weigthed version  1=yes 0=no#
### eucliden likelihood ################ #
type_subs=2   ### type of subsampling  1=in space    2= in time  3 =spacetime#
# ### Eucliden likelihood################ #
tCPU = proc.time()#
res=STBEUFit(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc_s=0,winstp_s=0,winc_t,winstp_t,type_subs,weighted)#
tCPU = proc.time()-tCPU#
print(res$par)
winstp_t=1  ###   0.5 half overlapping  1 "no" overlapping#
################################################
theta=c(mean = mm,sill=vv,scale_s=scale_s,scale_t = scale_t)                #starting value  #
weighted=0                                          #weigthed version  1=yes 0=no#
### eucliden likelihood ################ #
type_subs=2   ### type of subsampling  1=in space    2= in time  3 =spacetime#
# ### Eucliden likelihood################ #
tCPU = proc.time()#
res=STBEUFit(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc_s=0,winstp_s=0,winc_t,winstp_t,type_subs,weighted)#
tCPU = proc.time()-tCPU#
print(res$par)
winstp_t=.5  ###   0.5 half overlapping  1 "no" overlapping#
################################################
theta=c(mean = mm,sill=vv,scale_s=scale_s,scale_t = scale_t)                #starting value  #
weighted=0                                          #weigthed version  1=yes 0=no#
### eucliden likelihood ################ #
type_subs=2   ### type of subsampling  1=in space    2= in time  3 =spacetime#
# ### Eucliden likelihood################ #
tCPU = proc.time()#
res=STBEUFit(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc_s=0,winstp_s=0,winc_t,winstp_t,type_subs,weighted)#
tCPU = proc.time()-tCPU#
print(res$par)
rm(list=ls())#
#
require(CompRandFld)#
require(MCMCpack)#
require(spatstat)#
library(STBEU)#
################################################
# setting 1  (many locations in space a few in time)#
################################################
#
####location sites #########################################
lambda=4#
#xx=seq(-lambda,lambda);#
#coords=as.matrix(expand.grid(xx,xx))   ###regular#
#nrow(coords)#
#
set.seed(67)                                                                      ### not regular#
pp<-runifpoint(5, win=owin(c(-lambda,lambda),c(-lambda,lambda)))       ### not regular#
coords<-cbind(pp$x,pp$y)#
# plot(coords)                                                        ### not regular#
nrow(coords)#
####temporal instants #########################################
times=seq(1,16,1)#
model=1  #   1=double exponential       2 =gneiting#
#
type_dist=1                ### type of distance     1=euclidean 2=chordal  3=geodesic #
# maxdist=round(length(seq(-lambda,lambda))*.25,0)#
# maxtime=round(300*.15,0)#
maxdist=1#
maxtime=1#round(NT/4,0)#
#
###################################################################
#
if (model == 1) {#
  # exponential model#
  cov.model <-"exp_exp"#
  cc=1#
  ######
  mean=0#
  nugget=0#
  scale_s<-.4#
  scale_t<-1.2/3#
  sill=1#
  param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill)  #
  fixed=list(nugget=0)#
  fix=c(nugget = nugget)#
}#
if (model == 2) {#
  # gneiting model#
  cov.model <-"gneiting"#
  cc=2#
  ######
  mean=0#
  nugget=0#
  scale_s<-1#
  scale_t<-1.2/20#
  sill=1#
  power_s=1;power_t=1;sep=0.5#
  param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill,#
             power_s=power_s,power_t=power_t,sep=sep)  #
  fixed=list(nugget=0,power_s=power_s,power_t=power_t,sep=sep)   #
  fix=c(nugget=nugget, power_s=power_s, power_t=power_t,sep=sep) #
}#
###################################################################
set.seed(67)#
###################################################################
# Simulation of the  Gaussian random field:#
data <- RFsim(coordx=coords,coordt=times,corrmodel=cov.model, param=param)$data#
# data <- matrix(rnorm(nrow(coords)*length(times)),ncol=nrow(coords),nrow=length(times))#
###################################################################
mm=mean(c(data))#
vv=var(c(data))#
coordx=coords[,1]#
coordy=coords[,2]#
LX=abs(range(coordx)[1]-range(coordx)[2])#
LY=abs(range(coordy)[1]-range(coordy)[2])#
#################################################
#   parameters for the subsampling #####
################################################
lato_fin=3  #changing window size#
lx=lato_fin          #lunghezza lato x quadrato subfinestra#
ly=lato_fin          #lunghezza lato y quadrato subfinestra#
winc=c(lx/sqrt(LX),ly/sqrt(LY))#
winstp= .5###   1/lato_fin complete overlapping in space  1 "no" overlapping in space#
################################################
winc_t=2  ###  length of temporal window#
winstp_t=.5 ###   0.5 half overlapping  1 "no" overlapping#
################################################
theta=c(mean = mm,sill=vv,scale_s=scale_s,scale_t = scale_t)                #starting value  #
weighted=0                                          #weigthed version  1=yes 0=no#
### eucliden likelihood ################ #
type_subs=2   ### type of subsampling  1=in space    2= in time  3 =spacetime#
# ### Eucliden likelihood################ #
tCPU = proc.time()#
res=STBEUFit(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc_s=0,winstp_s=0,winc_t,winstp_t,type_subs,weighted)#
tCPU = proc.time()-tCPU#
print(res$par)
length(times)
rm(list=ls())#
#
require(CompRandFld)#
require(MCMCpack)#
require(spatstat)#
library(STBEU)#
################################################
# setting 1  (many locations in space a few in time)#
################################################
#
####location sites #########################################
lambda=6#
#xx=seq(-lambda,lambda);#
#coords=as.matrix(expand.grid(xx,xx))   ###regular#
#nrow(coords)#
#
set.seed(67)                                                                      ### not regular#
pp<-runifpoint(5, win=owin(c(-lambda,lambda),c(-lambda,lambda)))       ### not regular#
coords<-cbind(pp$x,pp$y)#
# plot(coords)                                                        ### not regular#
nrow(coords)#
####temporal instants #########################################
times=seq(1,16,1)#
model=1  #   1=double exponential       2 =gneiting#
#
type_dist=1                ### type of distance     1=euclidean 2=chordal  3=geodesic #
# maxdist=round(length(seq(-lambda,lambda))*.25,0)#
# maxtime=round(300*.15,0)#
maxdist=1#
maxtime=1#round(NT/4,0)#
#
###################################################################
#
if (model == 1) {#
  # exponential model#
  cov.model <-"exp_exp"#
  cc=1#
  ######
  mean=0#
  nugget=0#
  scale_s<-.4#
  scale_t<-1.2/3#
  sill=1#
  param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill)  #
  fixed=list(nugget=0)#
  fix=c(nugget = nugget)#
}#
if (model == 2) {#
  # gneiting model#
  cov.model <-"gneiting"#
  cc=2#
  ######
  mean=0#
  nugget=0#
  scale_s<-1#
  scale_t<-1.2/20#
  sill=1#
  power_s=1;power_t=1;sep=0.5#
  param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill,#
             power_s=power_s,power_t=power_t,sep=sep)  #
  fixed=list(nugget=0,power_s=power_s,power_t=power_t,sep=sep)   #
  fix=c(nugget=nugget, power_s=power_s, power_t=power_t,sep=sep) #
}#
###################################################################
set.seed(67)#
###################################################################
# Simulation of the  Gaussian random field:#
data <- RFsim(coordx=coords,coordt=times,corrmodel=cov.model, param=param)$data#
# data <- matrix(rnorm(nrow(coords)*length(times)),ncol=nrow(coords),nrow=length(times))#
###################################################################
mm=mean(c(data))#
vv=var(c(data))#
coordx=coords[,1]#
coordy=coords[,2]#
LX=abs(range(coordx)[1]-range(coordx)[2])#
LY=abs(range(coordy)[1]-range(coordy)[2])#
#################################################
#   parameters for the subsampling #####
################################################
lato_fin=2  #changing window size#
lx=lato_fin          #lunghezza lato x quadrato subfinestra#
ly=lato_fin          #lunghezza lato y quadrato subfinestra#
winc=c(lx/sqrt(LX),ly/sqrt(LY))#
winstp= .5###   1/lato_fin complete overlapping in space  1 "no" overlapping in space#
################################################
winc_t=2  ###  length of temporal window#
winstp_t=.5 ###   0.5 half overlapping  1 "no" overlapping#
################################################
theta=c(mean = mm,sill=vv,scale_s=scale_s,scale_t = scale_t)                #starting value  #
weighted=0                                          #weigthed version  1=yes 0=no#
### eucliden likelihood ################ #
type_subs=1   ### type of subsampling  1=in space    2= in time  3 =spacetime#
# ### Eucliden likelihood################ #
tCPU = proc.time()#
res=STBEUFit(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc_s=winc,winstp_s=winstp,winc_t=0,winstp_t=0,type_subs,weighted)#
tCPU = proc.time()-tCPU#
print(res$par)
theta
rm(list=ls())#
#
require(CompRandFld)#
require(MCMCpack)#
require(spatstat)#
library(STBEU)#
################################################
# setting 1  (many locations in space a few in time)#
################################################
#
####location sites #########################################
lambda=6#
#xx=seq(-lambda,lambda);#
#coords=as.matrix(expand.grid(xx,xx))   ###regular#
#nrow(coords)#
#
set.seed(67)                                                                      ### not regular#
pp<-runifpoint(100, win=owin(c(-lambda,lambda),c(-lambda,lambda)))       ### not regular#
coords<-cbind(pp$x,pp$y)#
# plot(coords)                                                        ### not regular#
nrow(coords)#
####temporal instants #########################################
times=seq(1,2,1)#
model=1  #   1=double exponential       2 =gneiting#
#
type_dist=1                ### type of distance     1=euclidean 2=chordal  3=geodesic #
# maxdist=round(length(seq(-lambda,lambda))*.25,0)#
# maxtime=round(300*.15,0)#
maxdist=1#
maxtime=1#round(NT/4,0)#
#
###################################################################
#
if (model == 1) {#
  # exponential model#
  cov.model <-"exp_exp"#
  cc=1#
  ######
  mean=0#
  nugget=0#
  scale_s<-.4#
  scale_t<-1.2/3#
  sill=1#
  param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill)  #
  fixed=list(nugget=0)#
  fix=c(nugget = nugget)#
}#
if (model == 2) {#
  # gneiting model#
  cov.model <-"gneiting"#
  cc=2#
  ######
  mean=0#
  nugget=0#
  scale_s<-1#
  scale_t<-1.2/20#
  sill=1#
  power_s=1;power_t=1;sep=0.5#
  param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill,#
             power_s=power_s,power_t=power_t,sep=sep)  #
  fixed=list(nugget=0,power_s=power_s,power_t=power_t,sep=sep)   #
  fix=c(nugget=nugget, power_s=power_s, power_t=power_t,sep=sep) #
}#
###################################################################
set.seed(67)#
###################################################################
# Simulation of the  Gaussian random field:#
data <- RFsim(coordx=coords,coordt=times,corrmodel=cov.model, param=param)$data#
# data <- matrix(rnorm(nrow(coords)*length(times)),ncol=nrow(coords),nrow=length(times))#
###################################################################
mm=mean(c(data))#
vv=var(c(data))#
coordx=coords[,1]#
coordy=coords[,2]#
LX=abs(range(coordx)[1]-range(coordx)[2])#
LY=abs(range(coordy)[1]-range(coordy)[2])#
#################################################
#   parameters for the subsampling #####
################################################
lato_fin=2  #changing window size#
lx=lato_fin          #lunghezza lato x quadrato subfinestra#
ly=lato_fin          #lunghezza lato y quadrato subfinestra#
winc=c(lx/sqrt(LX),ly/sqrt(LY))#
winstp= .5###   1/lato_fin complete overlapping in space  1 "no" overlapping in space#
################################################
winc_t=2  ###  length of temporal window#
winstp_t=.5 ###   0.5 half overlapping  1 "no" overlapping#
################################################
theta=c(mean = mm,sill=vv,scale_s=scale_s,scale_t = scale_t)                #starting value  #
weighted=0                                          #weigthed version  1=yes 0=no#
### eucliden likelihood ################ #
type_subs=1   ### type of subsampling  1=in space    2= in time  3 =spacetime#
# ### Eucliden likelihood################ #
tCPU = proc.time()#
res=STBEUFit(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc_s=winc,winstp_s=winstp,winc_t=0,winstp_t=0,type_subs,weighted)#
tCPU = proc.time()-tCPU#
print(res$par)
theta
rm(list=ls())#
#
require(CompRandFld)#
require(MCMCpack)#
require(spatstat)#
library(STBEU)#
################################################
# setting 1  (many locations in space a few in time)#
################################################
#
####location sites #########################################
lambda=6#
#xx=seq(-lambda,lambda);#
#coords=as.matrix(expand.grid(xx,xx))   ###regular#
#nrow(coords)#
#
set.seed(67)                                                                      ### not regular#
pp<-runifpoint(100, win=owin(c(0,lambda),c(0,lambda)))       ### not regular#
coords<-cbind(pp$x,pp$y)#
# plot(coords)                                                        ### not regular#
nrow(coords)#
####temporal instants #########################################
times=seq(1,2,1)#
model=1  #   1=double exponential       2 =gneiting#
#
type_dist=1                ### type of distance     1=euclidean 2=chordal  3=geodesic #
# maxdist=round(length(seq(-lambda,lambda))*.25,0)#
# maxtime=round(300*.15,0)#
maxdist=1#
maxtime=1#round(NT/4,0)#
#
###################################################################
#
if (model == 1) {#
  # exponential model#
  cov.model <-"exp_exp"#
  cc=1#
  ######
  mean=0#
  nugget=0#
  scale_s<-.4#
  scale_t<-1.2/3#
  sill=1#
  param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill)  #
  fixed=list(nugget=0)#
  fix=c(nugget = nugget)#
}#
if (model == 2) {#
  # gneiting model#
  cov.model <-"gneiting"#
  cc=2#
  ######
  mean=0#
  nugget=0#
  scale_s<-1#
  scale_t<-1.2/20#
  sill=1#
  power_s=1;power_t=1;sep=0.5#
  param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill,#
             power_s=power_s,power_t=power_t,sep=sep)  #
  fixed=list(nugget=0,power_s=power_s,power_t=power_t,sep=sep)   #
  fix=c(nugget=nugget, power_s=power_s, power_t=power_t,sep=sep) #
}#
###################################################################
set.seed(67)#
###################################################################
# Simulation of the  Gaussian random field:#
data <- RFsim(coordx=coords,coordt=times,corrmodel=cov.model, param=param)$data#
# data <- matrix(rnorm(nrow(coords)*length(times)),ncol=nrow(coords),nrow=length(times))#
###################################################################
mm=mean(c(data))#
vv=var(c(data))#
coordx=coords[,1]#
coordy=coords[,2]#
LX=abs(range(coordx)[1]-range(coordx)[2])#
LY=abs(range(coordy)[1]-range(coordy)[2])#
#################################################
#   parameters for the subsampling #####
################################################
lato_fin=2  #changing window size#
lx=lato_fin          #lunghezza lato x quadrato subfinestra#
ly=lato_fin          #lunghezza lato y quadrato subfinestra#
winc=c(lx/sqrt(LX),ly/sqrt(LY))#
winstp= 1###   1/lato_fin complete overlapping in space  1 "no" overlapping in space#
################################################
winc_t=2  ###  length of temporal window#
winstp_t=.5 ###   0.5 half overlapping  1 "no" overlapping#
################################################
theta=c(mean = mm,sill=vv,scale_s=scale_s,scale_t = scale_t)                #starting value  #
weighted=0                                          #weigthed version  1=yes 0=no#
### eucliden likelihood ################ #
type_subs=1   ### type of subsampling  1=in space    2= in time  3 =spacetime#
# ### Eucliden likelihood################ #
tCPU = proc.time()#
res=STBEUFit(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc_s=winc,winstp_s=winstp,winc_t=0,winstp_t=0,type_subs,weighted)#
tCPU = proc.time()-tCPU#
print(res$par)
rm(list=ls())#
#
require(CompRandFld)#
require(MCMCpack)#
require(spatstat)#
library(STBEU)#
################################################
# setting 1  (many locations in space a few in time)#
################################################
#
####location sites #########################################
lambda=6#
xx=seq(0,lambda);#
coords=as.matrix(expand.grid(xx,xx))   ###regular#
#nrow(coords)#
#
# set.seed(67)                                                                      ### not regular#
# pp<-runifpoint(100, win=owin(c(0,lambda),c(0,lambda)))       ### not regular#
# coords<-cbind(pp$x,pp$y)#
# plot(coords)                                                        ### not regular#
nrow(coords)#
####temporal instants #########################################
times=seq(1,19,1)#
model=1  #   1=double exponential       2 =gneiting#
#
type_dist=1                ### type of distance     1=euclidean 2=chordal  3=geodesic #
# maxdist=round(length(seq(-lambda,lambda))*.25,0)#
# maxtime=round(300*.15,0)#
maxdist=1#
maxtime=1#round(NT/4,0)#
#
###################################################################
#
if (model == 1) {#
  # exponential model#
  cov.model <-"exp_exp"#
  cc=1#
  ######
  mean=0#
  nugget=0#
  scale_s<-.4#
  scale_t<-1.2/3#
  sill=1#
  param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill)  #
  fixed=list(nugget=0)#
  fix=c(nugget = nugget)#
}#
if (model == 2) {#
  # gneiting model#
  cov.model <-"gneiting"#
  cc=2#
  ######
  mean=0#
  nugget=0#
  scale_s<-1#
  scale_t<-1.2/20#
  sill=1#
  power_s=1;power_t=1;sep=0.5#
  param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill,#
             power_s=power_s,power_t=power_t,sep=sep)  #
  fixed=list(nugget=0,power_s=power_s,power_t=power_t,sep=sep)   #
  fix=c(nugget=nugget, power_s=power_s, power_t=power_t,sep=sep) #
}#
###################################################################
set.seed(67)#
###################################################################
# Simulation of the  Gaussian random field:#
data <- RFsim(coordx=coords,coordt=times,corrmodel=cov.model, param=param)$data#
# data <- matrix(rnorm(nrow(coords)*length(times)),ncol=nrow(coords),nrow=length(times))#
###################################################################
mm=mean(c(data))#
vv=var(c(data))#
coordx=coords[,1]#
coordy=coords[,2]#
LX=abs(range(coordx)[1]-range(coordx)[2])#
LY=abs(range(coordy)[1]-range(coordy)[2])#
#################################################
#   parameters for the subsampling #####
################################################
lato_fin=2  #changing window size#
lx=lato_fin          #lunghezza lato x quadrato subfinestra#
ly=lato_fin          #lunghezza lato y quadrato subfinestra#
winc=c(lx/sqrt(LX),ly/sqrt(LY))#
winstp= .5###   1/lato_fin complete overlapping in space  1 "no" overlapping in space#
################################################
winc_t=2  ###  length of temporal window#
winstp_t=.5 ###   0.5 half overlapping  1 "no" overlapping#
################################################
theta=c(mean = mm,sill=vv,scale_s=scale_s,scale_t = scale_t)                #starting value  #
weighted=0                                          #weigthed version  1=yes 0=no#
### eucliden likelihood ################ #
type_subs=3   ### type of subsampling  1=in space    2= in time  3 =spacetime#
# ### Eucliden likelihood################ #
tCPU = proc.time()#
res=STBEUFit(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc_s=winc,winstp_s=winstp,winc_t=winc_t,winstp_t=winstp_t,type_subs,weighted)#
tCPU = proc.time()-tCPU#
print(res$par)
winstp_t=1 ###   0.5 half overlapping  1 "no" overlapping#
################################################
theta=c(mean = mm,sill=vv,scale_s=scale_s,scale_t = scale_t)                #starting value  #
weighted=0                                          #weigthed version  1=yes 0=no#
### eucliden likelihood ################ #
type_subs=3   ### type of subsampling  1=in space    2= in time  3 =spacetime#
# ### Eucliden likelihood################ #
tCPU = proc.time()#
res=STBEUFit(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc_s=winc,winstp_s=winstp,winc_t=winc_t,winstp_t=winstp_t,type_subs,weighted)#
tCPU = proc.time()-tCPU#
print(res$par)
############################################
rm(list=ls())#
#
#*** Info:#
'   #
PRACTICAL RANGE = 0.4#
            12 scenarios:#
b: 2,4 for window size in space.#
Step window: 0.5 for space && no overlap (two in total)#
#
maxdist=.25*lato_fin#
'#
#*** End Info:#
#
########################R package########################
require(CompRandFld)#
require(MCMCpack)#
require(STBEU)#
dirsol = "~/Documents/Software/STBEU/Simulations/StartDoubleFix" # Directory where results will be #
################################################
# setting 1  (many locations in space a few in time)#
################################################
#
####location sites #########################################
lambda=8#
xx=seq(-lambda,lambda,length.out = 16);#
coords=as.matrix(expand.grid(xx,xx))   ###regular#
plot(coords)#
#
####temporal instants #########################################
nt = 5 # Time points 20#
times=seq(1,nt,1)#
nrow(coords)#
nrow(coords)*nt#
# bn = 2,4 Same Space#
################################################
###################################################################
model=1  #   1=double exponential       2 =gneiting#
#
if (model == 1) #
{#
     # exponential model#
     cov.model <-"exp_exp"#
     cc=1#
     ######
     mean=0#
     nugget=0#
     scale_s<-1.2/3#
     scale_t<-1.2/3#
     sill=1#
     param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill)#
     fixed=list(nugget=nugget)#
     fix=c(nugget=nugget)#
}#
#
#################################################
#   parameters for the subsampling #####
################################################
coordx=coords[,1]#
coordy=coords[,2]#
LX=abs(range(coordx)[1]-range(coordx)[2])#
LY=abs(range(coordy)[1]-range(coordy)[2])#
type_subs=1    ### type of subsampling  1=in space    2= in time 3= spacetime#
#
type_dist=1                ### type of distance     1=euclidean 2=chordal  3=geodesic #
maxdistPL=max(dist(coords))*.25                  ## compact support in weights function for pairwise liklihood#
maxtime=ceiling(max(dist(times))*.25)#
#
i=1#
nsim<-3   ## number of simulation#
results=matrix(NA,ncol=5,nrow=5*nsim)#
set.seed(276)#
while(i<=nsim)#
{#
  #####################################################################################################      #
  # Simulation of the spatial Gaussian random field:#
  data <- RFsim(coordx=coords,coordt=times,corrmodel=cov.model, param=param)$data#
  mm=mean(c(data))#
  vv=var(c(data))#
  start=list(mean=mm,scale_s=scale_s,scale_t=scale_t,sill=vv)#
  ##################################################################################################### #
  ###### Composite likelihood based on pairs estimation ###############################################     #
  theta=c(mean = mm,sill=vv,scale_s=scale_s,scale_t=scale_t)                #starting value  #
  # Maximum composite-likelihood fitting of the random field:#
  # **************************scenario 0/12A main NOT weighted estimation***#
  fitA <- FitComposite(data=data,coordx=coords,coordt=times,#
                       corrmodel=cov.model,maxtime=maxtime,maxdist=maxdistPL,#
                       likelihood="Marginal",type="Pairwise",#
                       start=start,fixed=fixed,weighted=T)#
  print(fitA$param)#
  # **************************scenario 1/12 b = 2, no overlaping  ***#
  #################################################
  #   parameters for the subsampling #####
  ################################################
  lato_fin=2  #changing window size 2,4#
  lx=lato_fin          #lunghezza lato x quadrato subfinestra#
  ly=lato_fin          #lunghezza lato y quadrato subfinestra#
  winc=c(lx/sqrt(LX),ly/sqrt(LY))#
  winstp= 1  ###   1/lato_fin complete overlapping   1 "no" overlapping#
  ################################################
  weighted=0#
  maxdist=2#
  ### eucliden likelihood ################ #
  res1=STBEUFit(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,0,0,type_subs,weighted)#
  eu_par1=c(res1$par[1],res1$par[3],res1$par[4],res1$par[2])#
  names(eu_par1)=names(fitA$param)#
  print(eu_par1)#
  # **************************scenario 2/12 b = 4, no overlaping ***#
  #################################################
  #   parameters for the subsampling #####
  ################################################
  lato_fin=4  #changing window size 2,4#
  lx=lato_fin          #lunghezza lato x quadrato subfinestra#
  ly=lato_fin          #lunghezza lato y quadrato subfinestra#
  winc=c(lx/sqrt(LX),ly/sqrt(LY))#
  winstp= 1  ###   1/lato_fin complete overlapping   1 "no" overlapping#
  ################################################
  maxdist=.25*lato_fin#
  ### eucliden likelihood ################ #
  res2=STBEUFit(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,0,0,type_subs,weighted)#
  eu_par2=c(res2$par[1],res2$par[3],res2$par[4],res2$par[2])#
  names(eu_par2)=names(fitA$param)#
  print(eu_par2)#
  # **************************scenario 3/12 b = 2, overlaping (.5) ***#
  #################################################
  #   parameters for the subsampling #####
  ################################################
  lato_fin=2  #changing window size 2,4#
  lx=lato_fin          #lunghezza lato x quadrato subfinestra#
  ly=lato_fin          #lunghezza lato y quadrato subfinestra#
  winc=c(lx/sqrt(LX),ly/sqrt(LY))#
  winstp= .5  ###   1/lato_fin complete overlapping   1 "no" overlapping#
  ################################################
  maxdist=.25*lato_fin#
  ### eucliden likelihood ################ #
  res4=STBEUFit(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,0,0,type_subs,weighted)#
  eu_par4=c(res4$par[1],res4$par[3],res4$par[4],res4$par[2])#
  names(eu_par4)=names(fitA$param)#
  print(eu_par4)#
  # **************************scenario 4/12 b = 4, overlaping (.5), weighted. ***#
  #################################################
  #   parameters for the subsampling #####
  ################################################
  lato_fin=4  #changing window size 2,4,8#
  lx=lato_fin          #lunghezza lato x quadrato subfinestra#
  ly=lato_fin          #lunghezza lato y quadrato subfinestra#
  winc=c(lx/sqrt(LX),ly/sqrt(LY))#
  winstp= .5  ###   1/lato_fin complete overlapping   1 "no" overlapping#
  ################################################
  maxdist=.25*lato_fin#
#
  ### eucliden likelihood ################ #
  res5=STBEUFit(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,0,0,type_subs,weighted)#
  eu_par5=c(res5$par[1],res5$par[3],res5$par[4],res5$par[2])#
  names(eu_par5)=names(fitA$param)#
  print(eu_par5)#
  results[i:(i+4),]=rbind(fitA$param,eu_par1,eu_par2,eu_par3,eu_par4)#
  print(i)#
  i=i+1#
  setwd(dirsol)#
  write.csv(TotRes, "regular_results_spaceDE12.csv")#
}
############################################
rm(list=ls())#
#
#*** Info:#
'   #
PRACTICAL RANGE = 0.4#
12 scenarios:#
b: 2,4 for window size in space.#
Step window: 0.5 for space && no overlap (two in total)#
#
maxdist=.25*lato_fin#
'#
#*** End Info:#
#
########################R package########################
require(CompRandFld)#
require(MCMCpack)#
require(STBEU)#
dirsol = "~/Documents/Software/STBEU/Simulations/StartDoubleFix" # Directory where results will be #
################################################
# setting 1  (many locations in space a few in time)#
################################################
#
####location sites #########################################
lambda=8#
xx=seq(-lambda,lambda);#
coords=as.matrix(expand.grid(xx,xx))   ###regular#
# plot(coords)#
#
####temporal instants #########################################
nt = 18 # Time points 18#
times=seq(1,nt,1)#
nrow(coords)#
nrow(coords)*nt#
# bn = 2,4 Same Space#
################################################
###################################################################
model=1  #   1=double exponential       2 =gneiting#
#
if (model == 1) #
{#
  # exponential model#
  cov.model <-"exp_exp"#
  cc=1#
  ######
  mean=0#
  nugget=0#
  scale_s<-1.2/3#
  scale_t<-1.2/3#
  sill=1#
  param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill)#
  fixed=list(nugget=nugget)#
  fix=c(nugget=nugget)#
}#
#
#################################################
#   parameters for the subsampling #####
################################################
coordx=coords[,1]#
coordy=coords[,2]#
LX=abs(range(coordx)[1]-range(coordx)[2])#
LY=abs(range(coordy)[1]-range(coordy)[2])#
type_subs=1    ### type of subsampling  1=in space    2= in time 3= spacetime#
#
type_dist=1                ### type of distance     1=euclidean 2=chordal  3=geodesic #
maxdistPL=max(dist(coords))*.25                  ## compact support in weights function for pairwise liklihood#
maxtime=ceiling(max(dist(times))*.25)#
#
i=1#
nsim<-1   ## number of simulation#
results=matrix(NA,ncol=5,nrow=5*nsim);label = 0:4#
set.seed(276)#
while(i<=nsim)#
{#
  #####################################################################################################      #
  # Simulation of the spatial Gaussian random field:#
  data <- RFsim(coordx=coords,coordt=times,corrmodel=cov.model, param=param)$data#
  mm=mean(c(data))#
  vv=var(c(data))#
  start=list(mean=mm,scale_s=scale_s,scale_t=scale_t,sill=vv)#
  ##################################################################################################### #
  ###### Composite likelihood based on pairs estimation ###############################################     #
  theta=c(mean = mm,sill=vv,scale_s=scale_s,scale_t=scale_t)                #starting value  #
  # Maximum composite-likelihood fitting of the random field:#
  # **************************scenario 0/4A main NOT weighted estimation***#
  fitA <- FitComposite(data=data,coordx=coords,coordt=times,#
                       corrmodel=cov.model,maxtime=maxtime,maxdist=maxdistPL,#
                       likelihood="Marginal",type="Pairwise",#
                       start=start,fixed=fixed,weighted=F)#
  eu_par0=c(fitA$param[1],fitA$param[2],fitA$param[3],fitA$param[4])#
  print(fitA$param)#
  names(eu_par0)=names(fitA$param)#
  # **************************scenario 1/4 b = 2, no overlaping  ***#
  #################################################
  #   parameters for the subsampling #####
  ################################################
  lato_fin=2  #changing window size 2,4#
  lx=lato_fin          #lunghezza lato x quadrato subfinestra#
  ly=lato_fin          #lunghezza lato y quadrato subfinestra#
  winc=c(lx/sqrt(LX),ly/sqrt(LY))#
  winstp= 1  ###   1/lato_fin complete overlapping   1 "no" overlapping#
  ################################################
  weighted=0#
  maxdist=.25*lato_fin#
  # maxdist=1.5#
  ### eucliden likelihood ################ #
  res1=SubSampTimeEval(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc_s=winc,winstp_s = winstp,0,0,type_subs,weighted)#
  eu_par1=c(res1$par[1],res1$par[3],res1$par[4],res1$par[2])#
  names(eu_par1)=names(fitA$param)#
  # print(eu_par1)#
  # **************************scenario 2/4 b = 4, no overlaping ***#
  #################################################
  #   parameters for the subsampling #####
  ################################################
  lato_fin=4  #changing window size 2,4#
  lx=lato_fin          #lunghezza lato x quadrato subfinestra#
  ly=lato_fin          #lunghezza lato y quadrato subfinestra#
  winc=c(lx/sqrt(LX),ly/sqrt(LY))#
  winstp= 1  ###   1/lato_fin complete overlapping   1 "no" overlapping#
  ################################################
  maxdist=.25*lato_fin#
  ### eucliden likelihood ################ #
  res2=SubSampTimeEval(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,0,0,type_subs,weighted)#
  eu_par2=c(res2$par[1],res2$par[3],res2$par[4],res2$par[2])#
  names(eu_par2)=names(fitA$param)#
  # print(eu_par2)#
  # **************************scenario 3/4 b = 2, overlaping (.5) ***#
  #################################################
  #   parameters for the subsampling #####
  ################################################
  lato_fin=2  #changing window size 2,4#
  lx=lato_fin          #lunghezza lato x quadrato subfinestra#
  ly=lato_fin          #lunghezza lato y quadrato subfinestra#
  winc=c(lx/sqrt(LX),ly/sqrt(LY))#
  winstp= .5  ###   1/lato_fin complete overlapping   1 "no" overlapping#
  ################################################
  maxdist=.25*lato_fin#
  ### eucliden likelihood ################ #
  res3=SubSampTimeEval(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,0,0,type_subs,weighted)#
  eu_par3=c(res3$par[1],res3$par[3],res3$par[4],res3$par[2])#
  names(eu_par3)=names(fitA$param)#
  # print(eu_par3)#
  # **************************scenario 4/4 b = 4, overlaping (.5), weighted. ***#
  #################################################
  #   parameters for the subsampling #####
  ################################################
  lato_fin=4  #changing window size 2,4,8#
  lx=lato_fin          #lunghezza lato x quadrato subfinestra#
  ly=lato_fin          #lunghezza lato y quadrato subfinestra#
  winc=c(lx/sqrt(LX),ly/sqrt(LY))#
  winstp= .5  ###   1/lato_fin complete overlapping   1 "no" overlapping#
  ################################################
  maxdist=.25*lato_fin#
  ### eucliden likelihood ################ #
  res4=SubSampTimeEval(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,0,0,type_subs,weighted)#
  eu_par4=c(res4$par[1],res4$par[3],res4$par[4],res4$par[2])#
  names(eu_par4)=names(fitA$param)#
  # print(eu_par4)#
  # results[(5*(i)-4):((5*(i)-4)+4),]=cbind(label,rbind(eu_par0=eu_par0,eu_par1,eu_par2,eu_par3,eu_par4))#
  # colnames(results)=c("setting",names(fitA$param))#
  print(i)#
  i=i+1#
  # setwd(dirsol)#
  # write.csv(results, "regular_results_spaceDE12.csv")#
}
############################################
rm(list=ls())#
#
#*** Info:#
'   #
PRACTICAL RANGE = 1.2/3#
12 scenarios:#
b: 4,8 for window size in space.#
Step window: 0.5 for space && no overlap (two in total)#
#
maxtime=ceiling(.25*winc_t)#
'#
#*** End Info:#
#
########################R package########################
require(CompRandFld)#
require(MCMCpack)#
require(STBEU)#
dirsol = "~/Documents/Software/STBEU/Simulations/StartDoubleFix" # Directory where results will be #
#
################################################
# setting 2  (few locations in space many in time)#
################################################
#
####location sites #########################################
lambda=1 #2#
xx=seq(-lambda,lambda);#
coords=as.matrix(expand.grid(xx,xx))   ###regular#
# plot(coords)#
####temporal instants #########################################
nt = 210 # Time points 210#
times=seq(1,nt,1)#
nrow(coords)#
nrow(coords)*nt # bnt = 2,4,6. For Time#
################################################
#
###################################################################
model=1  #   1=double exponential       2 =gneiting#
#
if (model == 1) #
{#
  # exponential model#
  cov.model <-"exp_exp"#
  cc=1#
  ######
  mean=0#
  nugget=0#
  scale_s<-1.2/3#
  scale_t<-1.2/3#
  sill=1#
  param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill)#
  fixed=list(nugget=nugget)#
  fix=c(nugget=nugget)#
}#
#
#################################################
#   parameters for the subsampling #####
################################################
coordx=coords[,1]#
coordy=coords[,2]#
type_subs=2    ### type of subsampling  1=in space    2= in time 3= spacetime#
#
type_dist=1                ### type of distance     1=euclidean 2=chordal  3=geodesic #
maxdist=max(dist(coords))*.25                  ## compact support in weights function for pairwise liklihood#
maxtimePL=ceiling(max(dist(times))*.25)#
#
i=1#
nsim<-5   ## number of simulation#
results=matrix(NA,ncol=5,nrow=5*nsim);label = 0:4#
set.seed(276)#
while(i<=nsim)#
{#
  #####################################################################################################      #
  # Simulation of the spatial Gaussian random field:#
  data <- RFsim(coordx=coords,coordt=times,corrmodel=cov.model, param=param)$data#
  mm=mean(c(data))#
  vv=var(c(data))#
  start=list(mean=mm,scale_s=scale_s,scale_t=scale_t,sill=vv)#
  ##################################################################################################### #
  ###### Composite likelihood based on pairs estimation ###############################################     #
  theta=c(mean = mm,sill=vv,scale_s=scale_s,scale_t=scale_t)                #starting value  #
  # Maximum composite-likelihood fitting of the random field:#
  # **************************scenario 0/4A main NOT weighted estimation***#
  fitA <- FitComposite(data=data,coordx=coords,coordt=times,#
                       corrmodel=cov.model,maxtime=maxtimePL,maxdist=maxdist,#
                       likelihood="Marginal",type="Pairwise",#
                       start=start,fixed=fixed,weighted=F)#
  eu_par0=c(fitA$param[1],fitA$param[2],fitA$param[3],fitA$param[4])#
  print(fitA$param)#
  names(eu_par0)=names(fitA$param)#
  # **************************scenario 1/4 b = 4, no overlaping  ***#
  #################################################
  #   parameters for the subsampling #####
  ################################################
  winc_t=4#
  winstp_t= 1  ###   1/lato_fin complete overlapping   1 "no" overlapping#
  ################################################
  weighted=0#
  maxtime=ceiling(.25*winc_t)#
  # maxdist=1.5#
  ### eucliden likelihood ################ #
  res1=SubSampTimeEval(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc_s=0,winstp_s = 0,winc_t = winc_t,winstp_t = winstp_t,type_subs,weighted)#
  eu_par1=c(res1$par[1],res1$par[3],res1$par[4],res1$par[2])#
  names(eu_par1)=names(fitA$param)#
  # print(eu_par1)#
  # **************************scenario 2/4 b = 8, no overlaping ***#
  #################################################
  #   parameters for the subsampling #####
  ################################################
  winc_t=8#
  winstp= 1  ###   1/lato_fin complete overlapping   1 "no" overlapping#
  ################################################
  maxtime=ceiling(.25*winc_t)#
  ### eucliden likelihood ################ #
  res2=SubSampTimeEval(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc_s=0,winstp_s = 0,winc_t = winc_t,winstp_t = winstp_t,type_subs,weighted)#
  eu_par2=c(res2$par[1],res2$par[3],res2$par[4],res2$par[2])#
  names(eu_par2)=names(fitA$param)#
  # print(eu_par2)#
  # **************************scenario 3/4 b = 4, overlaping (.5) ***#
  #################################################
  #   parameters for the subsampling #####
  ################################################
  winc_t=4#
  winstp= .5  ###   1/lato_fin complete overlapping   1 "no" overlapping#
  ################################################
  maxtime=ceiling(.25*winc_t)#
  ### eucliden likelihood ################ #
  res3=SubSampTimeEval(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc_s=0,winstp_s = 0,winc_t = winc_t,winstp_t = winstp_t,type_subs,weighted)#
  eu_par3=c(res3$par[1],res3$par[3],res3$par[4],res3$par[2])#
  names(eu_par3)=names(fitA$param)#
  # print(eu_par3)#
  # **************************scenario 4/4 b = 8, overlaping (.5), weighted. ***#
  #################################################
  #   parameters for the subsampling #####
  ################################################
  winc_t=8#
  winstp= .5  ###   1/lato_fin complete overlapping   1 "no" overlapping#
  ################################################
  maxtime=ceiling(.25*winc_t)#
  ### eucliden likelihood ################ #
  res4=SubSampTimeEval(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc_s=0,winstp_s = 0,winc_t = winc_t,winstp_t = winstp_t,type_subs,weighted)#
  eu_par4=c(res4$par[1],res4$par[3],res4$par[4],res4$par[2])#
  names(eu_par4)=names(fitA$param)#
  # print(eu_par4)#
  # results[(5*(i)-4):((5*(i)-4)+4),]=cbind(label,rbind(eu_par0=eu_par0,eu_par1,eu_par2,eu_par3,eu_par4))#
  # colnames(results)=c("setting",names(fitA$param))#
  print(i)#
  i=i+1#
  # setwd(dirsol)#
  # write.csv(results, "regular_results_timeDE04.csv")#
}
############################################
rm(list=ls())#
#
#*** Info:#
'   #
PRACTICAL RANGE = 1.2/3#
12 scenarios:#
b: 4,8 for window size in space.#
Step window: 0.5 for space && no overlap (two in total)#
#
maxtime=ceiling(.25*winc_t)#
'#
#*** End Info:#
#
########################R package########################
require(CompRandFld)#
require(MCMCpack)#
require(STBEU)#
dirsol = "~/Documents/Software/STBEU/Simulations/StartDoubleFix" # Directory where results will be #
#
################################################
# setting 2  (few locations in space many in time)#
################################################
#
####location sites #########################################
lambda=1 #2#
xx=seq(-lambda,lambda);#
coords=as.matrix(expand.grid(xx,xx))   ###regular#
# plot(coords)#
####temporal instants #########################################
nt = 210 # Time points 210#
times=seq(1,nt,1)#
nrow(coords)#
nrow(coords)*nt # bnt = 2,4,6. For Time#
################################################
#
###################################################################
model=1  #   1=double exponential       2 =gneiting#
#
if (model == 1) #
{#
  # exponential model#
  cov.model <-"exp_exp"#
  cc=1#
  ######
  mean=0#
  nugget=0#
  scale_s<-1.2/3#
  scale_t<-1.2/3#
  sill=1#
  param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill)#
  fixed=list(nugget=nugget)#
  fix=c(nugget=nugget)#
}#
#
#################################################
#   parameters for the subsampling #####
################################################
coordx=coords[,1]#
coordy=coords[,2]#
type_subs=2    ### type of subsampling  1=in space    2= in time 3= spacetime#
#
type_dist=1                ### type of distance     1=euclidean 2=chordal  3=geodesic #
maxdist=max(dist(coords))*.25                  ## compact support in weights function for pairwise liklihood#
maxtimePL=ceiling(max(dist(times))*.25)#
#
i=1#
nsim<-2   ## number of simulation#
results=matrix(NA,ncol=5,nrow=5*nsim);label = 0:4#
set.seed(276)#
while(i<=nsim)#
{#
  #####################################################################################################      #
  # Simulation of the spatial Gaussian random field:#
  data <- RFsim(coordx=coords,coordt=times,corrmodel=cov.model, param=param)$data#
  mm=mean(c(data))#
  vv=var(c(data))#
  start=list(mean=mm,scale_s=scale_s,scale_t=scale_t,sill=vv)#
  ##################################################################################################### #
  ###### Composite likelihood based on pairs estimation ###############################################     #
  theta=c(mean = mm,sill=vv,scale_s=scale_s,scale_t=scale_t)                #starting value  #
  # Maximum composite-likelihood fitting of the random field:#
  # **************************scenario 0/4A main NOT weighted estimation***#
  fitA <- FitComposite(data=data,coordx=coords,coordt=times,#
                       corrmodel=cov.model,maxtime=maxtimePL,maxdist=maxdist,#
                       likelihood="Marginal",type="Pairwise",#
                       start=start,fixed=fixed,weighted=F)#
  eu_par0=c(fitA$param[1],fitA$param[2],fitA$param[3],fitA$param[4])#
  print(fitA$param)#
  names(eu_par0)=names(fitA$param)#
  # **************************scenario 1/4 b = 4, no overlaping  ***#
  #################################################
  #   parameters for the subsampling #####
  ################################################
  winc_t=4#
  winstp_t= 1  ###   1/lato_fin complete overlapping   1 "no" overlapping#
  ################################################
  weighted=0#
  maxtime=ceiling(.25*winc_t)#
  # maxdist=1.5#
  ### eucliden likelihood ################ #
  res1=SubSampTimeEval(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc_s=0,winstp_s = 0,winc_t = winc_t,winstp_t = winstp_t,type_subs,weighted)#
  eu_par1=c(res1$par[1],res1$par[3],res1$par[4],res1$par[2])#
  names(eu_par1)=names(fitA$param)#
  # print(eu_par1)#
  # **************************scenario 2/4 b = 8, no overlaping ***#
  #################################################
  #   parameters for the subsampling #####
  ################################################
  winc_t=8#
  winstp= 1  ###   1/lato_fin complete overlapping   1 "no" overlapping#
  ################################################
  maxtime=ceiling(.25*winc_t)#
  ### eucliden likelihood ################ #
  res2=SubSampTimeEval(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc_s=0,winstp_s = 0,winc_t = winc_t,winstp_t = winstp_t,type_subs,weighted)#
  eu_par2=c(res2$par[1],res2$par[3],res2$par[4],res2$par[2])#
  names(eu_par2)=names(fitA$param)#
  # print(eu_par2)#
  # **************************scenario 3/4 b = 4, overlaping (.5) ***#
  #################################################
  #   parameters for the subsampling #####
  ################################################
  winc_t=4#
  winstp= .5  ###   1/lato_fin complete overlapping   1 "no" overlapping#
  ################################################
  maxtime=ceiling(.25*winc_t)#
  ### eucliden likelihood ################ #
  res3=SubSampTimeEval(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc_s=0,winstp_s = 0,winc_t = winc_t,winstp_t = winstp_t,type_subs,weighted)#
  eu_par3=c(res3$par[1],res3$par[3],res3$par[4],res3$par[2])#
  names(eu_par3)=names(fitA$param)#
  # print(eu_par3)#
  # **************************scenario 4/4 b = 8, overlaping (.5), weighted. ***#
  #################################################
  #   parameters for the subsampling #####
  ################################################
  winc_t=8#
  winstp= .5  ###   1/lato_fin complete overlapping   1 "no" overlapping#
  ################################################
  maxtime=ceiling(.25*winc_t)#
  ### eucliden likelihood ################ #
  res4=SubSampTimeEval(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc_s=0,winstp_s = 0,winc_t = winc_t,winstp_t = winstp_t,type_subs,weighted)#
  eu_par4=c(res4$par[1],res4$par[3],res4$par[4],res4$par[2])#
  names(eu_par4)=names(fitA$param)#
  # print(eu_par4)#
  # results[(5*(i)-4):((5*(i)-4)+4),]=cbind(label,rbind(eu_par0=eu_par0,eu_par1,eu_par2,eu_par3,eu_par4))#
  # colnames(results)=c("setting",names(fitA$param))#
  print(i)#
  i=i+1#
  # setwd(dirsol)#
  # write.csv(results, "regular_results_timeDE04.csv")#
}
############################################
rm(list=ls())#
#
#*** Info:#
'   #
PRACTICAL RANGE = 0.4#
12 scenarios:#
b1: 3,10 for window size in space and time.#
b2: 4,20 for window size in space and time.#
Step window: 0.5 for space && no overlap (two in total)#
#
maxdist=.25*lato_fin#
maxtime=ceiling(.25*winc_t)#
'#
#*** End Info:#
#
########################R package########################
require(CompRandFld)#
require(MCMCpack)#
require(STBEU)#
dirsol = "~/Documents/Software/STBEU/Simulations/StartDoubleFix" # Directory where results will be #
################################################
# setting 1  (many locations in space a few in time)#
################################################
#
####location sites #########################################
lambda=5#
xx=seq(-lambda,lambda);#
coords=as.matrix(expand.grid(xx,xx))   ###regular#
# plot(coords)#
#
####temporal instants #########################################
nt = 50 # Time points 18#
times=seq(1,nt,1)#
nrow(coords)#
nrow(coords)*nt#
# bn = 2,4 Same Space#
################################################
###################################################################
model=1  #   1=double exponential       2 =gneiting#
#
if (model == 1) #
{#
  # exponential model#
  cov.model <-"exp_exp"#
  cc=1#
  ######
  mean=0#
  nugget=0#
  scale_s<-1.2/3#
  scale_t<-1.2/3#
  sill=1#
  param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill)#
  fixed=list(nugget=nugget)#
  fix=c(nugget=nugget)#
}#
#
#################################################
#   parameters for the subsampling #####
################################################
coordx=coords[,1]#
coordy=coords[,2]#
LX=abs(range(coordx)[1]-range(coordx)[2])#
LY=abs(range(coordy)[1]-range(coordy)[2])#
type_subs=3    ### type of subsampling  1=in space    2= in time 3= spacetime#
#
type_dist=1                ### type of distance     1=euclidean 2=chordal  3=geodesic #
maxdistPL=max(dist(coords))*.25                  ## compact support in weights function for pairwise liklihood#
maxtimePL=ceiling(max(dist(times))*.25)#
#
i=1#
nsim<-1   ## number of simulation#
results=matrix(NA,ncol=5,nrow=5*nsim);label = 0:4#
set.seed(276)#
while(i<=nsim)#
{#
  #####################################################################################################      #
  # Simulation of the spatial Gaussian random field:#
  data <- RFsim(coordx=coords,coordt=times,corrmodel=cov.model, param=param)$data#
  mm=mean(c(data))#
  vv=var(c(data))#
  start=list(mean=mm,scale_s=scale_s,scale_t=scale_t,sill=vv)#
  ##################################################################################################### #
  ###### Composite likelihood based on pairs estimation ###############################################     #
  theta=c(mean = mm,sill=vv,scale_s=scale_s,scale_t=scale_t)                #starting value  #
  # Maximum composite-likelihood fitting of the random field:#
  # **************************scenario 0/4A main NOT weighted estimation***#
  fitA <- FitComposite(data=data,coordx=coords,coordt=times,#
                       corrmodel=cov.model,maxtime=maxtimePL,maxdist=maxdistPL,#
                       likelihood="Marginal",type="Pairwise",#
                       start=start,fixed=fixed,weighted=F)#
  eu_par0=c(fitA$param[1],fitA$param[2],fitA$param[3],fitA$param[4])#
  print(fitA$param)#
  names(eu_par0)=names(fitA$param)#
  # **************************scenario 1/4 bs = 3,bt = 10, no overlaping  ***#
  #################################################
  #   parameters for the subsampling #####
  ################################################
  lato_fin=3  #changing window size 2,4#
  lx=lato_fin          #lunghezza lato x quadrato subfinestra#
  ly=lato_fin          #lunghezza lato y quadrato subfinestra#
  winc=c(lx/sqrt(LX),ly/sqrt(LY))#
  winstp= 1  ###   1/lato_fin complete overlapping   1 "no" overlapping#
  ################################################
  winc_t=10#
  winstp_t= 1  ###   1/lato_fin complete overlapping   1 "no" overlapping#
  ################################################
  weighted=0#
  maxdist=.25*lato_fin#
  maxtime=ceiling(.25*winc_t)#
  ### eucliden likelihood ################ #
  res1=SubSampTimeEval(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc_s=winc,winstp_s = winstp,winc_t = winc_t,winstp_t = winstp_t,type_subs,weighted)#
  eu_par1=c(res1$par[1],res1$par[3],res1$par[4],res1$par[2])#
  names(eu_par1)=names(fitA$param)#
  # print(eu_par1)#
  # **************************scenario 2/4 bs = 4,bt = 20, no overlaping  ***#
  #################################################
  #   parameters for the subsampling #####
  ################################################
  lato_fin=4  #changing window size 2,4#
  lx=lato_fin          #lunghezza lato x quadrato subfinestra#
  ly=lato_fin          #lunghezza lato y quadrato subfinestra#
  winc=c(lx/sqrt(LX),ly/sqrt(LY))#
  winstp= 1  ###   1/lato_fin complete overlapping   1 "no" overlapping#
  ################################################
  winc_t=20#
  winstp_t= 1  ###   1/lato_fin complete overlapping   1 "no" overlapping#
  ################################################
  maxdist=.25*lato_fin#
  maxtime=ceiling(.25*winc_t)#
  ### eucliden likelihood ################ #
  res2=SubSampTimeEval(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,winc_t = winc_t,winstp_t = winstp_t,type_subs,weighted)#
  eu_par2=c(res2$par[1],res2$par[3],res2$par[4],res2$par[2])#
  names(eu_par2)=names(fitA$param)#
  # print(eu_par2)#
  # **************************scenario 3/4 bs = 3,bt=10 overlaping (.5) ***#
  #################################################
  #   parameters for the subsampling #####
  ################################################
  lato_fin=3  #changing window size 2,4#
  lx=lato_fin          #lunghezza lato x quadrato subfinestra#
  ly=lato_fin          #lunghezza lato y quadrato subfinestra#
  winc=c(lx/sqrt(LX),ly/sqrt(LY))#
  winstp= .5  ###   1/lato_fin complete overlapping   1 "no" overlapping#
  ################################################
  winc_t=10#
  winstp_t= 1  ###   1/lato_fin complete overlapping   1 "no" overlapping#
  ################################################
  maxdist=.25*lato_fin#
  maxtime=ceiling(.25*winc_t)#
  ### eucliden likelihood ################ #
  res3=SubSampTimeEval(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,winc_t = winc_t,winstp_t = winstp_t,type_subs,weighted)#
  eu_par3=c(res3$par[1],res3$par[3],res3$par[4],res3$par[2])#
  names(eu_par3)=names(fitA$param)#
  # print(eu_par3)#
  # **************************scenario 4/4 bs = 4,bt=20, overlaping (.5), weighted. ***#
  #################################################
  #   parameters for the subsampling #####
  ################################################
  lato_fin=4  #changing window size 2,4,8#
  lx=lato_fin          #lunghezza lato x quadrato subfinestra#
  ly=lato_fin          #lunghezza lato y quadrato subfinestra#
  winc=c(lx/sqrt(LX),ly/sqrt(LY))#
  winstp= .5  ###   1/lato_fin complete overlapping   1 "no" overlapping#
  ################################################
  winc_t=20#
  winstp_t= 1  ###   1/lato_fin complete overlapping   1 "no" overlapping#
  ################################################
  maxdist=.25*lato_fin#
  maxtime=ceiling(.25*winc_t)#
  ### eucliden likelihood ################ #
  res4=SubSampTimeEval(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,winc_t = winc_t,winstp_t = winstp_t,type_subs,weighted)#
  eu_par4=c(res4$par[1],res4$par[3],res4$par[4],res4$par[2])#
  names(eu_par4)=names(fitA$param)#
  # print(eu_par4)#
  # results[(5*(i)-4):((5*(i)-4)+4),]=cbind(label,rbind(eu_par0=eu_par0,eu_par1,eu_par2,eu_par3,eu_par4))#
  # colnames(results)=c("setting",names(fitA$param))#
  print(i)#
  i=i+1#
  # setwd(dirsol)#
  # write.csv(results, "regular_results_spacetimeDE12.csv")#
}
data
lato_fin=3  #changing window size 2,4#
  lx=lato_fin          #lunghezza lato x quadrato subfinestra#
  ly=lato_fin          #lunghezza lato y quadrato subfinestra#
  winc=c(lx/sqrt(LX),ly/sqrt(LY))#
  winstp= 1  ###   1/lato_fin complete overlapping   1 "no" overlapping#
  ################################################
  winc_t=10#
  winstp_t= 1  ###   1/lato_fin complete overlapping   1 "no" overlapping#
  ################################################
  weighted=0#
  maxdist=.25*lato_fin#
  maxtime=ceiling(.25*winc_t)#
  ### eucliden likelihood ################ #
  res1=SubSampTimeEval(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc_s=winc,winstp_s = winstp,winc_t = winc_t,winstp_t = winstp_t,type_subs,weighted)#
  eu_par1=c(res1$par[1],res1$par[3],res1$par[4],res1$par[2])#
  names(eu_par1)=names(fitA$param)#
  # print(eu_par1)#
  # **************************scenario 2/4 bs = 4,bt = 20, no overlaping  ***#
  #################################################
  #   parameters for the subsampling #####
  ################################################
  lato_fin=4  #changing window size 2,4#
  lx=lato_fin          #lunghezza lato x quadrato subfinestra#
  ly=lato_fin          #lunghezza lato y quadrato subfinestra#
  winc=c(lx/sqrt(LX),ly/sqrt(LY))#
  winstp= 1  ###   1/lato_fin complete overlapping   1 "no" overlapping#
  ################################################
  winc_t=20#
  winstp_t= 1  ###   1/lato_fin complete overlapping   1 "no" overlapping#
  ################################################
  maxdist=.25*lato_fin#
  maxtime=ceiling(.25*winc_t)#
  ### eucliden likelihood ################ #
  res2=SubSampTimeEval(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc_s=winc,winstp_s = winstp,winc_t = winc_t,winstp_t = winstp_t,type_subs,weighted)#
  eu_par2=c(res2$par[1],res2$par[3],res2$par[4],res2$par[2])#
  names(eu_par2)=names(fitA$param)#
  # print(eu_par2)#
  # **************************scenario 3/4 bs = 3,bt=10 overlaping (.5) ***#
  #################################################
  #   parameters for the subsampling #####
  ################################################
  lato_fin=3  #changing window size 2,4#
  lx=lato_fin          #lunghezza lato x quadrato subfinestra#
  ly=lato_fin          #lunghezza lato y quadrato subfinestra#
  winc=c(lx/sqrt(LX),ly/sqrt(LY))#
  winstp= .5  ###   1/lato_fin complete overlapping   1 "no" overlapping#
  ################################################
  winc_t=10#
  winstp_t= 1  ###   1/lato_fin complete overlapping   1 "no" overlapping#
  ################################################
  maxdist=.25*lato_fin#
  maxtime=ceiling(.25*winc_t)#
  ### eucliden likelihood ################ #
  res3=SubSampTimeEval(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc_s=winc,winstp_s = winstp,winc_t = winc_t,winstp_t = winstp_t,type_subs,weighted)#
  eu_par3=c(res3$par[1],res3$par[3],res3$par[4],res3$par[2])#
  names(eu_par3)=names(fitA$param)#
  # print(eu_par3)#
  # **************************scenario 4/4 bs = 4,bt=20, overlaping (.5), weighted. ***#
  #################################################
  #   parameters for the subsampling #####
  ################################################
  lato_fin=4  #changing window size 2,4,8#
  lx=lato_fin          #lunghezza lato x quadrato subfinestra#
  ly=lato_fin          #lunghezza lato y quadrato subfinestra#
  winc=c(lx/sqrt(LX),ly/sqrt(LY))#
  winstp= .5  ###   1/lato_fin complete overlapping   1 "no" overlapping#
  ################################################
  winc_t=20#
  winstp_t= 1  ###   1/lato_fin complete overlapping   1 "no" overlapping#
  ################################################
  maxdist=.25*lato_fin#
  maxtime=ceiling(.25*winc_t)#
  ### eucliden likelihood ################ #
  res4=SubSampTimeEval(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc_s=winc,winstp_s = winstp,winc_t = winc_t,winstp_t = winstp_t,type_subs,weighted)#
  eu_par4=c(res4$par[1],res4$par[3],res4$par[4],res4$par[2])#
  names(eu_par4)=names(fitA$param)
############################################
rm(list=ls())#
#
#*** Info:#
'   #
PRACTICAL RANGE = 0.4#
12 scenarios:#
b1: 3,10 for window size in space and time.#
b2: 4,20 for window size in space and time.#
Step window: 0.5 for space && no overlap (two in total)#
#
maxdist=.25*lato_fin#
maxtime=ceiling(.25*winc_t)#
'#
#*** End Info:#
#
########################R package########################
require(CompRandFld)#
require(MCMCpack)#
require(STBEU)#
dirsol = "~/Documents/Software/STBEU/Simulations/StartDoubleFix" # Directory where results will be #
################################################
# setting 1  (many locations in space a few in time)#
################################################
#
####location sites #########################################
lambda=5#
xx=seq(-lambda,lambda);#
coords=as.matrix(expand.grid(xx,xx))   ###regular#
# plot(coords)#
#
####temporal instants #########################################
nt = 50 # Time points 18#
times=seq(1,nt,1)#
nrow(coords)#
nrow(coords)*nt#
# bn = 2,4 Same Space#
################################################
###################################################################
model=1  #   1=double exponential       2 =gneiting#
#
if (model == 1) #
{#
  # exponential model#
  cov.model <-"exp_exp"#
  cc=1#
  ######
  mean=0#
  nugget=0#
  scale_s<-1.2/3#
  scale_t<-1.2/3#
  sill=1#
  param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill)#
  fixed=list(nugget=nugget)#
  fix=c(nugget=nugget)#
}#
#
#################################################
#   parameters for the subsampling #####
################################################
coordx=coords[,1]#
coordy=coords[,2]#
LX=abs(range(coordx)[1]-range(coordx)[2])#
LY=abs(range(coordy)[1]-range(coordy)[2])#
type_subs=3    ### type of subsampling  1=in space    2= in time 3= spacetime#
#
type_dist=1                ### type of distance     1=euclidean 2=chordal  3=geodesic #
maxdistPL=max(dist(coords))*.25                  ## compact support in weights function for pairwise liklihood#
maxtimePL=ceiling(max(dist(times))*.25)#
#
i=1#
nsim<-1   ## number of simulation#
results=matrix(NA,ncol=5,nrow=5*nsim);label = 0:4#
set.seed(276)#
while(i<=nsim)#
{#
  #####################################################################################################      #
  # Simulation of the spatial Gaussian random field:#
  data <- RFsim(coordx=coords,coordt=times,corrmodel=cov.model, param=param)$data#
  mm=mean(c(data))#
  vv=var(c(data))#
  start=list(mean=mm,scale_s=scale_s,scale_t=scale_t,sill=vv)#
  ##################################################################################################### #
  ###### Composite likelihood based on pairs estimation ###############################################     #
  theta=c(mean = mm,sill=vv,scale_s=scale_s,scale_t=scale_t)                #starting value  #
  # Maximum composite-likelihood fitting of the random field:#
  # **************************scenario 0/4A main NOT weighted estimation***#
  fitA <- FitComposite(data=data,coordx=coords,coordt=times,#
                       corrmodel=cov.model,maxtime=maxtimePL,maxdist=maxdistPL,#
                       likelihood="Marginal",type="Pairwise",#
                       start=start,fixed=fixed,weighted=F)#
  eu_par0=c(fitA$param[1],fitA$param[2],fitA$param[3],fitA$param[4])#
  print(fitA$param)#
  names(eu_par0)=names(fitA$param)#
  # **************************scenario 1/4 bs = 3,bt = 10, no overlaping  ***#
  #################################################
  #   parameters for the subsampling #####
  ################################################
  lato_fin=3  #changing window size 2,4#
  lx=lato_fin          #lunghezza lato x quadrato subfinestra#
  ly=lato_fin          #lunghezza lato y quadrato subfinestra#
  winc=c(lx/sqrt(LX),ly/sqrt(LY))#
  winstp= 1  ###   1/lato_fin complete overlapping   1 "no" overlapping#
  ################################################
  winc_t=10#
  winstp_t= 1  ###   1/lato_fin complete overlapping   1 "no" overlapping#
  ################################################
  weighted=0#
  maxdist=.25*lato_fin#
  maxtime=ceiling(.25*winc_t)#
  ### eucliden likelihood ################ #
  res1=SubSampTimeEval(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc_s=winc,winstp_s = winstp,winc_t = winc_t,winstp_t = winstp_t,type_subs,weighted)#
  eu_par1=c(res1$par[1],res1$par[3],res1$par[4],res1$par[2])#
  names(eu_par1)=names(fitA$param)#
  # print(eu_par1)#
  # **************************scenario 2/4 bs = 4,bt = 20, no overlaping  ***#
  #################################################
  #   parameters for the subsampling #####
  ################################################
  lato_fin=4  #changing window size 2,4#
  lx=lato_fin          #lunghezza lato x quadrato subfinestra#
  ly=lato_fin          #lunghezza lato y quadrato subfinestra#
  winc=c(lx/sqrt(LX),ly/sqrt(LY))#
  winstp= 1  ###   1/lato_fin complete overlapping   1 "no" overlapping#
  ################################################
  winc_t=20#
  winstp_t= 1  ###   1/lato_fin complete overlapping   1 "no" overlapping#
  ################################################
  maxdist=.25*lato_fin#
  maxtime=ceiling(.25*winc_t)#
  ### eucliden likelihood ################ #
  res2=SubSampTimeEval(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc_s=winc,winstp_s = winstp,winc_t = winc_t,winstp_t = winstp_t,type_subs,weighted)#
  eu_par2=c(res2$par[1],res2$par[3],res2$par[4],res2$par[2])#
  names(eu_par2)=names(fitA$param)#
  # print(eu_par2)#
  # **************************scenario 3/4 bs = 3,bt=10 overlaping (.5) ***#
  #################################################
  #   parameters for the subsampling #####
  ################################################
  lato_fin=3  #changing window size 2,4#
  lx=lato_fin          #lunghezza lato x quadrato subfinestra#
  ly=lato_fin          #lunghezza lato y quadrato subfinestra#
  winc=c(lx/sqrt(LX),ly/sqrt(LY))#
  winstp= .5  ###   1/lato_fin complete overlapping   1 "no" overlapping#
  ################################################
  winc_t=10#
  winstp_t= 1  ###   1/lato_fin complete overlapping   1 "no" overlapping#
  ################################################
  maxdist=.25*lato_fin#
  maxtime=ceiling(.25*winc_t)#
  ### eucliden likelihood ################ #
  res3=SubSampTimeEval(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc_s=winc,winstp_s = winstp,winc_t = winc_t,winstp_t = winstp_t,type_subs,weighted)#
  eu_par3=c(res3$par[1],res3$par[3],res3$par[4],res3$par[2])#
  names(eu_par3)=names(fitA$param)#
  # print(eu_par3)#
  # **************************scenario 4/4 bs = 4,bt=20, overlaping (.5), weighted. ***#
  #################################################
  #   parameters for the subsampling #####
  ################################################
  lato_fin=4  #changing window size 2,4,8#
  lx=lato_fin          #lunghezza lato x quadrato subfinestra#
  ly=lato_fin          #lunghezza lato y quadrato subfinestra#
  winc=c(lx/sqrt(LX),ly/sqrt(LY))#
  winstp= .5  ###   1/lato_fin complete overlapping   1 "no" overlapping#
  ################################################
  winc_t=20#
  winstp_t= 1  ###   1/lato_fin complete overlapping   1 "no" overlapping#
  ################################################
  maxdist=.25*lato_fin#
  maxtime=ceiling(.25*winc_t)#
  ### eucliden likelihood ################ #
  res4=SubSampTimeEval(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc_s=winc,winstp_s = winstp,winc_t = winc_t,winstp_t = winstp_t,type_subs,weighted)#
  eu_par4=c(res4$par[1],res4$par[3],res4$par[4],res4$par[2])#
  names(eu_par4)=names(fitA$param)#
  # print(eu_par4)#
  # results[(5*(i)-4):((5*(i)-4)+4),]=cbind(label,rbind(eu_par0=eu_par0,eu_par1,eu_par2,eu_par3,eu_par4))#
  # colnames(results)=c("setting",names(fitA$param))#
  print(i)#
  i=i+1#
  # setwd(dirsol)#
  # write.csv(results, "regular_results_spacetimeDE12.csv")#
}
lato_fin=3  #changing window size 2,4#
  lx=lato_fin          #lunghezza lato x quadrato subfinestra#
  ly=lato_fin          #lunghezza lato y quadrato subfinestra#
  winc=c(lx/sqrt(LX),ly/sqrt(LY))#
  winstp= 1  ###   1/lato_fin complete overlapping   1 "no" overlapping#
  ################################################
  winc_t=10#
  winstp_t= 1  ###   1/lato_fin complete overlapping   1 "no" overlapping#
  ################################################
  weighted=0#
  maxdist=.25*lato_fin#
  maxtime=ceiling(.25*winc_t)#
  ### eucliden likelihood ################ #
  res1=SubSampTimeEval(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc_s=winc,winstp_s = winstp,winc_t = winc_t,winstp_t = winstp_t,type_subs,weighted)#
  eu_par1=c(res1$par[1],res1$par[3],res1$par[4],res1$par[2])#
  names(eu_par1)=names(fitA$param)#
  # print(eu_par1)#
  # **************************scenario 2/4 bs = 4,bt = 20, no overlaping  ***#
  #################################################
  #   parameters for the subsampling #####
  ################################################
  lato_fin=4  #changing window size 2,4#
  lx=lato_fin          #lunghezza lato x quadrato subfinestra#
  ly=lato_fin          #lunghezza lato y quadrato subfinestra#
  winc=c(lx/sqrt(LX),ly/sqrt(LY))#
  winstp= 1  ###   1/lato_fin complete overlapping   1 "no" overlapping#
  ################################################
  winc_t=20#
  winstp_t= 1  ###   1/lato_fin complete overlapping   1 "no" overlapping#
  ################################################
  maxdist=.25*lato_fin#
  maxtime=ceiling(.25*winc_t)#
  ### eucliden likelihood ################ #
  res2=SubSampTimeEval(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc_s=winc,winstp_s = winstp,winc_t = winc_t,winstp_t = winstp_t,type_subs,weighted)#
  eu_par2=c(res2$par[1],res2$par[3],res2$par[4],res2$par[2])#
  names(eu_par2)=names(fitA$param)#
  # print(eu_par2)#
  # **************************scenario 3/4 bs = 3,bt=10 overlaping (.5) ***#
  #################################################
  #   parameters for the subsampling #####
  ################################################
  lato_fin=3  #changing window size 2,4#
  lx=lato_fin          #lunghezza lato x quadrato subfinestra#
  ly=lato_fin          #lunghezza lato y quadrato subfinestra#
  winc=c(lx/sqrt(LX),ly/sqrt(LY))#
  winstp= .5  ###   1/lato_fin complete overlapping   1 "no" overlapping#
  ################################################
  winc_t=10#
  winstp_t= .5  ###   1/lato_fin complete overlapping   1 "no" overlapping#
  ################################################
  maxdist=.25*lato_fin#
  maxtime=ceiling(.25*winc_t)#
  ### eucliden likelihood ################ #
  res3=SubSampTimeEval(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc_s=winc,winstp_s = winstp,winc_t = winc_t,winstp_t = winstp_t,type_subs,weighted)#
  eu_par3=c(res3$par[1],res3$par[3],res3$par[4],res3$par[2])#
  names(eu_par3)=names(fitA$param)#
  # print(eu_par3)#
  # **************************scenario 4/4 bs = 4,bt=20, overlaping (.5), weighted. ***#
  #################################################
  #   parameters for the subsampling #####
  ################################################
  lato_fin=4  #changing window size 2,4,8#
  lx=lato_fin          #lunghezza lato x quadrato subfinestra#
  ly=lato_fin          #lunghezza lato y quadrato subfinestra#
  winc=c(lx/sqrt(LX),ly/sqrt(LY))#
  winstp= .5  ###   1/lato_fin complete overlapping   1 "no" overlapping#
  ################################################
  winc_t=20#
  winstp_t= .5  ###   1/lato_fin complete overlapping   1 "no" overlapping#
  ################################################
  maxdist=.25*lato_fin#
  maxtime=ceiling(.25*winc_t)#
  ### eucliden likelihood ################ #
  res4=SubSampTimeEval(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc_s=winc,winstp_s = winstp,winc_t = winc_t,winstp_t = winstp_t,type_subs,weighted)#
  eu_par4=c(res4$par[1],res4$par[3],res4$par[4],res4$par[2])#
  names(eu_par4)=names(fitA$param)
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="Gaussian";shape=4;n=1#
set.seed(112)#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,5)# con 9 funciona,  con 8 explota#
coordx_dyn=list()#
#
maxN=130#130#
for(k in 1:length(coordt))#
{#
  NN=sample(1:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
# coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 0.1#
sill <- 1#
nugget <- 0#
scale_s <- .3#
scale_t <- .3#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget, sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,mean = mean )#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxtime=2;maxdist=0.2#
fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
               corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,model = model,varest = TRUE)#
print(fit1)#
fit1$param
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="Gaussian";shape=4;n=1#
set.seed(112)#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,9)# con 9 funciona,  con 8 explota#
coordx_dyn=list()#
#
maxN=130#130#
for(k in 1:length(coordt))#
{#
  NN=sample(1:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
# coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 0.1#
sill <- 1#
nugget <- 0#
scale_s <- .3#
scale_t <- .3#
skew <- -0.5#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget, sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,mean = mean )#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxtime=1;maxdist=0.3#
fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
               corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,model = model,varest = TRUE)#
print(fit1)#
fit1$param
coordt=seq(0,9)# con 9 funciona,  con 8 explota#
coordx_dyn=list()#
#
maxN=130#130#
set.seed(112)#
for(k in 1:length(coordt))#
{#
  NN=sample(1:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
# coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 0.1#
sill <- 1#
nugget <- 0#
scale_s <- .3#
scale_t <- .3#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget, sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,mean = mean )#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxtime=2;maxdist=0.2#
fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
               corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,model = model,varest = TRUE)#
# print(fit1)#
# fit1$param
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="Gaussian";shape=4;n=1#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,9)# con 9 funciona,  con 8 explota#
coordx_dyn=list()#
#
maxN=130#130#
set.seed(112)#
for(k in 1:length(coordt))#
{#
  NN=sample(1:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
# coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 0.1#
sill <- 1#
nugget <- 0#
scale_s <- .3#
scale_t <- .3#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget, sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,mean = mean )#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxtime=2;maxdist=0.2#
fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
               corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,model = model,varest = TRUE)
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="Gaussian";shape=4;n=1#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,5)# con 9 funciona,  con 8 explota#
coordx_dyn=list()#
#
maxN=130#130#
set.seed(112)#
for(k in 1:length(coordt))#
{#
  NN=sample(1:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
# coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 0.1#
sill <- 1#
nugget <- 0#
scale_s <- .3#
scale_t <- .3#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget, sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,mean = mean )#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxtime=2;maxdist=0.2#
fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
               corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,model = model,varest = TRUE)#
# print(fit1)#
# fit1$param
sum(ns)
128*2*9
128*2
128*5
768/128
786/131
#================================= Comp_Pair_Gauss_st2 (SPACE-TIME)#
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="Gaussian";shape=4;n=1#
set.seed(112)#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,3)# con 9 funciona,  con 8 explota#
coordx_dyn=list()#
#
maxN=50#130#
for(k in 1:length(coordt))#
{#
  NN=sample(1:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
# coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 0.1#
sill <- 1#
nugget <- 0#
scale_s <- .3#
scale_t <- .3#
skew <- -0.5#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget, sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,mean = mean )#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxtime=1;maxdist=0.3#
# fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
#                corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
#                likelihood="Marginal",type="Pairwise",#
#                start=start,fixed=fixed,model = model,varest = TRUE)#
# print(fit1)#
# fit1$param#
score <- sensmat <- varcov <- varimat <- parscale <- NULL#
### Initialization parameters:#
initparam <- WlsStart(coordx=NULL, coordy=NULL, coordt=coordt, coordx_dyn=coordx_dyn, corrmodel, data=ss1, distance="Eucl", "Fitting", fixed=fixed, grid=FALSE,#10#
                      likelihood='Marginal', maxdist=maxdist, maxtime=maxtime,  model=model, n=1, NULL,#16#
                      parscale, optimizer=='L-BFGS-B', radius=6378.388, start=start, taper=NULL, tapsep=NULL,#22#
                      type="Pairwise", varest=TRUE, vartype='SubSamp', weighted=FALSE, winconst=NULL, winstp=NULL,winconst_t=NULL, winstp_t=NULL, X=NULL)#31#
numcoord=length(initparam$coordx);numtime=1;spacetime_dyn=FALSE#
if(initparam$spacetime) numtime=length(initparam$coordt)#
if(initparam$bivariate) numtime=2#
if(!is.null(coordx_dyn)) spacetime_dyn=TRUE#
dimat <- numcoord*numtime##
NS=cumsum(initparam$ns)#
if(is.null(dim(initparam$X)))#
{#
  X=as.matrix(rep(1,dimat))#
  if((initparam$spacetime||initparam$bivariate)&& spacetime_dyn)  X=as.matrix(rep(1,NS[numtime]))#
}#
num_betas=ncol(X) #
grid = FALSE#
if(grid)    #
  {a=expand.grid(initparam$coordx,initparam$coordy);coordx=a[,1];coordy=a[,2]; #
  }else {#
    if((initparam$spacetime||initparam$bivariate)&&(!spacetime_dyn)){#
  data=c(t(data))#
  coordx=rep(coordx,numtime);coordy=rep(coordy,numtime)#
}#
  if((initparam$spacetime||initparam$bivariate)&&(spacetime_dyn)) initparam$data=unlist(initparam$data)          #
}#
if(initparam$spacetime||initparam$bivariate)   NS=c(0,NS)[-(length(initparam$ns)+1)]#
initparam$fixed#
#
dimmat <- initparam$numparam^2#
dmat <- initparam$numparam*(initparam$numparam+1)/2#
eps <- (.Machine$double.eps)^(1/3)#
param <- c(initparam$param, initparam$fixed)#
score <- double(initparam$numparam)#
paramcorr <- param[initparam$namescorr]#
nuisance <- param[initparam$namesnuis]#
sel=substr(names(nuisance),1,4)=="mean"#
mm=as.numeric(nuisance[sel])   ## mean paramteres#
other_nuis=as.numeric(nuisance[!sel]) #
nuisance=c(mm,other_nuis)#
sensmat <- double(dmat);varimat <- double(dmat)#
GD=.C('GodambeMat',as.double(mm),as.integer(initparam$bivariate),as.double(initparam$coordx),as.double(initparam$coordy),#
      as.double(initparam$coordt),as.integer(initparam$corrmodel), as.double(initparam$data),as.integer(initparam$distance),as.double(eps),#
      as.integer(initparam$flagcorr), as.integer(initparam$flagnuis),as.integer(grid),as.integer(initparam$likelihood),#
      as.double(c(X%*%mm)),as.integer(initparam$model),as.double(initparam$n),as.integer(num_betas),#
      as.integer(initparam$numparam),as.integer(initparam$numparamcorr),as.integer(length(paramcorr)),as.double(paramcorr),as.double(nuisance),#
      score=score,sensmat=sensmat,as.integer(initparam$spacetime),as.integer(initparam$type),#
      varimat=varimat,as.integer(initparam$vartype),as.double(initparam$winconst),as.double(initparam$winstp),as.double(initparam$winconst_t),as.double(initparam$winstp_t),#
      as.integer(initparam$weighted),c(t(X)),ns=as.integer(initparam$ns),NS=as.integer(NS),PACKAGE='GeoModels',DUP=TRUE,NAOK=TRUE)#
str(GD)#
#
GD$score;GD$sensmat;GD$varimat
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="Gaussian";shape=4;n=1#
set.seed(112)#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,9)# con 9 funciona,  con 8 explota#
coordx_dyn=list()#
#
maxN=130#130#
for(k in 1:length(coordt))#
{#
  NN=sample(1:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
# coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 0.1#
sill <- 1#
nugget <- 0#
scale_s <- .3#
scale_t <- .3#
skew <- -0.5#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget, sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,mean = mean )#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxtime=1;maxdist=0.3#
# fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
#                corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
#                likelihood="Marginal",type="Pairwise",#
#                start=start,fixed=fixed,model = model,varest = TRUE)#
# print(fit1)#
# fit1$param#
score <- sensmat <- varcov <- varimat <- parscale <- NULL#
### Initialization parameters:#
initparam <- WlsStart(coordx=NULL, coordy=NULL, coordt=coordt, coordx_dyn=coordx_dyn, corrmodel, data=ss1, distance="Eucl", "Fitting", fixed=fixed, grid=FALSE,#10#
                      likelihood='Marginal', maxdist=maxdist, maxtime=maxtime,  model=model, n=1, NULL,#16#
                      parscale, optimizer=='L-BFGS-B', radius=6378.388, start=start, taper=NULL, tapsep=NULL,#22#
                      type="Pairwise", varest=TRUE, vartype='SubSamp', weighted=FALSE, winconst=NULL, winstp=NULL,winconst_t=NULL, winstp_t=NULL, X=NULL)#31#
numcoord=length(initparam$coordx);numtime=1;spacetime_dyn=FALSE#
if(initparam$spacetime) numtime=length(initparam$coordt)#
if(initparam$bivariate) numtime=2#
if(!is.null(coordx_dyn)) spacetime_dyn=TRUE#
dimat <- numcoord*numtime##
NS=cumsum(initparam$ns)#
if(is.null(dim(initparam$X)))#
{#
  X=as.matrix(rep(1,dimat))#
  if((initparam$spacetime||initparam$bivariate)&& spacetime_dyn)  X=as.matrix(rep(1,NS[numtime]))#
}#
num_betas=ncol(X) #
grid = FALSE#
if(grid)    #
  {a=expand.grid(initparam$coordx,initparam$coordy);coordx=a[,1];coordy=a[,2]; #
  }else {#
    if((initparam$spacetime||initparam$bivariate)&&(!spacetime_dyn)){#
  data=c(t(data))#
  coordx=rep(coordx,numtime);coordy=rep(coordy,numtime)#
}#
  if((initparam$spacetime||initparam$bivariate)&&(spacetime_dyn)) initparam$data=unlist(initparam$data)          #
}#
if(initparam$spacetime||initparam$bivariate)   NS=c(0,NS)[-(length(initparam$ns)+1)]#
initparam$fixed#
#
dimmat <- initparam$numparam^2#
dmat <- initparam$numparam*(initparam$numparam+1)/2#
eps <- (.Machine$double.eps)^(1/3)#
param <- c(initparam$param, initparam$fixed)#
score <- double(initparam$numparam)#
paramcorr <- param[initparam$namescorr]#
nuisance <- param[initparam$namesnuis]#
sel=substr(names(nuisance),1,4)=="mean"#
mm=as.numeric(nuisance[sel])   ## mean paramteres#
other_nuis=as.numeric(nuisance[!sel]) #
nuisance=c(mm,other_nuis)#
sensmat <- double(dmat);varimat <- double(dmat)#
GD=.C('GodambeMat',as.double(mm),as.integer(initparam$bivariate),as.double(initparam$coordx),as.double(initparam$coordy),#
      as.double(initparam$coordt),as.integer(initparam$corrmodel), as.double(initparam$data),as.integer(initparam$distance),as.double(eps),#
      as.integer(initparam$flagcorr), as.integer(initparam$flagnuis),as.integer(grid),as.integer(initparam$likelihood),#
      as.double(c(X%*%mm)),as.integer(initparam$model),as.double(initparam$n),as.integer(num_betas),#
      as.integer(initparam$numparam),as.integer(initparam$numparamcorr),as.integer(length(paramcorr)),as.double(paramcorr),as.double(nuisance),#
      score=score,sensmat=sensmat,as.integer(initparam$spacetime),as.integer(initparam$type),#
      varimat=varimat,as.integer(initparam$vartype),as.double(initparam$winconst),as.double(initparam$winstp),as.double(initparam$winconst_t),as.double(initparam$winstp_t),#
      as.integer(initparam$weighted),c(t(X)),ns=as.integer(initparam$ns),NS=as.integer(NS),PACKAGE='GeoModels',DUP=TRUE,NAOK=TRUE)#
str(GD)#
#
GD$score;GD$sensmat;GD$varimat
library(GeoModels)#
#
rm(list = ls())#
# Define the spatial-coordinates of the points:#
# set.seed(6)#
# set.seed(5)#
N=500  # number of location sites#
x <- runif(N, 0, 1)#
# set.seed(5)#
y <- runif(N, 0, 1)#
coords <- cbind(x,y)#
#
# Define spatial matrix covariates#
X=cbind(rep(1,N),runif(N))#
#
# Set the covariance model's parameters:#
corrmodel <- "Exp"#
model <- "Gaussian"#
NuisParam(model,FALSE,1)#
CorrParam(corrmodel)#
mean <- 0#
mean1 <- -0.5#
sill <- 1#
nugget <- 0#
scale <- 2/3#
skew <- 1.5#
param<-list(mean=mean,mean1=mean1,sill=sill,nugget=nugget,scale=scale)#
#
# Simulation of the spatial Gaussian RF:#
set.seed(7)#
data <- GeoSim(coordx=coords,corrmodel=corrmodel, param=param,X=X,model = model)$data#
# data = rnorm(nrow(coords))#
# Fixed parameters#
fixed<-list(nugget=nugget,sill=sill)#
# Starting value for the estimated parameters#
start<-list(mean=mean,mean1=mean1,scale=scale)#
#
# CPUtime = proc.time()#
fit1 <- GeoFit(data=data,coordx=coords,corrmodel=corrmodel,#
               maxdist=0.1,likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,X=X, model = model,varest = TRUE)#
# CPUtime = proc.time()-CPUtime;CPUtime#
print(fit1)
#================================= Comp_Pair_Gauss_st2 (SPACE-TIME)#
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="Gaussian";shape=4;n=1#
set.seed(112)#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,9)# con 9 funciona,  con 8 explota#
coordx_dyn=list()#
#
maxN=130#130#
for(k in 1:length(coordt))#
{#
  NN=sample(1:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
# coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 0.1#
sill <- 1#
nugget <- 0#
scale_s <- .3#
scale_t <- .3#
skew <- -0.5#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget, sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,mean = mean )#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxtime=1;maxdist=0.3#
fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
               corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,model = model,varest = TRUE)
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="Gaussian";shape=4;n=1#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,5)# con 9 funciona,  con 8 explota#
coordx_dyn=list()#
#
maxN=130#130#
set.seed(112)#
for(k in 1:length(coordt))#
{#
  NN=sample(1:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
# coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 0.1#
sill <- 1#
nugget <- 0#
scale_s <- .3#
scale_t <- .3#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget, sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,mean = mean )#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxtime=2;maxdist=0.2#
fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
               corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,model = model,varest = TRUE)
#================================= Comp_Pair_Gauss_st2 (SPACE-TIME)#
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="Gaussian";shape=4;n=1#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,1)# con 9 funciona,  con 8 explota#
coordx_dyn=list()#
#
# maxN=130#130#
# set.seed(112)#
# for(k in 1:length(coordt))#
# {#
#   NN=sample(1:maxN,size=1)#
#   print(NN)#
#   x <- runif(NN, 0, 1)#
#   y <- runif(NN, 0, 1)#
#   coordx_dyn[[k]]=cbind(x,y)#
# }#
#
maxN=3#130#
set.seed(11)#
for(k in 1:length(coordt))#
{#
  NN=sample(2:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
# coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 0.1#
sill <- 1#
nugget <- 0#
scale_s <- .3#
scale_t <- .3#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget, sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,mean = mean )#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxtime=2;maxdist=0.2#
# fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
#                corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
#                likelihood="Marginal",type="Pairwise",#
#                start=start,fixed=fixed,model = model,varest = TRUE)#
# print(fit1)#
# fit1$param#
score <- sensmat <- varcov <- varimat <- parscale <- NULL#
### Initialization parameters:#
initparam <- WlsStart(coordx=NULL, coordy=NULL, coordt=coordt, coordx_dyn=coordx_dyn, corrmodel, data=ss1, distance="Eucl", "Fitting", fixed=fixed, grid=FALSE,#10#
                      likelihood='Marginal', maxdist=maxdist, maxtime=maxtime,  model=model, n=1, NULL,#16#
                      parscale, optimizer=='L-BFGS-B', radius=6378.388, start=start, taper=NULL, tapsep=NULL,#22#
                      type="Pairwise", varest=TRUE, vartype='SubSamp', weighted=FALSE, winconst=NULL, winstp=NULL,winconst_t=NULL, winstp_t=NULL, X=NULL)#31#
numcoord=length(initparam$coordx);numtime=1;spacetime_dyn=FALSE#
if(initparam$spacetime) numtime=length(initparam$coordt)#
if(initparam$bivariate) numtime=2#
if(!is.null(coordx_dyn)) spacetime_dyn=TRUE#
dimat <- numcoord*numtime##
NS=cumsum(initparam$ns)#
if(is.null(dim(initparam$X)))#
{#
  X=as.matrix(rep(1,dimat))#
  if((initparam$spacetime||initparam$bivariate)&& spacetime_dyn)  X=as.matrix(rep(1,NS[numtime]))#
}#
num_betas=ncol(X) #
grid = FALSE#
if(grid)    #
{a=expand.grid(initparam$coordx,initparam$coordy);coordx=a[,1];coordy=a[,2]; #
}else {#
  if((initparam$spacetime||initparam$bivariate)&&(!spacetime_dyn)){#
    data=c(t(data))#
    coordx=rep(coordx,numtime);coordy=rep(coordy,numtime)#
  }#
  if((initparam$spacetime||initparam$bivariate)&&(spacetime_dyn)) initparam$data=unlist(initparam$data)          #
}#
if(initparam$spacetime||initparam$bivariate)   NS=c(0,NS)[-(length(initparam$ns)+1)]#
initparam$fixed#
#
dimmat <- initparam$numparam^2#
dmat <- initparam$numparam*(initparam$numparam+1)/2#
eps <- (.Machine$double.eps)^(1/3)#
param <- c(initparam$param, initparam$fixed)#
score <- double(initparam$numparam)#
paramcorr <- param[initparam$namescorr]#
nuisance <- param[initparam$namesnuis]#
sel=substr(names(nuisance),1,4)=="mean"#
mm=as.numeric(nuisance[sel])   ## mean paramteres#
other_nuis=as.numeric(nuisance[!sel]) #
nuisance=c(mm,other_nuis)#
sensmat <- double(dmat);varimat <- double(dmat)#
GD=.C('GodambeMat',as.double(mm),as.integer(initparam$bivariate),as.double(initparam$coordx),as.double(initparam$coordy),#
      as.double(initparam$coordt),as.integer(initparam$corrmodel), as.double(initparam$data),as.integer(initparam$distance),as.double(eps),#
      as.integer(initparam$flagcorr), as.integer(initparam$flagnuis),as.integer(grid),as.integer(initparam$likelihood),#
      as.double(c(X%*%mm)),as.integer(initparam$model),as.double(initparam$n),as.integer(num_betas),#
      as.integer(initparam$numparam),as.integer(initparam$numparamcorr),as.integer(length(paramcorr)),as.double(paramcorr),as.double(nuisance),#
      score=score,sensmat=sensmat,as.integer(initparam$spacetime),as.integer(initparam$type),#
      varimat=varimat,as.integer(initparam$vartype),as.double(initparam$winconst),as.double(initparam$winstp),as.double(initparam$winconst_t),as.double(initparam$winstp_t),#
      as.integer(initparam$weighted),c(t(X)),ns=as.integer(initparam$ns),NS=as.integer(NS),PACKAGE='GeoModels',DUP=TRUE,NAOK=TRUE)#
str(GD)#
#
GD$score;GD$sensmat;GD$varimat
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="Gaussian";shape=4;n=1#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,1)# con 9 funciona,  con 8 explota#
coordx_dyn=list()#
#
# maxN=130#130#
# set.seed(112)#
# for(k in 1:length(coordt))#
# {#
#   NN=sample(1:maxN,size=1)#
#   print(NN)#
#   x <- runif(NN, 0, 1)#
#   y <- runif(NN, 0, 1)#
#   coordx_dyn[[k]]=cbind(x,y)#
# }#
#
maxN=10#130#
set.seed(10)#
for(k in 1:length(coordt))#
{#
  NN=sample(2:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
# coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 0.1#
sill <- 1#
nugget <- 0#
scale_s <- .3#
scale_t <- .3#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget, sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,mean = mean )#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxtime=2;maxdist=0.2#
# fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
#                corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
#                likelihood="Marginal",type="Pairwise",#
#                start=start,fixed=fixed,model = model,varest = TRUE)#
# print(fit1)#
# fit1$param#
score <- sensmat <- varcov <- varimat <- parscale <- NULL#
### Initialization parameters:#
initparam <- WlsStart(coordx=NULL, coordy=NULL, coordt=coordt, coordx_dyn=coordx_dyn, corrmodel, data=ss1, distance="Eucl", "Fitting", fixed=fixed, grid=FALSE,#10#
                      likelihood='Marginal', maxdist=maxdist, maxtime=maxtime,  model=model, n=1, NULL,#16#
                      parscale, optimizer=='L-BFGS-B', radius=6378.388, start=start, taper=NULL, tapsep=NULL,#22#
                      type="Pairwise", varest=TRUE, vartype='SubSamp', weighted=FALSE, winconst=NULL, winstp=NULL,winconst_t=NULL, winstp_t=NULL, X=NULL)#31#
numcoord=length(initparam$coordx);numtime=1;spacetime_dyn=FALSE#
if(initparam$spacetime) numtime=length(initparam$coordt)#
if(initparam$bivariate) numtime=2#
if(!is.null(coordx_dyn)) spacetime_dyn=TRUE#
dimat <- numcoord*numtime##
NS=cumsum(initparam$ns)#
if(is.null(dim(initparam$X)))#
{#
  X=as.matrix(rep(1,dimat))#
  if((initparam$spacetime||initparam$bivariate)&& spacetime_dyn)  X=as.matrix(rep(1,NS[numtime]))#
}#
num_betas=ncol(X) #
grid = FALSE#
if(grid)    #
{a=expand.grid(initparam$coordx,initparam$coordy);coordx=a[,1];coordy=a[,2]; #
}else {#
  if((initparam$spacetime||initparam$bivariate)&&(!spacetime_dyn)){#
    data=c(t(data))#
    coordx=rep(coordx,numtime);coordy=rep(coordy,numtime)#
  }#
  if((initparam$spacetime||initparam$bivariate)&&(spacetime_dyn)) initparam$data=unlist(initparam$data)          #
}#
if(initparam$spacetime||initparam$bivariate)   NS=c(0,NS)[-(length(initparam$ns)+1)]#
initparam$fixed#
#
dimmat <- initparam$numparam^2#
dmat <- initparam$numparam*(initparam$numparam+1)/2#
eps <- (.Machine$double.eps)^(1/3)#
param <- c(initparam$param, initparam$fixed)#
score <- double(initparam$numparam)#
paramcorr <- param[initparam$namescorr]#
nuisance <- param[initparam$namesnuis]#
sel=substr(names(nuisance),1,4)=="mean"#
mm=as.numeric(nuisance[sel])   ## mean paramteres#
other_nuis=as.numeric(nuisance[!sel]) #
nuisance=c(mm,other_nuis)#
sensmat <- double(dmat);varimat <- double(dmat)#
GD=.C('GodambeMat',as.double(mm),as.integer(initparam$bivariate),as.double(initparam$coordx),as.double(initparam$coordy),#
      as.double(initparam$coordt),as.integer(initparam$corrmodel), as.double(initparam$data),as.integer(initparam$distance),as.double(eps),#
      as.integer(initparam$flagcorr), as.integer(initparam$flagnuis),as.integer(grid),as.integer(initparam$likelihood),#
      as.double(c(X%*%mm)),as.integer(initparam$model),as.double(initparam$n),as.integer(num_betas),#
      as.integer(initparam$numparam),as.integer(initparam$numparamcorr),as.integer(length(paramcorr)),as.double(paramcorr),as.double(nuisance),#
      score=score,sensmat=sensmat,as.integer(initparam$spacetime),as.integer(initparam$type),#
      varimat=varimat,as.integer(initparam$vartype),as.double(initparam$winconst),as.double(initparam$winstp),as.double(initparam$winconst_t),as.double(initparam$winstp_t),#
      as.integer(initparam$weighted),c(t(X)),ns=as.integer(initparam$ns),NS=as.integer(NS),PACKAGE='GeoModels',DUP=TRUE,NAOK=TRUE)#
str(GD)#
#
GD$score;GD$sensmat;GD$varimat
ns
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="Gaussian";shape=4;n=1#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,1)# con 9 funciona,  con 8 explota#
coordx_dyn=list()#
#
# maxN=130#130#
# set.seed(112)#
# for(k in 1:length(coordt))#
# {#
#   NN=sample(1:maxN,size=1)#
#   print(NN)#
#   x <- runif(NN, 0, 1)#
#   y <- runif(NN, 0, 1)#
#   coordx_dyn[[k]]=cbind(x,y)#
# }#
#
maxN=10#130#
set.seed(10)#
for(k in 1:length(coordt))#
{#
  NN=sample(2:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
# coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 0.1#
sill <- 1#
nugget <- 0#
scale_s <- .3#
scale_t <- .3#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget, sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,mean = mean )#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxtime=2;maxdist=0.2#
# fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
#                corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
#                likelihood="Marginal",type="Pairwise",#
#                start=start,fixed=fixed,model = model,varest = TRUE)#
# print(fit1)#
# fit1$param#
score <- sensmat <- varcov <- varimat <- parscale <- NULL#
### Initialization parameters:#
initparam <- WlsStart(coordx=NULL, coordy=NULL, coordt=coordt, coordx_dyn=coordx_dyn, corrmodel, data=ss1, distance="Eucl", "Fitting", fixed=fixed, grid=FALSE,#10#
                      likelihood='Marginal', maxdist=maxdist, maxtime=maxtime,  model=model, n=1, NULL,#16#
                      parscale, optimizer=='L-BFGS-B', radius=6378.388, start=start, taper=NULL, tapsep=NULL,#22#
                      type="Pairwise", varest=TRUE, vartype='SubSamp', weighted=FALSE, winconst=NULL, winstp=NULL,winconst_t=NULL, winstp_t=NULL, X=NULL)#31#
numcoord=length(initparam$coordx);numtime=1;spacetime_dyn=FALSE#
if(initparam$spacetime) numtime=length(initparam$coordt)#
if(initparam$bivariate) numtime=2#
if(!is.null(coordx_dyn)) spacetime_dyn=TRUE#
dimat <- numcoord*numtime##
NS=cumsum(initparam$ns)#
if(is.null(dim(initparam$X)))#
{#
  X=as.matrix(rep(1,dimat))#
  if((initparam$spacetime||initparam$bivariate)&& spacetime_dyn)  X=as.matrix(rep(1,NS[numtime]))#
}#
num_betas=ncol(X) #
grid = FALSE#
if(grid)    #
{a=expand.grid(initparam$coordx,initparam$coordy);coordx=a[,1];coordy=a[,2]; #
}else {#
  if((initparam$spacetime||initparam$bivariate)&&(!spacetime_dyn)){#
    data=c(t(data))#
    coordx=rep(coordx,numtime);coordy=rep(coordy,numtime)#
  }#
  if((initparam$spacetime||initparam$bivariate)&&(spacetime_dyn)) initparam$data=unlist(initparam$data)          #
}#
if(initparam$spacetime||initparam$bivariate)   NS=c(0,NS)[-(length(initparam$ns)+1)]#
initparam$fixed#
#
dimmat <- initparam$numparam^2#
dmat <- initparam$numparam*(initparam$numparam+1)/2#
eps <- (.Machine$double.eps)^(1/3)#
param <- c(initparam$param, initparam$fixed)#
score <- double(initparam$numparam)#
paramcorr <- param[initparam$namescorr]#
nuisance <- param[initparam$namesnuis]#
sel=substr(names(nuisance),1,4)=="mean"#
mm=as.numeric(nuisance[sel])   ## mean paramteres#
other_nuis=as.numeric(nuisance[!sel]) #
nuisance=c(mm,other_nuis)#
sensmat <- double(dmat);varimat <- double(dmat)#
GD=.C('GodambeMat',as.double(mm),as.integer(initparam$bivariate),as.double(initparam$coordx),as.double(initparam$coordy),#
      as.double(initparam$coordt),as.integer(initparam$corrmodel), as.double(initparam$data),as.integer(initparam$distance),as.double(eps),#
      as.integer(initparam$flagcorr), as.integer(initparam$flagnuis),as.integer(grid),as.integer(initparam$likelihood),#
      as.double(c(X%*%mm)),as.integer(initparam$model),as.double(initparam$n),as.integer(num_betas),#
      as.integer(initparam$numparam),as.integer(initparam$numparamcorr),as.integer(length(paramcorr)),as.double(paramcorr),as.double(nuisance),#
      score=score,sensmat=sensmat,as.integer(initparam$spacetime),as.integer(initparam$type),#
      varimat=varimat,as.integer(initparam$vartype),as.double(initparam$winconst),as.double(initparam$winstp),as.double(initparam$winconst_t),as.double(initparam$winstp_t),#
      as.integer(initparam$weighted),c(t(X)),ns=as.integer(initparam$ns),NS=as.integer(NS),PACKAGE='GeoModels',DUP=TRUE,NAOK=TRUE)#
str(GD)#
#
GD$score;GD$sensmat;GD$varimat
ss1
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="Gaussian";shape=4;n=1#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,1)# con 9 funciona,  con 8 explota#
coordx_dyn=list()#
#
# maxN=130#130#
# set.seed(112)#
# for(k in 1:length(coordt))#
# {#
#   NN=sample(1:maxN,size=1)#
#   print(NN)#
#   x <- runif(NN, 0, 1)#
#   y <- runif(NN, 0, 1)#
#   coordx_dyn[[k]]=cbind(x,y)#
# }#
#
maxN=10#130#
set.seed(10)#
for(k in 1:length(coordt))#
{#
  NN=sample(2:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
# coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 0.1#
sill <- 1#
nugget <- 0#
scale_s <- .3#
scale_t <- .3#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget, sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,mean = mean )#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxtime=2;maxdist=0.2#
# fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
#                corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
#                likelihood="Marginal",type="Pairwise",#
#                start=start,fixed=fixed,model = model,varest = TRUE)#
# print(fit1)#
# fit1$param#
score <- sensmat <- varcov <- varimat <- parscale <- NULL#
### Initialization parameters:#
initparam <- WlsStart(coordx=NULL, coordy=NULL, coordt=coordt, coordx_dyn=coordx_dyn, corrmodel, data=ss1, distance="Eucl", "Fitting", fixed=fixed, grid=FALSE,#10#
                      likelihood='Marginal', maxdist=maxdist, maxtime=maxtime,  model=model, n=1, NULL,#16#
                      parscale, optimizer=='L-BFGS-B', radius=6378.388, start=start, taper=NULL, tapsep=NULL,#22#
                      type="Pairwise", varest=TRUE, vartype='SubSamp', weighted=FALSE, winconst=NULL, winstp=NULL,winconst_t=NULL, winstp_t=NULL, X=NULL)#31#
numcoord=length(initparam$coordx);numtime=1;spacetime_dyn=FALSE#
if(initparam$spacetime) numtime=length(initparam$coordt)#
if(initparam$bivariate) numtime=2#
if(!is.null(coordx_dyn)) spacetime_dyn=TRUE#
dimat <- numcoord*numtime##
NS=cumsum(initparam$ns)#
if(is.null(dim(initparam$X)))#
{#
  X=as.matrix(rep(1,dimat))#
  if((initparam$spacetime||initparam$bivariate)&& spacetime_dyn)  X=as.matrix(rep(1,NS[numtime]))#
}#
num_betas=ncol(X) #
grid = FALSE#
if(grid)    #
{a=expand.grid(initparam$coordx,initparam$coordy);coordx=a[,1];coordy=a[,2]; #
}else {#
  if((initparam$spacetime||initparam$bivariate)&&(!spacetime_dyn)){#
    data=c(t(data))#
    coordx=rep(coordx,numtime);coordy=rep(coordy,numtime)#
  }#
  if((initparam$spacetime||initparam$bivariate)&&(spacetime_dyn)) initparam$data=unlist(initparam$data)          #
}#
if(initparam$spacetime||initparam$bivariate)   NS=c(0,NS)[-(length(initparam$ns)+1)]#
initparam$fixed#
#
dimmat <- initparam$numparam^2#
dmat <- initparam$numparam*(initparam$numparam+1)/2#
eps <- (.Machine$double.eps)^(1/3)#
param <- c(initparam$param, initparam$fixed)#
score <- double(initparam$numparam)#
paramcorr <- param[initparam$namescorr]#
nuisance <- param[initparam$namesnuis]#
sel=substr(names(nuisance),1,4)=="mean"#
mm=as.numeric(nuisance[sel])   ## mean paramteres#
other_nuis=as.numeric(nuisance[!sel]) #
nuisance=c(mm,other_nuis)#
sensmat <- double(dmat);varimat <- double(dmat)#
GD=.C('GodambeMat',as.double(mm),as.integer(initparam$bivariate),as.double(initparam$coordx),as.double(initparam$coordy),#
      as.double(initparam$coordt),as.integer(initparam$corrmodel), as.double(initparam$data),as.integer(initparam$distance),as.double(eps),#
      as.integer(initparam$flagcorr), as.integer(initparam$flagnuis),as.integer(grid),as.integer(initparam$likelihood),#
      as.double(c(X%*%mm)),as.integer(initparam$model),as.double(initparam$n),as.integer(num_betas),#
      as.integer(initparam$numparam),as.integer(initparam$numparamcorr),as.integer(length(paramcorr)),as.double(paramcorr),as.double(nuisance),#
      score=score,sensmat=sensmat,as.integer(initparam$spacetime),as.integer(initparam$type),#
      varimat=varimat,as.integer(initparam$vartype),as.double(initparam$winconst),as.double(initparam$winstp),as.double(initparam$winconst_t),as.double(initparam$winstp_t),#
      as.integer(initparam$weighted),c(t(X)),ns=as.integer(initparam$ns),NS=as.integer(NS),PACKAGE='GeoModels',DUP=TRUE,NAOK=TRUE)#
str(GD)#
#
GD$score;GD$sensmat;GD$varimat
coordx_dyn
GD=.C('GodambeMat',as.double(mm),as.integer(initparam$bivariate),as.double(initparam$coordx),as.double(initparam$coordy),#
      as.double(initparam$coordt),as.integer(initparam$corrmodel), as.double(initparam$data),as.integer(initparam$distance),as.double(eps),#
      as.integer(initparam$flagcorr), as.integer(initparam$flagnuis),as.integer(grid),as.integer(initparam$likelihood),#
      as.double(c(X%*%mm)),as.integer(initparam$model),as.double(initparam$n),as.integer(num_betas),#
      as.integer(initparam$numparam),as.integer(initparam$numparamcorr),as.integer(length(paramcorr)),as.double(paramcorr),as.double(nuisance),#
      score=score,sensmat=sensmat,as.integer(initparam$spacetime),as.integer(initparam$type),#
      varimat=varimat,as.integer(initparam$vartype),as.double(initparam$winconst),as.double(initparam$winstp),as.double(initparam$winconst_t),as.double(initparam$winstp_t),#
      as.integer(initparam$weighted),c(t(X)),ns=as.integer(initparam$ns),NS=as.integer(NS),PACKAGE='GeoModels',DUP=TRUE,NAOK=TRUE)#
# str(GD)#
#
GD$score;GD$sensmat;GD$varimat
coordx_dyn
ss1
GD=.C('GodambeMat',as.double(mm),as.integer(initparam$bivariate),as.double(initparam$coordx),as.double(initparam$coordy),#
      as.double(initparam$coordt),as.integer(initparam$corrmodel), as.double(initparam$data),as.integer(initparam$distance),as.double(eps),#
      as.integer(initparam$flagcorr), as.integer(initparam$flagnuis),as.integer(grid),as.integer(initparam$likelihood),#
      as.double(c(X%*%mm)),as.integer(initparam$model),as.double(initparam$n),as.integer(num_betas),#
      as.integer(initparam$numparam),as.integer(initparam$numparamcorr),as.integer(length(paramcorr)),as.double(paramcorr),as.double(nuisance),#
      score=score,sensmat=sensmat,as.integer(initparam$spacetime),as.integer(initparam$type),#
      varimat=varimat,as.integer(initparam$vartype),as.double(initparam$winconst),as.double(initparam$winstp),as.double(initparam$winconst_t),as.double(initparam$winstp_t),#
      as.integer(initparam$weighted),c(t(X)),ns=as.integer(initparam$ns),NS=as.integer(NS),PACKAGE='GeoModels',DUP=TRUE,NAOK=TRUE)#
# str(GD)#
#
GD$score;GD$sensmat;GD$varimat
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="Gaussian";shape=4;n=1#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,1)# con 9 funciona,  con 8 explota#
coordx_dyn=list()#
#
# maxN=130#130#
# set.seed(112)#
# for(k in 1:length(coordt))#
# {#
#   NN=sample(1:maxN,size=1)#
#   print(NN)#
#   x <- runif(NN, 0, 1)#
#   y <- runif(NN, 0, 1)#
#   coordx_dyn[[k]]=cbind(x,y)#
# }#
#
maxN=10#130#
set.seed(10)#
for(k in 1:length(coordt))#
{#
  NN=sample(2:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
# coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 0.1#
sill <- 1#
nugget <- 0#
scale_s <- .3#
scale_t <- .3#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget, sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,mean = mean )#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxtime=2;maxdist=0.2#
# fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
#                corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
#                likelihood="Marginal",type="Pairwise",#
#                start=start,fixed=fixed,model = model,varest = TRUE)#
# print(fit1)#
# fit1$param#
score <- sensmat <- varcov <- varimat <- parscale <- NULL#
### Initialization parameters:#
initparam <- WlsStart(coordx=NULL, coordy=NULL, coordt=coordt, coordx_dyn=coordx_dyn, corrmodel, data=ss1, distance="Eucl", "Fitting", fixed=fixed, grid=FALSE,#10#
                      likelihood='Marginal', maxdist=maxdist, maxtime=maxtime,  model=model, n=1, NULL,#16#
                      parscale, optimizer=='L-BFGS-B', radius=6378.388, start=start, taper=NULL, tapsep=NULL,#22#
                      type="Pairwise", varest=TRUE, vartype='SubSamp', weighted=FALSE, winconst=NULL, winstp=NULL,winconst_t=NULL, winstp_t=NULL, X=NULL)#31#
numcoord=length(initparam$coordx);numtime=1;spacetime_dyn=FALSE#
if(initparam$spacetime) numtime=length(initparam$coordt)#
if(initparam$bivariate) numtime=2#
if(!is.null(coordx_dyn)) spacetime_dyn=TRUE#
dimat <- numcoord*numtime##
NS=cumsum(initparam$ns)#
if(is.null(dim(initparam$X)))#
{#
  X=as.matrix(rep(1,dimat))#
  if((initparam$spacetime||initparam$bivariate)&& spacetime_dyn)  X=as.matrix(rep(1,NS[numtime]))#
}#
num_betas=ncol(X) #
grid = FALSE#
if(grid)    #
{a=expand.grid(initparam$coordx,initparam$coordy);coordx=a[,1];coordy=a[,2]; #
}else {#
  if((initparam$spacetime||initparam$bivariate)&&(!spacetime_dyn)){#
    data=c(t(data))#
    coordx=rep(coordx,numtime);coordy=rep(coordy,numtime)#
  }#
  if((initparam$spacetime||initparam$bivariate)&&(spacetime_dyn)) initparam$data=unlist(initparam$data)          #
}#
if(initparam$spacetime||initparam$bivariate)   NS=c(0,NS)[-(length(initparam$ns)+1)]#
initparam$fixed#
#
dimmat <- initparam$numparam^2#
dmat <- initparam$numparam*(initparam$numparam+1)/2#
eps <- (.Machine$double.eps)^(1/3)#
param <- c(initparam$param, initparam$fixed)#
score <- double(initparam$numparam)#
paramcorr <- param[initparam$namescorr]#
nuisance <- param[initparam$namesnuis]#
sel=substr(names(nuisance),1,4)=="mean"#
mm=as.numeric(nuisance[sel])   ## mean paramteres#
other_nuis=as.numeric(nuisance[!sel]) #
nuisance=c(mm,other_nuis)#
sensmat <- double(dmat);varimat <- double(dmat)#
GD=.C('GodambeMat',as.double(mm),as.integer(initparam$bivariate),as.double(initparam$coordx),as.double(initparam$coordy),#
      as.double(initparam$coordt),as.integer(initparam$corrmodel), as.double(initparam$data),as.integer(initparam$distance),as.double(eps),#
      as.integer(initparam$flagcorr), as.integer(initparam$flagnuis),as.integer(grid),as.integer(initparam$likelihood),#
      as.double(c(X%*%mm)),as.integer(initparam$model),as.double(initparam$n),as.integer(num_betas),#
      as.integer(initparam$numparam),as.integer(initparam$numparamcorr),as.integer(length(paramcorr)),as.double(paramcorr),as.double(nuisance),#
      score=score,sensmat=sensmat,as.integer(initparam$spacetime),as.integer(initparam$type),#
      varimat=varimat,as.integer(initparam$vartype),as.double(initparam$winconst),as.double(initparam$winstp),as.double(initparam$winconst_t),as.double(initparam$winstp_t),#
      as.integer(initparam$weighted),c(t(X)),ns=as.integer(initparam$ns),NS=as.integer(NS),PACKAGE='GeoModels',DUP=TRUE,NAOK=TRUE)#
# str(GD)#
#
GD$score;GD$sensmat;GD$varimat
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="Gaussian";shape=4;n=1#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,2)# con 9 funciona,  con 8 explota#
coordx_dyn=list()#
#
# maxN=130#130#
# set.seed(112)#
# for(k in 1:length(coordt))#
# {#
#   NN=sample(1:maxN,size=1)#
#   print(NN)#
#   x <- runif(NN, 0, 1)#
#   y <- runif(NN, 0, 1)#
#   coordx_dyn[[k]]=cbind(x,y)#
# }#
#
maxN=10#130#
set.seed(10)#
for(k in 1:length(coordt))#
{#
  NN=sample(2:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
# coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 0.1#
sill <- 1#
nugget <- 0#
scale_s <- .3#
scale_t <- .3#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget, sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,mean = mean )#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxtime=2;maxdist=0.2#
# fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
#                corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
#                likelihood="Marginal",type="Pairwise",#
#                start=start,fixed=fixed,model = model,varest = TRUE)#
# print(fit1)#
# fit1$param#
score <- sensmat <- varcov <- varimat <- parscale <- NULL#
### Initialization parameters:#
initparam <- WlsStart(coordx=NULL, coordy=NULL, coordt=coordt, coordx_dyn=coordx_dyn, corrmodel, data=ss1, distance="Eucl", "Fitting", fixed=fixed, grid=FALSE,#10#
                      likelihood='Marginal', maxdist=maxdist, maxtime=maxtime,  model=model, n=1, NULL,#16#
                      parscale, optimizer=='L-BFGS-B', radius=6378.388, start=start, taper=NULL, tapsep=NULL,#22#
                      type="Pairwise", varest=TRUE, vartype='SubSamp', weighted=FALSE, winconst=NULL, winstp=NULL,winconst_t=NULL, winstp_t=NULL, X=NULL)#31#
numcoord=length(initparam$coordx);numtime=1;spacetime_dyn=FALSE#
if(initparam$spacetime) numtime=length(initparam$coordt)#
if(initparam$bivariate) numtime=2#
if(!is.null(coordx_dyn)) spacetime_dyn=TRUE#
dimat <- numcoord*numtime##
NS=cumsum(initparam$ns)#
if(is.null(dim(initparam$X)))#
{#
  X=as.matrix(rep(1,dimat))#
  if((initparam$spacetime||initparam$bivariate)&& spacetime_dyn)  X=as.matrix(rep(1,NS[numtime]))#
}#
num_betas=ncol(X) #
grid = FALSE#
if(grid)    #
{a=expand.grid(initparam$coordx,initparam$coordy);coordx=a[,1];coordy=a[,2]; #
}else {#
  if((initparam$spacetime||initparam$bivariate)&&(!spacetime_dyn)){#
    data=c(t(data))#
    coordx=rep(coordx,numtime);coordy=rep(coordy,numtime)#
  }#
  if((initparam$spacetime||initparam$bivariate)&&(spacetime_dyn)) initparam$data=unlist(initparam$data)          #
}#
if(initparam$spacetime||initparam$bivariate)   NS=c(0,NS)[-(length(initparam$ns)+1)]#
initparam$fixed#
#
dimmat <- initparam$numparam^2#
dmat <- initparam$numparam*(initparam$numparam+1)/2#
eps <- (.Machine$double.eps)^(1/3)#
param <- c(initparam$param, initparam$fixed)#
score <- double(initparam$numparam)#
paramcorr <- param[initparam$namescorr]#
nuisance <- param[initparam$namesnuis]#
sel=substr(names(nuisance),1,4)=="mean"#
mm=as.numeric(nuisance[sel])   ## mean paramteres#
other_nuis=as.numeric(nuisance[!sel]) #
nuisance=c(mm,other_nuis)#
sensmat <- double(dmat);varimat <- double(dmat)#
GD=.C('GodambeMat',as.double(mm),as.integer(initparam$bivariate),as.double(initparam$coordx),as.double(initparam$coordy),#
      as.double(initparam$coordt),as.integer(initparam$corrmodel), as.double(initparam$data),as.integer(initparam$distance),as.double(eps),#
      as.integer(initparam$flagcorr), as.integer(initparam$flagnuis),as.integer(grid),as.integer(initparam$likelihood),#
      as.double(c(X%*%mm)),as.integer(initparam$model),as.double(initparam$n),as.integer(num_betas),#
      as.integer(initparam$numparam),as.integer(initparam$numparamcorr),as.integer(length(paramcorr)),as.double(paramcorr),as.double(nuisance),#
      score=score,sensmat=sensmat,as.integer(initparam$spacetime),as.integer(initparam$type),#
      varimat=varimat,as.integer(initparam$vartype),as.double(initparam$winconst),as.double(initparam$winstp),as.double(initparam$winconst_t),as.double(initparam$winstp_t),#
      as.integer(initparam$weighted),c(t(X)),ns=as.integer(initparam$ns),NS=as.integer(NS),PACKAGE='GeoModels',DUP=TRUE,NAOK=TRUE)#
# str(GD)#
#
GD$score;GD$sensmat;GD$varimat
coordx_dyn
NS
#================================= Comp_Pair_Gauss_st2 (SPACE-TIME)#
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="Gaussian";shape=4;n=1#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,2)# con 9 funciona,  con 8 explota#
coordx_dyn=list()#
#
# maxN=130#130#
# set.seed(112)#
# for(k in 1:length(coordt))#
# {#
#   NN=sample(1:maxN,size=1)#
#   print(NN)#
#   x <- runif(NN, 0, 1)#
#   y <- runif(NN, 0, 1)#
#   coordx_dyn[[k]]=cbind(x,y)#
# }#
#
maxN=10#130#
set.seed(10)#
for(k in 1:length(coordt))#
{#
  NN=sample(2:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
# coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 0.1#
sill <- 1#
nugget <- 0#
scale_s <- .3#
scale_t <- .3#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget, sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,mean = mean )#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxtime=2;maxdist=0.2#
# fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
#                corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
#                likelihood="Marginal",type="Pairwise",#
#                start=start,fixed=fixed,model = model,varest = TRUE)#
# print(fit1)#
# fit1$param#
score <- sensmat <- varcov <- varimat <- parscale <- NULL#
### Initialization parameters:#
initparam <- WlsStart(coordx=NULL, coordy=NULL, coordt=coordt, coordx_dyn=coordx_dyn, corrmodel, data=ss1, distance="Eucl", "Fitting", fixed=fixed, grid=FALSE,#10#
                      likelihood='Marginal', maxdist=maxdist, maxtime=maxtime,  model=model, n=1, NULL,#16#
                      parscale, optimizer=='L-BFGS-B', radius=6378.388, start=start, taper=NULL, tapsep=NULL,#22#
                      type="Pairwise", varest=TRUE, vartype='SubSamp', weighted=FALSE, winconst=NULL, winstp=NULL,winconst_t=NULL, winstp_t=NULL, X=NULL)#31#
numcoord=length(initparam$coordx);numtime=1;spacetime_dyn=FALSE#
if(initparam$spacetime) numtime=length(initparam$coordt)#
if(initparam$bivariate) numtime=2#
if(!is.null(coordx_dyn)) spacetime_dyn=TRUE#
dimat <- numcoord*numtime##
NS=cumsum(initparam$ns)#
if(is.null(dim(initparam$X)))#
{#
  X=as.matrix(rep(1,dimat))#
  if((initparam$spacetime||initparam$bivariate)&& spacetime_dyn)  X=as.matrix(rep(1,NS[numtime]))#
}#
num_betas=ncol(X) #
grid = FALSE#
if(grid)    #
{a=expand.grid(initparam$coordx,initparam$coordy);coordx=a[,1];coordy=a[,2]; #
}else {#
  if((initparam$spacetime||initparam$bivariate)&&(!spacetime_dyn)){#
    data=c(t(data))#
    coordx=rep(coordx,numtime);coordy=rep(coordy,numtime)#
  }#
  if((initparam$spacetime||initparam$bivariate)&&(spacetime_dyn)) initparam$data=unlist(initparam$data)          #
}#
if(initparam$spacetime||initparam$bivariate)   NS=c(0,NS)[-(length(initparam$ns)+1)]#
initparam$fixed#
#
dimmat <- initparam$numparam^2#
dmat <- initparam$numparam*(initparam$numparam+1)/2#
eps <- (.Machine$double.eps)^(1/3)#
param <- c(initparam$param, initparam$fixed)#
score <- double(initparam$numparam)#
paramcorr <- param[initparam$namescorr]#
nuisance <- param[initparam$namesnuis]#
sel=substr(names(nuisance),1,4)=="mean"#
mm=as.numeric(nuisance[sel])   ## mean paramteres#
other_nuis=as.numeric(nuisance[!sel]) #
nuisance=c(mm,other_nuis)#
sensmat <- double(dmat);varimat <- double(dmat)#
GD=.C('GodambeMat',as.double(mm),as.integer(initparam$bivariate),as.double(initparam$coordx),as.double(initparam$coordy),#
      as.double(initparam$coordt),as.integer(initparam$corrmodel), as.double(initparam$data),as.integer(initparam$distance),as.double(eps),#
      as.integer(initparam$flagcorr), as.integer(initparam$flagnuis),as.integer(grid),as.integer(initparam$likelihood),#
      as.double(c(X%*%mm)),as.integer(initparam$model),as.double(initparam$n),as.integer(num_betas),#
      as.integer(initparam$numparam),as.integer(initparam$numparamcorr),as.integer(length(paramcorr)),as.double(paramcorr),as.double(nuisance),#
      score=score,sensmat=sensmat,as.integer(initparam$spacetime),as.integer(initparam$type),#
      varimat=varimat,as.integer(initparam$vartype),as.double(initparam$winconst),as.double(initparam$winstp),as.double(initparam$winconst_t),as.double(initparam$winstp_t),#
      as.integer(initparam$weighted),c(t(X)),ns=as.integer(initparam$ns),NS=as.integer(NS),PACKAGE='GeoModels',DUP=TRUE,NAOK=TRUE)#
# str(GD)#
#
GD$score;GD$sensmat;GD$varimat
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="Gaussian";shape=4;n=1#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,2)# con 9 funciona,  con 8 explota#
coordx_dyn=list()#
#
# maxN=130#130#
# set.seed(112)#
# for(k in 1:length(coordt))#
# {#
#   NN=sample(1:maxN,size=1)#
#   print(NN)#
#   x <- runif(NN, 0, 1)#
#   y <- runif(NN, 0, 1)#
#   coordx_dyn[[k]]=cbind(x,y)#
# }#
#
maxN=10#130#
set.seed(10)#
for(k in 1:length(coordt))#
{#
  NN=sample(2:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
# coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 0.1#
sill <- 1#
nugget <- 0#
scale_s <- .3#
scale_t <- .3#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget, sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,mean = mean )#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxtime=2;maxdist=0.2#
# fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
#                corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
#                likelihood="Marginal",type="Pairwise",#
#                start=start,fixed=fixed,model = model,varest = TRUE)#
# print(fit1)#
# fit1$param#
score <- sensmat <- varcov <- varimat <- parscale <- NULL#
### Initialization parameters:#
initparam <- WlsStart(coordx=NULL, coordy=NULL, coordt=coordt, coordx_dyn=coordx_dyn, corrmodel, data=ss1, distance="Eucl", "Fitting", fixed=fixed, grid=FALSE,#10#
                      likelihood='Marginal', maxdist=maxdist, maxtime=maxtime,  model=model, n=1, NULL,#16#
                      parscale, optimizer=='L-BFGS-B', radius=6378.388, start=start, taper=NULL, tapsep=NULL,#22#
                      type="Pairwise", varest=TRUE, vartype='SubSamp', weighted=FALSE, winconst=NULL, winstp=NULL,winconst_t=NULL, winstp_t=NULL, X=NULL)#31#
numcoord=length(initparam$coordx);numtime=1;spacetime_dyn=FALSE#
if(initparam$spacetime) numtime=length(initparam$coordt)#
if(initparam$bivariate) numtime=2#
if(!is.null(coordx_dyn)) spacetime_dyn=TRUE#
dimat <- numcoord*numtime##
NS=cumsum(initparam$ns)#
if(is.null(dim(initparam$X)))#
{#
  X=as.matrix(rep(1,dimat))#
  if((initparam$spacetime||initparam$bivariate)&& spacetime_dyn)  X=as.matrix(rep(1,NS[numtime]))#
}#
num_betas=ncol(X) #
grid = FALSE#
if(grid)    #
{a=expand.grid(initparam$coordx,initparam$coordy);coordx=a[,1];coordy=a[,2]; #
}else {#
  if((initparam$spacetime||initparam$bivariate)&&(!spacetime_dyn)){#
    data=c(t(data))#
    coordx=rep(coordx,numtime);coordy=rep(coordy,numtime)#
  }#
  if((initparam$spacetime||initparam$bivariate)&&(spacetime_dyn)) initparam$data=unlist(initparam$data)          #
}#
if(initparam$spacetime||initparam$bivariate)   NS=c(0,NS)[-(length(initparam$ns)+1)]#
initparam$fixed#
#
dimmat <- initparam$numparam^2#
dmat <- initparam$numparam*(initparam$numparam+1)/2#
eps <- (.Machine$double.eps)^(1/3)#
param <- c(initparam$param, initparam$fixed)#
score <- double(initparam$numparam)#
paramcorr <- param[initparam$namescorr]#
nuisance <- param[initparam$namesnuis]#
sel=substr(names(nuisance),1,4)=="mean"#
mm=as.numeric(nuisance[sel])   ## mean paramteres#
other_nuis=as.numeric(nuisance[!sel]) #
nuisance=c(mm,other_nuis)#
sensmat <- double(dmat);varimat <- double(dmat)#
GD=.C('GodambeMat',as.double(mm),as.integer(initparam$bivariate),as.double(initparam$coordx),as.double(initparam$coordy),#
      as.double(initparam$coordt),as.integer(initparam$corrmodel), as.double(initparam$data),as.integer(initparam$distance),as.double(eps),#
      as.integer(initparam$flagcorr), as.integer(initparam$flagnuis),as.integer(grid),as.integer(initparam$likelihood),#
      as.double(c(X%*%mm)),as.integer(initparam$model),as.double(initparam$n),as.integer(num_betas),#
      as.integer(initparam$numparam),as.integer(initparam$numparamcorr),as.integer(length(paramcorr)),as.double(paramcorr),as.double(nuisance),#
      score=score,sensmat=sensmat,as.integer(initparam$spacetime),as.integer(initparam$type),#
      varimat=varimat,as.integer(initparam$vartype),as.double(initparam$winconst),as.double(initparam$winstp),as.double(initparam$winconst_t),as.double(initparam$winstp_t),#
      as.integer(initparam$weighted),c(t(X)),ns=as.integer(initparam$ns),NS=as.integer(NS),PACKAGE='GeoModels',DUP=TRUE,NAOK=TRUE)#
# str(GD)#
#
GD$score;GD$sensmat;GD$varimat
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="Gaussian";shape=4;n=1#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,2)# con 9 funciona,  con 8 explota#
coordx_dyn=list()#
#
# maxN=130#130#
# set.seed(112)#
# for(k in 1:length(coordt))#
# {#
#   NN=sample(1:maxN,size=1)#
#   print(NN)#
#   x <- runif(NN, 0, 1)#
#   y <- runif(NN, 0, 1)#
#   coordx_dyn[[k]]=cbind(x,y)#
# }#
#
maxN=10#130#
set.seed(10)#
for(k in 1:length(coordt))#
{#
  NN=sample(2:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
# coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 0.1#
sill <- 1#
nugget <- 0#
scale_s <- .3#
scale_t <- .3#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget, sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,mean = mean )#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxtime=2;maxdist=0.2#
# fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
#                corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
#                likelihood="Marginal",type="Pairwise",#
#                start=start,fixed=fixed,model = model,varest = TRUE)#
# print(fit1)#
# fit1$param#
score <- sensmat <- varcov <- varimat <- parscale <- NULL#
### Initialization parameters:#
initparam <- WlsStart(coordx=NULL, coordy=NULL, coordt=coordt, coordx_dyn=coordx_dyn, corrmodel, data=ss1, distance="Eucl", "Fitting", fixed=fixed, grid=FALSE,#10#
                      likelihood='Marginal', maxdist=maxdist, maxtime=maxtime,  model=model, n=1, NULL,#16#
                      parscale, optimizer=='L-BFGS-B', radius=6378.388, start=start, taper=NULL, tapsep=NULL,#22#
                      type="Pairwise", varest=TRUE, vartype='SubSamp', weighted=FALSE, winconst=NULL, winstp=NULL,winconst_t=NULL, winstp_t=NULL, X=NULL)#31#
numcoord=length(initparam$coordx);numtime=1;spacetime_dyn=FALSE#
if(initparam$spacetime) numtime=length(initparam$coordt)#
if(initparam$bivariate) numtime=2#
if(!is.null(coordx_dyn)) spacetime_dyn=TRUE#
dimat <- numcoord*numtime##
NS=cumsum(initparam$ns)#
if(is.null(dim(initparam$X)))#
{#
  X=as.matrix(rep(1,dimat))#
  if((initparam$spacetime||initparam$bivariate)&& spacetime_dyn)  X=as.matrix(rep(1,NS[numtime]))#
}#
num_betas=ncol(X) #
grid = FALSE#
if(grid)    #
{a=expand.grid(initparam$coordx,initparam$coordy);coordx=a[,1];coordy=a[,2]; #
}else {#
  if((initparam$spacetime||initparam$bivariate)&&(!spacetime_dyn)){#
    data=c(t(data))#
    coordx=rep(coordx,numtime);coordy=rep(coordy,numtime)#
  }#
  if((initparam$spacetime||initparam$bivariate)&&(spacetime_dyn)) initparam$data=unlist(initparam$data)          #
}#
if(initparam$spacetime||initparam$bivariate)   NS=c(0,NS)[-(length(initparam$ns)+1)]#
initparam$fixed#
#
dimmat <- initparam$numparam^2#
dmat <- initparam$numparam*(initparam$numparam+1)/2#
eps <- (.Machine$double.eps)^(1/3)#
param <- c(initparam$param, initparam$fixed)#
score <- double(initparam$numparam)#
paramcorr <- param[initparam$namescorr]#
nuisance <- param[initparam$namesnuis]#
sel=substr(names(nuisance),1,4)=="mean"#
mm=as.numeric(nuisance[sel])   ## mean paramteres#
other_nuis=as.numeric(nuisance[!sel]) #
nuisance=c(mm,other_nuis)#
sensmat <- double(dmat);varimat <- double(dmat)#
GD=.C('GodambeMat',as.double(mm),as.integer(initparam$bivariate),as.double(initparam$coordx),as.double(initparam$coordy),#
      as.double(initparam$coordt),as.integer(initparam$corrmodel), as.double(initparam$data),as.integer(initparam$distance),as.double(eps),#
      as.integer(initparam$flagcorr), as.integer(initparam$flagnuis),as.integer(grid),as.integer(initparam$likelihood),#
      as.double(c(X%*%mm)),as.integer(initparam$model),as.double(initparam$n),as.integer(num_betas),#
      as.integer(initparam$numparam),as.integer(initparam$numparamcorr),as.integer(length(paramcorr)),as.double(paramcorr),as.double(nuisance),#
      score=score,sensmat=sensmat,as.integer(initparam$spacetime),as.integer(initparam$type),#
      varimat=varimat,as.integer(initparam$vartype),as.double(initparam$winconst),as.double(initparam$winstp),as.double(initparam$winconst_t),as.double(initparam$winstp_t),#
      as.integer(initparam$weighted),c(t(X)),ns=as.integer(initparam$ns),NS=as.integer(NS),PACKAGE='GeoModels',DUP=TRUE,NAOK=TRUE)
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="Gaussian";shape=4;n=1#
#
# Define the spatial-coordinates of the points:#
coordt=seq(1,3)# con 9 funciona,  con 8 explota#
coordx_dyn=list()#
#
# maxN=130#130#
# set.seed(112)#
# for(k in 1:length(coordt))#
# {#
#   NN=sample(1:maxN,size=1)#
#   print(NN)#
#   x <- runif(NN, 0, 1)#
#   y <- runif(NN, 0, 1)#
#   coordx_dyn[[k]]=cbind(x,y)#
# }#
#
maxN=10#130#
set.seed(10)#
for(k in 1:length(coordt))#
{#
  NN=sample(2:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
# coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 0.1#
sill <- 1#
nugget <- 0#
scale_s <- .3#
scale_t <- .3#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget, sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,mean = mean )#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxtime=2;maxdist=0.2#
# fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
#                corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
#                likelihood="Marginal",type="Pairwise",#
#                start=start,fixed=fixed,model = model,varest = TRUE)#
# print(fit1)#
# fit1$param#
score <- sensmat <- varcov <- varimat <- parscale <- NULL#
### Initialization parameters:#
initparam <- WlsStart(coordx=NULL, coordy=NULL, coordt=coordt, coordx_dyn=coordx_dyn, corrmodel, data=ss1, distance="Eucl", "Fitting", fixed=fixed, grid=FALSE,#10#
                      likelihood='Marginal', maxdist=maxdist, maxtime=maxtime,  model=model, n=1, NULL,#16#
                      parscale, optimizer=='L-BFGS-B', radius=6378.388, start=start, taper=NULL, tapsep=NULL,#22#
                      type="Pairwise", varest=TRUE, vartype='SubSamp', weighted=FALSE, winconst=NULL, winstp=NULL,winconst_t=NULL, winstp_t=NULL, X=NULL)#31#
numcoord=length(initparam$coordx);numtime=1;spacetime_dyn=FALSE#
if(initparam$spacetime) numtime=length(initparam$coordt)#
if(initparam$bivariate) numtime=2#
if(!is.null(coordx_dyn)) spacetime_dyn=TRUE#
dimat <- numcoord*numtime##
NS=cumsum(initparam$ns)#
if(is.null(dim(initparam$X)))#
{#
  X=as.matrix(rep(1,dimat))#
  if((initparam$spacetime||initparam$bivariate)&& spacetime_dyn)  X=as.matrix(rep(1,NS[numtime]))#
}#
num_betas=ncol(X) #
grid = FALSE#
if(grid)    #
{a=expand.grid(initparam$coordx,initparam$coordy);coordx=a[,1];coordy=a[,2]; #
}else {#
  if((initparam$spacetime||initparam$bivariate)&&(!spacetime_dyn)){#
    data=c(t(data))#
    coordx=rep(coordx,numtime);coordy=rep(coordy,numtime)#
  }#
  if((initparam$spacetime||initparam$bivariate)&&(spacetime_dyn)) initparam$data=unlist(initparam$data)          #
}#
if(initparam$spacetime||initparam$bivariate)   NS=c(0,NS)[-(length(initparam$ns)+1)]#
initparam$fixed#
#
dimmat <- initparam$numparam^2#
dmat <- initparam$numparam*(initparam$numparam+1)/2#
eps <- (.Machine$double.eps)^(1/3)#
param <- c(initparam$param, initparam$fixed)#
score <- double(initparam$numparam)#
paramcorr <- param[initparam$namescorr]#
nuisance <- param[initparam$namesnuis]#
sel=substr(names(nuisance),1,4)=="mean"#
mm=as.numeric(nuisance[sel])   ## mean paramteres#
other_nuis=as.numeric(nuisance[!sel]) #
nuisance=c(mm,other_nuis)#
sensmat <- double(dmat);varimat <- double(dmat)#
GD=.C('GodambeMat',as.double(mm),as.integer(initparam$bivariate),as.double(initparam$coordx),as.double(initparam$coordy),#
      as.double(initparam$coordt),as.integer(initparam$corrmodel), as.double(initparam$data),as.integer(initparam$distance),as.double(eps),#
      as.integer(initparam$flagcorr), as.integer(initparam$flagnuis),as.integer(grid),as.integer(initparam$likelihood),#
      as.double(c(X%*%mm)),as.integer(initparam$model),as.double(initparam$n),as.integer(num_betas),#
      as.integer(initparam$numparam),as.integer(initparam$numparamcorr),as.integer(length(paramcorr)),as.double(paramcorr),as.double(nuisance),#
      score=score,sensmat=sensmat,as.integer(initparam$spacetime),as.integer(initparam$type),#
      varimat=varimat,as.integer(initparam$vartype),as.double(initparam$winconst),as.double(initparam$winstp),as.double(initparam$winconst_t),as.double(initparam$winstp_t),#
      as.integer(initparam$weighted),c(t(X)),ns=as.integer(initparam$ns),NS=as.integer(NS),PACKAGE='GeoModels',DUP=TRUE,NAOK=TRUE)
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="Gaussian";shape=4;n=1#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,2)# con 9 funciona,  con 8 explota#
coordx_dyn=list()#
#
# maxN=130#130#
# set.seed(112)#
# for(k in 1:length(coordt))#
# {#
#   NN=sample(1:maxN,size=1)#
#   print(NN)#
#   x <- runif(NN, 0, 1)#
#   y <- runif(NN, 0, 1)#
#   coordx_dyn[[k]]=cbind(x,y)#
# }#
#
maxN=10#130#
set.seed(10)#
for(k in 1:length(coordt))#
{#
  NN=sample(2:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
# coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 0.1#
sill <- 1#
nugget <- 0#
scale_s <- .3#
scale_t <- .3#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget, sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,mean = mean )#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxtime=2;maxdist=0.2#
# fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
#                corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
#                likelihood="Marginal",type="Pairwise",#
#                start=start,fixed=fixed,model = model,varest = TRUE)#
# print(fit1)#
# fit1$param#
score <- sensmat <- varcov <- varimat <- parscale <- NULL#
### Initialization parameters:#
initparam <- WlsStart(coordx=NULL, coordy=NULL, coordt=coordt, coordx_dyn=coordx_dyn, corrmodel, data=ss1, distance="Eucl", "Fitting", fixed=fixed, grid=FALSE,#10#
                      likelihood='Marginal', maxdist=maxdist, maxtime=maxtime,  model=model, n=1, NULL,#16#
                      parscale, optimizer=='L-BFGS-B', radius=6378.388, start=start, taper=NULL, tapsep=NULL,#22#
                      type="Pairwise", varest=TRUE, vartype='SubSamp', weighted=FALSE, winconst=NULL, winstp=NULL,winconst_t=NULL, winstp_t=NULL, X=NULL)#31#
numcoord=length(initparam$coordx);numtime=1;spacetime_dyn=FALSE#
if(initparam$spacetime) numtime=length(initparam$coordt)#
if(initparam$bivariate) numtime=2#
if(!is.null(coordx_dyn)) spacetime_dyn=TRUE#
dimat <- numcoord*numtime##
NS=cumsum(initparam$ns)#
if(is.null(dim(initparam$X)))#
{#
  X=as.matrix(rep(1,dimat))#
  if((initparam$spacetime||initparam$bivariate)&& spacetime_dyn)  X=as.matrix(rep(1,NS[numtime]))#
}#
num_betas=ncol(X) #
grid = FALSE#
if(grid)    #
{a=expand.grid(initparam$coordx,initparam$coordy);coordx=a[,1];coordy=a[,2]; #
}else {#
  if((initparam$spacetime||initparam$bivariate)&&(!spacetime_dyn)){#
    data=c(t(data))#
    coordx=rep(coordx,numtime);coordy=rep(coordy,numtime)#
  }#
  if((initparam$spacetime||initparam$bivariate)&&(spacetime_dyn)) initparam$data=unlist(initparam$data)          #
}#
if(initparam$spacetime||initparam$bivariate)   NS=c(0,NS)[-(length(initparam$ns)+1)]#
initparam$fixed#
#
dimmat <- initparam$numparam^2#
dmat <- initparam$numparam*(initparam$numparam+1)/2#
eps <- (.Machine$double.eps)^(1/3)#
param <- c(initparam$param, initparam$fixed)#
score <- double(initparam$numparam)#
paramcorr <- param[initparam$namescorr]#
nuisance <- param[initparam$namesnuis]#
sel=substr(names(nuisance),1,4)=="mean"#
mm=as.numeric(nuisance[sel])   ## mean paramteres#
other_nuis=as.numeric(nuisance[!sel]) #
nuisance=c(mm,other_nuis)#
sensmat <- double(dmat);varimat <- double(dmat)#
GD=.C('GodambeMat',as.double(mm),as.integer(initparam$bivariate),as.double(initparam$coordx),as.double(initparam$coordy),#
      as.double(initparam$coordt),as.integer(initparam$corrmodel), as.double(initparam$data),as.integer(initparam$distance),as.double(eps),#
      as.integer(initparam$flagcorr), as.integer(initparam$flagnuis),as.integer(grid),as.integer(initparam$likelihood),#
      as.double(c(X%*%mm)),as.integer(initparam$model),as.double(initparam$n),as.integer(num_betas),#
      as.integer(initparam$numparam),as.integer(initparam$numparamcorr),as.integer(length(paramcorr)),as.double(paramcorr),as.double(nuisance),#
      score=score,sensmat=sensmat,as.integer(initparam$spacetime),as.integer(initparam$type),#
      varimat=varimat,as.integer(initparam$vartype),as.double(initparam$winconst),as.double(initparam$winstp),as.double(initparam$winconst_t),as.double(initparam$winstp_t),#
      as.integer(initparam$weighted),c(t(X)),ns=as.integer(initparam$ns),NS=as.integer(NS),PACKAGE='GeoModels',DUP=TRUE,NAOK=TRUE)
ns
NS
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="Gaussian";shape=4;n=1#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,2)# con 9 funciona,  con 8 explota#
coordx_dyn=list()#
#
# maxN=130#130#
# set.seed(112)#
# for(k in 1:length(coordt))#
# {#
#   NN=sample(1:maxN,size=1)#
#   print(NN)#
#   x <- runif(NN, 0, 1)#
#   y <- runif(NN, 0, 1)#
#   coordx_dyn[[k]]=cbind(x,y)#
# }#
#
maxN=10#130#
set.seed(10)#
for(k in 1:length(coordt))#
{#
  NN=sample(2:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
# coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 0.1#
sill <- 1#
nugget <- 0#
scale_s <- .3#
scale_t <- .3#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget, sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,mean = mean )#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxtime=2;maxdist=0.2#
# fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
#                corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
#                likelihood="Marginal",type="Pairwise",#
#                start=start,fixed=fixed,model = model,varest = TRUE)#
# print(fit1)#
# fit1$param#
score <- sensmat <- varcov <- varimat <- parscale <- NULL#
### Initialization parameters:#
initparam <- WlsStart(coordx=NULL, coordy=NULL, coordt=coordt, coordx_dyn=coordx_dyn, corrmodel, data=ss1, distance="Eucl", "Fitting", fixed=fixed, grid=FALSE,#10#
                      likelihood='Marginal', maxdist=maxdist, maxtime=maxtime,  model=model, n=1, NULL,#16#
                      parscale, optimizer=='L-BFGS-B', radius=6378.388, start=start, taper=NULL, tapsep=NULL,#22#
                      type="Pairwise", varest=TRUE, vartype='SubSamp', weighted=FALSE, winconst=NULL, winstp=NULL,winconst_t=NULL, winstp_t=NULL, X=NULL)#31#
numcoord=length(initparam$coordx);numtime=1;spacetime_dyn=FALSE#
if(initparam$spacetime) numtime=length(initparam$coordt)#
if(initparam$bivariate) numtime=2#
if(!is.null(coordx_dyn)) spacetime_dyn=TRUE#
dimat <- numcoord*numtime##
NS=cumsum(initparam$ns)#
if(is.null(dim(initparam$X)))#
{#
  X=as.matrix(rep(1,dimat))#
  if((initparam$spacetime||initparam$bivariate)&& spacetime_dyn)  X=as.matrix(rep(1,NS[numtime]))#
}#
num_betas=ncol(X) #
grid = FALSE#
if(grid)    #
{a=expand.grid(initparam$coordx,initparam$coordy);coordx=a[,1];coordy=a[,2]; #
}else {#
  if((initparam$spacetime||initparam$bivariate)&&(!spacetime_dyn)){#
    data=c(t(data))#
    coordx=rep(coordx,numtime);coordy=rep(coordy,numtime)#
  }#
  if((initparam$spacetime||initparam$bivariate)&&(spacetime_dyn)) initparam$data=unlist(initparam$data)          #
}#
if(initparam$spacetime||initparam$bivariate)   NS=c(0,NS)[-(length(initparam$ns)+1)]#
initparam$fixed#
#
dimmat <- initparam$numparam^2#
dmat <- initparam$numparam*(initparam$numparam+1)/2#
eps <- (.Machine$double.eps)^(1/3)#
param <- c(initparam$param, initparam$fixed)#
score <- double(initparam$numparam)#
paramcorr <- param[initparam$namescorr]#
nuisance <- param[initparam$namesnuis]#
sel=substr(names(nuisance),1,4)=="mean"#
mm=as.numeric(nuisance[sel])   ## mean paramteres#
other_nuis=as.numeric(nuisance[!sel]) #
nuisance=c(mm,other_nuis)#
sensmat <- double(dmat);varimat <- double(dmat)#
GD=.C('GodambeMat',as.double(mm),as.integer(initparam$bivariate),as.double(initparam$coordx),as.double(initparam$coordy),#
      as.double(initparam$coordt),as.integer(initparam$corrmodel), as.double(initparam$data),as.integer(initparam$distance),as.double(eps),#
      as.integer(initparam$flagcorr), as.integer(initparam$flagnuis),as.integer(grid),as.integer(initparam$likelihood),#
      as.double(c(X%*%mm)),as.integer(initparam$model),as.double(initparam$n),as.integer(num_betas),#
      as.integer(initparam$numparam),as.integer(initparam$numparamcorr),as.integer(length(paramcorr)),as.double(paramcorr),as.double(nuisance),#
      score=score,sensmat=sensmat,as.integer(initparam$spacetime),as.integer(initparam$type),#
      varimat=varimat,as.integer(initparam$vartype),as.double(initparam$winconst),as.double(initparam$winstp),as.double(initparam$winconst_t),as.double(initparam$winstp_t),#
      as.integer(initparam$weighted),c(t(X)),ns=as.integer(initparam$ns),NS=as.integer(NS),PACKAGE='GeoModels',DUP=TRUE,NAOK=TRUE)
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="Gaussian";shape=4;n=1#
set.seed(112)#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,2)# con 9 funciona,  con 8 explota#
#
N=5  # number of location sites#
x <- runif(N, 0, 1)#
# set.seed(5)#
y <- runif(N, 0, 1)#
coords <- cbind(x,y)#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 0.1#
sill <- 1#
nugget <- 0#
scale_s <- .3#
scale_t <- .3#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
fixed<-list(nugget=nugget, sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,mean = mean )#
set.seed(2)#
ss1 <- GeoSim(coordx=coords, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxtime=2;maxdist=0.1#
# fit1 <- GeoFit(data=ss1,coordx=coords,coordt=coordt,#
#                corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
#                likelihood="Marginal",type="Pairwise",#
#                start=start,fixed=fixed,model = model,varest = TRUE)#
# print(fit1)#
# fit1$param#
score <- sensmat <- varcov <- varimat <- parscale <- NULL#
### Initialization parameters:#
coordx_dyn = NULL#
initparam <- WlsStart(coordx=coords, coordy=NULL, coordt=coordt, coordx_dyn=coordx_dyn, corrmodel, data=ss1, distance="Eucl", "Fitting", fixed=fixed, grid=FALSE,#10#
                      likelihood='Marginal', maxdist=maxdist, maxtime=maxtime,  model=model, n=1, NULL,#16#
                      parscale, optimizer=='L-BFGS-B', radius=6378.388, start=start, taper=NULL, tapsep=NULL,#22#
                      type="Pairwise", varest=TRUE, vartype='SubSamp', weighted=FALSE, winconst=NULL, winstp=NULL,winconst_t=NULL, winstp_t=NULL, X=NULL)#31#
numcoord=length(initparam$coordx);numtime=1;spacetime_dyn=FALSE#
if(initparam$spacetime) numtime=length(initparam$coordt)#
if(initparam$bivariate) numtime=2#
if(!is.null(coordx_dyn)) spacetime_dyn=TRUE#
dimat <- numcoord*numtime##
NS=cumsum(initparam$ns)#
if(is.null(dim(initparam$X)))#
{#
  X=as.matrix(rep(1,dimat))#
  if((initparam$spacetime||initparam$bivariate)&& spacetime_dyn)  X=as.matrix(rep(1,NS[numtime]))#
}#
num_betas=ncol(X) #
grid = FALSE#
data=ss1#
if(grid)    #
{a=expand.grid(initparam$coordx,initparam$coordy);coordx=a[,1];coordy=a[,2]; #
}else {#
  if((initparam$spacetime||initparam$bivariate)&&(!spacetime_dyn)){#
    data=c(t(data))#
    coordx=rep(initparam$coordx,numtime);coordy=rep(initparam$coordy,numtime)#
  }#
  if((initparam$spacetime||initparam$bivariate)&&(spacetime_dyn)) initparam$data=unlist(initparam$data)          #
}#
if(initparam$spacetime||initparam$bivariate)   NS=c(0,NS)[-(length(initparam$ns)+1)]#
initparam$fixed#
#
dimmat <- initparam$numparam^2#
dmat <- initparam$numparam*(initparam$numparam+1)/2#
eps <- (.Machine$double.eps)^(1/3)#
param <- c(initparam$param, initparam$fixed)#
score <- double(initparam$numparam)#
paramcorr <- param[initparam$namescorr]#
nuisance <- param[initparam$namesnuis]#
sel=substr(names(nuisance),1,4)=="mean"#
mm=as.numeric(nuisance[sel])   ## mean paramteres#
other_nuis=as.numeric(nuisance[!sel]) #
nuisance=c(mm,other_nuis)#
sensmat <- double(dmat);varimat <- double(dmat)#
GD=.C('GodambeMat',as.double(mm),as.integer(initparam$bivariate),as.double(initparam$coordx),as.double(initparam$coordy),#
      as.double(initparam$coordt),as.integer(initparam$corrmodel), as.double(initparam$data),as.integer(initparam$distance),as.double(eps),#
      as.integer(initparam$flagcorr), as.integer(initparam$flagnuis),as.integer(grid),as.integer(initparam$likelihood),#
      as.double(c(X%*%mm)),as.integer(initparam$model),as.double(initparam$n),as.integer(num_betas),#
      as.integer(initparam$numparam),as.integer(initparam$numparamcorr),as.integer(length(paramcorr)),as.double(paramcorr),as.double(nuisance),#
      score=score,sensmat=sensmat,as.integer(initparam$spacetime),as.integer(initparam$type),#
      varimat=varimat,as.integer(initparam$vartype),as.double(initparam$winconst),as.double(initparam$winstp),as.double(initparam$winconst_t),as.double(initparam$winstp_t),#
      as.integer(initparam$weighted),c(t(X)),ns=as.integer(initparam$ns),NS=as.integer(NS),PACKAGE='GeoModels',DUP=TRUE,NAOK=TRUE)#
# str(GD)#
#
GD$score;GD$sensmat;GD$varimat
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="Gaussian";shape=4;n=1#
set.seed(112)#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,2)# con 9 funciona,  con 8 explota#
#
N=20  # number of location sites#
x <- runif(N, 0, 1)#
# set.seed(5)#
y <- runif(N, 0, 1)#
coords <- cbind(x,y)#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 0.1#
sill <- 1#
nugget <- 0#
scale_s <- .3#
scale_t <- .3#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
fixed<-list(nugget=nugget, sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,mean = mean )#
set.seed(2)#
ss1 <- GeoSim(coordx=coords, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxtime=2;maxdist=0.1#
# fit1 <- GeoFit(data=ss1,coordx=coords,coordt=coordt,#
#                corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
#                likelihood="Marginal",type="Pairwise",#
#                start=start,fixed=fixed,model = model,varest = TRUE)#
# print(fit1)#
# fit1$param#
score <- sensmat <- varcov <- varimat <- parscale <- NULL#
### Initialization parameters:#
coordx_dyn = NULL#
initparam <- WlsStart(coordx=coords, coordy=NULL, coordt=coordt, coordx_dyn=coordx_dyn, corrmodel, data=ss1, distance="Eucl", "Fitting", fixed=fixed, grid=FALSE,#10#
                      likelihood='Marginal', maxdist=maxdist, maxtime=maxtime,  model=model, n=1, NULL,#16#
                      parscale, optimizer=='L-BFGS-B', radius=6378.388, start=start, taper=NULL, tapsep=NULL,#22#
                      type="Pairwise", varest=TRUE, vartype='SubSamp', weighted=FALSE, winconst=NULL, winstp=NULL,winconst_t=NULL, winstp_t=NULL, X=NULL)#31#
numcoord=length(initparam$coordx);numtime=1;spacetime_dyn=FALSE#
if(initparam$spacetime) numtime=length(initparam$coordt)#
if(initparam$bivariate) numtime=2#
if(!is.null(coordx_dyn)) spacetime_dyn=TRUE#
dimat <- numcoord*numtime##
NS=cumsum(initparam$ns)#
if(is.null(dim(initparam$X)))#
{#
  X=as.matrix(rep(1,dimat))#
  if((initparam$spacetime||initparam$bivariate)&& spacetime_dyn)  X=as.matrix(rep(1,NS[numtime]))#
}#
num_betas=ncol(X) #
grid = FALSE#
data=ss1#
if(grid)    #
{a=expand.grid(initparam$coordx,initparam$coordy);coordx=a[,1];coordy=a[,2]; #
}else {#
  if((initparam$spacetime||initparam$bivariate)&&(!spacetime_dyn)){#
    if(varest ==TRUE)#
    {#
      data = as.vector(c(t(data)))#
    }else{data=c(t(data))}#
    coordx=rep(initparam$coordx,numtime);coordy=rep(initparam$coordy,numtime)#
  }#
  if((initparam$spacetime||initparam$bivariate)&&(spacetime_dyn)) initparam$data=unlist(initparam$data)          #
}#
if(initparam$spacetime||initparam$bivariate)   NS=c(0,NS)[-(length(initparam$ns)+1)]#
initparam$fixed#
#
dimmat <- initparam$numparam^2#
dmat <- initparam$numparam*(initparam$numparam+1)/2#
eps <- (.Machine$double.eps)^(1/3)#
param <- c(initparam$param, initparam$fixed)#
score <- double(initparam$numparam)#
paramcorr <- param[initparam$namescorr]#
nuisance <- param[initparam$namesnuis]#
sel=substr(names(nuisance),1,4)=="mean"#
mm=as.numeric(nuisance[sel])   ## mean paramteres#
other_nuis=as.numeric(nuisance[!sel]) #
nuisance=c(mm,other_nuis)#
sensmat <- double(dmat);varimat <- double(dmat)#
GD=.C('GodambeMat',as.double(mm),as.integer(initparam$bivariate),as.double(initparam$coordx),as.double(initparam$coordy),#
      as.double(initparam$coordt),as.integer(initparam$corrmodel), as.double(initparam$data),as.integer(initparam$distance),as.double(eps),#
      as.integer(initparam$flagcorr), as.integer(initparam$flagnuis),as.integer(grid),as.integer(initparam$likelihood),#
      as.double(c(X%*%mm)),as.integer(initparam$model),as.double(initparam$n),as.integer(num_betas),#
      as.integer(initparam$numparam),as.integer(initparam$numparamcorr),as.integer(length(paramcorr)),as.double(paramcorr),as.double(nuisance),#
      score=score,sensmat=sensmat,as.integer(initparam$spacetime),as.integer(initparam$type),#
      varimat=varimat,as.integer(initparam$vartype),as.double(initparam$winconst),as.double(initparam$winstp),as.double(initparam$winconst_t),as.double(initparam$winstp_t),#
      as.integer(initparam$weighted),c(t(X)),ns=as.integer(initparam$ns),NS=as.integer(NS),PACKAGE='GeoModels',DUP=TRUE,NAOK=TRUE)#
# str(GD)#
#
GD$score;GD$sensmat;GD$varimat
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="Gaussian";shape=4;n=1#
set.seed(112)#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,9)# con 9 funciona,  con 8 explota#
coordx_dyn=list()#
#
maxN=300#130#
for(k in 1:length(coordt))#
{#
  NN=sample(1:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
# coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 0.1#
sill <- 1#
nugget <- 0#
scale_s <- .3#
scale_t <- .3#
skew <- -0.5#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget, sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,mean = mean )#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxtime=1;maxdist=0.3#
fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
               corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,model = model,varest = TRUE)#
print(fit1)
ns
#================================= Comp_Pair_Gauss (SPACE)#
library(GeoModels)#
#
rm(list = ls())#
# Define the spatial-coordinates of the points:#
# set.seed(6)#
# set.seed(5)#
N=1500  # number of location sites#
x <- runif(N, 0, 1)#
# set.seed(5)#
y <- runif(N, 0, 1)#
coords <- cbind(x,y)#
#
# Define spatial matrix covariates#
X=cbind(rep(1,N),runif(N))#
#
# Set the covariance model's parameters:#
corrmodel <- "Exp"#
model <- "Gaussian"#
NuisParam(model,FALSE,1)#
CorrParam(corrmodel)#
mean <- 0#
mean1 <- -0.5#
sill <- 1#
nugget <- 0#
scale <- 2/3#
skew <- 1.5#
param<-list(mean=mean,mean1=mean1,sill=sill,nugget=nugget,scale=scale)#
#
# Simulation of the spatial Gaussian RF:#
set.seed(7)#
data <- GeoSim(coordx=coords,corrmodel=corrmodel, param=param,X=X,model = model)$data#
# data = rnorm(nrow(coords))#
# Fixed parameters#
fixed<-list(nugget=nugget,sill=sill)#
# Starting value for the estimated parameters#
start<-list(mean=mean,mean1=mean1,scale=scale)#
#
# CPUtime = proc.time()#
fit1 <- GeoFit(data=data,coordx=coords,corrmodel=corrmodel,#
               maxdist=0.1,likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,X=X, model = model,varest = TRUE)#
# CPUtime = proc.time()-CPUtime;CPUtime#
print(fit1)
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="Gaussian";shape=4;n=1#
set.seed(112)#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,2)# con 9 funciona,  con 8 explota#
#
N=20  # number of location sites#
x <- runif(N, 0, 1)#
# set.seed(5)#
y <- runif(N, 0, 1)#
coords <- cbind(x,y)#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 0.1#
sill <- 1#
nugget <- 0#
scale_s <- .3#
scale_t <- .3#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
fixed<-list(nugget=nugget, sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,mean = mean )#
set.seed(2)#
ss1 <- GeoSim(coordx=coords, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxtime=2;maxdist=0.1#
fit1 <- GeoFit(data=ss1,coordx=coords,coordt=coordt,#
               corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,model = model,varest = TRUE)#
print(fit1)#
fit1$param
X <- rnorm(10)
length(X)
length(X)*1
str(length(X))
str(length(X)*1)
#================================= Comp_Pair_Gauss (SPACE)#
library(GeoModels)#
#
rm(list = ls())#
# Define the spatial-coordinates of the points:#
# set.seed(6)#
# set.seed(5)#
N=1500  # number of location sites#
x <- runif(N, 0, 1)#
# set.seed(5)#
y <- runif(N, 0, 1)#
coords <- cbind(x,y)#
#
# Define spatial matrix covariates#
X=cbind(rep(1,N),runif(N))#
#
# Set the covariance model's parameters:#
corrmodel <- "Exp"#
model <- "Gaussian"#
NuisParam(model,FALSE,1)#
CorrParam(corrmodel)#
mean <- 0#
mean1 <- -0.5#
sill <- 1#
nugget <- 0#
scale <- 2/3#
skew <- 1.5#
param<-list(mean=mean,mean1=mean1,sill=sill,nugget=nugget,scale=scale)#
#
# Simulation of the spatial Gaussian RF:#
set.seed(7)#
data <- GeoSim(coordx=coords,corrmodel=corrmodel, param=param,X=X,model = model)$data#
# data = rnorm(nrow(coords))#
# Fixed parameters#
fixed<-list(nugget=nugget,sill=sill)#
# Starting value for the estimated parameters#
start<-list(mean=mean,mean1=mean1,scale=scale)#
#
# CPUtime = proc.time()#
fit1 <- GeoFit(data=data,coordx=coords,corrmodel=corrmodel,#
               maxdist=0.1,likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,X=X, model = model,varest = TRUE)#
# CPUtime = proc.time()-CPUtime;CPUtime#
print(fit1)
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="Gaussian";shape=4;n=1#
set.seed(112)#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,9)# con 9 funciona,  con 8 explota#
coordx_dyn=list()#
#
maxN=300#130#
for(k in 1:length(coordt))#
{#
  NN=sample(1:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
# coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 0.1#
sill <- 1#
nugget <- 0#
scale_s <- .3#
scale_t <- .3#
skew <- -0.5#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget, sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,mean = mean )#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxtime=1;maxdist=0.3#
fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
               corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,model = model,varest = TRUE)#
print(fit1)
ns
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="Gaussian";shape=4;n=1#
set.seed(112)#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,9)# con 9 funciona,  con 8 explota#
coordx_dyn=list()#
#
maxN=300#130#
for(k in 1:length(coordt))#
{#
  NN=sample(1:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
# coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 0.1#
sill <- 1#
nugget <- 0#
scale_s <- .3#
scale_t <- .3#
skew <- -0.5#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget, sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,mean = mean )#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxtime=1;maxdist=0.3#
fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
               corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,model = model,varest = TRUE)#
print(fit1)
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="Gaussian";shape=4;n=1#
set.seed(112)#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,2)# con 9 funciona,  con 8 explota#
coordx_dyn=list()#
#
maxN=20#130#
for(k in 1:length(coordt))#
{#
  # NN=sample(1:maxN,size=1)#
  NN = maxN#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
# coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 0.1#
sill <- 1#
nugget <- 0#
scale_s <- .3#
scale_t <- .3#
skew <- -0.5#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget, sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,mean = mean )#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxtime=1;maxdist=0.3#
fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
               corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,model = model,varest = TRUE)#
print(fit1)
ns
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="Gaussian";shape=4;n=1#
set.seed(112)#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,2)# con 9 funciona,  con 8 explota#
coordx_dyn=list()#
#
maxN=20#130#
for(k in 1:length(coordt))#
{#
  # NN=sample(1:maxN,size=1)#
  NN = maxN#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
# coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 0.1#
sill <- 1#
nugget <- 0#
scale_s <- .3#
scale_t <- .3#
skew <- -0.5#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget, sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,mean = mean )#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxtime=1;maxdist=0.3#
fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
               corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,model = model,varest = TRUE)#
print(fit1)
for(i in 1:5) print ("Hola")
hozf
"Hola"
adf
"Hola"
rm(list = ls())#
## see also  https://rdrr.io/rforge/gstat/man/wind.html#
require(gstat)#
require(mapdata)#
library(GeoModels)#
require(fields)#
require(mapproj)#
par(mfrow=c(1,1))#
#
# Wind Data: Daily average wind speeds for 1961-1978 at 12 synoptic #
# meteorological stations in the Republic of Ireland (Haslett and raftery 1989). #
# Wind speeds are in knots (1 knot = 0.5418 m/s), at each #
# of the stations of Haslett and Raftery#
#
## type of distance#
distance="Eucl" #distance="Geod"#
data("wind", package = "gstat")#
DATA=as.matrix(wind[,4:15])#
#DATA=DATA[,-3]  ### deleting ROSSLANE location site as in previous analysis#
sum(DATA==0)#
## where and when?#
which(DATA==0,arr.ind = T)#
### 16 values = to 0#
### we arbitrary replace 0 with  with the mean of the next and and the previous one (in time)#
DATA[5823:5825,]; DATA[5824,4]=(0.58+0.33)/2#
DATA[1507:1509,]; DATA[1508,6]=(1.58+2.42)/2#
DATA[2152:2154,]; DATA[2153,6]=(0.67+1.46)/2#
DATA[2351:2353,]; DATA[2352,6]=(3.21+0.92)/2#
DATA[3629:3631,]; DATA[3630,6]=(3.63+0.46)/2#
DATA[4053:4055,]; DATA[4054,6]=(4.63+2.50)/2#
DATA[5175:5177,]; DATA[5176,6]=(2.92+2.17)/2#
DATA[5456:5458,]; DATA[5457,6]=(0.13+2.37)/2#
DATA[4707:4709,]; DATA[4708,7]=(0.63+3.29)/2#
DATA[366:369,];   DATA[368,8]=DATA[367,8]=(2.79+3.75)/2#
DATA[694:697,];   DATA[695,8]=DATA[696,8]=(2.54+1)/2#
DATA[3653:3655,]; DATA[3654,8]=(0.33+0.75)/2#
DATA[5794:5796,]; DATA[5795,8]=(1.08+3.29)/2#
DATA[6176:6178,]; DATA[6177,9]=(2.13+0.21)/2#
plot(density(DATA))#
library(sp) # char2dms#
wind.loc$y = as.numeric(char2dms(as.character(wind.loc[["Latitude"]])))#
wind.loc$x = as.numeric(char2dms(as.character(wind.loc[["Longitude"]])))#
coordsLONLAT=cbind(wind.loc$x,wind.loc$y)  ## lonlat coordinates#
#
### graphic of ireland#
coordinates(wind.loc) = ~x+y#
map("worldHires", xlim = c(-11,-5.4), ylim = c(51,55.5))#
plot(wind.loc, add=TRUE, pch=16)#
text(coordinates(wind.loc), pos=1, label=wind.loc$Station)#
############# sinusoidal projecion#
if(distance=="Eucl")#
{ P.sinusoidal <- mapproject(coordsLONLAT[,1],coordsLONLAT[,2],projection="sinusoidal")#
coords<-cbind(P.sinusoidal$x,P.sinusoidal$y)*6378.388#
}#
if(distance=="Geod") coords=coordsLONLAT#
### matrix of spatial great circle or euclidean distances#
if(distance=="Geod") dists2 = rdist.earth(coords, miles=FALSE)#
if(distance=="Eucl") dists2 = dist(coords)#
#
## compact support for weight function in pairwise likelihood#
dd=max(dists2)*1+0.01#
maxtime=2.01#
## length of data: daily obervations for 18 years (1961-1978) at 12 location sites#
(1978-1961+1)*365*12#
length(as.vector(DATA))#
### there is a  small difference due to years with 366 days#
times = 1:nrow(DATA) # number of temporal realizations#
length(times)#
########################################
#### selecting first kk year#
########################################
#kk=5#
#ll=365*kk#
#times=1:ll#
#DATA=DATA[1:ll,]#
###########################
###########################
###########################
#### some tines series#
#par(mfrow=c(3,4))#
wind$time = ISOdate(wind$year+1900, wind$month, wind$day)#
# time series of e.g. Dublin data:#
plot(DUB~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Dub")#
#plot(CLA~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Cla")#
#plot(RPT ~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Rpt")#
#plot(VAL~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Val")#
#plot(ROS~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Ros")#
#plot(KIL~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Kil")#
#plot(SHA~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Sha")#
#plot(BIR~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Bir")#
#plot(MUL~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Mul")#
#plot(CLO~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Clo")#
#plot(BEL~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Bel")#
#plot(MAL~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Mal")#
######## matrix covariates. #############
nsites<-dim(DATA)[2]   ##number sites#
nt<-dim(DATA)[1]       ## number times#
#
tcoords<-(1:nt)%x%rep(1,dim(coordsLONLAT)[1])#
xycoords<-(rep(1,nt)%x%as.matrix(coordsLONLAT))#
#########################################################################
#########################################################################
#### computing period for spatial sites DUB#
s<-spectrum(wind$DUB)#
periodo<-1/(s$freq[which.max(s$spec)])#
periodo#
############################################
# number of harmonics#
ns<-3#
h<-matrix(0,length(tcoords),2*ns)#
tscale<-365#
for ( i in 1: ns) {#
  h[,(2*(i-1)+1)]<-sin(2*pi*(i)*tcoords/tscale)#
  h[,(2*i)]<-cos(2*pi*(i)*tcoords/tscale)#
}#
#########################################################################
#### matrix of covariates for regression harmonic#
X=as.matrix(cbind(rep(1,nrow(h)),h))#
dim(X)#
#########################################################################
#########################################################################
############## correlation model ########################################
#########################################################################
corrmodel="Exp_Exp"#
CorrParam(corrmodel)#
#
scale_s = 500/3#
scale_t= 5/3#
sep=0.5#
#
nugget = 0 ## must be fixed#
sill = 1 ## must be fixed#
#
smooth_s=0.5#
power2_t=2.5+2*(smooth_s-0.5)#
power_t=1#
#########################################################################
#########################################################################
############### Gamma RF estimation #####################################
#########################################################################
#########################################################################
model="Gauss"#
NuisParam(model,FALSE,7)#
mean=sqrt(mean(DATA))#
shape = 6#
start=list(mean=mean,scale_s=scale_s,scale_t=scale_t,mean1=0,mean2=0,mean3=0,mean4=0,mean5=0,mean6=0)#
fixed<-list(nugget=nugget,sill=sill) #
# GPU = 0 # 0 or 2 GPU denotes de Device we are using, in my Mac it is 0 (8 cores CPU),1 (Iris not for double),2 (AMD for double)#
# local = c(1,1) #First component is 8 if GPU is 0. It is 2^n for n>=0 if GPU is 2#
# #
# model <- GeoFit(data=sqrt(DATA),coordx=coords,coordt=times,corrmodel=corrmodel,distance=distance,#
#                maxdist=dd,maxtime=maxtime,likelihood="Marginal",type="Pairwise",model=model,X=X,#
#                start=start,fixed=fixed,GPU=GPU, local = local)#
# #
# model#
detach("package:GeoModels", unload=TRUE)#
library(STBEU)#
if (corrmodel=="Exp_Exp") cc = 1#
if (distance=="Eucl") type_dist = 1#
type_subs = 2 #in time#
theta=c(mean = mean,sill=sill,scale_s=scale_s,scale_t = scale_t) #
fix=c(nugget = nugget)#
#
#################################################
#   parameters for the subsampling #####
################################################
winc_t=12   ###  length of temporal window#
winstp_t=0.5 ###   0.5 half overlapping  1 "no" overlapping#
local <- c(1,1)#
GPU <- 0#
tSTBEU = proc.time()#
model1=STBEUFit(theta,fix,#
                coords = coords,times = times,cc=1,#
                  data = sqrt(DATA),type_dist,#
                maxdist=dd ,maxtime=maxtime,#
                  0,0,winc_t=winc_t,winstp_t=winstp_t,subs = type_subs,#
                  weighted=FALSE,local=local,GPU=GPU)#
tSTBEU = proc.time()-tSTBEU#
model1=STBEUFit(as.numeric(theta),as.numeric(fix),#
                coords = as.double(coords),times = as.numeric(times),cc=as.integer(1),#
                data = as.numeric(sqrt(DATA)),as.numeric(type_dist),#
                maxdist=as.numeric(dd) ,maxtime=as.numeric(maxtime),#
                0,0,winc_t=as.numeric(winc_t),winstp_t=as.numeric(winstp_t),subs = as.numeric(type_subs),#
                weighted=FALSE,local=local,GPU=GPU)
type_dist
library(Rnightlights)
library(manipulate)#
manipulate(plot(1:x), x = slider(1, 100))
caff.marital <- matrix(c(652,1537,598,242,36,46,38,21,218#
                         ,327,106,67),nrow=3,byrow=T)#
colnames(caff.marital) <- c("0","1-150","151-300",">300")#
rownames(caff.marital) <- c("Casada","Prev. casada","Soltera")#
caff.marital
t(caff.marital)
prop.table(caff.marital)
apply(prop.table(caff.marital),1,sum)
apply(prop.table(caff.marital),2,sum)
prop.table(caff.marital,1)
apply(prop.table(caff.marital,1),2,sum)
apply(prop.table(caff.marital,1),1,sum)
flog <- function(x) return(e^x/(1-e^x))
curve(flog,-10,10)
curve(flog(x),-10,10)
flog <- function(x) return(exp(x)/(1-exp(x))
)
flog <- function(x) return(exp(x)/(1-exp(x)))
curve(flog(x),-10,10)
flog <- function(x) return(exp(x)/(1+exp(x)))
curve(flog(x),-10,10)
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="Gaussian";shape=4;n=1#
set.seed(112)#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,25)# con 9 funciona,  con 8 explota#
#
N=200  # number of location sites#
x <- runif(N, 0, 1)#
# set.seed(5)#
y <- runif(N, 0, 1)#
coords <- cbind(x,y)#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 0.1#
sill <- 1#
nugget <- 0#
scale_s <- .3#
scale_t <- .3#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
fixed<-list(nugget=nugget, sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,mean = mean )#
set.seed(2)#
ss1 <- GeoSim(coordx=coords, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxtime=2;maxdist=0.1#
fit1 <- GeoFit(data=ss1,coordx=coords,coordt=coordt,#
               corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,model = model,varest = TRUE)#
print(fit1)#
fit1$param
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="Gaussian";shape=4;n=1#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,2)# con 9 funciona,  con 8 explota#
coordx_dyn=list()#
#
# maxN=130#130#
# set.seed(112)#
# for(k in 1:length(coordt))#
# {#
#   NN=sample(1:maxN,size=1)#
#   print(NN)#
#   x <- runif(NN, 0, 1)#
#   y <- runif(NN, 0, 1)#
#   coordx_dyn[[k]]=cbind(x,y)#
# }#
#
maxN=30#130#
set.seed(10)#
for(k in 1:length(coordt))#
{#
  NN=sample(2:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
# coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 0.1#
sill <- 1#
nugget <- 0#
scale_s <- .3#
scale_t <- .3#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget, sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,mean = mean )#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxtime=2;maxdist=0.2#
fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
               corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,model = model,varest = TRUE)#
print(fit1)#
fit1$param
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="Gaussian";shape=4;n=1#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,2,0.5)# con 9 funciona,  con 8 explota#
coordx_dyn=list()#
#
# maxN=130#130#
# set.seed(112)#
# for(k in 1:length(coordt))#
# {#
#   NN=sample(1:maxN,size=1)#
#   print(NN)#
#   x <- runif(NN, 0, 1)#
#   y <- runif(NN, 0, 1)#
#   coordx_dyn[[k]]=cbind(x,y)#
# }#
#
maxN=30#130#
set.seed(10)#
for(k in 1:length(coordt))#
{#
  NN=sample(2:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
# coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 0.1#
sill <- 1#
nugget <- 0#
scale_s <- .3#
scale_t <- .3#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget, sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,mean = mean )#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxtime=2;maxdist=0.2#
fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
               corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,model = model,varest = TRUE)#
print(fit1)#
fit1$param
score <- sensmat <- varcov <- varimat <- parscale <- NULL#
### Initialization parameters:#
initparam <- WlsStart(coordx=NULL, coordy=NULL, coordt=coordt, coordx_dyn=coordx_dyn, corrmodel, data=ss1, distance="Eucl", "Fitting", fixed=fixed, grid=FALSE,#10#
                      likelihood='Marginal', maxdist=maxdist, maxtime=maxtime,  model=model, n=1, NULL,#16#
                      parscale, optimizer=='L-BFGS-B', radius=6378.388, start=start, taper=NULL, tapsep=NULL,#22#
                      type="Pairwise", varest=TRUE, vartype='SubSamp', weighted=FALSE, winconst=NULL, winstp=NULL,winconst_t=NULL, winstp_t=NULL, X=NULL)#31#
numcoord=length(initparam$coordx);numtime=1;spacetime_dyn=FALSE#
if(initparam$spacetime) numtime=length(initparam$coordt)#
if(initparam$bivariate) numtime=2#
if(!is.null(coordx_dyn)) spacetime_dyn=TRUE#
dimat <- numcoord*numtime##
NS=cumsum(initparam$ns)#
if(is.null(dim(initparam$X)))#
{#
  X=as.matrix(rep(1,dimat))#
  if((initparam$spacetime||initparam$bivariate)&& spacetime_dyn)  X=as.matrix(rep(1,NS[numtime]))#
}#
num_betas=ncol(X)
str(initparam)
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="Gaussian";shape=4;n=1#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,2,0.5)# con 9 funciona,  con 8 explota#
coordt=seq(0,2)# con 9 funciona,  con 8 explota#
coordx_dyn=list()#
#
# maxN=130#130#
# set.seed(112)#
# for(k in 1:length(coordt))#
# {#
#   NN=sample(1:maxN,size=1)#
#   print(NN)#
#   x <- runif(NN, 0, 1)#
#   y <- runif(NN, 0, 1)#
#   coordx_dyn[[k]]=cbind(x,y)#
# }#
#
maxN=30#130#
set.seed(10)#
for(k in 1:length(coordt))#
{#
  NN=sample(2:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
# coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 0.1#
sill <- 1#
nugget <- 0#
scale_s <- .3#
scale_t <- .3#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget, sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,mean = mean )#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxtime=2;maxdist=0.2#
fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
               corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,model = model,varest = TRUE)#
print(fit1)#
fit1$param#
score <- sensmat <- varcov <- varimat <- parscale <- NULL#
### Initialization parameters:#
initparam <- WlsStart(coordx=NULL, coordy=NULL, coordt=coordt, coordx_dyn=coordx_dyn, corrmodel, data=ss1, distance="Eucl", "Fitting", fixed=fixed, grid=FALSE,#10#
                      likelihood='Marginal', maxdist=maxdist, maxtime=maxtime,  model=model, n=1, NULL,#16#
                      parscale, optimizer=='L-BFGS-B', radius=6378.388, start=start, taper=NULL, tapsep=NULL,#22#
                      type="Pairwise", varest=TRUE, vartype='SubSamp', weighted=FALSE, winconst=NULL, winstp=NULL,winconst_t=NULL, winstp_t=NULL, X=NULL)#31#
numcoord=length(initparam$coordx);numtime=1;spacetime_dyn=FALSE#
if(initparam$spacetime) numtime=length(initparam$coordt)#
if(initparam$bivariate) numtime=2#
if(!is.null(coordx_dyn)) spacetime_dyn=TRUE#
dimat <- numcoord*numtime##
NS=cumsum(initparam$ns)#
if(is.null(dim(initparam$X)))#
{#
  X=as.matrix(rep(1,dimat))#
  if((initparam$spacetime||initparam$bivariate)&& spacetime_dyn)  X=as.matrix(rep(1,NS[numtime]))#
}#
num_betas=ncol(X) #
grid = FALSE#
if(grid)    #
{a=expand.grid(initparam$coordx,initparam$coordy);coordx=a[,1];coordy=a[,2]; #
}else {#
  if((initparam$spacetime||initparam$bivariate)&&(!spacetime_dyn)){#
    data=c(t(data))#
    coordx=rep(coordx,numtime);coordy=rep(coordy,numtime)#
  }#
  if((initparam$spacetime||initparam$bivariate)&&(spacetime_dyn)) initparam$data=unlist(initparam$data)          #
}#
if(initparam$spacetime||initparam$bivariate)   NS=c(0,NS)[-(length(initparam$ns)+1)]#
initparam$fixed#
#
dimmat <- initparam$numparam^2#
dmat <- initparam$numparam*(initparam$numparam+1)/2#
eps <- (.Machine$double.eps)^(1/3)#
param <- c(initparam$param, initparam$fixed)#
score <- double(initparam$numparam)#
paramcorr <- param[initparam$namescorr]#
nuisance <- param[initparam$namesnuis]#
sel=substr(names(nuisance),1,4)=="mean"#
mm=as.numeric(nuisance[sel])   ## mean paramteres#
other_nuis=as.numeric(nuisance[!sel]) #
nuisance=c(mm,other_nuis)#
sensmat <- double(dmat);varimat <- double(dmat)#
GD=.C('GodambeMat',as.double(mm),as.integer(initparam$bivariate),as.double(initparam$coordx),as.double(initparam$coordy),#
      as.double(initparam$coordt),as.integer(initparam$corrmodel), as.double(initparam$data),as.integer(initparam$distance),as.double(eps),#
      as.integer(initparam$flagcorr), as.integer(initparam$flagnuis),as.integer(grid),as.integer(initparam$likelihood),#
      as.double(c(X%*%mm)),as.integer(initparam$model),as.double(initparam$n),as.integer(num_betas),#
      as.integer(initparam$numparam),as.integer(initparam$numparamcorr),as.integer(length(paramcorr)),as.double(paramcorr),as.double(nuisance),#
      score=score,sensmat=sensmat,as.integer(initparam$spacetime),as.integer(initparam$type),#
      varimat=varimat,as.integer(initparam$vartype),as.double(initparam$winconst),as.double(initparam$winstp),as.double(initparam$winconst_t),as.double(initparam$winstp_t),#
      as.integer(initparam$weighted),c(t(X)),ns=as.integer(initparam$ns),NS=as.integer(NS),PACKAGE='GeoModels',DUP=TRUE,NAOK=TRUE)
str(GD)
#================================= Comp_Pair_Gauss_st2 (SPACE-TIME)#
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="Gaussian";shape=4;n=1#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,2,0.5)# con 9 funciona,  con 8 explota#
# coordt=seq(0,2)# con 9 funciona,  con 8 explota#
coordx_dyn=list()#
#
# maxN=130#130#
# set.seed(112)#
# for(k in 1:length(coordt))#
# {#
#   NN=sample(1:maxN,size=1)#
#   print(NN)#
#   x <- runif(NN, 0, 1)#
#   y <- runif(NN, 0, 1)#
#   coordx_dyn[[k]]=cbind(x,y)#
# }#
#
maxN=30#130#
set.seed(10)#
for(k in 1:length(coordt))#
{#
  NN=sample(2:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
# coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 0.1#
sill <- 1#
nugget <- 0#
scale_s <- .3#
scale_t <- .3#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget, sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,mean = mean )#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxtime=2;maxdist=0.2#
fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
               corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,model = model,varest = TRUE)#
print(fit1)#
fit1$param#
score <- sensmat <- varcov <- varimat <- parscale <- NULL#
### Initialization parameters:#
initparam <- WlsStart(coordx=NULL, coordy=NULL, coordt=coordt, coordx_dyn=coordx_dyn, corrmodel, data=ss1, distance="Eucl", "Fitting", fixed=fixed, grid=FALSE,#10#
                      likelihood='Marginal', maxdist=maxdist, maxtime=maxtime,  model=model, n=1, NULL,#16#
                      parscale, optimizer=='L-BFGS-B', radius=6378.388, start=start, taper=NULL, tapsep=NULL,#22#
                      type="Pairwise", varest=TRUE, vartype='SubSamp', weighted=FALSE, winconst=NULL, winstp=NULL,winconst_t=NULL, winstp_t=NULL, X=NULL)#31#
numcoord=length(initparam$coordx);numtime=1;spacetime_dyn=FALSE#
if(initparam$spacetime) numtime=length(initparam$coordt)#
if(initparam$bivariate) numtime=2#
if(!is.null(coordx_dyn)) spacetime_dyn=TRUE#
dimat <- numcoord*numtime##
NS=cumsum(initparam$ns)#
if(is.null(dim(initparam$X)))#
{#
  X=as.matrix(rep(1,dimat))#
  if((initparam$spacetime||initparam$bivariate)&& spacetime_dyn)  X=as.matrix(rep(1,NS[numtime]))#
}#
num_betas=ncol(X) #
grid = FALSE#
if(grid)    #
{a=expand.grid(initparam$coordx,initparam$coordy);coordx=a[,1];coordy=a[,2]; #
}else {#
  if((initparam$spacetime||initparam$bivariate)&&(!spacetime_dyn)){#
    data=c(t(data))#
    coordx=rep(coordx,numtime);coordy=rep(coordy,numtime)#
  }#
  if((initparam$spacetime||initparam$bivariate)&&(spacetime_dyn)) initparam$data=unlist(initparam$data)          #
}#
if(initparam$spacetime||initparam$bivariate)   NS=c(0,NS)[-(length(initparam$ns)+1)]#
initparam$fixed#
#
dimmat <- initparam$numparam^2#
dmat <- initparam$numparam*(initparam$numparam+1)/2#
eps <- (.Machine$double.eps)^(1/3)#
param <- c(initparam$param, initparam$fixed)#
score <- double(initparam$numparam)#
paramcorr <- param[initparam$namescorr]#
nuisance <- param[initparam$namesnuis]#
sel=substr(names(nuisance),1,4)=="mean"#
mm=as.numeric(nuisance[sel])   ## mean paramteres#
other_nuis=as.numeric(nuisance[!sel]) #
nuisance=c(mm,other_nuis)#
sensmat <- double(dmat);varimat <- double(dmat)
GD=.C('GodambeMat',as.double(mm),as.integer(initparam$bivariate),as.double(initparam$coordx),as.double(initparam$coordy),#
      as.double(initparam$coordt),as.integer(initparam$corrmodel), as.double(initparam$data),as.integer(initparam$distance),as.double(eps),#
      as.integer(initparam$flagcorr), as.integer(initparam$flagnuis),as.integer(grid),as.integer(initparam$likelihood),#
      as.double(c(X%*%mm)),as.integer(initparam$model),as.double(initparam$n),as.integer(num_betas),#
      as.integer(initparam$numparam),as.integer(initparam$numparamcorr),as.integer(length(paramcorr)),as.double(paramcorr),as.double(nuisance),#
      score=score,sensmat=sensmat,as.integer(initparam$spacetime),as.integer(initparam$type),#
      varimat=varimat,as.integer(initparam$vartype),as.double(initparam$winconst),as.double(initparam$winstp),as.double(initparam$winconst_t),as.double(initparam$winstp_t),#
      as.integer(initparam$weighted),c(t(X)),ns=as.integer(initparam$ns),NS=as.integer(NS),PACKAGE='GeoModels',DUP=TRUE,NAOK=TRUE)
GD
str(DG)
str(GD)
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="Gaussian";shape=4;n=1#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,2,0.5)# con 9 funciona,  con 8 explota#
# coordt=seq(0,2)# con 9 funciona,  con 8 explota#
coordx_dyn=list()#
#
# maxN=130#130#
# set.seed(112)#
# for(k in 1:length(coordt))#
# {#
#   NN=sample(1:maxN,size=1)#
#   print(NN)#
#   x <- runif(NN, 0, 1)#
#   y <- runif(NN, 0, 1)#
#   coordx_dyn[[k]]=cbind(x,y)#
# }#
#
maxN=30#130#
set.seed(10)#
for(k in 1:length(coordt))#
{#
  NN=sample(2:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
# coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 0.1#
sill <- 1#
nugget <- 0#
scale_s <- .3#
scale_t <- .3#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget, sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,mean = mean )#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxtime=2;maxdist=0.2#
# fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
#                corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
#                likelihood="Marginal",type="Pairwise",#
#                start=start,fixed=fixed,model = model,varest = TRUE)#
# print(fit1)#
# fit1$param#
score <- sensmat <- varcov <- varimat <- parscale <- NULL#
### Initialization parameters:#
initparam <- WlsStart(coordx=NULL, coordy=NULL, coordt=coordt, coordx_dyn=coordx_dyn, corrmodel, data=ss1, distance="Eucl", "Fitting", fixed=fixed, grid=FALSE,#10#
                      likelihood='Marginal', maxdist=maxdist, maxtime=maxtime,  model=model, n=1, NULL,#16#
                      parscale, optimizer=='L-BFGS-B', radius=6378.388, start=start, taper=NULL, tapsep=NULL,#22#
                      type="Pairwise", varest=TRUE, vartype='SubSamp', weighted=FALSE, winconst=NULL, winstp=NULL,winconst_t=NULL, winstp_t=NULL, X=NULL)#31#
numcoord=length(initparam$coordx);numtime=1;spacetime_dyn=FALSE#
if(initparam$spacetime) numtime=length(initparam$coordt)#
if(initparam$bivariate) numtime=2#
if(!is.null(coordx_dyn)) spacetime_dyn=TRUE#
dimat <- numcoord*numtime##
NS=cumsum(initparam$ns)#
if(is.null(dim(initparam$X)))#
{#
  X=as.matrix(rep(1,dimat))#
  if((initparam$spacetime||initparam$bivariate)&& spacetime_dyn)  X=as.matrix(rep(1,NS[numtime]))#
}#
num_betas=ncol(X) #
grid = FALSE#
if(grid)    #
{a=expand.grid(initparam$coordx,initparam$coordy);coordx=a[,1];coordy=a[,2]; #
}else {#
  if((initparam$spacetime||initparam$bivariate)&&(!spacetime_dyn)){#
    data=c(t(data))#
    coordx=rep(coordx,numtime);coordy=rep(coordy,numtime)#
  }#
  if((initparam$spacetime||initparam$bivariate)&&(spacetime_dyn)) initparam$data=unlist(initparam$data)          #
}#
if(initparam$spacetime||initparam$bivariate)   NS=c(0,NS)[-(length(initparam$ns)+1)]#
initparam$fixed#
#
dimmat <- initparam$numparam^2#
dmat <- initparam$numparam*(initparam$numparam+1)/2#
eps <- (.Machine$double.eps)^(1/3)#
param <- c(initparam$param, initparam$fixed)#
score <- double(initparam$numparam)#
paramcorr <- param[initparam$namescorr]#
nuisance <- param[initparam$namesnuis]#
sel=substr(names(nuisance),1,4)=="mean"#
mm=as.numeric(nuisance[sel])   ## mean paramteres#
other_nuis=as.numeric(nuisance[!sel]) #
nuisance=c(mm,other_nuis)#
sensmat <- double(dmat);varimat <- double(dmat)#
GD=.C('GodambeMat',as.double(mm),as.integer(initparam$bivariate),as.double(initparam$coordx),as.double(initparam$coordy),#
      as.double(initparam$coordt),as.integer(initparam$corrmodel), as.double(initparam$data),as.integer(initparam$distance),as.double(eps),#
      as.integer(initparam$flagcorr), as.integer(initparam$flagnuis),as.integer(grid),as.integer(initparam$likelihood),#
      as.double(c(X%*%mm)),as.integer(initparam$model),as.double(initparam$n),as.integer(num_betas),#
      as.integer(initparam$numparam),as.integer(initparam$numparamcorr),as.integer(length(paramcorr)),as.double(paramcorr),as.double(nuisance),#
      score=score,sensmat=sensmat,as.integer(initparam$spacetime),as.integer(initparam$type),#
      varimat=varimat,as.integer(initparam$vartype),as.double(initparam$winconst),as.double(initparam$winstp),as.double(initparam$winconst_t),as.double(initparam$winstp_t),#
      as.integer(initparam$weighted),c(t(X)),ns=as.integer(initparam$ns),NS=as.integer(NS),PACKAGE='GeoModels',DUP=TRUE,NAOK=TRUE)#
str(GD)
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="Gaussian";shape=4;n=1#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,4,1.5)# con 9 funciona,  con 8 explota#
# coordt=seq(0,2)# con 9 funciona,  con 8 explota#
coordx_dyn=list()#
#
# maxN=130#130#
# set.seed(112)#
# for(k in 1:length(coordt))#
# {#
#   NN=sample(1:maxN,size=1)#
#   print(NN)#
#   x <- runif(NN, 0, 1)#
#   y <- runif(NN, 0, 1)#
#   coordx_dyn[[k]]=cbind(x,y)#
# }#
#
maxN=30#130#
set.seed(10)#
for(k in 1:length(coordt))#
{#
  NN=sample(2:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
# coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 0.1#
sill <- 1#
nugget <- 0#
scale_s <- .3#
scale_t <- .3#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget, sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,mean = mean )#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxtime=2;maxdist=0.2#
# fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
#                corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
#                likelihood="Marginal",type="Pairwise",#
#                start=start,fixed=fixed,model = model,varest = TRUE)#
# print(fit1)#
# fit1$param#
score <- sensmat <- varcov <- varimat <- parscale <- NULL#
### Initialization parameters:#
initparam <- WlsStart(coordx=NULL, coordy=NULL, coordt=coordt, coordx_dyn=coordx_dyn, corrmodel, data=ss1, distance="Eucl", "Fitting", fixed=fixed, grid=FALSE,#10#
                      likelihood='Marginal', maxdist=maxdist, maxtime=maxtime,  model=model, n=1, NULL,#16#
                      parscale, optimizer=='L-BFGS-B', radius=6378.388, start=start, taper=NULL, tapsep=NULL,#22#
                      type="Pairwise", varest=TRUE, vartype='SubSamp', weighted=FALSE, winconst=NULL, winstp=NULL,winconst_t=NULL, winstp_t=NULL, X=NULL)#31#
numcoord=length(initparam$coordx);numtime=1;spacetime_dyn=FALSE#
if(initparam$spacetime) numtime=length(initparam$coordt)#
if(initparam$bivariate) numtime=2#
if(!is.null(coordx_dyn)) spacetime_dyn=TRUE#
dimat <- numcoord*numtime##
NS=cumsum(initparam$ns)#
if(is.null(dim(initparam$X)))#
{#
  X=as.matrix(rep(1,dimat))#
  if((initparam$spacetime||initparam$bivariate)&& spacetime_dyn)  X=as.matrix(rep(1,NS[numtime]))#
}#
num_betas=ncol(X) #
grid = FALSE#
if(grid)    #
{a=expand.grid(initparam$coordx,initparam$coordy);coordx=a[,1];coordy=a[,2]; #
}else {#
  if((initparam$spacetime||initparam$bivariate)&&(!spacetime_dyn)){#
    data=c(t(data))#
    coordx=rep(coordx,numtime);coordy=rep(coordy,numtime)#
  }#
  if((initparam$spacetime||initparam$bivariate)&&(spacetime_dyn)) initparam$data=unlist(initparam$data)          #
}#
if(initparam$spacetime||initparam$bivariate)   NS=c(0,NS)[-(length(initparam$ns)+1)]#
initparam$fixed#
#
dimmat <- initparam$numparam^2#
dmat <- initparam$numparam*(initparam$numparam+1)/2#
eps <- (.Machine$double.eps)^(1/3)#
param <- c(initparam$param, initparam$fixed)#
score <- double(initparam$numparam)#
paramcorr <- param[initparam$namescorr]#
nuisance <- param[initparam$namesnuis]#
sel=substr(names(nuisance),1,4)=="mean"#
mm=as.numeric(nuisance[sel])   ## mean paramteres#
other_nuis=as.numeric(nuisance[!sel]) #
nuisance=c(mm,other_nuis)#
sensmat <- double(dmat);varimat <- double(dmat)#
GD=.C('GodambeMat',as.double(mm),as.integer(initparam$bivariate),as.double(initparam$coordx),as.double(initparam$coordy),#
      as.double(initparam$coordt),as.integer(initparam$corrmodel), as.double(initparam$data),as.integer(initparam$distance),as.double(eps),#
      as.integer(initparam$flagcorr), as.integer(initparam$flagnuis),as.integer(grid),as.integer(initparam$likelihood),#
      as.double(c(X%*%mm)),as.integer(initparam$model),as.double(initparam$n),as.integer(num_betas),#
      as.integer(initparam$numparam),as.integer(initparam$numparamcorr),as.integer(length(paramcorr)),as.double(paramcorr),as.double(nuisance),#
      score=score,sensmat=sensmat,as.integer(initparam$spacetime),as.integer(initparam$type),#
      varimat=varimat,as.integer(initparam$vartype),as.double(initparam$winconst),as.double(initparam$winstp),as.double(initparam$winconst_t),as.double(initparam$winstp_t),#
      as.integer(initparam$weighted),c(t(X)),ns=as.integer(initparam$ns),NS=as.integer(NS),PACKAGE='GeoModels',DUP=TRUE,NAOK=TRUE)#
str(GD)
#================================= Comp_Pair_Gauss_st2 (SPACE-TIME)#
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="Gaussian";shape=4;n=1#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,9,1.5)# con 9 funciona,  con 8 explota#
# coordt=seq(0,2)# con 9 funciona,  con 8 explota#
coordx_dyn=list()#
#
# maxN=130#130#
# set.seed(112)#
# for(k in 1:length(coordt))#
# {#
#   NN=sample(1:maxN,size=1)#
#   print(NN)#
#   x <- runif(NN, 0, 1)#
#   y <- runif(NN, 0, 1)#
#   coordx_dyn[[k]]=cbind(x,y)#
# }#
#
maxN=30#130#
set.seed(10)#
for(k in 1:length(coordt))#
{#
  NN=sample(2:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
# coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 0.1#
sill <- 1#
nugget <- 0#
scale_s <- .3#
scale_t <- .3#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget, sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,mean = mean )#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxtime=2;maxdist=0.2#
fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
               corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,model = model,varest = TRUE)#
print(fit1)#
fit1$param
#================================= Comp_Pair_Gauss_st2 (SPACE-TIME)#
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="Gaussian";shape=4;n=1#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,9,.5)# con 9 funciona,  con 8 explota#
# coordt=seq(0,2)# con 9 funciona,  con 8 explota#
coordx_dyn=list()#
#
# maxN=130#130#
# set.seed(112)#
# for(k in 1:length(coordt))#
# {#
#   NN=sample(1:maxN,size=1)#
#   print(NN)#
#   x <- runif(NN, 0, 1)#
#   y <- runif(NN, 0, 1)#
#   coordx_dyn[[k]]=cbind(x,y)#
# }#
#
maxN=30#130#
set.seed(10)#
for(k in 1:length(coordt))#
{#
  NN=sample(2:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
# coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 0.1#
sill <- 1#
nugget <- 0#
scale_s <- .3#
scale_t <- .3#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget, sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,mean = mean )#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxtime=2;maxdist=0.2#
fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
               corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,model = model,varest = TRUE)#
print(fit1)#
fit1$param
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
################################################################
############ Examples of spatial RFs #################
################################################################
model="Gaussian";shape=4;n=1#
set.seed(112)#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,75,1.5)#
coordx_dyn=list()#
#
maxN=16#
for(k in 1:length(coordt))#
{#
  NN=sample(1:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
coordx_dyn[[1]]#
coordx_dyn[[2]]#
x <- runif(NN, 0, 1)#
y <- runif(NN, 0, 1)#
coordsP=cbind(x,y)#
for(k in 1:length(coordt))#
{#
  coordx_dyn[[k]]=coordsP#
}#
coordx_dyn#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
mean <- 0#
sill <- 1#
nugget <- 0#
scale_s <- 0.2/3#
scale_t <- 1/3#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget)#
# Starting value for the estimated parameters#
start<-list(mean=mean,scale_s=scale_s,scale_t=scale_t,sill=sill)#
#
set.seed(2)#
ss2 <- GeoSim(coordx=coordsP, coordt=coordt, corrmodel="Exp_Exp",model=model,#
              param=param)$data#
#CL#
fit2 <- GeoFit(data=ss2,coordx=coordsP,coordt=coordt,#
               corrmodel="Exp_Exp",maxtime=1,maxdist=0.3,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,varest=TRUE)#
print(fit2)
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
################################################################
############ Examples of spatial RFs #################
################################################################
model="Gaussian";shape=4;n=1#
set.seed(112)#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,75,1.5)#
coordx_dyn=list()#
#
maxN=30#
for(k in 1:length(coordt))#
{#
  NN=sample(1:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
coordx_dyn[[1]]#
coordx_dyn[[2]]#
x <- runif(NN, 0, 1)#
y <- runif(NN, 0, 1)#
coordsP=cbind(x,y)#
for(k in 1:length(coordt))#
{#
  coordx_dyn[[k]]=coordsP#
}#
coordx_dyn#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
mean <- 0#
sill <- 1#
nugget <- 0#
scale_s <- 0.2/3#
scale_t <- 1/3#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget)#
# Starting value for the estimated parameters#
start<-list(mean=mean,scale_s=scale_s,scale_t=scale_t,sill=sill)#
#
set.seed(2)#
ss2 <- GeoSim(coordx=coordsP, coordt=coordt, corrmodel="Exp_Exp",model=model,#
              param=param)$data#
#CL#
fit2 <- GeoFit(data=ss2,coordx=coordsP,coordt=coordt,#
               corrmodel="Exp_Exp",maxtime=1,maxdist=0.3,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,varest=TRUE)#
print(fit2)#
#ML#
# fit5 <- GeoFit(data=ss2,coordx=coordsP,coordt=coordt,#
#                corrmodel="Exp_Exp",#
#                likelihood="Full",type="Standard",#
#                start=start,fixed=fixed,varest=TRUE)#
#print(fit5)
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
################################################################
############ Examples of spatial RFs #################
################################################################
model="Gaussian";shape=4;n=1#
set.seed(112)#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,75,1.5)#
coordx_dyn=list()#
#
maxN=50#
for(k in 1:length(coordt))#
{#
  NN=sample(1:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
coordx_dyn[[1]]#
coordx_dyn[[2]]#
x <- runif(NN, 0, 1)#
y <- runif(NN, 0, 1)#
coordsP=cbind(x,y)#
for(k in 1:length(coordt))#
{#
  coordx_dyn[[k]]=coordsP#
}#
coordx_dyn#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
mean <- 0#
sill <- 1#
nugget <- 0#
scale_s <- 0.2/3#
scale_t <- 1/3#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget)#
# Starting value for the estimated parameters#
start<-list(mean=mean,scale_s=scale_s,scale_t=scale_t,sill=sill)#
#
set.seed(2)#
ss2 <- GeoSim(coordx=coordsP, coordt=coordt, corrmodel="Exp_Exp",model=model,#
              param=param)$data#
#CL#
fit2 <- GeoFit(data=ss2,coordx=coordsP,coordt=coordt,#
               corrmodel="Exp_Exp",maxtime=1,maxdist=0.3,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,varest=TRUE)#
print(fit2)#
#ML#
# fit5 <- GeoFit(data=ss2,coordx=coordsP,coordt=coordt,#
#                corrmodel="Exp_Exp",#
#                likelihood="Full",type="Standard",#
#                start=start,fixed=fixed,varest=TRUE)#
#print(fit5)
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
################################################################
############ Examples of spatial RFs #################
################################################################
model="Gaussian";shape=4;n=1#
set.seed(112)#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,75,1.5)#
coordx_dyn=list()#
#
maxN=100#
for(k in 1:length(coordt))#
{#
  NN=sample(1:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
coordx_dyn[[1]]#
coordx_dyn[[2]]#
x <- runif(NN, 0, 1)#
y <- runif(NN, 0, 1)#
coordsP=cbind(x,y)#
for(k in 1:length(coordt))#
{#
  coordx_dyn[[k]]=coordsP#
}#
coordx_dyn#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
mean <- 0#
sill <- 1#
nugget <- 0#
scale_s <- 0.2/3#
scale_t <- 1/3#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget)#
# Starting value for the estimated parameters#
start<-list(mean=mean,scale_s=scale_s,scale_t=scale_t,sill=sill)#
#
set.seed(2)#
ss2 <- GeoSim(coordx=coordsP, coordt=coordt, corrmodel="Exp_Exp",model=model,#
              param=param)$data#
#CL#
fit2 <- GeoFit(data=ss2,coordx=coordsP,coordt=coordt,#
               corrmodel="Exp_Exp",maxtime=1,maxdist=0.3,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,varest=TRUE)#
print(fit2)#
#ML#
# fit5 <- GeoFit(data=ss2,coordx=coordsP,coordt=coordt,#
#                corrmodel="Exp_Exp",#
#                likelihood="Full",type="Standard",#
#                start=start,fixed=fixed,varest=TRUE)#
#print(fit5)
#================================= Comp_Pair_Gauss_st2 (SPACE-TIME)#
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="Gaussian";shape=4;n=1#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,9,1.5)# con 9 funciona,  con 8 explota#
# coordt=seq(0,2)# con 9 funciona,  con 8 explota#
coordx_dyn=list()#
#
# maxN=130#130#
# set.seed(112)#
# for(k in 1:length(coordt))#
# {#
#   NN=sample(1:maxN,size=1)#
#   print(NN)#
#   x <- runif(NN, 0, 1)#
#   y <- runif(NN, 0, 1)#
#   coordx_dyn[[k]]=cbind(x,y)#
# }#
#
maxN=30#130#
set.seed(10)#
for(k in 1:length(coordt))#
{#
  NN=sample(2:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
# coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 0.1#
sill <- 1#
nugget <- 0#
scale_s <- .3#
scale_t <- .3#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget, sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,mean = mean )#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxtime=2;maxdist=0.2#
fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
               corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,model = model,varest = TRUE)#
print(fit1)#
fit1$param#
score <- sensmat <- varcov <- varimat <- parscale <- NULL#
### Initialization parameters:#
initparam <- WlsStart(coordx=NULL, coordy=NULL, coordt=coordt, coordx_dyn=coordx_dyn, corrmodel, data=ss1, distance="Eucl", "Fitting", fixed=fixed, grid=FALSE,#10#
                      likelihood='Marginal', maxdist=maxdist, maxtime=maxtime,  model=model, n=1, NULL,#16#
                      parscale, optimizer=='L-BFGS-B', radius=6378.388, start=start, taper=NULL, tapsep=NULL,#22#
                      type="Pairwise", varest=TRUE, vartype='SubSamp', weighted=FALSE, winconst=NULL, winstp=NULL,winconst_t=NULL, winstp_t=NULL, X=NULL)#31#
numcoord=length(initparam$coordx);numtime=1;spacetime_dyn=FALSE#
if(initparam$spacetime) numtime=length(initparam$coordt)#
if(initparam$bivariate) numtime=2#
if(!is.null(coordx_dyn)) spacetime_dyn=TRUE#
dimat <- numcoord*numtime##
NS=cumsum(initparam$ns)#
if(is.null(dim(initparam$X)))#
{#
  X=as.matrix(rep(1,dimat))#
  if((initparam$spacetime||initparam$bivariate)&& spacetime_dyn)  X=as.matrix(rep(1,NS[numtime]))#
}#
num_betas=ncol(X) #
grid = FALSE#
if(grid)    #
{a=expand.grid(initparam$coordx,initparam$coordy);coordx=a[,1];coordy=a[,2]; #
}else {#
  if((initparam$spacetime||initparam$bivariate)&&(!spacetime_dyn)){#
    data=c(t(data))#
    coordx=rep(coordx,numtime);coordy=rep(coordy,numtime)#
  }#
  if((initparam$spacetime||initparam$bivariate)&&(spacetime_dyn)) initparam$data=unlist(initparam$data)          #
}#
if(initparam$spacetime||initparam$bivariate)   NS=c(0,NS)[-(length(initparam$ns)+1)]#
initparam$fixed#
#
dimmat <- initparam$numparam^2#
dmat <- initparam$numparam*(initparam$numparam+1)/2#
eps <- (.Machine$double.eps)^(1/3)#
param <- c(initparam$param, initparam$fixed)#
score <- double(initparam$numparam)#
paramcorr <- param[initparam$namescorr]#
nuisance <- param[initparam$namesnuis]#
sel=substr(names(nuisance),1,4)=="mean"#
mm=as.numeric(nuisance[sel])   ## mean paramteres#
other_nuis=as.numeric(nuisance[!sel]) #
nuisance=c(mm,other_nuis)#
sensmat <- double(dmat);varimat <- double(dmat)#
GD=.C('GodambeMat',as.double(mm),as.integer(initparam$bivariate),as.double(initparam$coordx),as.double(initparam$coordy),#
      as.double(initparam$coordt),as.integer(initparam$corrmodel), as.double(initparam$data),as.integer(initparam$distance),as.double(eps),#
      as.integer(initparam$flagcorr), as.integer(initparam$flagnuis),as.integer(grid),as.integer(initparam$likelihood),#
      as.double(c(X%*%mm)),as.integer(initparam$model),as.double(initparam$n),as.integer(num_betas),#
      as.integer(initparam$numparam),as.integer(initparam$numparamcorr),as.integer(length(paramcorr)),as.double(paramcorr),as.double(nuisance),#
      score=score,sensmat=sensmat,as.integer(initparam$spacetime),as.integer(initparam$type),#
      varimat=varimat,as.integer(initparam$vartype),as.double(initparam$winconst),as.double(initparam$winstp),as.double(initparam$winconst_t),as.double(initparam$winstp_t),#
      as.integer(initparam$weighted),c(t(X)),ns=as.integer(initparam$ns),NS=as.integer(NS),PACKAGE='GeoModels',DUP=TRUE,NAOK=TRUE)#
str(GD)
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="Gaussian";shape=4;n=1#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,9,1.8)# con 9 funciona,  con 8 explota#
# coordt=seq(0,2)# con 9 funciona,  con 8 explota#
coordx_dyn=list()#
#
# maxN=130#130#
# set.seed(112)#
# for(k in 1:length(coordt))#
# {#
#   NN=sample(1:maxN,size=1)#
#   print(NN)#
#   x <- runif(NN, 0, 1)#
#   y <- runif(NN, 0, 1)#
#   coordx_dyn[[k]]=cbind(x,y)#
# }#
#
maxN=30#130#
set.seed(10)#
for(k in 1:length(coordt))#
{#
  NN=sample(2:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
# coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 0.1#
sill <- 1#
nugget <- 0#
scale_s <- .3#
scale_t <- .3#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget, sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,mean = mean )#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxtime=2;maxdist=0.2#
fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
               corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,model = model,varest = TRUE)#
print(fit1)#
fit1$param#
score <- sensmat <- varcov <- varimat <- parscale <- NULL#
### Initialization parameters:#
initparam <- WlsStart(coordx=NULL, coordy=NULL, coordt=coordt, coordx_dyn=coordx_dyn, corrmodel, data=ss1, distance="Eucl", "Fitting", fixed=fixed, grid=FALSE,#10#
                      likelihood='Marginal', maxdist=maxdist, maxtime=maxtime,  model=model, n=1, NULL,#16#
                      parscale, optimizer=='L-BFGS-B', radius=6378.388, start=start, taper=NULL, tapsep=NULL,#22#
                      type="Pairwise", varest=TRUE, vartype='SubSamp', weighted=FALSE, winconst=NULL, winstp=NULL,winconst_t=NULL, winstp_t=NULL, X=NULL)#31#
numcoord=length(initparam$coordx);numtime=1;spacetime_dyn=FALSE#
if(initparam$spacetime) numtime=length(initparam$coordt)#
if(initparam$bivariate) numtime=2#
if(!is.null(coordx_dyn)) spacetime_dyn=TRUE#
dimat <- numcoord*numtime##
NS=cumsum(initparam$ns)#
if(is.null(dim(initparam$X)))#
{#
  X=as.matrix(rep(1,dimat))#
  if((initparam$spacetime||initparam$bivariate)&& spacetime_dyn)  X=as.matrix(rep(1,NS[numtime]))#
}#
num_betas=ncol(X) #
grid = FALSE#
if(grid)    #
{a=expand.grid(initparam$coordx,initparam$coordy);coordx=a[,1];coordy=a[,2]; #
}else {#
  if((initparam$spacetime||initparam$bivariate)&&(!spacetime_dyn)){#
    data=c(t(data))#
    coordx=rep(coordx,numtime);coordy=rep(coordy,numtime)#
  }#
  if((initparam$spacetime||initparam$bivariate)&&(spacetime_dyn)) initparam$data=unlist(initparam$data)          #
}#
if(initparam$spacetime||initparam$bivariate)   NS=c(0,NS)[-(length(initparam$ns)+1)]#
initparam$fixed#
#
dimmat <- initparam$numparam^2#
dmat <- initparam$numparam*(initparam$numparam+1)/2#
eps <- (.Machine$double.eps)^(1/3)#
param <- c(initparam$param, initparam$fixed)#
score <- double(initparam$numparam)#
paramcorr <- param[initparam$namescorr]#
nuisance <- param[initparam$namesnuis]#
sel=substr(names(nuisance),1,4)=="mean"#
mm=as.numeric(nuisance[sel])   ## mean paramteres#
other_nuis=as.numeric(nuisance[!sel]) #
nuisance=c(mm,other_nuis)#
sensmat <- double(dmat);varimat <- double(dmat)#
GD=.C('GodambeMat',as.double(mm),as.integer(initparam$bivariate),as.double(initparam$coordx),as.double(initparam$coordy),#
      as.double(initparam$coordt),as.integer(initparam$corrmodel), as.double(initparam$data),as.integer(initparam$distance),as.double(eps),#
      as.integer(initparam$flagcorr), as.integer(initparam$flagnuis),as.integer(grid),as.integer(initparam$likelihood),#
      as.double(c(X%*%mm)),as.integer(initparam$model),as.double(initparam$n),as.integer(num_betas),#
      as.integer(initparam$numparam),as.integer(initparam$numparamcorr),as.integer(length(paramcorr)),as.double(paramcorr),as.double(nuisance),#
      score=score,sensmat=sensmat,as.integer(initparam$spacetime),as.integer(initparam$type),#
      varimat=varimat,as.integer(initparam$vartype),as.double(initparam$winconst),as.double(initparam$winstp),as.double(initparam$winconst_t),as.double(initparam$winstp_t),#
      as.integer(initparam$weighted),c(t(X)),ns=as.integer(initparam$ns),NS=as.integer(NS),PACKAGE='GeoModels',DUP=TRUE,NAOK=TRUE)#
str(GD)
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="Gaussian";shape=4;n=1#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,9,.8)# con 9 funciona,  con 8 explota#
# coordt=seq(0,2)# con 9 funciona,  con 8 explota#
coordx_dyn=list()#
#
# maxN=130#130#
# set.seed(112)#
# for(k in 1:length(coordt))#
# {#
#   NN=sample(1:maxN,size=1)#
#   print(NN)#
#   x <- runif(NN, 0, 1)#
#   y <- runif(NN, 0, 1)#
#   coordx_dyn[[k]]=cbind(x,y)#
# }#
#
maxN=30#130#
set.seed(10)#
for(k in 1:length(coordt))#
{#
  NN=sample(2:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
# coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 0.1#
sill <- 1#
nugget <- 0#
scale_s <- .3#
scale_t <- .3#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget, sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,mean = mean )#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxtime=2;maxdist=0.2#
fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
               corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,model = model,varest = TRUE)#
print(fit1)#
fit1$param#
score <- sensmat <- varcov <- varimat <- parscale <- NULL#
### Initialization parameters:#
initparam <- WlsStart(coordx=NULL, coordy=NULL, coordt=coordt, coordx_dyn=coordx_dyn, corrmodel, data=ss1, distance="Eucl", "Fitting", fixed=fixed, grid=FALSE,#10#
                      likelihood='Marginal', maxdist=maxdist, maxtime=maxtime,  model=model, n=1, NULL,#16#
                      parscale, optimizer=='L-BFGS-B', radius=6378.388, start=start, taper=NULL, tapsep=NULL,#22#
                      type="Pairwise", varest=TRUE, vartype='SubSamp', weighted=FALSE, winconst=NULL, winstp=NULL,winconst_t=NULL, winstp_t=NULL, X=NULL)#31#
numcoord=length(initparam$coordx);numtime=1;spacetime_dyn=FALSE#
if(initparam$spacetime) numtime=length(initparam$coordt)#
if(initparam$bivariate) numtime=2#
if(!is.null(coordx_dyn)) spacetime_dyn=TRUE#
dimat <- numcoord*numtime##
NS=cumsum(initparam$ns)#
if(is.null(dim(initparam$X)))#
{#
  X=as.matrix(rep(1,dimat))#
  if((initparam$spacetime||initparam$bivariate)&& spacetime_dyn)  X=as.matrix(rep(1,NS[numtime]))#
}#
num_betas=ncol(X) #
grid = FALSE#
if(grid)    #
{a=expand.grid(initparam$coordx,initparam$coordy);coordx=a[,1];coordy=a[,2]; #
}else {#
  if((initparam$spacetime||initparam$bivariate)&&(!spacetime_dyn)){#
    data=c(t(data))#
    coordx=rep(coordx,numtime);coordy=rep(coordy,numtime)#
  }#
  if((initparam$spacetime||initparam$bivariate)&&(spacetime_dyn)) initparam$data=unlist(initparam$data)          #
}#
if(initparam$spacetime||initparam$bivariate)   NS=c(0,NS)[-(length(initparam$ns)+1)]#
initparam$fixed#
#
dimmat <- initparam$numparam^2#
dmat <- initparam$numparam*(initparam$numparam+1)/2#
eps <- (.Machine$double.eps)^(1/3)#
param <- c(initparam$param, initparam$fixed)#
score <- double(initparam$numparam)#
paramcorr <- param[initparam$namescorr]#
nuisance <- param[initparam$namesnuis]#
sel=substr(names(nuisance),1,4)=="mean"#
mm=as.numeric(nuisance[sel])   ## mean paramteres#
other_nuis=as.numeric(nuisance[!sel]) #
nuisance=c(mm,other_nuis)#
sensmat <- double(dmat);varimat <- double(dmat)#
GD=.C('GodambeMat',as.double(mm),as.integer(initparam$bivariate),as.double(initparam$coordx),as.double(initparam$coordy),#
      as.double(initparam$coordt),as.integer(initparam$corrmodel), as.double(initparam$data),as.integer(initparam$distance),as.double(eps),#
      as.integer(initparam$flagcorr), as.integer(initparam$flagnuis),as.integer(grid),as.integer(initparam$likelihood),#
      as.double(c(X%*%mm)),as.integer(initparam$model),as.double(initparam$n),as.integer(num_betas),#
      as.integer(initparam$numparam),as.integer(initparam$numparamcorr),as.integer(length(paramcorr)),as.double(paramcorr),as.double(nuisance),#
      score=score,sensmat=sensmat,as.integer(initparam$spacetime),as.integer(initparam$type),#
      varimat=varimat,as.integer(initparam$vartype),as.double(initparam$winconst),as.double(initparam$winstp),as.double(initparam$winconst_t),as.double(initparam$winstp_t),#
      as.integer(initparam$weighted),c(t(X)),ns=as.integer(initparam$ns),NS=as.integer(NS),PACKAGE='GeoModels',DUP=TRUE,NAOK=TRUE)#
str(GD)
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="Gaussian";shape=4;n=1#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,9,.5)# con 9 funciona,  con 8 explota#
# coordt=seq(0,2)# con 9 funciona,  con 8 explota#
coordx_dyn=list()#
#
# maxN=130#130#
# set.seed(112)#
# for(k in 1:length(coordt))#
# {#
#   NN=sample(1:maxN,size=1)#
#   print(NN)#
#   x <- runif(NN, 0, 1)#
#   y <- runif(NN, 0, 1)#
#   coordx_dyn[[k]]=cbind(x,y)#
# }#
#
maxN=30#130#
set.seed(10)#
for(k in 1:length(coordt))#
{#
  NN=sample(2:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
# coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 0.1#
sill <- 1#
nugget <- 0#
scale_s <- .3#
scale_t <- .3#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget, sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,mean = mean )#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxtime=2;maxdist=0.2#
fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
               corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,model = model,varest = TRUE)#
print(fit1)#
fit1$param#
score <- sensmat <- varcov <- varimat <- parscale <- NULL#
### Initialization parameters:#
initparam <- WlsStart(coordx=NULL, coordy=NULL, coordt=coordt, coordx_dyn=coordx_dyn, corrmodel, data=ss1, distance="Eucl", "Fitting", fixed=fixed, grid=FALSE,#10#
                      likelihood='Marginal', maxdist=maxdist, maxtime=maxtime,  model=model, n=1, NULL,#16#
                      parscale, optimizer=='L-BFGS-B', radius=6378.388, start=start, taper=NULL, tapsep=NULL,#22#
                      type="Pairwise", varest=TRUE, vartype='SubSamp', weighted=FALSE, winconst=NULL, winstp=NULL,winconst_t=NULL, winstp_t=NULL, X=NULL)#31#
numcoord=length(initparam$coordx);numtime=1;spacetime_dyn=FALSE#
if(initparam$spacetime) numtime=length(initparam$coordt)#
if(initparam$bivariate) numtime=2#
if(!is.null(coordx_dyn)) spacetime_dyn=TRUE#
dimat <- numcoord*numtime##
NS=cumsum(initparam$ns)#
if(is.null(dim(initparam$X)))#
{#
  X=as.matrix(rep(1,dimat))#
  if((initparam$spacetime||initparam$bivariate)&& spacetime_dyn)  X=as.matrix(rep(1,NS[numtime]))#
}#
num_betas=ncol(X) #
grid = FALSE#
if(grid)    #
{a=expand.grid(initparam$coordx,initparam$coordy);coordx=a[,1];coordy=a[,2]; #
}else {#
  if((initparam$spacetime||initparam$bivariate)&&(!spacetime_dyn)){#
    data=c(t(data))#
    coordx=rep(coordx,numtime);coordy=rep(coordy,numtime)#
  }#
  if((initparam$spacetime||initparam$bivariate)&&(spacetime_dyn)) initparam$data=unlist(initparam$data)          #
}#
if(initparam$spacetime||initparam$bivariate)   NS=c(0,NS)[-(length(initparam$ns)+1)]#
initparam$fixed#
#
dimmat <- initparam$numparam^2#
dmat <- initparam$numparam*(initparam$numparam+1)/2#
eps <- (.Machine$double.eps)^(1/3)#
param <- c(initparam$param, initparam$fixed)#
score <- double(initparam$numparam)#
paramcorr <- param[initparam$namescorr]#
nuisance <- param[initparam$namesnuis]#
sel=substr(names(nuisance),1,4)=="mean"#
mm=as.numeric(nuisance[sel])   ## mean paramteres#
other_nuis=as.numeric(nuisance[!sel]) #
nuisance=c(mm,other_nuis)#
sensmat <- double(dmat);varimat <- double(dmat)#
GD=.C('GodambeMat',as.double(mm),as.integer(initparam$bivariate),as.double(initparam$coordx),as.double(initparam$coordy),#
      as.double(initparam$coordt),as.integer(initparam$corrmodel), as.double(initparam$data),as.integer(initparam$distance),as.double(eps),#
      as.integer(initparam$flagcorr), as.integer(initparam$flagnuis),as.integer(grid),as.integer(initparam$likelihood),#
      as.double(c(X%*%mm)),as.integer(initparam$model),as.double(initparam$n),as.integer(num_betas),#
      as.integer(initparam$numparam),as.integer(initparam$numparamcorr),as.integer(length(paramcorr)),as.double(paramcorr),as.double(nuisance),#
      score=score,sensmat=sensmat,as.integer(initparam$spacetime),as.integer(initparam$type),#
      varimat=varimat,as.integer(initparam$vartype),as.double(initparam$winconst),as.double(initparam$winstp),as.double(initparam$winconst_t),as.double(initparam$winstp_t),#
      as.integer(initparam$weighted),c(t(X)),ns=as.integer(initparam$ns),NS=as.integer(NS),PACKAGE='GeoModels',DUP=TRUE,NAOK=TRUE)#
str(GD)
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="Gaussian";shape=4;n=1#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,20,.8)# con 9 funciona,  con 8 explota#
# coordt=seq(0,2)# con 9 funciona,  con 8 explota#
coordx_dyn=list()#
#
# maxN=130#130#
# set.seed(112)#
# for(k in 1:length(coordt))#
# {#
#   NN=sample(1:maxN,size=1)#
#   print(NN)#
#   x <- runif(NN, 0, 1)#
#   y <- runif(NN, 0, 1)#
#   coordx_dyn[[k]]=cbind(x,y)#
# }#
#
maxN=30#130#
set.seed(10)#
for(k in 1:length(coordt))#
{#
  NN=sample(2:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
# coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 0.1#
sill <- 1#
nugget <- 0#
scale_s <- .3#
scale_t <- .3#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget, sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,mean = mean )#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxtime=2;maxdist=0.2#
fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
               corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,model = model,varest = TRUE)#
print(fit1)#
fit1$param#
score <- sensmat <- varcov <- varimat <- parscale <- NULL#
### Initialization parameters:#
initparam <- WlsStart(coordx=NULL, coordy=NULL, coordt=coordt, coordx_dyn=coordx_dyn, corrmodel, data=ss1, distance="Eucl", "Fitting", fixed=fixed, grid=FALSE,#10#
                      likelihood='Marginal', maxdist=maxdist, maxtime=maxtime,  model=model, n=1, NULL,#16#
                      parscale, optimizer=='L-BFGS-B', radius=6378.388, start=start, taper=NULL, tapsep=NULL,#22#
                      type="Pairwise", varest=TRUE, vartype='SubSamp', weighted=FALSE, winconst=NULL, winstp=NULL,winconst_t=NULL, winstp_t=NULL, X=NULL)#31#
numcoord=length(initparam$coordx);numtime=1;spacetime_dyn=FALSE#
if(initparam$spacetime) numtime=length(initparam$coordt)#
if(initparam$bivariate) numtime=2#
if(!is.null(coordx_dyn)) spacetime_dyn=TRUE#
dimat <- numcoord*numtime##
NS=cumsum(initparam$ns)#
if(is.null(dim(initparam$X)))#
{#
  X=as.matrix(rep(1,dimat))#
  if((initparam$spacetime||initparam$bivariate)&& spacetime_dyn)  X=as.matrix(rep(1,NS[numtime]))#
}#
num_betas=ncol(X) #
grid = FALSE#
if(grid)    #
{a=expand.grid(initparam$coordx,initparam$coordy);coordx=a[,1];coordy=a[,2]; #
}else {#
  if((initparam$spacetime||initparam$bivariate)&&(!spacetime_dyn)){#
    data=c(t(data))#
    coordx=rep(coordx,numtime);coordy=rep(coordy,numtime)#
  }#
  if((initparam$spacetime||initparam$bivariate)&&(spacetime_dyn)) initparam$data=unlist(initparam$data)          #
}#
if(initparam$spacetime||initparam$bivariate)   NS=c(0,NS)[-(length(initparam$ns)+1)]#
initparam$fixed#
#
dimmat <- initparam$numparam^2#
dmat <- initparam$numparam*(initparam$numparam+1)/2#
eps <- (.Machine$double.eps)^(1/3)#
param <- c(initparam$param, initparam$fixed)#
score <- double(initparam$numparam)#
paramcorr <- param[initparam$namescorr]#
nuisance <- param[initparam$namesnuis]#
sel=substr(names(nuisance),1,4)=="mean"#
mm=as.numeric(nuisance[sel])   ## mean paramteres#
other_nuis=as.numeric(nuisance[!sel]) #
nuisance=c(mm,other_nuis)#
sensmat <- double(dmat);varimat <- double(dmat)#
GD=.C('GodambeMat',as.double(mm),as.integer(initparam$bivariate),as.double(initparam$coordx),as.double(initparam$coordy),#
      as.double(initparam$coordt),as.integer(initparam$corrmodel), as.double(initparam$data),as.integer(initparam$distance),as.double(eps),#
      as.integer(initparam$flagcorr), as.integer(initparam$flagnuis),as.integer(grid),as.integer(initparam$likelihood),#
      as.double(c(X%*%mm)),as.integer(initparam$model),as.double(initparam$n),as.integer(num_betas),#
      as.integer(initparam$numparam),as.integer(initparam$numparamcorr),as.integer(length(paramcorr)),as.double(paramcorr),as.double(nuisance),#
      score=score,sensmat=sensmat,as.integer(initparam$spacetime),as.integer(initparam$type),#
      varimat=varimat,as.integer(initparam$vartype),as.double(initparam$winconst),as.double(initparam$winstp),as.double(initparam$winconst_t),as.double(initparam$winstp_t),#
      as.integer(initparam$weighted),c(t(X)),ns=as.integer(initparam$ns),NS=as.integer(NS),PACKAGE='GeoModels',DUP=TRUE,NAOK=TRUE)#
str(GD)
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="Gaussian";shape=4;n=1#
set.seed(112)#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,20,1)# con 9 funciona,  con 8 explota#
#
N=200  # number of location sites#
x <- runif(N, 0, 1)#
# set.seed(5)#
y <- runif(N, 0, 1)#
coords <- cbind(x,y)#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 0.1#
sill <- 1#
nugget <- 0#
scale_s <- .3#
scale_t <- .3#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
fixed<-list(nugget=nugget, sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,mean = mean )#
set.seed(2)#
ss1 <- GeoSim(coordx=coords, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxtime=2;maxdist=0.1#
fit1 <- GeoFit(data=ss1,coordx=coords,coordt=coordt,#
               corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,model = model,varest = TRUE)#
print(fit1)#
fit1$param
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="Gaussian";shape=4;n=1#
set.seed(112)#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,20,1.5)# con 9 funciona,  con 8 explota#
#
N=200  # number of location sites#
x <- runif(N, 0, 1)#
# set.seed(5)#
y <- runif(N, 0, 1)#
coords <- cbind(x,y)#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 0.1#
sill <- 1#
nugget <- 0#
scale_s <- .3#
scale_t <- .3#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
fixed<-list(nugget=nugget, sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,mean = mean )#
set.seed(2)#
ss1 <- GeoSim(coordx=coords, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxtime=2;maxdist=0.1#
fit1 <- GeoFit(data=ss1,coordx=coords,coordt=coordt,#
               corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,model = model,varest = TRUE)#
print(fit1)#
fit1$param
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="Gaussian";shape=4;n=1#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,5)# con 9 funciona,  con 8 explota#
coordx_dyn=list()#
#
maxN=130#130#
set.seed(112)#
for(k in 1:length(coordt))#
{#
  NN=sample(1:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
# coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 0.1#
sill <- 1#
nugget <- 0#
scale_s <- .3#
scale_t <- .3#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget, sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,mean = mean )#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxtime=2;maxdist=0.2#
fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
               corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,model = model,varest = TRUE)#
# print(fit1)#
# fit1$param
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="Gaussian";shape=4;n=1#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,5,1.2)# con 9 funciona,  con 8 explota#
coordx_dyn=list()#
#
maxN=130#130#
set.seed(112)#
for(k in 1:length(coordt))#
{#
  NN=sample(1:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
# coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 0.1#
sill <- 1#
nugget <- 0#
scale_s <- .3#
scale_t <- .3#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget, sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,mean = mean )#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxtime=2;maxdist=0.2#
fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
               corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,model = model,varest = TRUE)#
# print(fit1)#
# fit1$param
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="Gaussian";shape=4;n=1#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,5,.7)# con 9 funciona,  con 8 explota#
coordx_dyn=list()#
#
maxN=130#130#
set.seed(112)#
for(k in 1:length(coordt))#
{#
  NN=sample(1:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
# coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 0.1#
sill <- 1#
nugget <- 0#
scale_s <- .3#
scale_t <- .3#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget, sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,mean = mean )#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxtime=2;maxdist=0.2#
fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
               corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,model = model,varest = TRUE)#
# print(fit1)#
# fit1$param
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="Gaussian";shape=4;n=1#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,5,.5)# con 9 funciona,  con 8 explota#
coordx_dyn=list()#
#
maxN=130#130#
set.seed(112)#
for(k in 1:length(coordt))#
{#
  NN=sample(1:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
# coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 0.1#
sill <- 1#
nugget <- 0#
scale_s <- .3#
scale_t <- .3#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget, sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,mean = mean )#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxtime=2;maxdist=0.2#
fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
               corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,model = model,varest = TRUE)#
# print(fit1)#
# fit1$param
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="Gaussian";shape=4;n=1#
set.seed(112)#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,20,1.5)# con 9 funciona,  con 8 explota#
#
N=200  # number of location sites#
x <- runif(N, 0, 1)#
# set.seed(5)#
y <- runif(N, 0, 1)#
coords <- cbind(x,y)#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 0.1#
sill <- 1#
nugget <- 0#
scale_s <- .3#
scale_t <- .3#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
fixed<-list(nugget=nugget, sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,mean = mean )#
set.seed(2)#
ss1 <- GeoSim(coordx=coords, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxtime=2;maxdist=0.1#
fit1 <- GeoFit(data=ss1,coordx=coords,coordt=coordt,#
               corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,model = model,varest = TRUE)#
print(fit1)#
fit1$param
#================================= Comp_Pair_Gauss_st2 (SPACE-TIME)#
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="Gaussian";shape=4;n=1#
set.seed(112)#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,20,1.5)# con 9 funciona,  con 8 explota#
#
N=200  # number of location sites#
x <- runif(N, 0, 1)#
# set.seed(5)#
y <- runif(N, 0, 1)#
coords <- cbind(x,y)#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 0.1#
sill <- 1#
nugget <- 0#
scale_s <- .3#
scale_t <- .3#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
fixed<-list(nugget=nugget, sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,mean = mean )#
set.seed(2)#
ss1 <- GeoSim(coordx=coords, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxtime=2;maxdist=0.1#
fit1 <- GeoFit(data=ss1,coordx=coords,coordt=coordt,#
               corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,model = model,varest = TRUE)#
print(fit1)#
fit1$param
fit2 <- GeoFit(data=ss1,coordx=coords,coordt=coordt,#
corrmodel=corrmodel,likelihood="Full",type="Standard",#
start=start,fixed=fixed,model = model,varest = TRUE)#
print(fit2)
6+0
plot(1:10)
plot(1:3)
?plot
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="Gaussian";shape=4;n=1#
set.seed(112)#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,20,1.5)# step:1.5#
#
N=100  # number of location sites#
x <- runif(N, 0, 1)#
# set.seed(5)#
y <- runif(N, 0, 1)#
coords <- cbind(x,y)#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 0.1#
sill <- 1#
nugget <- 0#
scale_s <- .3#
scale_t <- .3#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
fixed<-list(nugget=nugget, sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,mean = mean )#
set.seed(2)#
ss1 <- GeoSim(coordx=coords, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxtime=2;maxdist=0.1#
fit1 <- GeoFit(data=ss1,coordx=coords,coordt=coordt,#
               corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,model = model,varest = TRUE)#
print(fit1)#
fit1$param#
#
# Full likelihood:#
fit2 <- GeoFit(data=ss1,coordx=coords,coordt=coordt,#
               corrmodel=corrmodel,likelihood="Full",type="Standard",#
               start=start,fixed=fixed,model = model,varest = TRUE)#
print(fit2)
#================================= Comp_Pair_Gauss (SPACE)#
library(GeoModels)#
#
rm(list = ls())#
# Define the spatial-coordinates of the points:#
# set.seed(6)#
# set.seed(5)#
N=500  # number of location sites#
x <- runif(N, 0, 1)#
# set.seed(5)#
y <- runif(N, 0, 1)#
coords <- cbind(x,y)#
#
# Define spatial matrix covariates#
X=cbind(rep(1,N),runif(N))#
#
# Set the covariance model's parameters:#
corrmodel <- "Exp"#
model <- "Gaussian"#
NuisParam(model,FALSE,1)#
CorrParam(corrmodel)#
mean <- 0#
mean1 <- -0.5#
sill <- 1#
nugget <- 0#
scale <- 2/3#
skew <- 1.5#
param<-list(mean=mean,mean1=mean1,sill=sill,nugget=nugget,scale=scale)#
#
# Simulation of the spatial Gaussian RF:#
set.seed(7)#
data <- GeoSim(coordx=coords,corrmodel=corrmodel, param=param,X=X,model = model)$data#
# data = rnorm(nrow(coords))#
# Fixed parameters#
fixed<-list(nugget=nugget,sill=sill)#
# Starting value for the estimated parameters#
start<-list(mean=mean,mean1=mean1,scale=scale)#
#
# CPUtime = proc.time()#
fit1 <- GeoFit(data=data,coordx=coords,corrmodel=corrmodel,#
               maxdist=0.1,likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,X=X, model = model,varest = TRUE)#
# CPUtime = proc.time()-CPUtime;CPUtime#
print(fit1)
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="Gaussian";shape=4;n=1#
set.seed(112)#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,9)# con 9 funciona,  con 8 explota#
coordx_dyn=list()#
#
maxN=130#130#
for(k in 1:length(coordt))#
{#
  NN=sample(1:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
# coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 0.1#
sill <- 1#
nugget <- 0#
scale_s <- .3#
scale_t <- .3#
skew <- -0.5#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget, sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,mean = mean )#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxtime=1;maxdist=0.3#
fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
               corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,model = model,varest = TRUE)
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="Gaussian";shape=4;n=1#
set.seed(112)#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,20,1.5)# step:1.5#
#
N=100  # number of location sites#
x <- runif(N, 0, 1)#
# set.seed(5)#
y <- runif(N, 0, 1)#
coords <- cbind(x,y)#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 0.1#
sill <- 1#
nugget <- 0#
scale_s <- .3#
scale_t <- .3#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
fixed<-list(nugget=nugget, sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,mean = mean )#
set.seed(2)#
ss1 <- GeoSim(coordx=coords, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxtime=2;maxdist=0.1#
fit1 <- GeoFit(data=ss1,coordx=coords,coordt=coordt,#
               corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,model = model,varest = TRUE)#
print(fit1)#
fit1$param#
#
# Full likelihood:#
fit2 <- GeoFit(data=ss1,coordx=coords,coordt=coordt,#
corrmodel=corrmodel,likelihood="Full",type="Standard",#
start=start,fixed=fixed,model = model,varest = TRUE)#
print(fit2)
install.packages(‘scatterplot3d’, ‘mapproj’, ‘gsl’, ‘plot3D’, ‘shape’, ‘sphereplot’)
install.packages(c("scatterplot3d", "mapproj", "gsl", "plot3D", "shape", "sphereplot"))
rm(list=ls())#
library(GeoModels)#
library(spam)#
#
################################################################
############ Examples of spatial RFs #################
################################################################
model="Gamma"#
# Define the spatial-coordinates of the points:#
set.seed(368)#
NN=1000#
x <- runif(NN, 0, 1)#
y <- runif(NN, 0, 1)#
coords <- cbind(x,y)#
#
#a=b=seq(0,1,.05)#
#coords=as.matrix(expand.grid(a,b))#
# Set the covariance model's parameters:#
corrmodel <- "Exponential";sparse=FALSE#
mean <- -0.25;#
mean1=5.5#
sill <- 1  ### must be fixed#
nugget <- 0#
scale <- 0.15/3 ; power2=4#
shape=5#
X=cbind(rep(1,nrow(coords)),runif(nrow(coords)))#
param<-list(mean=mean, mean1=mean1,sill=sill,nugget=nugget,scale=scale,shape=shape)#
#
# Simulation of the spatial Gaussian RF:#
set.seed(32)#
#
k=1#
nsim=1000#
res=res2=NULL#
par(mfrow=c(1,2))#
#while(k<nsim){#
data <- GeoSim(coordx=coords,corrmodel=corrmodel, param=param,model=model,X=X)$data#
#CC <- GeoCovmatrix(coordx=coords,corrmodel=corrmodel, param=param,model=model)$covmat#
# Empirical spatial semi-variogram estimation:#
#fit <- GeoVariogram(coordx=coords,data=data,maxdist=0.5)#
#
# Results:#
#plot(fit$centers, fit$variograms, xlab='h', ylab=expression(gamma(h)),xlim=c(0,0.5),#
#     ylim=c(0, max(fit$variograms)), pch=20,#
#     main="Semi-variogram")##
#
#### comparing for stationary case#
#mean(data)#
#exp(mean)#
#var(data)#
#2*exp(mean)^2/shape#
#plot(density(data))#
#lines(density(rgamma(10000,shape=(shape)/2,rate=shape/(2*exp(mean)))),lty=2)#
#
fixed<-list(nugget=nugget,sill=sill)  ### note that sill must be fixed!!!!#
#
# Starting value for the estimated parameters#
start<-list(scale=scale,shape=shape,mean=mean,mean1=mean1)  #
# Maximum pairwise composite-likelihood fitting of the RF:#
fit2 <- GeoFit(data=data,coordx=coords,corrmodel=corrmodel,X=X,#
                    maxdist=0.2,likelihood="Marginal",type="Pairwise",model=model,#
                    start=start,fixed=fixed,varest=T)#
#
print(fit2)
warnings()
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
################################################################
############ Examples of spatial RFs #################
################################################################
model="Gamma"#
set.seed(3)#
#
# Define the spatial-coordinates of the points:#
NN=50#
x <- runif(NN, 0, 1)#
set.seed(6)#
y <- runif(NN, 0, 1)#
coords <- cbind(x,y)#
#
coordt=seq(0,45,1)#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
mean <- 2#
sill <- 1#
nugget <- 0#
scale_s <- 0.2/3#
scale_t <- 1/3#
shape=7#
param<-list(mean=mean, shape=shape, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
#
# Simulation of the spatial Gaussian RF:#
set.seed(3132)#
data <- GeoSim(coordx=coords,coordt=coordt,corrmodel=corrmodel, param=param,model=model)$data#
#
# Fixed parameters#
fixed<-list(nugget=nugget,sill=sill)#
#
# Starting value for the estimated parameters#
start<-list(mean=mean,scale_s=scale_s,scale_t=scale_t,shape=shape)#
# Maximum composite-likelihood fitting of the RF:#
#fit <- FitComposite(data=data,coordx=coords,corrmodel=corrmodel,model=model,#
#likelihood="Full",type="Standard",#
#start=start,fixed=fixed,X=X,varest=TRUE)#
# Results:#
# Maximum pairwise composite-likelihood fitting of the RF:#
fit <- GeoFit(data=data,coordx=coords,coordt=coordt,corrmodel=corrmodel,#
                    maxdist=0.2,maxtime=3,likelihood="Marginal",type="Pairwise",model=model,#
                    start=start,fixed=fixed,varest=TRUE)#
#
# Results:#
## ml estmation#
##print(fit)#
## pairwise estimation#
print(fit)
rm(list=ls())#
library(GeoModels)#
library(spam)#
#
################################################################
############ Examples of spatial RFs #################
################################################################
model="Gamma"#
# Define the spatial-coordinates of the points:#
set.seed(368)#
NN=1000#
x <- runif(NN, 0, 1)#
y <- runif(NN, 0, 1)#
coords <- cbind(x,y)#
#
#a=b=seq(0,1,.05)#
#coords=as.matrix(expand.grid(a,b))#
# Set the covariance model's parameters:#
corrmodel <- "Exponential";sparse=FALSE#
mean <- -0.25;#
mean1=5.5#
sill <- 1  ### must be fixed#
nugget <- 0#
scale <- 0.15/3 ; power2=4#
shape=5#
X=cbind(rep(1,nrow(coords)),runif(nrow(coords)))#
param<-list(mean=mean, mean1=mean1,sill=sill,nugget=nugget,scale=scale,shape=shape)#
#
# Simulation of the spatial Gaussian RF:#
set.seed(32)#
#
k=1#
nsim=1000#
res=res2=NULL#
par(mfrow=c(1,2))#
#while(k<nsim){#
data <- GeoSim(coordx=coords,corrmodel=corrmodel, param=param,model=model,X=X)$data#
#CC <- GeoCovmatrix(coordx=coords,corrmodel=corrmodel, param=param,model=model)$covmat#
# Empirical spatial semi-variogram estimation:#
#fit <- GeoVariogram(coordx=coords,data=data,maxdist=0.5)#
#
# Results:#
#plot(fit$centers, fit$variograms, xlab='h', ylab=expression(gamma(h)),xlim=c(0,0.5),#
#     ylim=c(0, max(fit$variograms)), pch=20,#
#     main="Semi-variogram")##
#
#### comparing for stationary case#
#mean(data)#
#exp(mean)#
#var(data)#
#2*exp(mean)^2/shape#
#plot(density(data))#
#lines(density(rgamma(10000,shape=(shape)/2,rate=shape/(2*exp(mean)))),lty=2)#
#
fixed<-list(nugget=nugget,sill=sill)  ### note that sill must be fixed!!!!#
#
# Starting value for the estimated parameters#
start<-list(scale=scale,shape=shape,mean=mean,mean1=mean1)  #
# Maximum pairwise composite-likelihood fitting of the RF:#
fit2 <- GeoFit(data=data,coordx=coords,corrmodel=corrmodel,X=X,#
                    maxdist=0.2,likelihood="Marginal",type="Pairwise",model=model,#
                    start=start,fixed=fixed,varest=T)#
#
print(fit2)
fit2 <- GeoFit(data=data,coordx=coords,corrmodel=corrmodel,X=X,#
                    maxdist=0.2,likelihood="Marginal",type="Pairwise",model=model,#
                    start=start,fixed=fixed)
print(fit2)
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
################################################################
############ Examples of spatial RFs #################
################################################################
model="Gamma"#
set.seed(3)#
#
# Define the spatial-coordinates of the points:#
NN=50#
x <- runif(NN, 0, 1)#
set.seed(6)#
y <- runif(NN, 0, 1)#
coords <- cbind(x,y)#
#
coordt=seq(0,45,1)#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
mean <- 2#
sill <- 1#
nugget <- 0#
scale_s <- 0.2/3#
scale_t <- 1/3#
shape=7#
param<-list(mean=mean, shape=shape, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
#
# Simulation of the spatial Gaussian RF:#
set.seed(3132)#
data <- GeoSim(coordx=coords,coordt=coordt,corrmodel=corrmodel, param=param,model=model)$data#
#
# Fixed parameters#
fixed<-list(nugget=nugget,sill=sill)#
#
# Starting value for the estimated parameters#
start<-list(mean=mean,scale_s=scale_s,scale_t=scale_t,shape=shape)#
# Maximum composite-likelihood fitting of the RF:#
#fit <- FitComposite(data=data,coordx=coords,corrmodel=corrmodel,model=model,#
#likelihood="Full",type="Standard",#
#start=start,fixed=fixed,X=X,varest=TRUE)#
# Results:#
# Maximum pairwise composite-likelihood fitting of the RF:#
fit <- GeoFit(data=data,coordx=coords,coordt=coordt,corrmodel=corrmodel,#
                    maxdist=0.2,maxtime=3,likelihood="Marginal",type="Pairwise",model=model,#
                    start=start,fixed=fixed,varest=TRUE)#
#
# Results:#
## ml estmation#
##print(fit)#
## pairwise estimation#
print(fit)
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
################################################################
############ Examples of spatial RFs #################
################################################################
model="Gamma"#
set.seed(3)#
#
# Define the spatial-coordinates of the points:#
NN=50#
x <- runif(NN, 0, 1)#
set.seed(6)#
y <- runif(NN, 0, 1)#
coords <- cbind(x,y)#
#
coordt=seq(0,10,1)#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
mean <- 2#
sill <- 1#
nugget <- 0#
scale_s <- 0.2/3#
scale_t <- 1/3#
shape=7#
param<-list(mean=mean, shape=shape, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
#
# Simulation of the spatial Gaussian RF:#
set.seed(3132)#
data <- GeoSim(coordx=coords,coordt=coordt,corrmodel=corrmodel, param=param,model=model)$data#
#
# Fixed parameters#
fixed<-list(nugget=nugget,sill=sill)#
#
# Starting value for the estimated parameters#
start<-list(mean=mean,scale_s=scale_s,scale_t=scale_t,shape=shape)#
# Maximum composite-likelihood fitting of the RF:#
#fit <- FitComposite(data=data,coordx=coords,corrmodel=corrmodel,model=model,#
#likelihood="Full",type="Standard",#
#start=start,fixed=fixed,X=X,varest=TRUE)#
# Results:#
# Maximum pairwise composite-likelihood fitting of the RF:#
fit <- GeoFit(data=data,coordx=coords,coordt=coordt,corrmodel=corrmodel,#
                    maxdist=0.2,maxtime=3,likelihood="Marginal",type="Pairwise",model=model,#
                    start=start,fixed=fixed,varest=TRUE)#
#
# Results:#
## ml estmation#
##print(fit)#
## pairwise estimation#
print(fit)
observed information matrix
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
################################################################
############ Examples of spatial RFs #################
################################################################
model="Gamma"#
set.seed(3)#
#
# Define the spatial-coordinates of the points:#
NN=50#
x <- runif(NN, 0, 1)#
set.seed(6)#
y <- runif(NN, 0, 1)#
coords <- cbind(x,y)#
#
coordt=seq(0,10,1)#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
mean <- 2#
sill <- 1#
nugget <- 0#
scale_s <- 0.2/3#
scale_t <- 1/3#
shape=7#
param<-list(mean=mean, shape=shape, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
#
# Simulation of the spatial Gaussian RF:#
set.seed(3132)#
data <- GeoSim(coordx=coords,coordt=coordt,corrmodel=corrmodel, param=param,model=model)$data#
#
# Fixed parameters#
fixed<-list(nugget=nugget,sill=sill)#
#
# Starting value for the estimated parameters#
start<-list(mean=mean,scale_s=scale_s,scale_t=scale_t,shape=shape)#
# Maximum composite-likelihood fitting of the RF:#
#fit <- FitComposite(data=data,coordx=coords,corrmodel=corrmodel,model=model,#
#likelihood="Full",type="Standard",#
#start=start,fixed=fixed,X=X,varest=TRUE)#
# Results:#
# Maximum pairwise composite-likelihood fitting of the RF:#
fit <- GeoFit(data=data,coordx=coords,coordt=coordt,corrmodel=corrmodel,#
                    maxdist=0.2,maxtime=3,likelihood="Marginal",type="Pairwise",model=model,#
                    start=start,fixed=fixed,varest=TRUE)#
#
# Results:#
## ml estmation#
##print(fit)#
## pairwise estimation#
print(fit)
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
################################################################
############ Examples of spatial RFs #################
################################################################
model="Gamma"#
set.seed(3)#
#
# Define the spatial-coordinates of the points:#
NN=50#
x <- runif(NN, 0, 1)#
set.seed(6)#
y <- runif(NN, 0, 1)#
coords <- cbind(x,y)#
#
coordt=seq(0,10,1)#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
mean <- 2#
sill <- 1#
nugget <- 0#
scale_s <- 0.2/3#
scale_t <- 1/3#
shape=7#
param<-list(mean=mean, shape=shape, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
#
# Simulation of the spatial Gaussian RF:#
set.seed(3132)#
data <- GeoSim(coordx=coords,coordt=coordt,corrmodel=corrmodel, param=param,model=model)$data#
#
# Fixed parameters#
fixed<-list(nugget=nugget,sill=sill,scale_s=scale_s)#
#
# Starting value for the estimated parameters#
start<-list(mean=mean,scale_t=scale_t,shape=shape)#
# Maximum composite-likelihood fitting of the RF:#
#fit <- FitComposite(data=data,coordx=coords,corrmodel=corrmodel,model=model,#
#likelihood="Full",type="Standard",#
#start=start,fixed=fixed,X=X,varest=TRUE)#
# Results:#
# Maximum pairwise composite-likelihood fitting of the RF:#
fit <- GeoFit(data=data,coordx=coords,coordt=coordt,corrmodel=corrmodel,#
                    maxdist=0.2,maxtime=3,likelihood="Marginal",type="Pairwise",model=model,#
                    start=start,fixed=fixed,varest=TRUE)#
#
# Results:#
## ml estmation#
##print(fit)#
## pairwise estimation#
print(fit)
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
################################################################
############ Examples of spatial RFs #################
################################################################
model="Gamma"#
set.seed(3)#
#
# Define the spatial-coordinates of the points:#
NN=50#
x <- runif(NN, 0, 1)#
set.seed(6)#
y <- runif(NN, 0, 1)#
coords <- cbind(x,y)#
#
coordt=seq(0,10,1)#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
mean <- 2#
sill <- 1#
nugget <- 0#
scale_s <- 0.2/3#
scale_t <- 1/3#
shape=7#
param<-list(mean=mean, shape=shape, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
#
# Simulation of the spatial Gaussian RF:#
set.seed(3132)#
data <- GeoSim(coordx=coords,coordt=coordt,corrmodel=corrmodel, param=param,model=model)$data#
#
# Fixed parameters#
fixed<-list(nugget=nugget,sill=sill,scale_s=scale_s,scale_t=scale_t)#
#
# Starting value for the estimated parameters#
start<-list(mean=mean,shape=shape)#
# Maximum composite-likelihood fitting of the RF:#
#fit <- FitComposite(data=data,coordx=coords,corrmodel=corrmodel,model=model,#
#likelihood="Full",type="Standard",#
#start=start,fixed=fixed,X=X,varest=TRUE)#
# Results:#
# Maximum pairwise composite-likelihood fitting of the RF:#
fit <- GeoFit(data=data,coordx=coords,coordt=coordt,corrmodel=corrmodel,#
                    maxdist=0.2,maxtime=3,likelihood="Marginal",type="Pairwise",model=model,#
                    start=start,fixed=fixed,varest=TRUE)#
#
# Results:#
## ml estmation#
##print(fit)#
## pairwise estimation#
print(fit)
#================================= Comp_Pair_Gauss (SPACE)#
library(GeoModels)#
#
rm(list = ls())#
# Define the spatial-coordinates of the points:#
# set.seed(6)#
# set.seed(5)#
N=500  # number of location sites#
x <- runif(N, 0, 1)#
# set.seed(5)#
y <- runif(N, 0, 1)#
coords <- cbind(x,y)#
#
# Define spatial matrix covariates#
X=cbind(rep(1,N),runif(N))#
#
# Set the covariance model's parameters:#
corrmodel <- "Exp"#
model <- "Gaussian"#
NuisParam(model,FALSE,1)#
CorrParam(corrmodel)#
mean <- 0#
mean1 <- -0.5#
sill <- 1#
nugget <- 0#
scale <- 2/3#
skew <- 1.5#
param<-list(mean=mean,mean1=mean1,sill=sill,nugget=nugget,scale=scale)#
#
# Simulation of the spatial Gaussian RF:#
set.seed(7)#
data <- GeoSim(coordx=coords,corrmodel=corrmodel, param=param,X=X,model = model)$data#
# data = rnorm(nrow(coords))#
# Fixed parameters#
fixed<-list(nugget=nugget,sill=sill)#
# Starting value for the estimated parameters#
start<-list(mean=mean,mean1=mean1,scale=scale)#
#
# CPUtime = proc.time()#
fit1 <- GeoFit(data=data,coordx=coords,corrmodel=corrmodel,#
               maxdist=0.1,likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,X=X, model = model,varest = TRUE)#
# CPUtime = proc.time()-CPUtime;CPUtime#
print(fit1)
q()
############################################
rm(list=ls())#
#
#*** Info:#
'   #
PRACTICAL RANGE = 3 IRREGULAR#
            12 scenarios:#
b: 2,4,8 for window size in space (3 in total).#
Weighted: 1 (Yes), 0 (No) (two in total)#
Step window: 0.25 for space && no overlap (two in total)'#
#*** End Info:#
#
########################R package########################
require(CompRandFld)#
require(MCMCpack)#
require(spatstat)#
require(STBEU)#
dirsol = "~/Documents/Software/STBEU/Simulations/NewCheck/Res" # Directory where results will be #
################################################
# setting 1  (many locations in space a few in time)#
################################################
#
####location sites #########################################
lambda=8#
xx=seq(-lambda,lambda);#
set.seed(1985)                                                                      ### not regular#
pp<-runifpoint(289, win=owin(c(-lambda,lambda),c(-lambda,lambda)))       ### not regular 289#
coords<-cbind(pp$x,pp$y)#
plot(coords) ### not regular#
####temporal instants #########################################
nt = 18 # Time points 18#
times=seq(1,nt,1)#
nrow(coords)#
nrow(coords)*nt#
#
model=2#
if (model == 2) {#
  # gneiting model#
  cov.model <-"gneiting"#
  cc=2#
  ######
  mean=0#
  nugget=0#
  scale_s<-3/3#
  scale_t<-3/19#
  sill=1#
  power_s=1;power_t=1;sep=0.5#
  param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill,#
             power_s=power_s,power_t=power_t,sep=sep)  #
  # fixed=list(nugget=0,power_s=power_s,power_t=power_t)#
  fixed=list(nugget=nugget,power_s=power_s,power_t=power_t,sep=sep,mean = mean)  #
  fix=c(nugget=nugget, power_s=power_s, power_t=power_t,sep=sep,mean = mean) #
}#
#
#################################################
#   parameters for the subsampling #####
################################################
coordx=coords[,1]#
coordy=coords[,2]#
LX=abs(range(coordx)[1]-range(coordx)[2])#
LY=abs(range(coordy)[1]-range(coordy)[2])#
type_subs=1    ### type of subsampling  1=in space    2= in time 3= spacetime#
#
type_dist=1                ### type of distance     1=euclidean 2=chordal  3=geodesic #
maxdistPL=max(dist(coords))*.25                  ## compact support in weights function for pairwise liklihood#
maxtime=ceiling(max(dist(times))*.25)#
#
i=1#
nsim<-500   ## number of simulation#
results=matrix(NA,ncol=4,nrow=5*nsim);label = 0:4#
set.seed(276)
data <- RFsim(coordx=coords,coordt=times,corrmodel=cov.model, param=param)$data#
  mm=mean(c(data))#
  vv=var(c(data))#
  start=list(scale_s=scale_s,scale_t=scale_t,sill=vv)#
  ##################################################################################################### #
  ###### Composite likelihood based on pairs estimation ###############################################     #
  theta=c(sill=vv,scale_s=scale_s,scale_t=scale_t)                #starting value  #
  # Maximum composite-likelihood fitting of the random field:#
  # **************************scenario 0/4A main NOT weighted estimation***#
  fitA <- FitComposite(data=data,coordx=coords,coordt=times,#
                       corrmodel=cov.model,maxtime=maxtime,maxdist=maxdistPL,#
                       likelihood="Marginal",type="Pairwise",#
                       start=start,fixed=fixed,weighted=F)#
  eu_par0=c(fitA$param[1],fitA$param[2],fitA$param[3])#
  print(fitA$param)#
  names(eu_par0)=names(fitA$param)#
  # **************************scenario 1/4 b = 2, no overlaping  ***#
  #################################################
  #   parameters for the subsampling #####
  ################################################
  lato_fin=2  #changing window size 2,4#
  lx=lato_fin          #lunghezza lato x quadrato subfinestra#
  ly=lato_fin          #lunghezza lato y quadrato subfinestra#
  winc=c(lx/sqrt(LX),ly/sqrt(LY))#
  winstp= 1  ###   1/lato_fin complete overlapping   1 "no" overlapping#
  ################################################
  weighted=0#
  maxdist=lato_fin#
  # maxdist=1.5#
  ### eucliden likelihood ################ #
  res1=STBEUFit(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc_s=winc,winstp_s = winstp,0,0,type_subs,weighted)#
  eu_par1=c(res1$par[2],res1$par[3],res1$par[1])#
  names(eu_par1)=names(fitA$param)
start
############################################
rm(list=ls())#
#
#*** Info:#
'   #
PRACTICAL RANGE = 3#
12 scenarios:#
b: 2,4,8 for window size in space (3 in total).#
Weighted: 1 (Yes), 0 (No) (two in total)#
Step window: 0.25 for space && no overlap (two in total)'#
#*** End Info:#
#
########################R package########################
require(CompRandFld)#
require(MCMCpack)#
# require(STBEU)#
dirsol = "~/Documents/Software/STBEU/Simulations/NewCheck/Res" # Directory where results will be #
################################################
# setting 1  (many locations in space a few in time)#
################################################
#
####location sites #########################################
lambda=8#
xx=seq(-lambda,lambda);#
coords=as.matrix(expand.grid(xx,xx))   ###regular#
# plot(coords)#
#
####temporal instants #########################################
nt = 18 # Time points#
times=seq(1,nt,1)#
nrow(coords)#
nrow(coords)*nt#
# bn = 2,4,6. Same for time and Space#
################################################
#
model=2  #   1=double exponential       2 =gneiting#
#
if (model == 2) {#
  # gneiting model#
  cov.model <-"gneiting"#
  cc=2#
  ######
  mean=0#
  nugget=0#
  scale_s<-3/3#
  scale_t<-3/19#
  sill=1#
  power_s=1;power_t=1;sep=0.5#
  param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill,#
             power_s=power_s,power_t=power_t,sep=sep)  #
  fixed=list(nugget=nugget,power_s=power_s,power_t=power_t,sep=sep,mean = mean)  #
  fix=c(nugget=nugget, power_s=power_s, power_t=power_t,sep=sep,mean = mean) #
}#
###################################################################
#################################################
#   parameters for the subsampling #####
################################################
coordx=coords[,1]#
coordy=coords[,2]#
LX=abs(range(coordx)[1]-range(coordx)[2])#
LY=abs(range(coordy)[1]-range(coordy)[2])#
type_subs=1    ### type of subsampling  1=in space    2= in time 3= spacetime#
#
type_dist=1                ### type of distance     1=euclidean 2=chordal  3=geodesic #
maxdistPL=max(dist(coords))*.25                  ## compact support in weights function for pairwise liklihood#
maxtime=ceiling(max(dist(times))*.25)#
#
i=1#
nsim<-1   ## number of simulation#
results=matrix(NA,ncol=4,nrow=5*nsim);label = 0:4#
set.seed(276)#
data <- RFsim(coordx=coords,coordt=times,corrmodel=cov.model, param=param)$data#
mm=mean(c(data))#
vv=var(c(data))#
start=list(scale_s=scale_s,scale_t=scale_t,sill=vv)#
##################################################################################################### #
#
###### Composite likelihood based on pairs estimation ###############################################     #
theta=c(sill=vv,scale_s=scale_s,scale_t=scale_t)                #starting value  #
# Maximum composite-likelihood fitting of the random field:#
#
# **************************scenario 0/4A main NOT weighted estimation***#
fitA <- FitComposite(data=data,coordx=coords,coordt=times,#
                     corrmodel=cov.model,maxtime=maxtime,maxdist=maxdistPL,#
                     likelihood="Marginal",type="Pairwise",#
                     start=start,fixed=fixed,weighted=F)#
eu_par0=c(fitA$param[1],fitA$param[2],fitA$param[3])#
print(fitA$param)#
names(eu_par0)=names(fitA$param)#
#
library(GeoModels)#
fitB <- GeoFit(data=data,coordx=coords,coordt=times,#
               corrmodel=cov.model,maxtime=maxtime,maxdist=maxdistPL,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,weighted=F)#
print(fitB)#
library(STBEU)#
lato_fin=2  #changing window size 2,4#
lx=lato_fin          #lunghezza lato x quadrato subfinestra#
ly=lato_fin          #lunghezza lato y quadrato subfinestra#
winc=c(lx/sqrt(LX),ly/sqrt(LY))#
winstp= 1  ###   1/lato_fin complete overlapping   1 "no" overlapping#
################################################
#
weighted=0#
maxdist=lato_fin#
# maxdist=1.5#
#
### eucliden likelihood ################ #
res1=STBEUFit(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc_s=winc,winstp_s = winstp,0,0,type_subs,weighted)#
eu_par1=c(res1$par[2],res1$par[3],res1$par[1])#
names(eu_par1)=names(fitA$param)
############################################
rm(list=ls())#
#
#*** Info:#
'   #
PRACTICAL RANGE = 3#
12 scenarios:#
b: 2,4,8 for window size in space (3 in total).#
Weighted: 1 (Yes), 0 (No) (two in total)#
Step window: 0.25 for space && no overlap (two in total)'#
#*** End Info:#
#
########################R package########################
require(CompRandFld)#
require(MCMCpack)#
# require(STBEU)#
dirsol = "~/Documents/Software/STBEU/Simulations/NewCheck/Res" # Directory where results will be #
################################################
# setting 1  (many locations in space a few in time)#
################################################
#
####location sites #########################################
lambda=8#
xx=seq(-lambda,lambda);#
coords=as.matrix(expand.grid(xx,xx))   ###regular#
# plot(coords)#
#
####temporal instants #########################################
nt = 10 # Time points#
times=seq(1,nt,1)#
nrow(coords)#
nrow(coords)*nt#
# bn = 2,4,6. Same for time and Space#
################################################
#
model=2  #   1=double exponential       2 =gneiting#
#
if (model == 2) {#
  # gneiting model#
  cov.model <-"gneiting"#
  cc=2#
  ######
  mean=0#
  nugget=0#
  scale_s<-3/3#
  scale_t<-3/19#
  sill=1#
  power_s=1;power_t=1;sep=0.5#
  param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill,#
             power_s=power_s,power_t=power_t,sep=sep)  #
  fixed=list(nugget=nugget,power_s=power_s,power_t=power_t,sep=sep,mean = mean)  #
  fix=c(nugget=nugget, power_s=power_s, power_t=power_t,sep=sep,mean = mean) #
}#
###################################################################
#################################################
#   parameters for the subsampling #####
################################################
coordx=coords[,1]#
coordy=coords[,2]#
LX=abs(range(coordx)[1]-range(coordx)[2])#
LY=abs(range(coordy)[1]-range(coordy)[2])#
type_subs=1    ### type of subsampling  1=in space    2= in time 3= spacetime#
#
type_dist=1                ### type of distance     1=euclidean 2=chordal  3=geodesic #
maxdistPL=max(dist(coords))*.25                  ## compact support in weights function for pairwise liklihood#
maxtime=ceiling(max(dist(times))*.25)#
#
i=1#
nsim<-1   ## number of simulation#
results=matrix(NA,ncol=4,nrow=5*nsim);label = 0:4#
set.seed(276)#
data <- RFsim(coordx=coords,coordt=times,corrmodel=cov.model, param=param)$data#
mm=mean(c(data))#
vv=var(c(data))#
start=list(scale_s=scale_s,scale_t=scale_t,sill=vv)#
##################################################################################################### #
#
###### Composite likelihood based on pairs estimation ###############################################     #
theta=c(sill=vv,scale_s=scale_s,scale_t=scale_t)                #starting value  #
# Maximum composite-likelihood fitting of the random field:#
#
# **************************scenario 0/4A main NOT weighted estimation***#
# fitA <- FitComposite(data=data,coordx=coords,coordt=times,#
#                      corrmodel=cov.model,maxtime=maxtime,maxdist=maxdistPL,#
#                      likelihood="Marginal",type="Pairwise",#
#                      start=start,fixed=fixed,weighted=F)#
# eu_par0=c(fitA$param[1],fitA$param[2],fitA$param[3])#
# print(fitA$param)#
# names(eu_par0)=names(fitA$param)#
#
library(GeoModels)#
fitB <- GeoFit(data=data,coordx=coords,coordt=times,#
               corrmodel=cov.model,maxtime=maxtime,maxdist=maxdistPL,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,weighted=F)#
print(fitB)
q()
############################################
rm(list=ls())#
#
#*** Info:#
'   #
PRACTICAL RANGE = 3#
12 scenarios:#
b: 2,4,8 for window size in space (3 in total).#
Weighted: 1 (Yes), 0 (No) (two in total)#
Step window: 0.25 for space && no overlap (two in total)'#
#*** End Info:#
#
########################R package########################
require(CompRandFld)#
require(MCMCpack)#
# require(STBEU)#
dirsol = "~/Documents/Software/STBEU/Simulations/NewCheck/Res" # Directory where results will be #
################################################
# setting 1  (many locations in space a few in time)#
################################################
#
####location sites #########################################
lambda=8#
xx=seq(-lambda,lambda);#
coords=as.matrix(expand.grid(xx,xx))   ###regular#
# plot(coords)#
#
####temporal instants #########################################
nt = 10 # Time points#
times=seq(1,nt,1)#
nrow(coords)#
nrow(coords)*nt#
# bn = 2,4,6. Same for time and Space#
################################################
#
model=2  #   1=double exponential       2 =gneiting#
#
if (model == 2) {#
  # gneiting model#
  cov.model <-"gneiting"#
  cc=2#
  ######
  mean=0#
  nugget=0#
  scale_s<-3/3#
  scale_t<-3/19#
  sill=1#
  power_s=1;power_t=1;sep=0.5#
  param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill,#
             power_s=power_s,power_t=power_t,sep=sep)  #
  fixed=list(nugget=nugget,power_s=power_s,power_t=power_t,sep=sep,mean = mean)  #
  fix=c(nugget=nugget, power_s=power_s, power_t=power_t,sep=sep,mean = mean) #
}#
###################################################################
#################################################
#   parameters for the subsampling #####
################################################
coordx=coords[,1]#
coordy=coords[,2]#
LX=abs(range(coordx)[1]-range(coordx)[2])#
LY=abs(range(coordy)[1]-range(coordy)[2])#
type_subs=1    ### type of subsampling  1=in space    2= in time 3= spacetime#
#
type_dist=1                ### type of distance     1=euclidean 2=chordal  3=geodesic #
maxdistPL=max(dist(coords))*.25                  ## compact support in weights function for pairwise liklihood#
maxtime=ceiling(max(dist(times))*.25)#
#
i=1#
nsim<-1   ## number of simulation#
results=matrix(NA,ncol=4,nrow=5*nsim);label = 0:4#
set.seed(276)#
data <- RFsim(coordx=coords,coordt=times,corrmodel=cov.model, param=param)$data#
mm=mean(c(data))#
vv=var(c(data))#
start=list(scale_s=scale_s,scale_t=scale_t,sill=vv)#
##################################################################################################### #
#
###### Composite likelihood based on pairs estimation ###############################################     #
theta=c(sill=vv,scale_s=scale_s,scale_t=scale_t)                #starting value  #
# Maximum composite-likelihood fitting of the random field:#
#
# **************************scenario 0/4A main NOT weighted estimation***#
# fitA <- FitComposite(data=data,coordx=coords,coordt=times,#
#                      corrmodel=cov.model,maxtime=maxtime,maxdist=maxdistPL,#
#                      likelihood="Marginal",type="Pairwise",#
#                      start=start,fixed=fixed,weighted=F)#
# eu_par0=c(fitA$param[1],fitA$param[2],fitA$param[3])#
# print(fitA$param)#
# names(eu_par0)=names(fitA$param)#
#
# library(GeoModels)#
# fitB <- GeoFit(data=data,coordx=coords,coordt=times,#
#                corrmodel=cov.model,maxtime=maxtime,maxdist=maxdistPL,#
#                likelihood="Marginal",type="Pairwise",#
#                start=start,fixed=fixed,weighted=F)#
# print(fitB)#
library(STBEU)#
lato_fin=2  #changing window size 2,4#
lx=lato_fin          #lunghezza lato x quadrato subfinestra#
ly=lato_fin          #lunghezza lato y quadrato subfinestra#
winc=c(lx/sqrt(LX),ly/sqrt(LY))#
winstp= 1  ###   1/lato_fin complete overlapping   1 "no" overlapping#
################################################
#
weighted=0#
maxdist=lato_fin#
# maxdist=1.5#
#
### eucliden likelihood ################ #
res1=STBEUFit(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc_s=winc,winstp_s = winstp,0,0,type_subs,weighted)#
# eu_par1=c(res1$par[2],res1$par[3],res1$par[1])#
# names(eu_par1)=names(fitA$param)
f <- function(x,r) r*x*(1-x)#
bounce <- function(f,init=4,n=10,cobweb=T,timeseries=F,dom=NULL,...){#
iterates <- NULL#
x0 <- init#
for(t in 1:n){#
  x1<- f(x0,...)#
  iterates[t] <- x1#
  x0 <- x1#
  }#
#
if(cobweb & !timeseries){#
    if(is.null(dom)){#
    a <- range(c(init,iterates))[1]-0.5#
    b <- range(c(init,iterates))[2]+0.5} else#
    {a <- dom[1];b <- dom[2]}#
    curve(f(x,...),a,b);grid(col=1);abline(0,1,lty=2)#
    lines(c(init,iterates), f(c(init,iterates),...),t="s")#
    points(c(init,iterates), f(c(init,iterates),...))#
}#
#
if(timeseries){#
    plot(0:n,c(init,iterates),t="l")#
}#
#
}#
bounce(f,0.1,r=3.7,n=100)
bounce(f,0.1,r=3.8282,n=100,timeseries=T)
#================================= Comp_Pair_Gauss (SPACE)#
library(GeoModels)#
#
rm(list = ls())#
# Define the spatial-coordinates of the points:#
# set.seed(6)#
# set.seed(5)#
N=1500  # number of location sites#
x <- runif(N, 0, 1)#
# set.seed(5)#
y <- runif(N, 0, 1)#
coords <- cbind(x,y)#
#
# Define spatial matrix covariates#
X=cbind(rep(1,N),runif(N))#
#
# Set the covariance model's parameters:#
corrmodel <- "Exp"#
model <- "Gaussian"#
NuisParam(model,FALSE,1)#
CorrParam(corrmodel)#
mean <- 0#
mean1 <- -0.5#
sill <- 1#
nugget <- 0#
scale <- 2/3#
skew <- 1.5#
param<-list(mean=mean,mean1=mean1,sill=sill,nugget=nugget,scale=scale)#
#
# Simulation of the spatial Gaussian RF:#
set.seed(7)#
data <- GeoSim(coordx=coords,corrmodel=corrmodel, param=param,X=X,model = model)$data#
# data = rnorm(nrow(coords))#
# Fixed parameters#
fixed<-list(nugget=nugget,sill=sill)#
# Starting value for the estimated parameters#
start<-list(mean=mean,mean1=mean1,scale=scale)#
#
# CPUtime = proc.time()#
GPU = 0#
local = c(1,1)#
fit1 <- GeoFit(data=data,coordx=coords,corrmodel=corrmodel,#
               maxdist=0.1,likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,X=X, model = model, GPU = GPU, local = local)#
# CPUtime = proc.time()-CPUtime;CPUtime#
print(fit1)
#================================= Comp_Pair_Gauss (SPACE)#
library(GeoModels)#
#
rm(list = ls())#
# Define the spatial-coordinates of the points:#
# set.seed(6)#
# set.seed(5)#
N=1500  # number of location sites#
x <- runif(N, 0, 1)#
# set.seed(5)#
y <- runif(N, 0, 1)#
coords <- cbind(x,y)#
#
# Define spatial matrix covariates#
X=cbind(rep(1,N),runif(N))#
#
# Set the covariance model's parameters:#
corrmodel <- "Exp"#
model <- "Gaussian"#
NuisParam(model,FALSE,1)#
CorrParam(corrmodel)#
mean <- 0#
mean1 <- -0.5#
sill <- 1#
nugget <- 0#
scale <- 2/3#
skew <- 1.5#
param<-list(mean=mean,mean1=mean1,sill=sill,nugget=nugget,scale=scale)#
#
# Simulation of the spatial Gaussian RF:#
set.seed(7)#
data <- GeoSim(coordx=coords,corrmodel=corrmodel, param=param,X=X,model = model)$data#
# data = rnorm(nrow(coords))#
# Fixed parameters#
fixed<-list(nugget=nugget,sill=sill)#
# Starting value for the estimated parameters#
start<-list(mean=mean,mean1=mean1,scale=scale)#
#
# CPUtime = proc.time()#
GPU = 0#
local = c(1,1)#
fit1 <- GeoFit(data=data,coordx=coords,corrmodel=corrmodel,#
               maxdist=0.1,likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,X=X, model = model)#
# CPUtime = proc.time()-CPUtime;CPUtime#
print(fit1)
#================================= Comp_Pair_Gauss (SPACE)#
library(GeoModels)#
#
rm(list = ls())#
# Define the spatial-coordinates of the points:#
# set.seed(6)#
# set.seed(5)#
N=1500  # number of location sites#
x <- runif(N, 0, 1)#
# set.seed(5)#
y <- runif(N, 0, 1)#
coords <- cbind(x,y)#
#
# Define spatial matrix covariates#
X=cbind(rep(1,N),runif(N))#
#
# Set the covariance model's parameters:#
corrmodel <- "Exp"#
model <- "Gaussian"#
NuisParam(model,FALSE,1)#
CorrParam(corrmodel)#
mean <- 0#
mean1 <- -0.5#
sill <- 1#
nugget <- 0#
scale <- 2/3#
skew <- 1.5#
param<-list(mean=mean,mean1=mean1,sill=sill,nugget=nugget,scale=scale)#
#
# Simulation of the spatial Gaussian RF:#
set.seed(7)#
data <- GeoSim(coordx=coords,corrmodel=corrmodel, param=param,X=X,model = model)$data#
# data = rnorm(nrow(coords))#
# Fixed parameters#
fixed<-list(nugget=nugget,sill=sill)#
# Starting value for the estimated parameters#
start<-list(mean=mean,mean1=mean1,scale=scale)#
#
# CPUtime = proc.time()#
GPU = 0#
local = c(1,1)#
fit1 <- GeoFit(data=data,coordx=coords,corrmodel=corrmodel,#
               maxdist=0.1,likelihood="Conditional",type="Pairwise",#
               start=start,fixed=fixed,X=X, model = model)#
# CPUtime = proc.time()-CPUtime;CPUtime#
print(fit1)
#================================= Comp_Pair_Gauss (SPACE)#
library(GeoModels)#
#
rm(list = ls())#
# Define the spatial-coordinates of the points:#
set.seed(6)#
#set.seed(5)#
N=1500  # number of location sites#
x <- runif(N, 0, 1)#
set.seed(5)#
y <- runif(N, 0, 1)#
coords <- cbind(x,y)#
#
# Define spatial matrix covariates#
X=cbind(rep(1,N),runif(N))#
#
# Set the covariance model's parameters:#
corrmodel <- "Exp"#
model <- "Gaussian"#
NuisParam(model,FALSE,1)#
CorrParam(corrmodel)#
mean <- 0#
mean1 <- -0.5#
sill <- 1#
nugget <- 0#
scale <- 2/3#
skew <- 1.5#
param<-list(mean=mean,mean1=mean1,sill=sill,nugget=nugget,scale=scale)#
#
# Simulation of the spatial Gaussian RF:#
set.seed(7)#
data <- GeoSim(coordx=coords,corrmodel=corrmodel, param=param,X=X,model = model)$data#
# data = rnorm(nrow(coords))#
# Fixed parameters#
fixed<-list(nugget=nugget,sill=sill)#
# Starting value for the estimated parameters#
start<-list(mean=mean,mean1=mean1,scale=scale)#
#
# CPUtime = proc.time()#
GPU = 0#
local = c(1,1)#
fit1 <- GeoFit(data=data,coordx=coords,corrmodel=corrmodel,#
               maxdist=0.1,likelihood="Conditional",type="Pairwise",#
               start=start,fixed=fixed,X=X, model = model,varest = TRUE)#
# CPUtime = proc.time()-CPUtime;CPUtime#
print(fit1)
#================================= Comp_Pair_Gauss (SPACE)#
library(GeoModels)#
#
rm(list = ls())#
# Define the spatial-coordinates of the points:#
set.seed(6)#
#set.seed(5)#
N=1500  # number of location sites#
x <- runif(N, 0, 1)#
set.seed(5)#
y <- runif(N, 0, 1)#
coords <- cbind(x,y)#
#
# Define spatial matrix covariates#
X=cbind(rep(1,N),runif(N))#
#
# Set the covariance model's parameters:#
corrmodel <- "Exp"#
model <- "Gaussian"#
NuisParam(model,FALSE,1)#
CorrParam(corrmodel)#
mean <- 0#
mean1 <- -0.5#
sill <- 1#
nugget <- 0#
scale <- 2/3#
skew <- 1.5#
param<-list(mean=mean,mean1=mean1,sill=sill,nugget=nugget,scale=scale)#
#
# Simulation of the spatial Gaussian RF:#
set.seed(7)#
data <- GeoSim(coordx=coords,corrmodel=corrmodel, param=param,X=X,model = model)$data#
# data = rnorm(nrow(coords))#
# Fixed parameters#
fixed<-list(nugget=nugget,sill=sill)#
# Starting value for the estimated parameters#
start<-list(mean=mean,mean1=mean1,scale=scale)#
#
# CPUtime = proc.time()#
GPU = 0#
local = c(1,1)#
fit1 <- GeoFit(data=data,coordx=coords,corrmodel=corrmodel,#
               maxdist=0.1,likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,X=X, model = model,varest = TRUE)#
# CPUtime = proc.time()-CPUtime;CPUtime#
print(fit1)
rm(list=ls())#
library(GeoModels)#
library(spam)#
#
################################################################
############ Examples of spatial RFs #################
################################################################
model="Gamma"#
# Define the spatial-coordinates of the points:#
set.seed(368)#
NN=1000#
x <- runif(NN, 0, 1)#
y <- runif(NN, 0, 1)#
coords <- cbind(x,y)#
#
#a=b=seq(0,1,.05)#
#coords=as.matrix(expand.grid(a,b))#
# Set the covariance model's parameters:#
corrmodel <- "Exponential";sparse=FALSE#
mean <- -0.25;#
mean1=5.5#
sill <- 1  ### must be fixed#
nugget <- 0#
scale <- 0.15/3 ; power2=4#
shape=5#
X=cbind(rep(1,nrow(coords)),runif(nrow(coords)))#
param<-list(mean=mean, mean1=mean1,sill=sill,nugget=nugget,scale=scale,shape=shape)#
#
# Simulation of the spatial Gaussian RF:#
set.seed(32)#
#
k=1#
nsim=1000#
res=res2=NULL#
par(mfrow=c(1,2))#
#while(k<nsim){#
data <- GeoSim(coordx=coords,corrmodel=corrmodel, param=param,model=model,X=X)$data#
#CC <- GeoCovmatrix(coordx=coords,corrmodel=corrmodel, param=param,model=model)$covmat#
# Empirical spatial semi-variogram estimation:#
#fit <- GeoVariogram(coordx=coords,data=data,maxdist=0.5)#
#
# Results:#
#plot(fit$centers, fit$variograms, xlab='h', ylab=expression(gamma(h)),xlim=c(0,0.5),#
#     ylim=c(0, max(fit$variograms)), pch=20,#
#     main="Semi-variogram")##
#
#### comparing for stationary case#
#mean(data)#
#exp(mean)#
#var(data)#
#2*exp(mean)^2/shape#
#plot(density(data))#
#lines(density(rgamma(10000,shape=(shape)/2,rate=shape/(2*exp(mean)))),lty=2)#
#
fixed<-list(nugget=nugget,sill=sill)  ### note that sill must be fixed!!!!#
#
# Starting value for the estimated parameters#
start<-list(scale=scale,shape=shape,mean=mean,mean1=mean1)  #
# Maximum pairwise composite-likelihood fitting of the RF:#
fit2 <- GeoFit(data=data,coordx=coords,corrmodel=corrmodel,X=X,#
                    maxdist=0.2,likelihood="Marginal",type="Pairwise",model=model,#
                    start=start,fixed=fixed,varest=T)#
#
print(fit2)
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
################################################################
############ Examples of spatial RFs #################
################################################################
model="Gamma"#
set.seed(3)#
#
# Define the spatial-coordinates of the points:#
NN=50#
x <- runif(NN, 0, 1)#
set.seed(6)#
y <- runif(NN, 0, 1)#
coords <- cbind(x,y)#
#
coordt=seq(0,10,1)#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
mean <- 2#
sill <- 1#
nugget <- 0#
scale_s <- 0.2/3#
scale_t <- 1/3#
shape=7#
param<-list(mean=mean, shape=shape, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
#
# Simulation of the spatial Gaussian RF:#
set.seed(3132)#
data <- GeoSim(coordx=coords,coordt=coordt,corrmodel=corrmodel, param=param,model=model)$data#
#
# Fixed parameters#
fixed<-list(nugget=nugget,sill=sill,scale_s=scale_s,scale_t=scale_t)#
#
# Starting value for the estimated parameters#
start<-list(mean=mean,shape=shape)#
# Maximum composite-likelihood fitting of the RF:#
#fit <- FitComposite(data=data,coordx=coords,corrmodel=corrmodel,model=model,#
#likelihood="Full",type="Standard",#
#start=start,fixed=fixed,X=X,varest=TRUE)#
# Results:#
# Maximum pairwise composite-likelihood fitting of the RF:#
fit <- GeoFit(data=data,coordx=coords,coordt=coordt,corrmodel=corrmodel,#
                    maxdist=0.2,maxtime=3,likelihood="Marginal",type="Pairwise",model=model,#
                    start=start,fixed=fixed,varest=TRUE)#
#
# Results:#
## ml estmation#
##print(fit)#
## pairwise estimation#
print(fit)
start
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
################################################################
############ Examples of spatial RFs #################
################################################################
model="Gamma"#
set.seed(3)#
#
# Define the spatial-coordinates of the points:#
NN=50#
x <- runif(NN, 0, 1)#
set.seed(6)#
y <- runif(NN, 0, 1)#
coords <- cbind(x,y)#
#
coordt=seq(0,10,1)#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
mean <- 2#
sill <- 1#
nugget <- 0#
scale_s <- 0.2/3#
scale_t <- 1/3#
shape=7#
param<-list(mean=mean, shape=shape, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
#
# Simulation of the spatial Gaussian RF:#
set.seed(3132)#
data <- GeoSim(coordx=coords,coordt=coordt,corrmodel=corrmodel, param=param,model=model)$data#
#
# Fixed parameters#
fixed<-list(nugget=nugget,sill=sill,scale_s=scale_s,scale_t=scale_t)#
#
# Starting value for the estimated parameters#
start<-list(mean=mean,shape=shape)#
# Maximum composite-likelihood fitting of the RF:#
#fit <- FitComposite(data=data,coordx=coords,corrmodel=corrmodel,model=model,#
#likelihood="Full",type="Standard",#
#start=start,fixed=fixed,X=X,varest=TRUE)#
# Results:#
# Maximum pairwise composite-likelihood fitting of the RF:#
fit <- GeoFit(data=data,coordx=coords,coordt=coordt,corrmodel=corrmodel,#
                    maxdist=0.2,maxtime=3,likelihood="Marginal",type="Pairwise",model=model,#
                    start=start,fixed=fixed,varest=TRUE)#
#
# Results:#
## ml estmation#
##print(fit)#
## pairwise estimation#
print(fit)
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
################################################################
############ Examples of spatial RFs #################
################################################################
model="Gamma"#
set.seed(3)#
#
# Define the spatial-coordinates of the points:#
NN=50#
x <- runif(NN, 0, 1)#
set.seed(6)#
y <- runif(NN, 0, 1)#
coords <- cbind(x,y)#
#
coordt=seq(0,10,1)#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
mean <- 2#
sill <- 1#
nugget <- 0#
scale_s <- 0.2/3#
scale_t <- 1/3#
shape=7#
param<-list(mean=mean, shape=shape, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
#
# Simulation of the spatial Gaussian RF:#
set.seed(3132)#
data <- GeoSim(coordx=coords,coordt=coordt,corrmodel=corrmodel, param=param,model=model)$data#
#
# Fixed parameters#
fixed<-list(nugget=nugget,sill=sill,scale_s=scale_s,scale_t=scale_t)#
#
# Starting value for the estimated parameters#
start<-list(mean=mean,shape=shape)#
# Maximum composite-likelihood fitting of the RF:#
#fit <- FitComposite(data=data,coordx=coords,corrmodel=corrmodel,model=model,#
#likelihood="Full",type="Standard",#
#start=start,fixed=fixed,X=X,varest=TRUE)#
# Results:#
# Maximum pairwise composite-likelihood fitting of the RF:#
fit <- GeoFit(data=data,coordx=coords,coordt=coordt,corrmodel=corrmodel,#
                    maxdist=0.2,maxtime=3,likelihood="Marginal",type="Pairwise",model=model,#
                    start=start,fixed=fixed)#
#
# Results:#
## ml estmation#
##print(fit)#
## pairwise estimation#
print(fit)
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
################################################################
############ Examples of spatial RFs #################
################################################################
model="Gamma"#
set.seed(3)#
#
# Define the spatial-coordinates of the points:#
NN=50#
x <- runif(NN, 0, 1)#
set.seed(6)#
y <- runif(NN, 0, 1)#
coords <- cbind(x,y)#
#
coordt=seq(0,10,1)#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
mean <- 2#
sill <- 1#
nugget <- 0#
scale_s <- 0.2/3#
scale_t <- 1/3#
shape=7#
param<-list(mean=mean, shape=shape, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
#
# Simulation of the spatial Gaussian RF:#
set.seed(3132)#
data <- GeoSim(coordx=coords,coordt=coordt,corrmodel=corrmodel, param=param,model=model)$data#
#
# Fixed parameters#
fixed<-list(nugget=nugget,sill=sill,scale_s=scale_s,scale_t=scale_t)#
#
# Starting value for the estimated parameters#
start<-list(mean=mean,shape=shape)#
# Maximum composite-likelihood fitting of the RF:#
#fit <- FitComposite(data=data,coordx=coords,corrmodel=corrmodel,model=model,#
#likelihood="Full",type="Standard",#
#start=start,fixed=fixed,X=X,varest=TRUE)#
# Results:#
# Maximum pairwise composite-likelihood fitting of the RF:#
fit <- GeoFit(data=data,coordx=coords,coordt=coordt,corrmodel=corrmodel,#
                    maxdist=0.2,maxtime=3,likelihood="Marginal",type="Pairwise",model=model,#
                    start=start,fixed=fixed,varest=TRUE)#
#
# Results:#
## ml estmation#
##print(fit)#
## pairwise estimation#
print(fit)
rm(list=ls())#
library(GeoModels)#
library(spam)#
#
################################################################
############ Examples of spatial RFs #################
################################################################
model="Gamma"#
# Define the spatial-coordinates of the points:#
set.seed(368)#
NN=1000#
x <- runif(NN, 0, 1)#
y <- runif(NN, 0, 1)#
coords <- cbind(x,y)#
#
#a=b=seq(0,1,.05)#
#coords=as.matrix(expand.grid(a,b))#
# Set the covariance model's parameters:#
corrmodel <- "Exponential";sparse=FALSE#
mean <- -0.25;#
mean1=5.5#
sill <- 1  ### must be fixed#
nugget <- 0#
scale <- 0.15/3 ; power2=4#
shape=5#
X=cbind(rep(1,nrow(coords)),runif(nrow(coords)))#
param<-list(mean=mean, mean1=mean1,sill=sill,nugget=nugget,scale=scale,shape=shape)#
#
# Simulation of the spatial Gaussian RF:#
set.seed(32)#
#
k=1#
nsim=1000#
res=res2=NULL#
# par(mfrow=c(1,2))#
#while(k<nsim){#
data <- GeoSim(coordx=coords,corrmodel=corrmodel, param=param,model=model,X=X)$data#
#CC <- GeoCovmatrix(coordx=coords,corrmodel=corrmodel, param=param,model=model)$covmat#
# Empirical spatial semi-variogram estimation:#
#fit <- GeoVariogram(coordx=coords,data=data,maxdist=0.5)#
#
# Results:#
#plot(fit$centers, fit$variograms, xlab='h', ylab=expression(gamma(h)),xlim=c(0,0.5),#
#     ylim=c(0, max(fit$variograms)), pch=20,#
#     main="Semi-variogram")##
#
#### comparing for stationary case#
#mean(data)#
#exp(mean)#
#var(data)#
#2*exp(mean)^2/shape#
#plot(density(data))#
#lines(density(rgamma(10000,shape=(shape)/2,rate=shape/(2*exp(mean)))),lty=2)#
#
fixed<-list(nugget=nugget,sill=sill)  ### note that sill must be fixed!!!!#
#
# Starting value for the estimated parameters#
start<-list(scale=scale,shape=shape,mean=mean,mean1=mean1)  #
# Maximum pairwise composite-likelihood fitting of the RF:#
fit2 <- GeoFit(data=data,coordx=coords,corrmodel=corrmodel,X=X,#
                    maxdist=0.2,likelihood="Marginal",type="Pairwise",model=model,#
                    start=start,fixed=fixed,varest=T)#
#
print(fit2)
warnings()
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="Gaussian";shape=4;n=1#
set.seed(112)#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,9)# con 9 funciona,  con 8 explota#
coordx_dyn=list()#
#
maxN=300#130#
for(k in 1:length(coordt))#
{#
  NN=sample(1:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
# coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 0.1#
sill <- 1#
nugget <- 0#
scale_s <- .3#
scale_t <- .3#
skew <- -0.5#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget, sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,mean = mean )#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxtime=1;maxdist=0.3#
fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
               corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,model = model,varest = TRUE)#
print(fit1)
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
################################################################
############ Examples of spatial RFs #################
################################################################
model="Gamma"#
set.seed(3)#
#
# Define the spatial-coordinates of the points:#
NN=50#
x <- runif(NN, 0, 1)#
set.seed(6)#
y <- runif(NN, 0, 1)#
coords <- cbind(x,y)#
#
coordt=seq(0,10,1)#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
mean <- 2#
sill <- 1#
nugget <- 0#
scale_s <- 0.2/3#
scale_t <- 1/3#
shape=7#
param<-list(mean=mean, shape=shape, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
#
# Simulation of the spatial Gaussian RF:#
set.seed(3132)#
data <- GeoSim(coordx=coords,coordt=coordt,corrmodel=corrmodel, param=param,model=model)$data#
#
# Fixed parameters#
fixed<-list(nugget=nugget,sill=sill,scale_s=scale_s,scale_t=scale_t)#
#
# Starting value for the estimated parameters#
start<-list(mean=mean,shape=shape)#
# Maximum composite-likelihood fitting of the RF:#
#fit <- FitComposite(data=data,coordx=coords,corrmodel=corrmodel,model=model,#
#likelihood="Full",type="Standard",#
#start=start,fixed=fixed,X=X,varest=TRUE)#
# Results:#
# Maximum pairwise composite-likelihood fitting of the RF:#
fit <- GeoFit(data=data,coordx=coords,coordt=coordt,corrmodel=corrmodel,#
                    maxdist=0.2,maxtime=3,likelihood="Marginal",type="Pairwise",model=model,#
                    start=start,fixed=fixed,varest=TRUE)#
#
# Results:#
## ml estmation#
##print(fit)#
## pairwise estimation#
print(fit)
rm(list=ls())#
library(GeoModels)#
library(spam)#
#
################################################################
############ Examples of spatial RFs #################
################################################################
model="Gamma"#
# Define the spatial-coordinates of the points:#
set.seed(368)#
NN=600#
x <- runif(NN, 0, 1)#
y <- runif(NN, 0, 1)#
coords <- cbind(x,y)#
#
#a=b=seq(0,1,.05)#
#coords=as.matrix(expand.grid(a,b))#
# Set the covariance model's parameters:#
corrmodel <- "Exponential";sparse=FALSE#
mean <- -0.25;#
mean1=5.5#
sill <- 1  ### must be fixed#
nugget <- 0#
scale <- 0.15/3 ; power2=4#
shape=5#
X=cbind(rep(1,nrow(coords)),runif(nrow(coords)))#
param<-list(mean=mean, mean1=mean1,sill=sill,nugget=nugget,scale=scale,shape=shape)#
#
# Simulation of the spatial Gaussian RF:#
set.seed(32)#
#
k=1#
nsim=1000#
res=res2=NULL#
# par(mfrow=c(1,2))#
#while(k<nsim){#
data <- GeoSim(coordx=coords,corrmodel=corrmodel, param=param,model=model,X=X)$data#
#CC <- GeoCovmatrix(coordx=coords,corrmodel=corrmodel, param=param,model=model)$covmat#
# Empirical spatial semi-variogram estimation:#
#fit <- GeoVariogram(coordx=coords,data=data,maxdist=0.5)#
#
# Results:#
#plot(fit$centers, fit$variograms, xlab='h', ylab=expression(gamma(h)),xlim=c(0,0.5),#
#     ylim=c(0, max(fit$variograms)), pch=20,#
#     main="Semi-variogram")##
#
#### comparing for stationary case#
#mean(data)#
#exp(mean)#
#var(data)#
#2*exp(mean)^2/shape#
#plot(density(data))#
#lines(density(rgamma(10000,shape=(shape)/2,rate=shape/(2*exp(mean)))),lty=2)#
#
fixed<-list(nugget=nugget,sill=sill)  ### note that sill must be fixed!!!!#
#
# Starting value for the estimated parameters#
start<-list(scale=scale,shape=shape,mean=mean,mean1=mean1)  #
# Maximum pairwise composite-likelihood fitting of the RF:#
fit2 <- GeoFit(data=data,coordx=coords,corrmodel=corrmodel,X=X,#
                    maxdist=0.2,likelihood="Marginal",type="Pairwise",model=model,#
                    start=start,fixed=fixed,varest=T)#
#
print(fit2)
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
################################################################
############ Examples of spatial RFs #################
################################################################
model="Gamma"#
set.seed(3)#
#
# Define the spatial-coordinates of the points:#
NN=50#
x <- runif(NN, 0, 1)#
set.seed(6)#
y <- runif(NN, 0, 1)#
coords <- cbind(x,y)#
#
coordt=seq(0,10,1)#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
mean <- 2#
sill <- 1#
nugget <- 0#
scale_s <- 0.2/3#
scale_t <- 1/3#
shape=7#
param<-list(mean=mean, shape=shape, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
#
# Simulation of the spatial Gaussian RF:#
set.seed(3132)#
data <- GeoSim(coordx=coords,coordt=coordt,corrmodel=corrmodel, param=param,model=model)$data#
#
# Fixed parameters#
fixed<-list(nugget=nugget,sill=sill,scale_s=scale_s,scale_t=scale_t)#
#
# Starting value for the estimated parameters#
start<-list(mean=mean,shape=shape)#
# Maximum composite-likelihood fitting of the RF:#
#fit <- FitComposite(data=data,coordx=coords,corrmodel=corrmodel,model=model,#
#likelihood="Full",type="Standard",#
#start=start,fixed=fixed,X=X,varest=TRUE)#
# Results:#
# Maximum pairwise composite-likelihood fitting of the RF:#
fit <- GeoFit(data=data,coordx=coords,coordt=coordt,corrmodel=corrmodel,#
                    maxdist=0.2,maxtime=3,likelihood="Marginal",type="Pairwise",model=model,#
                    start=start,fixed=fixed,varest=TRUE)#
#
# Results:#
## ml estmation#
##print(fit)#
## pairwise estimation#
print(fit)
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
################################################################
############ Examples of spatial RFs #################
################################################################
model="Gamma"#
set.seed(3)#
#
# Define the spatial-coordinates of the points:#
NN=50#
x <- runif(NN, 0, 1)#
set.seed(6)#
y <- runif(NN, 0, 1)#
coords <- cbind(x,y)#
#
coordt=seq(0,45,1)#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
mean <- 2#
sill <- 1#
nugget <- 0#
scale_s <- 0.2/3#
scale_t <- 1/3#
shape=7#
param<-list(mean=mean, shape=shape, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
#
# Simulation of the spatial Gaussian RF:#
set.seed(3132)#
data <- GeoSim(coordx=coords,coordt=coordt,corrmodel=corrmodel, param=param,model=model)$data#
#
# Fixed parameters#
fixed<-list(nugget=nugget,sill=sill)#
#
# Starting value for the estimated parameters#
start<-list(mean=mean,scale_s=scale_s,scale_t=scale_t,shape=shape)#
# Maximum composite-likelihood fitting of the RF:#
#fit <- FitComposite(data=data,coordx=coords,corrmodel=corrmodel,model=model,#
#likelihood="Full",type="Standard",#
#start=start,fixed=fixed,X=X,varest=TRUE)#
# Results:#
# Maximum pairwise composite-likelihood fitting of the RF:#
fit <- GeoFit(data=data,coordx=coords,coordt=coordt,corrmodel=corrmodel,#
                    maxdist=0.2,maxtime=3,likelihood="Marginal",type="Pairwise",model=model,#
                    start=start,fixed=fixed,varest=TRUE)#
#
# Results:#
## ml estmation#
##print(fit)#
## pairwise estimation#
print(fit)
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
################################################################
############ Examples of spatial RFs #################
################################################################
model="Gamma"#
set.seed(3)#
#
# Define the spatial-coordinates of the points:#
NN=50#
x <- runif(NN, 0, 1)#
set.seed(6)#
y <- runif(NN, 0, 1)#
coords <- cbind(x,y)#
#
coordt=seq(0,10,1)#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
mean <- 2#
sill <- 1#
nugget <- 0#
scale_s <- 0.2/3#
scale_t <- 1/3#
shape=7#
param<-list(mean=mean, shape=shape, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
#
# Simulation of the spatial Gaussian RF:#
set.seed(3132)#
data <- GeoSim(coordx=coords,coordt=coordt,corrmodel=corrmodel, param=param,model=model)$data#
#
# Fixed parameters#
fixed<-list(nugget=nugget,sill=sill,scale_s=scale_s,scale_t=scale_t)#
#
# Starting value for the estimated parameters#
start<-list(mean=mean,shape=shape)#
# Maximum composite-likelihood fitting of the RF:#
#fit <- FitComposite(data=data,coordx=coords,corrmodel=corrmodel,model=model,#
#likelihood="Full",type="Standard",#
#start=start,fixed=fixed,X=X,varest=TRUE)#
# Results:#
# Maximum pairwise composite-likelihood fitting of the RF:#
fit <- GeoFit(data=data,coordx=coords,coordt=coordt,corrmodel=corrmodel,#
                    maxdist=0.2,maxtime=3,likelihood="Marginal",type="Pairwise",model=model,#
                    start=start,fixed=fixed,varest=TRUE)#
#
# Results:#
## ml estmation#
##print(fit)#
## pairwise estimation#
print(fit)
rm ( list = ls())#
## see also  https://rdrr.io/rforge/gstat/man/wind.html#
require(gstat)#
require(mapdata)#
library(GeoModels)#
require(fields)#
require(mapproj)#
par(mfrow=c(1,1))#
# Wind Data: Daily average wind speeds for 1961-1978 at 12 synoptic #
# meteorological stations in the Republic of Ireland (Haslett and raftery 1989). #
# Wind speeds are in knots (1 knot = 0.5418 m/s), at each #
# of the stations of Haslett and Raftery#
distance="Eucl"#
#distance="Geod"#
data("wind", package = "gstat")#
#
DATA=as.matrix(wind[,4:15])#
DATA=DATA[,-3]  ### deleting ROSSLANE location site as in previous analysis#
vec.wind = as.vector(DATA)#
#
wind.loc=wind.loc[-12,] ## deleting ROSSLANE lon-lat#
library(sp) # char2dms#
wind.loc$y = as.numeric(char2dms(as.character(wind.loc[["Latitude"]])))#
wind.loc$x = as.numeric(char2dms(as.character(wind.loc[["Longitude"]])))#
coordsLONLAT=cbind(wind.loc$x,wind.loc$y)  ## lonlat coordinates#
### graphic of ireland#
coordinates(wind.loc) = ~x+y#
map("worldHires", xlim = c(-11,-5.4), ylim = c(51,55.5))#
plot(wind.loc, add=TRUE, pch=16)#
text(coordinates(wind.loc), pos=1, label=wind.loc$Station)#
#plot(coordsLONLAT)#
sum(vec.wind==0)  ## it could be a problem??????????#
#
## length of data: daily obervations for 18 years (1961-1978) at 12 location sites#
(1978-1961+1)*365*12#
length(vec.wind)#
### there is a  small difference due to years with 366 days#
#
times = 1:nrow(DATA) # number of temporal realizations#
#### Gamma Estimation with Double Exponential#
#
### selecting first kk year#
kk=1#
ll=150#365*kk#
times=1:ll#
DATA=DATA[1:ll,]#
#
### some data are exactly zero#
DATA[DATA==0]=0.05#
model="Gamma"#
#
#### some tines series#
#par(mfrow=c(3,4))#
wind$time = ISOdate(wind$year+1900, wind$month, wind$day)#
# time series of e.g. Dublin data:#
plot(DUB~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Dub")#
#plot(CLA~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Cla")#
#plot(RPT ~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Rpt")#
#plot(VAL~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Val")#
#plot(ROS~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Ros")#
#plot(KIL~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Kil")#
#plot(SHA~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Sha")#
#plot(BIR~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Bir")#
#plot(MUL~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Mul")#
#plot(CLO~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Clo")#
#plot(BEL~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Bel")#
#plot(MAL~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Mal")#
#
######## matrix covariates. #############
#
nsites<-dim(DATA)[2]   ##number sites#
nt<-dim(DATA)[1]       ## number times#
#
tcoords<-(1:nt)%x%rep(1,dim(coordsLONLAT)[1])#
xycoords<-(rep(1,nt)%x%as.matrix(coordsLONLAT))#
# number of harmonics#
ns<-3#
h<-matrix(0,length(tcoords),2*ns)#
tscale<-92#
for ( i in 1: ns) {#
  h[,(2*(i-1)+1)]<-sin(pi*(i)*tcoords/tscale)#
  h[,(2*i)]<-cos(pi*(i)*tcoords/tscale)#
}#
#
#### matrix of covariates for regression harmonic#
X=as.matrix(cbind(rep(1,nrow(h)),h))#
#
############# sinusoidal projecion#
if(distance=="Eucl")#
{#
  P.sinusoidal <- mapproject(coordsLONLAT[,1],coordsLONLAT[,2],projection="sinusoidal")#
  coords<-cbind(P.sinusoidal$x,P.sinusoidal$y)*6378.388#
}#
if(distance=="Geod")#
{#
  coords=coordsLONLAT#
}  #
#
### matrix of spatial great circle or euclidean distances#
if(distance=="Geod") dists2 = rdist.earth(coords, miles=FALSE)#
if(distance=="Eucl") dists2 = dist(coords)#
dd=max(dists2)*1+0.5#
model="Gaussian"#
nugget = 0#
sill = 0.7#
mean=0#
scale_s = 340#
scale_t= 3#
start=list(sill=sill,mean=mean,scale_s=scale_s,scale_t=scale_t,mean1=0,mean2=0,mean3=0,mean4=0,mean5=0,mean6=0)#
fixed<-list(nugget=nugget) #
# #
GPU = 0 # 0 or 2 GPU denotes de Device we are using, in my Mac it is 0 (8 cores CPU),1 (Iris not for double),2 (AMD for double)#
local = c(1,1) #First component is 8 if GPU is 0. It is 2^n for n>=0 if GPU is 2#
fit4 <- GeoFit(data=DATA,coordx=coords,coordt=times,corrmodel="exp_exp",distance=distance,#
               maxdist=dd,maxtime=3,likelihood="Marginal",type="Pairwise",model=model,X=X,#
               start=start,fixed=fixed,GPU=GPU, local = local,varest = TRUE)#
fit4#
# GPU = 0 # 0 or 2 GPU denotes de Device we are using, in my Mac it is 0 (8 cores CPU),1 (Iris not for double),2 (AMD for double)#
# local = c(1,1) #First component is 8 if GPU is 0. It is 2^n for n>=0 if GPU is 2#
# fit5 <- GeoFit(data=log(DATA),coordx=coords,coordt=times,corrmodel="exp_exp",distance=distance,#
#                maxdist=dd,maxtime=3,likelihood="Marginal",type="Pairwise",model=model,X=X,#
#                start=start,fixed=fixed,GPU=GPU, local = local,varest = TRUE)#
# fit5
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
################################################################
############ Examples of spatial RFs #################
################################################################
model="Gamma"#
# Define the spatial-coordinates of the points:#
NN=50#
set.seed(3)#
x <- runif(NN, 0, 1)#
set.seed(6)#
y <- runif(NN, 0, 1)#
coords <- cbind(x,y)#
#
coordt=seq(0,10,1)#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
mean <- 2#
sill <- 1#
nugget <- 0#
scale_s <- 0.2/3#
scale_t <- 1/3#
shape=7#
param<-list(mean=mean, shape=shape, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
#
# Simulation of the spatial Gaussian RF:#
set.seed(3132)#
data <- GeoSim(coordx=coords,coordt=coordt,corrmodel=corrmodel, param=param,model=model)$data#
#
# Fixed parameters#
fixed<-list(nugget=nugget,sill=sill)#
#
# Starting value for the estimated parameters#
start<-list(mean=mean,scale_s=scale_s,scale_t=scale_t,shape=shape)#
# Maximum composite-likelihood fitting of the RF:#
#fit <- FitComposite(data=data,coordx=coords,corrmodel=corrmodel,model=model,#
#likelihood="Full",type="Standard",#
#start=start,fixed=fixed,X=X,varest=TRUE)#
# Results:#
# Maximum pairwise composite-likelihood fitting of the RF:#
fit <- GeoFit(data=data,coordx=coords,coordt=coordt,corrmodel=corrmodel,#
                    maxdist=0.2,maxtime=3,likelihood="Marginal",type="Pairwise",model=model,#
                    start=start,fixed=fixed,varest = TRUE)#
#
# Results:#
## ml estmation#
##print(fit)#
## pairwise estimation#
print(fit)
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
################################################################
############ Examples of spatial RFs #################
################################################################
model="Gamma"#
# Define the spatial-coordinates of the points:#
NN=50#
set.seed(3)#
x <- runif(NN, 0, 1)#
set.seed(6)#
y <- runif(NN, 0, 1)#
coords <- cbind(x,y)#
#
coordt=seq(0,10,1)#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
mean <- 2#
sill <- 1#
nugget <- 0#
scale_s <- 0.2/3#
scale_t <- 1/3#
shape=7#
param<-list(mean=mean, shape=shape, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
#
# Simulation of the spatial Gaussian RF:#
set.seed(3132)#
data <- GeoSim(coordx=coords,coordt=coordt,corrmodel=corrmodel, param=param,model=model)$data#
#
# Fixed parameters#
fixed<-list(nugget=nugget,sill=sill)#
#
# Starting value for the estimated parameters#
start<-list(mean=mean,scale_s=scale_s,scale_t=scale_t,shape=shape)#
# Maximum composite-likelihood fitting of the RF:#
#fit <- FitComposite(data=data,coordx=coords,corrmodel=corrmodel,model=model,#
#likelihood="Full",type="Standard",#
#start=start,fixed=fixed,X=X,varest=TRUE)#
# Results:#
# Maximum pairwise composite-likelihood fitting of the RF:#
fit <- GeoFit(data=data,coordx=coords,coordt=coordt,corrmodel=corrmodel,#
                    maxdist=0.2,maxtime=3,likelihood="Marginal",type="Pairwise",model=model,#
                    start=start,fixed=fixed,varest = TRUE,optimizer = "Nelder-Mead")#
#
# Results:#
## ml estmation#
##print(fit)#
## pairwise estimation#
print(fit)
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="Gaussian";shape=4;n=1#
set.seed(112)#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,9)# con 9 funciona,  con 8 explota#
coordx_dyn=list()#
#
maxN=300#130#
for(k in 1:length(coordt))#
{#
  NN=sample(1:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
# coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 0.1#
sill <- 1#
nugget <- 0#
scale_s <- .3#
scale_t <- .3#
skew <- -0.5#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget, sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,mean = mean )#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxtime=1;maxdist=0.3#
GPU <- 0#
local <- c(1,1)#
fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
               corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,model = model,varest = TRUE,GPU = GPU, local = local)#
print(fit1)
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="Gamma"#
set.seed(112)#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,1,0.5)#1#
coordx_dyn=list()#
#
maxN=100#130#
for(k in 1:length(coordt))#
{#
  NN=sample(1:maxN,size=1)#
  # print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
# coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 1#
sill <- 1#
nugget <- 0#
shape=6#
scale_s <- 0.2/3#
scale_t <- 0.2/3#
param<-list(mean=mean, sill=sill,nugget=nugget,shape=shape,scale_s=scale_s,scale_t=scale_t)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget,sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,shape = shape, mean = mean)#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
# CPUtime = proc.time()#
fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
               corrmodel=corrmodel,maxtime=0.3,maxdist=0.3,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,model = model)#
# CPUtime = proc.time()-CPUtime#
print(fit1)
library(GeoModels)#
set.seed(52)#
# Define the spatial-coordinates of the points:#
N=500#
x <- runif(N, 0, 1)#
y <- runif(N, 0, 1)#
coords <- cbind(x,y)#
X=cbind(rep(1,N),runif(N))#
mean=1; mean1=2 # regression parameters#
model="Gamma"#
corrmodel = "Wend0"#
NuisParam(model,FALSE,1)#
sill=1#
scale=0.2#
nugget=0#
shape=6#
power2=4#
param=list(mean=mean,mean1=mean1,sill=sill,scale=scale,nugget=nugget,shape=shape,power2=power2)#
# Simulation of a non stationary Gamma RF:#
set.seed(54)#
data <- GeoSim(coordx=coords, corrmodel="Wend0",model=model,X=X,#
               param=param)$data#
#
fixed<-list(nugget=nugget,power2=power2,sill=sill)#
start<-list(mean=mean,mean1=mean1, shape=shape,scale=scale)#
#
# Maximum pairwise composite-likelihood fitting of the RF:#
CPUtime = proc.time()#
fit1 <- GeoFit(data=data,coordx=coords,corrmodel="Wend0", model=model,#
               maxdist=.05,likelihood="Marginal",type="Pairwise",X=X,#
               start=start,fixed=fixed)#
CPUtime = proc.time()-CPUtime;CPUtime#
print(fit1)
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="Gamma"#
set.seed(112)#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,1,0.5)#1#
coordx_dyn=list()#
#
maxN=100#130#
for(k in 1:length(coordt))#
{#
  NN=sample(1:maxN,size=1)#
  # print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
# coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 1#
sill <- 1#
nugget <- 0#
shape=6#
scale_s <- 0.2/3#
scale_t <- 0.2/3#
param<-list(mean=mean, sill=sill,nugget=nugget,shape=shape,scale_s=scale_s,scale_t=scale_t)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget,sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,shape = shape, mean = mean)#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
# CPUtime = proc.time()#
fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
               corrmodel=corrmodel,maxtime=0.3,maxdist=0.3,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,model = model)#
# CPUtime = proc.time()-CPUtime#
print(fit1)
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="Gamma"#
set.seed(112)#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,1,0.5)#1#
coordx_dyn=list()#
#
maxN=100#130#
set.seed(112)#
for(k in 1:length(coordt))#
{#
  NN=sample(1:maxN,size=1)#
  # print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
# coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 1#
sill <- 1#
nugget <- 0#
shape=6#
scale_s <- 0.2/3#
scale_t <- 0.2/3#
param<-list(mean=mean, sill=sill,nugget=nugget,shape=shape,scale_s=scale_s,scale_t=scale_t)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget,sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,shape = shape, mean = mean)#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
# CPUtime = proc.time()#
fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
               corrmodel=corrmodel,maxtime=0.3,maxdist=0.3,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,model = model)#
# CPUtime = proc.time()-CPUtime#
print(fit1)
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
################################################################
############ Examples of spatial RFs #################
################################################################
model="Gamma"#
# Define the spatial-coordinates of the points:#
NN=50#
set.seed(3)#
x <- runif(NN, 0, 1)#
set.seed(6)#
y <- runif(NN, 0, 1)#
coords <- cbind(x,y)#
#
coordt=seq(0,10,1)#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
mean <- 2#
mean1 <- -0.5#
sill <- 1#
nugget <- 0#
scale_s <- 0.2/3#
scale_t <- 1/3#
shape=7#
param<-list(mean=mean, shape=shape, sill=sill,nugget=nugget,#
            scale_s=scale_s,scale_t=scale_t)#
#
# Simulation of the spatial Gaussian RF:#
set.seed(3132)#
data <- GeoSim(coordx=coords,coordt=coordt,corrmodel=corrmodel, param=param,model=model)$data#
#
# Fixed parameters#
fixed<-list(nugget=nugget,sill=sill)#
#
# Starting value for the estimated parameters#
start<-list(mean=mean,scale_s=scale_s,scale_t=scale_t,shape=shape)#
# Maximum composite-likelihood fitting of the RF:#
#fit <- FitComposite(data=data,coordx=coords,corrmodel=corrmodel,model=model,#
#likelihood="Full",type="Standard",#
#start=start,fixed=fixed,X=X,varest=TRUE)#
# Results:#
#
set.seed(102)#
X=cbind(rep(1,NN*length(coordt)),runif(NN)*length(coordt))#
#
# Maximum pairwise composite-likelihood fitting of the RF:#
fit <- GeoFit(data=data,coordx=coords,coordt=coordt,corrmodel=corrmodel,#
                    maxdist=0.2,maxtime=3,likelihood="Marginal",type="Pairwise",model=model,#
                    start=start,fixed=fixed,varest = TRUE,optimizer = "Nelder-Mead")#
#
# Results:#
## ml estmation#
##print(fit)#
## pairwise estimation#
print(fit)
q()
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
################################################################
############ Examples of spatial RFs #################
################################################################
model="Gamma"#
# Define the spatial-coordinates of the points:#
NN=50#
set.seed(3)#
x <- runif(NN, 0, 1)#
set.seed(6)#
y <- runif(NN, 0, 1)#
coords <- cbind(x,y)#
#
coordt=seq(0,10,1)#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
mean <- 2#
mean1 <- -0.5#
sill <- 1#
nugget <- 0#
scale_s <- 0.2/3#
scale_t <- 1/3#
shape=7#
param<-list(mean=mean, shape=shape, sill=sill,nugget=nugget,#
            scale_s=scale_s,scale_t=scale_t)#
#
# Simulation of the spatial Gaussian RF:#
set.seed(3132)#
data <- GeoSim(coordx=coords,coordt=coordt,corrmodel=corrmodel, param=param,model=model)$data#
#
# Fixed parameters#
fixed<-list(nugget=nugget,sill=sill)#
#
# Starting value for the estimated parameters#
start<-list(mean=mean,scale_s=scale_s,scale_t=scale_t,shape=shape)#
# Maximum composite-likelihood fitting of the RF:#
#fit <- FitComposite(data=data,coordx=coords,corrmodel=corrmodel,model=model,#
#likelihood="Full",type="Standard",#
#start=start,fixed=fixed,X=X,varest=TRUE)#
# Results:#
#
set.seed(102)#
X=cbind(rep(1,NN*length(coordt)),runif(NN)*length(coordt))#
#
# Maximum pairwise composite-likelihood fitting of the RF:#
fit <- GeoFit(data=data,coordx=coords,coordt=coordt,corrmodel=corrmodel,#
                    maxdist=0.2,maxtime=3,likelihood="Marginal",type="Pairwise",model=model,#
                    start=start,fixed=fixed,varest = TRUE,optimizer = "Nelder-Mead")#
#
# Results:#
## ml estmation#
##print(fit)#
## pairwise estimation#
print(fit)
q()
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
################################################################
############ Examples of spatial RFs #################
################################################################
model="Gamma"#
# Define the spatial-coordinates of the points:#
NN=50#
set.seed(3)#
x <- runif(NN, 0, 1)#
set.seed(6)#
y <- runif(NN, 0, 1)#
coords <- cbind(x,y)#
#
coordt=seq(0,10,1)#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
mean <- 2#
mean1 <- -0.5#
sill <- 1#
nugget <- 0#
scale_s <- 0.2/3#
scale_t <- 1/3#
shape=7#
param<-list(mean=mean, shape=shape, sill=sill,nugget=nugget,#
            scale_s=scale_s,scale_t=scale_t)#
#
# Simulation of the spatial Gaussian RF:#
set.seed(3132)#
data <- GeoSim(coordx=coords,coordt=coordt,corrmodel=corrmodel, param=param,model=model)$data#
#
# Fixed parameters#
fixed<-list(nugget=nugget,sill=sill)#
#
# Starting value for the estimated parameters#
start<-list(mean=mean,scale_s=scale_s,scale_t=scale_t,shape=shape)#
# Maximum composite-likelihood fitting of the RF:#
#fit <- FitComposite(data=data,coordx=coords,corrmodel=corrmodel,model=model,#
#likelihood="Full",type="Standard",#
#start=start,fixed=fixed,X=X,varest=TRUE)#
# Results:#
#
set.seed(102)#
X=cbind(rep(1,NN*length(coordt)),runif(NN)*length(coordt))#
#
# Maximum pairwise composite-likelihood fitting of the RF:#
fit <- GeoFit(data=data,coordx=coords,coordt=coordt,corrmodel=corrmodel,#
                    maxdist=0.2,maxtime=3,likelihood="Marginal",type="Pairwise",model=model,#
                    start=start,fixed=fixed,varest = TRUE,optimizer = "Nelder-Mead")#
#
# Results:#
## ml estmation#
##print(fit)#
## pairwise estimation#
print(fit)
data(soph)
data(esoph)
View(esoph)
head(esoph)
aggregate(cbind(ncases, ncontrols) ~ alcgp + tobgp, data = esoph, sum)
?save
############################################
rm(list=ls())#
#
#*** Info:#
'   #
PRACTICAL RANGE = 3#
            12 scenarios:#
b: 2,4,8 for window size in space (3 in total).#
Weighted: 1 (Yes), 0 (No) (two in total)#
Step window: 0.25 for space && no overlap (two in total)'#
#*** End Info:#
#
########################R package########################
require(CompRandFld)#
require(MCMCpack)#
require(STBEU)#
dirsol = "~/Documents/Software/STBEU/Simulations/NewCheck/Res/Space" # Directory where results will be #
################################################
# setting 1  (many locations in space a few in time)#
################################################
#
####location sites #########################################
lambda=8#
xx=seq(-lambda,lambda);#
coords=as.matrix(expand.grid(xx,xx))   ###regular#
# plot(coords)#
#
####temporal instants #########################################
nt = 18 # Time points#
times=seq(1,nt,1)#
nrow(coords)#
nrow(coords)*nt#
# bn = 2,4,6. Same for time and Space#
################################################
#
model=2  #   1=double exponential       2 =gneiting#
#
if (model == 2) {#
     # gneiting model#
     cov.model <-"gneiting"#
     cc=2#
     ######
     mean=0#
     nugget=0#
     scale_s<-1.2/3#
     scale_t<-1.2/19#
     sill=1#
     power_s=1;power_t=1;sep=0.5#
     param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill,#
                power_s=power_s,power_t=power_t,sep=sep)  #
     fixed=list(nugget=nugget,power_s=power_s,power_t=power_t,sep=sep,mean = mean)  #
     fix=c(nugget=nugget, power_s=power_s, power_t=power_t,sep=sep,mean = mean) #
}#
###################################################################
#################################################
#   parameters for the subsampling #####
################################################
coordx=coords[,1]#
coordy=coords[,2]#
LX=abs(range(coordx)[1]-range(coordx)[2])#
LY=abs(range(coordy)[1]-range(coordy)[2])#
type_subs=1    ### type of subsampling  1=in space    2= in time 3= spacetime#
#
type_dist=1                ### type of distance     1=euclidean 2=chordal  3=geodesic #
maxdistPL=max(dist(coords))*.25                  ## compact support in weights function for pairwise liklihood#
maxtime=ceiling(max(dist(times))*.25)#
#
i=1#
nsim<-1   ## number of simulation#
results=matrix(NA,ncol=4,nrow=5*nsim);label = 0:4#
set.seed(276)#
while(i<=nsim)#
{#
  #####################################################################################################      #
  # Simulation of the spatial Gaussian random field:#
  data <- RFsim(coordx=coords,coordt=times,corrmodel=cov.model, param=param)$data#
  mm=mean(c(data))#
  vv=var(c(data))#
  start=list(scale_s=scale_s,scale_t=scale_t,sill=vv)#
  ##################################################################################################### #
  ###### Composite likelihood based on pairs estimation ###############################################     #
  theta=c(sill=vv,scale_s=scale_s,scale_t=scale_t)                #starting value  #
  # Maximum composite-likelihood fitting of the random field:#
  # **************************scenario 0/4A main NOT weighted estimation***#
  fitA <- FitComposite(data=data,coordx=coords,coordt=times,#
                       corrmodel=cov.model,maxtime=maxtime,maxdist=maxdistPL,#
                       likelihood="Marginal",type="Pairwise",#
                       start=start,fixed=fixed,weighted=F)#
  eu_par0=c(fitA$param[1],fitA$param[2],fitA$param[3])#
  print(fitA$param)#
  names(eu_par0)=names(fitA$param)#
  # **************************scenario 1/4 b = 2, no overlaping  ***#
  #################################################
  #   parameters for the subsampling #####
  ################################################
  lato_fin=2  #changing window size 2,4#
  lx=lato_fin          #lunghezza lato x quadrato subfinestra#
  ly=lato_fin          #lunghezza lato y quadrato subfinestra#
  winc=c(lx/sqrt(LX),ly/sqrt(LY))#
  winstp= 1  ###   1/lato_fin complete overlapping   1 "no" overlapping#
  ################################################
  weighted=0#
  maxdist=lato_fin#
  # maxdist=1.5#
  ### eucliden likelihood ################ #
  res1=STBEUFit(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc_s=winc,winstp_s = winstp,0,0,type_subs,weighted)#
  eu_par1=c(res1$par[2],res1$par[3],res1$par[1])#
  names(eu_par1)=names(fitA$param)#
  # print(eu_par1)#
  # **************************scenario 2/4 b = 4, no overlaping ***#
  #################################################
  #   parameters for the subsampling #####
  ################################################
  lato_fin=4  #changing window size 2,4#
  lx=lato_fin          #lunghezza lato x quadrato subfinestra#
  ly=lato_fin          #lunghezza lato y quadrato subfinestra#
  winc=c(lx/sqrt(LX),ly/sqrt(LY))#
  winstp= 1  ###   1/lato_fin complete overlapping   1 "no" overlapping#
  ################################################
  maxdist=lato_fin#
  ### eucliden likelihood ################ #
  res2=STBEUFit(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,0,0,type_subs,weighted)#
  eu_par2=c(res2$par[2],res2$par[3],res2$par[1])#
  names(eu_par2)=names(fitA$param)#
  # print(eu_par2)#
  # **************************scenario 3/4 b = 2, overlaping (.5) ***#
  #################################################
  #   parameters for the subsampling #####
  ################################################
  lato_fin=2  #changing window size 2,4#
  lx=lato_fin          #lunghezza lato x quadrato subfinestra#
  ly=lato_fin          #lunghezza lato y quadrato subfinestra#
  winc=c(lx/sqrt(LX),ly/sqrt(LY))#
  winstp= .5  ###   1/lato_fin complete overlapping   1 "no" overlapping#
  ################################################
  maxdist=lato_fin#
  ### eucliden likelihood ################ #
  res3=STBEUFit(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,0,0,type_subs,weighted)#
  eu_par3=c(res3$par[2],res3$par[3],res3$par[1])#
  names(eu_par3)=names(fitA$param)#
  # print(eu_par3)#
  # **************************scenario 4/4 b = 4, overlaping (.5), weighted. ***#
  #################################################
  #   parameters for the subsampling #####
  ################################################
  lato_fin=4  #changing window size 2,4,8#
  lx=lato_fin          #lunghezza lato x quadrato subfinestra#
  ly=lato_fin          #lunghezza lato y quadrato subfinestra#
  winc=c(lx/sqrt(LX),ly/sqrt(LY))#
  winstp= .5  ###   1/lato_fin complete overlapping   1 "no" overlapping#
  ################################################
  maxdist=lato_fin#
  ### eucliden likelihood ################ #
  res4=STBEUFit(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,0,0,type_subs,weighted)#
  eu_par4=c(res4$par[2],res4$par[3],res4$par[1])#
  names(eu_par4)=names(fitA$param)#
  # print(eu_par4)#
  results[(5*(i)-4):((5*(i)-4)+4),]=cbind(label,rbind(eu_par0=eu_par0,eu_par1,eu_par2,eu_par3,eu_par4))#
  colnames(results)=c("setting",names(fitA$param))#
  print(i)#
  i=i+1#
  setwd(dirsol)#
  write.csv(results, "regular_results_spaceGN15.csv")#
}
############################################
rm(list=ls())#
#
#*** Info:#
'   #
PRACTICAL RANGE = 3#
            12 scenarios:#
b: 2,4,8 for window size in space (3 in total).#
Weighted: 1 (Yes), 0 (No) (two in total)#
Step window: 0.25 for space && no overlap (two in total)'#
#*** End Info:#
#
########################R package########################
require(CompRandFld)#
require(MCMCpack)#
require(STBEU)#
dirsol = "~/Documents/Software/STBEU/Simulations/NewCheck/Res/Space" # Directory where results will be #
################################################
# setting 1  (many locations in space a few in time)#
################################################
#
####location sites #########################################
lambda=8#
xx=seq(-lambda,lambda);#
coords=as.matrix(expand.grid(xx,xx))   ###regular#
# plot(coords)#
#
####temporal instants #########################################
nt = 18 # Time points#
times=seq(1,nt,1)#
nrow(coords)#
nrow(coords)*nt#
# bn = 2,4,6. Same for time and Space#
################################################
#
model=2  #   1=double exponential       2 =gneiting#
#
if (model == 2) {#
     # gneiting model#
     cov.model <-"gneiting"#
     cc=2#
     ######
     mean=0#
     nugget=0#
     scale_s<-1.2/3#
     scale_t<-1.2/19#
     sill=1#
     power_s=1;power_t=1;sep=0.5#
     param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill,#
                power_s=power_s,power_t=power_t,sep=sep)  #
     fixed=list(nugget=nugget,power_s=power_s,power_t=power_t,sep=sep,mean = mean)  #
     fix=c(nugget=nugget, power_s=power_s, power_t=power_t,sep=sep,mean = mean) #
}#
###################################################################
#################################################
#   parameters for the subsampling #####
################################################
coordx=coords[,1]#
coordy=coords[,2]#
LX=abs(range(coordx)[1]-range(coordx)[2])#
LY=abs(range(coordy)[1]-range(coordy)[2])#
type_subs=1    ### type of subsampling  1=in space    2= in time 3= spacetime#
#
type_dist=1                ### type of distance     1=euclidean 2=chordal  3=geodesic #
maxdistPL=max(dist(coords))*.25                  ## compact support in weights function for pairwise liklihood#
maxtime=ceiling(max(dist(times))*.25)#
#
i=1#
nsim<-500   ## number of simulation#
results=matrix(NA,ncol=4,nrow=5*nsim);label = 0:4#
set.seed(276)#
while(i<=nsim)#
{#
  #####################################################################################################      #
  # Simulation of the spatial Gaussian random field:#
  data <- RFsim(coordx=coords,coordt=times,corrmodel=cov.model, param=param)$data#
  mm=mean(c(data))#
  vv=var(c(data))#
  start=list(scale_s=scale_s,scale_t=scale_t,sill=vv)#
  ##################################################################################################### #
  ###### Composite likelihood based on pairs estimation ###############################################     #
  theta=c(sill=vv,scale_s=scale_s,scale_t=scale_t)                #starting value  #
  # Maximum composite-likelihood fitting of the random field:#
  # **************************scenario 0/4A main NOT weighted estimation***#
  fitA <- FitComposite(data=data,coordx=coords,coordt=times,#
                       corrmodel=cov.model,maxtime=maxtime,maxdist=maxdistPL,#
                       likelihood="Marginal",type="Pairwise",#
                       start=start,fixed=fixed,weighted=F)#
  eu_par0=c(fitA$param[1],fitA$param[2],fitA$param[3])#
  print(fitA$param)#
  names(eu_par0)=names(fitA$param)#
  # **************************scenario 1/4 b = 2, no overlaping  ***#
  #################################################
  #   parameters for the subsampling #####
  ################################################
  lato_fin=2  #changing window size 2,4#
  lx=lato_fin          #lunghezza lato x quadrato subfinestra#
  ly=lato_fin          #lunghezza lato y quadrato subfinestra#
  winc=c(lx/sqrt(LX),ly/sqrt(LY))#
  winstp= 1  ###   1/lato_fin complete overlapping   1 "no" overlapping#
  ################################################
  weighted=0#
  maxdist=lato_fin#
  # maxdist=1.5#
  ### eucliden likelihood ################ #
  res1=STBEUFit(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc_s=winc,winstp_s = winstp,0,0,type_subs,weighted)#
  eu_par1=c(res1$par[2],res1$par[3],res1$par[1])#
  names(eu_par1)=names(fitA$param)#
  # print(eu_par1)#
  # **************************scenario 2/4 b = 4, no overlaping ***#
  #################################################
  #   parameters for the subsampling #####
  ################################################
  lato_fin=4  #changing window size 2,4#
  lx=lato_fin          #lunghezza lato x quadrato subfinestra#
  ly=lato_fin          #lunghezza lato y quadrato subfinestra#
  winc=c(lx/sqrt(LX),ly/sqrt(LY))#
  winstp= 1  ###   1/lato_fin complete overlapping   1 "no" overlapping#
  ################################################
  maxdist=lato_fin#
  ### eucliden likelihood ################ #
  res2=STBEUFit(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,0,0,type_subs,weighted)#
  eu_par2=c(res2$par[2],res2$par[3],res2$par[1])#
  names(eu_par2)=names(fitA$param)#
  # print(eu_par2)#
  # **************************scenario 3/4 b = 2, overlaping (.5) ***#
  #################################################
  #   parameters for the subsampling #####
  ################################################
  lato_fin=2  #changing window size 2,4#
  lx=lato_fin          #lunghezza lato x quadrato subfinestra#
  ly=lato_fin          #lunghezza lato y quadrato subfinestra#
  winc=c(lx/sqrt(LX),ly/sqrt(LY))#
  winstp= .5  ###   1/lato_fin complete overlapping   1 "no" overlapping#
  ################################################
  maxdist=lato_fin#
  ### eucliden likelihood ################ #
  res3=STBEUFit(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,0,0,type_subs,weighted)#
  eu_par3=c(res3$par[2],res3$par[3],res3$par[1])#
  names(eu_par3)=names(fitA$param)#
  # print(eu_par3)#
  # **************************scenario 4/4 b = 4, overlaping (.5), weighted. ***#
  #################################################
  #   parameters for the subsampling #####
  ################################################
  lato_fin=4  #changing window size 2,4,8#
  lx=lato_fin          #lunghezza lato x quadrato subfinestra#
  ly=lato_fin          #lunghezza lato y quadrato subfinestra#
  winc=c(lx/sqrt(LX),ly/sqrt(LY))#
  winstp= .5  ###   1/lato_fin complete overlapping   1 "no" overlapping#
  ################################################
  maxdist=lato_fin#
  ### eucliden likelihood ################ #
  res4=STBEUFit(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,0,0,type_subs,weighted)#
  eu_par4=c(res4$par[2],res4$par[3],res4$par[1])#
  names(eu_par4)=names(fitA$param)#
  # print(eu_par4)#
  results[(5*(i)-4):((5*(i)-4)+4),]=cbind(label,rbind(eu_par0=eu_par0,eu_par1,eu_par2,eu_par3,eu_par4))#
  colnames(results)=c("setting",names(fitA$param))#
  print(i)#
  i=i+1#
  setwd(dirsol)#
  write.csv(results, "regular_results_spaceGN15.csv")#
}
