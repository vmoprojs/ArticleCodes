round(((A/B)^(1/4)),3) #b=4, overlapping
overall1[1,2] <- round(((A/B)^(1/4)),3)
B = det(var(as.matrix(dat1[dat1$setting==2,c(3:5)]),use = "na.or.complete"))
round(((A/B)^(1/4)),3) #b=4, non overlapping
overall1[2,2] <- round(((A/B)^(1/4)),3)
overall1 #regular double space 1.2
# ***************** REGULAR SPACE 1.8
dat1 <- read.csv("regular_results_timeGN2.csv")
names(dat1)
# mean = 0;scale_s=1; scale_t=1;sill=1
names.param = c("scale_s","scale_t","sill")
param <- c(1.8/3,1.8/19,1)
param <- c(4/3,4/19,1)
mse.scenario = tapply(dat1[,names.param[1]],dat1[,"setting"],mse,param[1])
mse.scenario[1]/mse.scenario
table(dat1$setting)
boxplot(dat1$scale_s~dat1$setting)
abline(h = param[1],col="blue")
boxplot(dat1$scale_t~dat1$setting)
abline(h = param[2],col="blue")
boxplot(dat1$sill~dat1$setting)
abline(h = param[3],col="blue")
# MSE by PARAM and Scenario:
par.mse = NULL
for(i in 1:3)
{
par.mse = cbind(par.mse,tapply(dat1[,names.param[i]],dat1[,"setting"],mse,param[i]))
}
colnames(par.mse) = names.param
ratio.par.mse = cbind(par.mse[1,1]/par.mse[,1],
par.mse[1,2]/par.mse[,2],
par.mse[1,3]/par.mse[,3])
colnames(ratio.par.mse) = names.param
#*****
a1 = ratio.par.mse[c(3,4)+1,1] #Overlapping scale_s
a2 = ratio.par.mse[c(1,2)+1,1] #NON Overlapping scale_s
b1 = ratio.par.mse[c(3,4)+1,2] #Overlapping scale_t
b2 = ratio.par.mse[c(1,2)+1,2] #NON Overlapping scale_t
c1 = ratio.par.mse[c(3,4)+1,3] #Overlapping sill
c2 = ratio.par.mse[c(1,2)+1,3] #NON Overlapping sill
prange2 = rbind(a1,a2,b1,b2,c1,c2)
prange2
regS = rbind(prange1,prange2) #Space Regular for Double Exponenctial, 1.2 and 1.8
#==== Overall measure
overall2 <- matrix(NA, ncol=2,nrow=2)
A = det(var(as.matrix(dat1[dat1$setting==0,c(3:5)]),use = "na.or.complete")) #PL
B = det(var(as.matrix(dat1[dat1$setting==3,c(3:5)]),use = "na.or.complete"))
round(((A/B)^(1/4)),3) #b=2, overlapping
overall2[1,1] <- round(((A/B)^(1/4)),3)
B = det(var(as.matrix(dat1[dat1$setting==1,c(3:5)]),use = "na.or.complete"))
round(((A/B)^(1/4)),3) #b=2, non overlapping
overall2[2,1] <- round(((A/B)^(1/4)),3)
B = det(var(as.matrix(dat1[dat1$setting==4,c(3:5)]),use = "na.or.complete"))
round(((A/B)^(1/4)),3) #b=4, overlapping
overall2[1,2] <- round(((A/B)^(1/4)),3)
B = det(var(as.matrix(dat1[dat1$setting==2,c(3:5)]),use = "na.or.complete"))
round(((A/B)^(1/4)),3) #b=4, non overlapping
overall2[2,2] <- round(((A/B)^(1/4)),3)
overall2 #regular double space 1.8
# ******************************************** IRREGULAR SPACE Double 1.2
dat1 <- read.csv("Irregular_results_timeGN15.csv")
names(dat1)
# mean = 0;scale_s=1; scale_t=1;sill=1
names.param = c("scale_s","scale_t","sill")
param <- c(1.2/3,1.2/19,1)
param <- c(3.1/3,3.1/19,1)
mse.scenario = tapply(dat1[,names.param[1]],dat1[,"setting"],mse,param[1])
mse.scenario[1]/mse.scenario
table(dat1$setting)
boxplot(dat1$scale_s~dat1$setting)
abline(h = param[1],col="blue")
boxplot(dat1$scale_t~dat1$setting)
abline(h = param[2],col="blue")
boxplot(dat1$sill~dat1$setting)
abline(h = param[3],col="blue")
# MSE by PARAM and Scenario:
par.mse = NULL
for(i in 1:3)
{
par.mse = cbind(par.mse,tapply(dat1[,names.param[i]],dat1[,"setting"],mse,param[i]))
}
colnames(par.mse) = names.param
ratio.par.mse = cbind(par.mse[1,1]/par.mse[,1],
par.mse[1,2]/par.mse[,2],
par.mse[1,3]/par.mse[,3])
colnames(ratio.par.mse) = names.param
#*****
a1 = ratio.par.mse[c(3,4)+1,1] #Overlapping scale_s
a2 = ratio.par.mse[c(1,2)+1,1] #NON Overlapping scale_s
b1 = ratio.par.mse[c(3,4)+1,2] #Overlapping scale_t
b2 = ratio.par.mse[c(1,2)+1,2] #NON Overlapping scale_t
c1 = ratio.par.mse[c(3,4)+1,3] #Overlapping sill
c2 = ratio.par.mse[c(1,2)+1,3] #NON Overlapping sill
prange3 = rbind(a1,a2,b1,b2,c1,c2)
prange3
# xtable::xtable(prange,digits=3)
#==== Overall measure
overall3 <- matrix(NA, ncol=2,nrow=2)
A = det(var(as.matrix(dat1[dat1$setting==0,c(3:5)]),use = "na.or.complete")) #PL
B = det(var(as.matrix(dat1[dat1$setting==3,c(3:5)]),use = "na.or.complete"))
round(((A/B)^(1/4)),3) #b=2, overlapping
overall3[1,1] <- round(((A/B)^(1/4)),3)
B = det(var(as.matrix(dat1[dat1$setting==1,c(3:5)]),use = "na.or.complete"))
round(((A/B)^(1/4)),3) #b=2, non overlapping
overall3[2,1] <- round(((A/B)^(1/4)),3)
B = det(var(as.matrix(dat1[dat1$setting==4,c(3:5)]),use = "na.or.complete"))
round(((A/B)^(1/4)),3) #b=4, overlapping
overall3[1,2] <- round(((A/B)^(1/4)),3)
B = det(var(as.matrix(dat1[dat1$setting==2,c(3:5)]),use = "na.or.complete"))
round(((A/B)^(1/4)),3) #b=4, non overlapping
overall3[2,2] <- round(((A/B)^(1/4)),3)
overall3 #irregular double space 1.2
# ******************************************** IRREGULAR SPACE Double 1.8
dat1 <- read.csv("Irregular_results_timeGN2.csv")
names(dat1)
# mean = 0;scale_s=1; scale_t=1;sill=1
names.param = c("scale_s","scale_t","sill")
param <- c(1.8/3,1.8/19,1)
param <- c(4/3,4/19,1)
mse.scenario = tapply(dat1[,names.param[1]],dat1[,"setting"],mse,param[1])
mse.scenario[1]/mse.scenario
table(dat1$setting)
boxplot(dat1$scale_s~dat1$setting)
abline(h = param[1],col="blue")
boxplot(dat1$scale_t~dat1$setting)
abline(h = param[2],col="blue")
boxplot(dat1$sill~dat1$setting)
abline(h = param[3],col="blue")
# MSE by PARAM and Scenario:
par.mse = NULL
for(i in 1:3)
{
par.mse = cbind(par.mse,tapply(dat1[,names.param[i]],dat1[,"setting"],mse,param[i]))
}
colnames(par.mse) = names.param
ratio.par.mse = cbind(par.mse[1,1]/par.mse[,1],
par.mse[1,2]/par.mse[,2],
par.mse[1,3]/par.mse[,3])
colnames(ratio.par.mse) = names.param
#*****
a1 = ratio.par.mse[c(3,4)+1,1] #Overlapping scale_s
a2 = ratio.par.mse[c(1,2)+1,1] #NON Overlapping scale_s
b1 = ratio.par.mse[c(3,4)+1,2] #Overlapping scale_t
b2 = ratio.par.mse[c(1,2)+1,2] #NON Overlapping scale_t
c1 = ratio.par.mse[c(3,4)+1,3] #Overlapping sill
c2 = ratio.par.mse[c(1,2)+1,3] #NON Overlapping sill
prange4 = rbind(a1,a2,b1,b2,c1,c2)
# xtable::xtable(prange,digits=3)
IrregS = rbind(prange3,prange4) #SpaceTime Regular for Double Exponential, 04 and 12
DouSpace <- cbind(regS,IrregS)
#==== Overall measure
overall4 <- matrix(NA, ncol=2,nrow=2)
A = det(var(as.matrix(dat1[dat1$setting==0,c(3:5)]),use = "na.or.complete")) #PL
B = det(var(as.matrix(dat1[dat1$setting==3,c(3:5)]),use = "na.or.complete"))
round(((A/B)^(1/4)),3) #b=2, overlapping
overall4[1,1] <- round(((A/B)^(1/4)),3)
B = det(var(as.matrix(dat1[dat1$setting==1,c(3:5)]),use = "na.or.complete"))
round(((A/B)^(1/4)),3) #b=2, non overlapping
overall4[2,1] <- round(((A/B)^(1/4)),3)
B = det(var(as.matrix(dat1[dat1$setting==4,c(3:5)]),use = "na.or.complete"))
round(((A/B)^(1/4)),3) #b=4, overlapping
overall4[1,2] <- round(((A/B)^(1/4)),3)
B = det(var(as.matrix(dat1[dat1$setting==2,c(3:5)]),use = "na.or.complete"))
round(((A/B)^(1/4)),3) #b=4, non overlapping
overall4[2,2] <- round(((A/B)^(1/4)),3)
overall4 #irregular double space 1.8
rbind(cbind(overall1,overall3))
rbind(cbind(overall2,overall4))
# cbind(regS,IrregS)
rbind(cbind(prange1,prange3),rbind(cbind(overall1,overall3)))
rbind(cbind(prange2,prange4),rbind(cbind(overall2,overall4)))
SPACETIMEGN <- rbind(rbind(cbind(prange1,prange3),rbind(cbind(overall1,overall3))),
rbind(cbind(prange2,prange4),rbind(cbind(overall2,overall4))))
SPACETIMEGN
SPACETIME <- cbind(SPACETIMEDOU,SPACETIMEGN)
SPACETIME
sum(SPACETIME>=0.7)/(dim(SPACETIME)[1]*dim(SPACETIME)[2])
min(SPACETIME)
setwd("~/Documents/Articles/STBEU/Data")
rm(list = ls())
library(GeoModels)
library(STBEU)
library(scatterplot3d)
# devtools::install_github("andrewzm/STRbook")
data("Medwind_data",package = "STRbook")
# plot(density(unlist(Edat$EUdat)),main = "Data")
# The data here correspond to 28 time periods
# from 00:00 UTC on 29 January 2005 to 18:00
# UTC on 04 February 2005 (every 6 hours).
# EUdat: Data frame containing the eastâ€“west (u) component of the ECMWF
# wind vector (in units of m/s) in time-wide format
coords = Edat$ECMWFxylocs
datos = matrix(unlist(Edat$EUdat),ncol = ncol(Edat$EUdat),nrow = nrow(Edat$EUdat))
datos = t(datos)
coords_ll = coords #lon-lat coords
prj = mapproj::mapproject(coords[ ,1],coords[ ,2],projection ="sinusoidal")
coords = cbind(prj$x,prj$y) # Projected coords
coords = coords*6371
cat("\014")
rm(list = ls())
graphics.off()
cat("\014")
library(GeoModels)
library(STBEU)
library(scatterplot3d)
# devtools::install_github("andrewzm/STRbook")
data("Medwind_data",package = "STRbook")
coords = Edat$ECMWFxylocs
datos = matrix(unlist(Edat$EUdat),ncol = ncol(Edat$EUdat),nrow = nrow(Edat$EUdat))
datos = t(datos)
coords_ll = coords #lon-lat coords
prj = mapproj::mapproject(coords[ ,1],coords[ ,2],projection ="sinusoidal")
coords = cbind(prj$x,prj$y) # Projected coords
coords = coords*6371
################################################
#   parameters for the subsampling ####
###############################################
coordx=coords[,1]
coordy=coords[,2]
LX=abs(range(coordx)[1]-range(coordx)[2])
LY=abs(range(coordy)[1]-range(coordy)[2])
lato_fin=400  #changing window size
lx=lato_fin          #lunghezza lato x quadrato subfinestra
ly=lato_fin          #lunghezza lato y quadrato subfinestra
winc=c(lx/sqrt(LX),ly/sqrt(LY))
winstp= 1###   1/lato_fin complete overlapping in space  1 "no" overlapping in space
###############################################
winc_t=6   ###  length of temporal window
winstp_t=1 ###   0.5 half overlapping  1 "no" overlapping
(maxdist <-  40)
(maxtime <- 1*winc_t)
###############################################
weighted=0
type_dist=1 ### type of distance 1:euclidean
type_subs=1 ### type of subsampling  1=in space    2= in time
smooth_t=0
scale_t=20
scale_s=350
power2_t=3.5+smooth_t  +1
power_s=2
power2_s=2.5+2*smooth_t
sep=0
sill=var(c(datos),na.rm = TRUE)
nugget=0
mean=mean(datos,na.rm=TRUE)
start=list(scale_s=scale_s,scale_t=scale_t,sill=sill)
fix=c( nugget=nugget,power_s=power_s,mean = mean,
power2_s=power2_s,
power2_t=power2_t,smooth_t=smooth_t,
sep=sep)
param <- c(start,fix)
summary(dist(coords))
max(dist(coords))/maxdist
max(dist(time))/maxtime
max(dist(times))/maxtime
time <- 1:nrow(datos)
rm(list = ls())
graphics.off()
cat("\014")
library(GeoModels)
library(STBEU)
library(scatterplot3d)
# devtools::install_github("andrewzm/STRbook")
data("Medwind_data",package = "STRbook")
# plot(density(unlist(Edat$EUdat)),main = "Data")
# The data here correspond to 28 time periods
# from 00:00 UTC on 29 January 2005 to 18:00
# UTC on 04 February 2005 (every 6 hours).
# EUdat: Data frame containing the eastâ€“west (u) component of the ECMWF
# wind vector (in units of m/s) in time-wide format
coords = Edat$ECMWFxylocs
datos = matrix(unlist(Edat$EUdat),ncol = ncol(Edat$EUdat),nrow = nrow(Edat$EUdat))
datos = t(datos)
coords_ll = coords #lon-lat coords
prj = mapproj::mapproject(coords[ ,1],coords[ ,2],projection ="sinusoidal")
coords = cbind(prj$x,prj$y) # Projected coords
coords = coords*6371
time <- 1:nrow(datos)
################################################
#   parameters for the subsampling ####
###############################################
coordx=coords[,1]
coordy=coords[,2]
LX=abs(range(coordx)[1]-range(coordx)[2])
LY=abs(range(coordy)[1]-range(coordy)[2])
lato_fin=400  #changing window size
lx=lato_fin          #lunghezza lato x quadrato subfinestra
ly=lato_fin          #lunghezza lato y quadrato subfinestra
winc=c(lx/sqrt(LX),ly/sqrt(LY))
winstp= 1###   1/lato_fin complete overlapping in space  1 "no" overlapping in space
###############################################
winc_t=6   ###  length of temporal window
winstp_t=1 ###   0.5 half overlapping  1 "no" overlapping
(maxdist <-  40)
(maxtime <- 1*winc_t)
###############################################
weighted=0
type_dist=1 ### type of distance 1:euclidean
type_subs=1 ### type of subsampling  1=in space    2= in time
smooth_t=0
scale_t=20
scale_s=350
power2_t=3.5+smooth_t  +1
power_s=2
power2_s=2.5+2*smooth_t
sep=0
sill=var(c(datos),na.rm = TRUE)
nugget=0
mean=mean(datos,na.rm=TRUE)
start=list(scale_s=scale_s,scale_t=scale_t,sill=sill)
fix=c( nugget=nugget,power_s=power_s,mean = mean,
power2_s=power2_s,
power2_t=power2_t,smooth_t=smooth_t,
sep=sep)
param <- c(start,fix)
summary(dist(coords))
max(dist(coords))/maxdist
max(dist(times))/maxtime
summary(dist(time))
max(dist(time))/maxtime
summary(dist(time))
cc = 3
maxdist1=40
maxtime1=6
sol <- list()
rm(list = ls())
graphics.off()
cat("\014")
library(GeoModels)
library(STBEU)
library(scatterplot3d)
# devtools::install_github("andrewzm/STRbook")
data("Medwind_data",package = "STRbook")
# plot(density(unlist(Edat$EUdat)),main = "Data")
# The data here correspond to 28 time periods
# from 00:00 UTC on 29 January 2005 to 18:00
# UTC on 04 February 2005 (every 6 hours).
# EUdat: Data frame containing the eastâ€“west (u) component of the ECMWF
# wind vector (in units of m/s) in time-wide format
coords = Edat$ECMWFxylocs
datos = matrix(unlist(Edat$EUdat),ncol = ncol(Edat$EUdat),nrow = nrow(Edat$EUdat))
datos = t(datos)
coords_ll = coords #lon-lat coords
prj = mapproj::mapproject(coords[ ,1],coords[ ,2],projection ="sinusoidal")
coords = cbind(prj$x,prj$y) # Projected coords
coords = coords*6371
time <- 1:nrow(datos)
#### **************************    Estimation
################################################
#   parameters for the subsampling ####
###############################################
coordx=coords[,1]
coordy=coords[,2]
LX=abs(range(coordx)[1]-range(coordx)[2])
LY=abs(range(coordy)[1]-range(coordy)[2])
lato_fin=400  #changing window size
lx=lato_fin          #lunghezza lato x quadrato subfinestra
ly=lato_fin          #lunghezza lato y quadrato subfinestra
winc=c(lx/sqrt(LX),ly/sqrt(LY))
winstp= 1###   1/lato_fin complete overlapping in space  1 "no" overlapping in space
###############################################
winc_t=6   ###  length of temporal window
winstp_t=1 ###   0.5 half overlapping  1 "no" overlapping
(maxdist <-  40)
(maxtime <- 1*winc_t)
###############################################
weighted=0
type_dist=1 ### type of distance 1:euclidean
type_subs=1 ### type of subsampling  1=in space    2= in time
smooth_t=0
scale_t=20
scale_s=350
power2_t=3.5+smooth_t  +1
power_s=2
power2_s=2.5+2*smooth_t
sep=0
sill=var(c(datos),na.rm = TRUE)
nugget=0
mean=mean(datos,na.rm=TRUE)
start=list(scale_s=scale_s,scale_t=scale_t,sill=sill)
fix=c( nugget=nugget,power_s=power_s,mean = mean,
power2_s=power2_s,
power2_t=power2_t,smooth_t=smooth_t,
sep=sep)
param <- c(start,fix)
summary(dist(coords))
max(dist(coords))/maxdist
max(dist(time))/maxtime
summary(dist(time))
cc = 3
sol <- list()
#2 : STBEU in OpenCL framework with CPU
tGPU1 = proc.time()
res1_0=STBEUFit(start,fix,coords,time,cc,datos,
type_dist,maxdist1 ,maxtime1,
winc,winstp,0,0,type_subs,weighted
# ,GPU =0, local = c(1,1)
,varest = TRUE
)
res1_0=STBEUFit(start,fix,coords,time,cc,datos,
type_dist,maxdist ,maxtime,
winc,winstp,0,0,type_subs,weighted
# ,GPU =0, local = c(1,1)
,varest = TRUE
)
###### pairwise likelihood ########
fixed=as.list(fix)
gTime = proc.time()
res2_0=GeoFit(data=datos,coordx=coords,coordt=time,
corrmodel="Wen_time",
start=start,fixed=fixed,
maxdist=maxdist1 ,maxtime=maxtime1,varest = TRUE)
res2_0=GeoFit(data=datos,coordx=coords,coordt=time,
corrmodel="Wen_time",
start=start,fixed=fixed,
maxdist=maxdist ,maxtime=maxtime,varest = TRUE)
#*********************************** sep = 0.5 *****************************#
sep=0.5
start=list(scale_s=scale_s,scale_t=scale_t,sill=sill)
fix=c( nugget=nugget,power_s=power_s,mean = mean,
power2_s=power2_s,
power2_t=power2_t,smooth_t=smooth_t,
sep=sep)
tGPU1 = proc.time()
res1_05=STBEUFit(start,fix,coords,time,cc,datos,
type_dist,maxdist1 ,maxtime1,
winc,winstp,0,0,type_subs,weighted
# ,GPU =0, local = c(1,1)
,varest = TRUE
)
maxtime
maxdist
tGPU1 = proc.time()
res1_05=STBEUFit(start,fix,coords,time,cc,datos,
type_dist,maxdist ,maxtime,
winc,winstp,0,0,type_subs,weighted
# ,GPU =0, local = c(1,1)
,varest = TRUE
)
###### pairwise likelihood ########
fixed=as.list(fix)
res3_05 = GeoFit(data=datos,coordx=coords,coordt=time,
corrmodel="Wen_time",
start=start,fixed=fixed,
maxdist=maxdist1 ,maxtime=maxtime1,varest = TRUE)
res3_05 = GeoFit(data=datos,coordx=coords,coordt=time,
corrmodel="Wen_time",
start=start,fixed=fixed,
maxdist=maxdist ,maxtime=maxtime,varest = TRUE)
res1_05$par;res1_05$stderr
res3_05$param;res3_05$stderr
#*********************************** sep = 1**********************************#
sep=1
start=list(scale_s=scale_s,scale_t=scale_t,sill=sill)
fix=c( nugget=nugget,power_s=power_s,mean = mean,
power2_s=power2_s,
power2_t=power2_t,smooth_t=smooth_t,
sep=sep)
tGPU1 = proc.time()
res1_1=STBEUFit(start,fix,coords,time,cc,datos,
type_dist,maxdist1 ,maxtime1,
winc,winstp,0,0,type_subs,weighted
# ,GPU =0, local = c(1,1)
,varest = TRUE
)
res1_1=STBEUFit(start,fix,coords,time,cc,datos,
type_dist,maxdist ,maxtime,
winc,winstp,0,0,type_subs,weighted
# ,GPU =0, local = c(1,1)
,varest = TRUE
)
res3_1 = GeoFit(data=datos,coordx=coords,coordt=time,
corrmodel="Wen_time",
start=start,fixed=fixed,
maxdist=maxdist1 ,maxtime=maxtime1,varest = TRUE)
res3_1 = GeoFit(data=datos,coordx=coords,coordt=time,
corrmodel="Wen_time",
start=start,fixed=fixed,
maxdist=maxdist ,maxtime=maxtime,varest = TRUE)
res1_0$value
res3_0$logCompLik
res1_05$value
res3_05$logCompLik
res1_1$value
res1_0$value
res3_0$logCompLik
res2_0$logCompLik
res1_05$value
res3_05$logCompLik
res1_1$value
res3_1$logCompLik
res1_0$value
res3_0$logCompLik
res1_0$par;res1_0$stderr
res1_0$value
res2_0$logCompLik
res1_05$value
res3_05$logCompLik
res1_1$value
res3_1$logCompLik
res1_0$value
res3_0$logCompLik
res1_0$par;res1_0$stderr
res2_0$param;res2_0$stderr
res1_05$par;res1_05$stderr
res3_05$param;res3_05$stderr
res1_1$par;res1_1$stderr
res3_1$param;res3_1$stderr
S=res2$param['scale_s']
T=res2$param['scale_t']
V=res2$param['sill']
devtools::install_github("vmoprojs/STBEU")
