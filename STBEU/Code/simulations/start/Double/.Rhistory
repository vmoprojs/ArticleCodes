prange33 = rbind(a1,a2,b1,b2,c1,c2,d1,d2)
# xtable::xtable(prange,digits=3)
#==== Overall measure
overall33 <- matrix(NA, ncol=2,nrow=2)
A = det(var(as.matrix(dat1[dat1$setting==0,c(2:5)]))) #PL
B = det(var(as.matrix(dat1[dat1$setting==3,c(2:5)])))
round(((A/B)^(1/4)),3) #b=2, overlapping
overall33[1,1] <- round(((A/B)^(1/4)),3)
B = det(var(as.matrix(dat1[dat1$setting==1,c(2:5)])))
round(((A/B)^(1/4)),3) #b=2, non overlapping
overall33[2,1] <- round(((A/B)^(1/4)),3)
B = det(var(as.matrix(dat1[dat1$setting==4,c(2:5)])))
round(((A/B)^(1/4)),3) #b=4, overlapping
overall33[1,2] <- round(((A/B)^(1/4)),3)
B = det(var(as.matrix(dat1[dat1$setting==2,c(2:5)])))
round(((A/B)^(1/4)),3) #b=4, non overlapping
overall33[2,2] <- round(((A/B)^(1/4)),3)
overall33
# ******************************************** IRREGULAR SPACE-TIME DE12
# rm(list=ls())
setwd("~/Documents/Software/STBEU/Simulations/StartDoubleFix")
# mse<-function(x,a)  var(x)+(mean(x)-a)^2
dat1 <- read.csv("Irregular_results_spacetimeDE12.csv")
names(dat1)
# mean = 0;scale_s=1; scale_t=1;sill=1
# names.param = c("mean","scale_s","scale_t","sill")
param <- c(0,1.2/3,6/3,1)
mse.scenario = tapply(dat1[,names.param[1]],dat1[,"setting"],mse,param[1])
mse.scenario[1]/mse.scenario
sol1 = matrix(NA,ncol=4,nrow=2000)
label = rep(0:4,each=400)
ppb=1 # param 1:4
setting = 1 # setting 1:5
for(ppb in 1:4)
{
for(setting in 1:5)
{
qiles = (tapply(dat1[,names.param[ppb]],dat1[,"setting"],quantile,probs=c(0.1,0.9)))
lo = as.numeric(qiles[[setting]][1])
up = as.numeric(qiles[[setting]][2])
pos = dat1[,names.param[ppb]][dat1[,"setting"]==(setting-1)]>lo & dat1[,names.param[ppb]][dat1[,"setting"]==(setting-1)]<up
sol1[(400*(setting)-399):((400*(setting)-399)+399),ppb] = dat1[,names.param[ppb]][dat1[,"setting"]==(setting-1)][pos]
}
}
dat1 = as.data.frame(cbind(label,sol1))
names(dat1) <- c("setting","mean","scale_s","scale_t","sill")
# setwd("~/Documents/Software/STBEU/Simulations/StartDoubleFix")
# mse<-function(x,a)  var(x)+(mean(x)-a)^2
# dat1 <- read.csv("regular_results_spacetimeDE04.csv")
# names(dat1)
# # mean = 0;scale_s=1; scale_t=1;sill=1
# names.param = c("mean","scale_s","scale_t","sill")
# param <- c(0,.4/3,3/3,1)
#
# mse.scenario = tapply(dat1[,names.param[1]],dat1[,"setting"],mse,param[1])
# mse.scenario[1]/mse.scenario
#
# ppp = 2
# tapply(dat1[,names.param[ppp]],dat1[,"setting"],mean,param[ppp])
# # barplot(tapply(dat1[,names.param[ppp]],dat1[,"setting"],mean,param[ppp]))
#
#
#
# sol1 = matrix(NA,ncol=4,nrow=2000)
# label = rep(0:4,each=400)
#
# ppb=1 # param 1:4
# setting = 1 # setting 1:5
#
# for(ppb in 1:4)
# {
#   for(setting in 1:5)
#   {
#     qiles = (tapply(dat1[,names.param[ppb]],dat1[,"setting"],quantile,probs=c(0.1,0.9)))
#     lo = as.numeric(qiles[[setting]][1])
#     up = as.numeric(qiles[[setting]][2])
#     pos = dat1[,names.param[ppb]][dat1[,"setting"]==(setting-1)]>lo & dat1[,names.param[ppb]][dat1[,"setting"]==(setting-1)]<up
#     sol1[(400*(setting)-399):((400*(setting)-399)+399),ppb] = dat1[,names.param[ppb]][dat1[,"setting"]==(setting-1)][pos]
#   }
# }
# dat1 = as.data.frame(cbind(label,sol1))
# names(dat1) <- c("setting","mean","scale_s","scale_t","sill")
#10
boxplot(dat1$mean~dat1$setting,
main = paste("mean","=",round(param[1],2),sep=""))
abline ( h = param[1],col = "blue")
boxplot(dat1$scale_s~dat1$setting,
main = paste("scale_s","=",round(param[2],2),sep=""))
abline ( h = param[2],col = "blue")
boxplot(dat1$scale_t~dat1$setting,
main = paste("scale_t","=",round(param[3],2),sep=""))
abline ( h = param[3],col = "blue")
boxplot(dat1$sill~dat1$setting,
main = paste("sill","=",round(param[4],2),sep=""))
abline ( h = param[4],col = "blue")
title("Irregular Space-Time Blocking",outer= TRUE)
# MSE by PARAM and Scenario:
par.mse = NULL
for(i in 1:4)
{
par.mse = cbind(par.mse,tapply(dat1[,names.param[i]],dat1[,"setting"],mse,param[i]))
}
colnames(par.mse) = names.param
ratio.par.mse = cbind(par.mse[1,1]/par.mse[,1],
par.mse[1,2]/par.mse[,2],
par.mse[1,3]/par.mse[,3],
par.mse[1,4]/par.mse[,4])
colnames(ratio.par.mse) = names.param
#*****
a1 = ratio.par.mse[c(3,4)+1,1] #Overlapping mean
a2 = ratio.par.mse[c(1,2)+1,1] #NON Overlapping mean
b1 = ratio.par.mse[c(3,4)+1,2] #Overlapping scale_s
b2 = ratio.par.mse[c(1,2)+1,2] #NON Overlapping scale_s
c1 = ratio.par.mse[c(3,4)+1,3] #Overlapping scale_t
c2 = ratio.par.mse[c(1,2)+1,3] #NON Overlapping scale_t
d1 = ratio.par.mse[c(3,4)+1,4] #Overlapping sill
d2 = ratio.par.mse[c(1,2)+1,4] #NON Overlapping sill
prange44 = rbind(a1,a2,b1,b2,c1,c2,d1,d2)
# xtable::xtable(prange,digits=3)
irregST =rbind(prange33,prange44)
#==== Overall measure
overall44 <- matrix(NA, ncol=2,nrow=2)
A = det(var(as.matrix(dat1[dat1$setting==0,c(2:5)]))) #PL
B = det(var(as.matrix(dat1[dat1$setting==3,c(2:5)])))
round(((A/B)^(1/4)),3) #b=2, overlapping
overall44[1,1] <- round(((A/B)^(1/4)),3)
B = det(var(as.matrix(dat1[dat1$setting==1,c(2:5)])))
round(((A/B)^(1/4)),3) #b=2, non overlapping
overall44[2,1] <- round(((A/B)^(1/4)),3)
B = det(var(as.matrix(dat1[dat1$setting==4,c(2:5)])))
round(((A/B)^(1/4)),3) #b=4, overlapping
overall44[1,2] <- round(((A/B)^(1/4)),3)
B = det(var(as.matrix(dat1[dat1$setting==2,c(2:5)])))
round(((A/B)^(1/4)),3) #b=4, non overlapping
overall44[2,2] <- round(((A/B)^(1/4)),3)
overall44
# ******************************************** IRREGULAR TIME DE04
# rm(list=ls())
setwd("~/Documents/Software/STBEU/Simulations/StartDoubleFix")
mse<-function(x,a)  var(x)+(mean(x)-a)^2
dat1 <- read.csv("Irregular_results_timeDE04.csv")
names(dat1)
# mean = 0;scale_s=1; scale_t=1;sill=1
names.param = c("mean","scale_s","scale_t","sill")
param <- c(0,.4/3,3/3,1)
mse.scenario = tapply(dat1[,names.param[1]],dat1[,"setting"],mse,param[1])
mse.scenario[1]/mse.scenario
sol1 = matrix(NA,ncol=4,nrow=2000)
label = rep(0:4,each=400)
ppb=1 # param 1:4
setting = 1 # setting 1:5
for(ppb in 1:4)
{
for(setting in 1:5)
{
qiles = (tapply(dat1[,names.param[ppb]],dat1[,"setting"],quantile,probs=c(0.1,0.9)))
lo = as.numeric(qiles[[setting]][1])
up = as.numeric(qiles[[setting]][2])
pos = dat1[,names.param[ppb]][dat1[,"setting"]==(setting-1)]>lo & dat1[,names.param[ppb]][dat1[,"setting"]==(setting-1)]<up
sol1[(400*(setting)-399):((400*(setting)-399)+399),ppb] = dat1[,names.param[ppb]][dat1[,"setting"]==(setting-1)][pos]
}
}
dat1 = as.data.frame(cbind(label,sol1))
names(dat1) <- c("setting","mean","scale_s","scale_t","sill")
# setwd("~/Documents/Software/STBEU/Simulations/StartDoubleFix")
# mse<-function(x,a)  var(x)+(mean(x)-a)^2
# dat1 <- read.csv("regular_results_spacetimeDE04.csv")
# names(dat1)
# # mean = 0;scale_s=1; scale_t=1;sill=1
# names.param = c("mean","scale_s","scale_t","sill")
# param <- c(0,.4/3,3/3,1)
#
# mse.scenario = tapply(dat1[,names.param[1]],dat1[,"setting"],mse,param[1])
# mse.scenario[1]/mse.scenario
#
# ppp = 2
# tapply(dat1[,names.param[ppp]],dat1[,"setting"],mean,param[ppp])
# # barplot(tapply(dat1[,names.param[ppp]],dat1[,"setting"],mean,param[ppp]))
#
#
#
# sol1 = matrix(NA,ncol=4,nrow=2000)
# label = rep(0:4,each=400)
#
# ppb=1 # param 1:4
# setting = 1 # setting 1:5
#
# for(ppb in 1:4)
# {
#   for(setting in 1:5)
#   {
#     qiles = (tapply(dat1[,names.param[ppb]],dat1[,"setting"],quantile,probs=c(0.1,0.9)))
#     lo = as.numeric(qiles[[setting]][1])
#     up = as.numeric(qiles[[setting]][2])
#     pos = dat1[,names.param[ppb]][dat1[,"setting"]==(setting-1)]>lo & dat1[,names.param[ppb]][dat1[,"setting"]==(setting-1)]<up
#     sol1[(400*(setting)-399):((400*(setting)-399)+399),ppb] = dat1[,names.param[ppb]][dat1[,"setting"]==(setting-1)][pos]
#   }
# }
# dat1 = as.data.frame(cbind(label,sol1))
# names(dat1) <- c("setting","mean","scale_s","scale_t","sill")
#11
boxplot(dat1$mean~dat1$setting,
main = paste("mean","=",round(param[1],2),sep=""))
abline ( h = param[1],col = "blue")
boxplot(dat1$scale_s~dat1$setting,
main = paste("scale_s","=",round(param[2],2),sep=""))
abline ( h = param[2],col = "blue")
boxplot(dat1$scale_t~dat1$setting,
main = paste("scale_t","=",round(param[3],2),sep=""))
abline ( h = param[3],col = "blue")
boxplot(dat1$sill~dat1$setting,
main = paste("sill","=",round(param[4],2),sep=""))
abline ( h = param[4],col = "blue")
title("Irregular Time Blocking",outer= TRUE)
# MSE by PARAM and Scenario:
par.mse = NULL
for(i in 1:4)
{
par.mse = cbind(par.mse,tapply(dat1[,names.param[i]],dat1[,"setting"],mse,param[i]))
}
colnames(par.mse) = names.param
ratio.par.mse = cbind(par.mse[1,1]/par.mse[,1],
par.mse[1,2]/par.mse[,2],
par.mse[1,3]/par.mse[,3],
par.mse[1,4]/par.mse[,4])
colnames(ratio.par.mse) = names.param
#*****
a1 = ratio.par.mse[c(3,4)+1,1] #Overlapping mean
a2 = ratio.par.mse[c(1,2)+1,1] #NON Overlapping mean
b1 = ratio.par.mse[c(3,4)+1,2] #Overlapping scale_s
b2 = ratio.par.mse[c(1,2)+1,2] #NON Overlapping scale_s
c1 = ratio.par.mse[c(3,4)+1,3] #Overlapping scale_t
c2 = ratio.par.mse[c(1,2)+1,3] #NON Overlapping scale_t
d1 = ratio.par.mse[c(3,4)+1,4] #Overlapping sill
d2 = ratio.par.mse[c(1,2)+1,4] #NON Overlapping sill
prange55 = rbind(a1,a2,b1,b2,c1,c2,d1,d2)
# xtable::xtable(prange,digits=3)
#==== Overall measure
overall55 <- matrix(NA, ncol=2,nrow=2)
A = det(var(as.matrix(dat1[dat1$setting==0,c(2:5)]))) #PL
B = det(var(as.matrix(dat1[dat1$setting==3,c(2:5)])))
round(((A/B)^(1/4)),3) #b=2, overlapping
overall55[1,1] <- round(((A/B)^(1/4)),3)
B = det(var(as.matrix(dat1[dat1$setting==1,c(2:5)])))
round(((A/B)^(1/4)),3) #b=2, non overlapping
overall55[2,1] <- round(((A/B)^(1/4)),3)
B = det(var(as.matrix(dat1[dat1$setting==4,c(2:5)])))
round(((A/B)^(1/4)),3) #b=4, overlapping
overall55[1,2] <- round(((A/B)^(1/4)),3)
B = det(var(as.matrix(dat1[dat1$setting==2,c(2:5)])))
round(((A/B)^(1/4)),3) #b=4, non overlapping
overall55[2,2] <- round(((A/B)^(1/4)),3)
overall55
# ******************************************** IrREGULAR TIME DE12
# rm(list=ls())
setwd("~/Documents/Software/STBEU/Simulations/StartDoubleFix")
# mse<-function(x,a)  var(x)+(mean(x)-a)^2
dat1 <- read.csv("Irregular_results_timeDE12.csv")
names(dat1)
# mean = 0;scale_s=1; scale_t=1;sill=1
# names.param = c("mean","scale_s","scale_t","sill")
param <- c(0,1.2/3,6/3,1)
mse.scenario = tapply(dat1[,names.param[1]],dat1[,"setting"],mse,param[1])
mse.scenario[1]/mse.scenario
sol1 = matrix(NA,ncol=4,nrow=2000)
label = rep(0:4,each=400)
ppb=1 # param 1:4
setting = 1 # setting 1:5
for(ppb in 1:4)
{
for(setting in 1:5)
{
qiles = (tapply(dat1[,names.param[ppb]],dat1[,"setting"],quantile,probs=c(0.1,0.9)))
lo = as.numeric(qiles[[setting]][1])
up = as.numeric(qiles[[setting]][2])
pos = dat1[,names.param[ppb]][dat1[,"setting"]==(setting-1)]>lo & dat1[,names.param[ppb]][dat1[,"setting"]==(setting-1)]<up
sol1[(400*(setting)-399):((400*(setting)-399)+399),ppb] = dat1[,names.param[ppb]][dat1[,"setting"]==(setting-1)][pos]
}
}
dat1 = as.data.frame(cbind(label,sol1))
names(dat1) <- c("setting","mean","scale_s","scale_t","sill")
# setwd("~/Documents/Software/STBEU/Simulations/StartDoubleFix")
# mse<-function(x,a)  var(x)+(mean(x)-a)^2
# dat1 <- read.csv("regular_results_spacetimeDE04.csv")
# names(dat1)
# # mean = 0;scale_s=1; scale_t=1;sill=1
# names.param = c("mean","scale_s","scale_t","sill")
# param <- c(0,.4/3,3/3,1)
#
# mse.scenario = tapply(dat1[,names.param[1]],dat1[,"setting"],mse,param[1])
# mse.scenario[1]/mse.scenario
#
# ppp = 2
# tapply(dat1[,names.param[ppp]],dat1[,"setting"],mean,param[ppp])
# # barplot(tapply(dat1[,names.param[ppp]],dat1[,"setting"],mean,param[ppp]))
#
#
#
# sol1 = matrix(NA,ncol=4,nrow=2000)
# label = rep(0:4,each=400)
#
# ppb=1 # param 1:4
# setting = 1 # setting 1:5
#
# for(ppb in 1:4)
# {
#   for(setting in 1:5)
#   {
#     qiles = (tapply(dat1[,names.param[ppb]],dat1[,"setting"],quantile,probs=c(0.1,0.9)))
#     lo = as.numeric(qiles[[setting]][1])
#     up = as.numeric(qiles[[setting]][2])
#     pos = dat1[,names.param[ppb]][dat1[,"setting"]==(setting-1)]>lo & dat1[,names.param[ppb]][dat1[,"setting"]==(setting-1)]<up
#     sol1[(400*(setting)-399):((400*(setting)-399)+399),ppb] = dat1[,names.param[ppb]][dat1[,"setting"]==(setting-1)][pos]
#   }
# }
# dat1 = as.data.frame(cbind(label,sol1))
# names(dat1) <- c("setting","mean","scale_s","scale_t","sill")
#12
boxplot(dat1$mean~dat1$setting,
main = paste("mean","=",round(param[1],2),sep=""))
abline ( h = param[1],col = "blue")
boxplot(dat1$scale_s~dat1$setting,
main = paste("scale_s","=",round(param[2],2),sep=""))
abline ( h = param[2],col = "blue")
boxplot(dat1$scale_t~dat1$setting,
main = paste("scale_t","=",round(param[3],2),sep=""))
abline ( h = param[3],col = "blue")
boxplot(dat1$sill~dat1$setting,
main = paste("sill","=",round(param[4],2),sep=""))
abline ( h = param[4],col = "blue")
title("Irregular Time Blocking",outer= TRUE)
# MSE by PARAM and Scenario:
par.mse = NULL
for(i in 1:4)
{
par.mse = cbind(par.mse,tapply(dat1[,names.param[i]],dat1[,"setting"],mse,param[i]))
}
colnames(par.mse) = names.param
ratio.par.mse = cbind(par.mse[1,1]/par.mse[,1],
par.mse[1,2]/par.mse[,2],
par.mse[1,3]/par.mse[,3],
par.mse[1,4]/par.mse[,4])
colnames(ratio.par.mse) = names.param
#*****
a1 = ratio.par.mse[c(3,4)+1,1] #Overlapping mean
a2 = ratio.par.mse[c(1,2)+1,1] #NON Overlapping mean
b1 = ratio.par.mse[c(3,4)+1,2] #Overlapping scale_s
b2 = ratio.par.mse[c(1,2)+1,2] #NON Overlapping scale_s
c1 = ratio.par.mse[c(3,4)+1,3] #Overlapping scale_t
c2 = ratio.par.mse[c(1,2)+1,3] #NON Overlapping scale_t
d1 = ratio.par.mse[c(3,4)+1,4] #Overlapping sill
d2 = ratio.par.mse[c(1,2)+1,4] #NON Overlapping sill
prange66 = rbind(a1,a2,b1,b2,c1,c2,d1,d2)
prange66
# xtable::xtable(prange,digits=3)
irregT =rbind(prange55,prange66)
#==== Overall measure
overall66 <- matrix(NA, ncol=2,nrow=2)
A = det(var(as.matrix(dat1[dat1$setting==0,c(2:5)]))) #PL
B = det(var(as.matrix(dat1[dat1$setting==3,c(2:5)])))
round(((A/B)^(1/4)),3) #b=2, overlapping
overall66[1,1] <- round(((A/B)^(1/4)),3)
B = det(var(as.matrix(dat1[dat1$setting==1,c(2:5)])))
round(((A/B)^(1/4)),3) #b=2, non overlapping
overall66[2,1] <- round(((A/B)^(1/4)),3)
B = det(var(as.matrix(dat1[dat1$setting==4,c(2:5)])))
round(((A/B)^(1/4)),3) #b=4, overlapping
overall66[1,2] <- round(((A/B)^(1/4)),3)
B = det(var(as.matrix(dat1[dat1$setting==2,c(2:5)])))
round(((A/B)^(1/4)),3) #b=4, non overlapping
overall66[2,2] <- round(((A/B)^(1/4)),3)
overall66
SpaceDE = cbind(regS,irregS) #col[,1:2] Reg  ; col[,3:4] Irreg # SPACE
TimeDE = cbind(regT,irregT) #col[,1:2] Reg  ; col[,3:4] Irreg # TIME
STDE = cbind(regST,irregST) #col[,1:2] Reg  ; col[,3:4] Irreg # SPACETIME
OverSpaceDE <- rbind(cbind(overall1, overall11),cbind(overall2, overall22))
OverTimeDE <- rbind(cbind(overall5, overall55),cbind(overall6, overall66))
OverSpaceTimeDE <- rbind(cbind(overall3, overall33),cbind(overall4, overall44))
dev.off()
###########################################
rm(list=ls())
#*** Info:
'
PRACTICAL RANGE = 0.4
12 scenarios:
b: 2,4 for window size in space.
Step window: 0.5 for space && no overlap (two in total)
maxdist=.25*lato_fin
'
#*** End Info:
########################R package#######################
require(CompRandFld)
require(MCMCpack)
require(STBEU)
dirsol = "~/Documents/Software/STBEU/Simulations/StartDoubleFix" # Directory where results will be
###############################################
# setting 1  (many locations in space a few in time)
###############################################
####location sites ########################################
lambda=8
xx=seq(-lambda,lambda);
coords=as.matrix(expand.grid(xx,xx))   ###regular
# plot(coords)
####temporal instants ########################################
nt = 18 # Time points 18
times=seq(1,nt,1)
nrow(coords)
nrow(coords)*nt
# bn = 2,4 Same Space
###############################################
##################################################################
model=1  #   1=double exponential       2 =gneiting
if (model == 1)
{
# exponential model
cov.model <-"exp_exp"
cc=1
#####
mean=0
nugget=0
scale_s<-1.2/3
scale_t<-6/3
sill=1
param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill)
fixed=list(nugget=nugget)
fix=c(nugget=nugget)
}
################################################
#   parameters for the subsampling ####
###############################################
coordx=coords[,1]
coordy=coords[,2]
LX=abs(range(coordx)[1]-range(coordx)[2])
LY=abs(range(coordy)[1]-range(coordy)[2])
type_subs=1    ### type of subsampling  1=in space    2= in time 3= spacetime
type_dist=1                ### type of distance     1=euclidean 2=chordal  3=geodesic
maxdistPL=max(dist(coords))*.25                  ## compact support in weights function for pairwise liklihood
maxtime=ceiling(max(dist(times))*.25)
i=1
nsim<-500   ## number of simulation
results=matrix(NA,ncol=5,nrow=5*nsim);label = 0:4
set.seed(276)
plot(coords)
graphics.off()
plot(coords)
###########################################
rm(list=ls())
#*** Info:
'
PRACTICAL RANGE = 1.2/3
12 scenarios:
b1: 3,10 for window size in space and time.
b2: 4,20 for window size in space and time.
Step window: 0.5 for space && no overlap (two in total)
maxdist=.25*lato_fin
maxtime=ceiling(.25*winc_t)
'
#*** End Info:
########################R package#######################
require(CompRandFld)
require(MCMCpack)
require(STBEU)
dirsol = "~/Documents/Software/STBEU/Simulations/StartDoubleFix" # Directory where results will be
###############################################
# setting 1  (many locations in space a few in time)
###############################################
####location sites ########################################
lambda=5
xx=seq(-lambda,lambda);
coords=as.matrix(expand.grid(xx,xx))   ###regular
# plot(coords)
####temporal instants ########################################
nt = 50 # Time points 50
times=seq(1,nt,1)
nrow(coords)
nrow(coords)*nt
# bn = 2,4 Same Space
###############################################
##################################################################
model=1  #   1=double exponential       2 =gneiting
if (model == 1)
{
# exponential model
cov.model <-"exp_exp"
cc=1
#####
mean=0
nugget=0
scale_s<-1.2/3
scale_t<-6/3
sill=1
param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill)
fixed=list(nugget=nugget)
fix=c(nugget=nugget)
}
################################################
#   parameters for the subsampling ####
###############################################
coordx=coords[,1]
coordy=coords[,2]
LX=abs(range(coordx)[1]-range(coordx)[2])
LY=abs(range(coordy)[1]-range(coordy)[2])
type_subs=3    ### type of subsampling  1=in space    2= in time 3= spacetime
type_dist=1                ### type of distance     1=euclidean 2=chordal  3=geodesic
maxdistPL=max(dist(coords))*.25                  ## compact support in weights function for pairwise liklihood
maxtimePL=ceiling(max(dist(times))*.25)
i=1
nsim<-500   ## number of simulation
results=matrix(NA,ncol=5,nrow=5*nsim);label = 0:4
set.seed(276)
install.packages("CompRandFld")
install.packages("MCMCpack")
