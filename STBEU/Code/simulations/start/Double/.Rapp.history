# ****Plots:#
x = seq(-5,5,length = 150)#
y = x#
#
### Funcion para distancia#
pairs.func <- function(datos){#
  y <-matrix(0,nrow=length(datos),ncol=length(datos))#
  for (i in 1:length(datos)){#
    for(j in 1:length(datos)){#
      # print(c(i,j))#
      y[i,j] <- bivt2(x=c(datos[i],datos[j]), nu = nu,rho = rho)#
#
    }#
  }#
  return(y)#
}#
library(rgl)#
zt = pairs.func(datos = x)#
persp3d(x ,y ,zt,theta = 90,phi = 10,border = NA,#
      expand = 0.5,col="red3",ltheta = 120,shade = 0.75,ticktype = "detailed",bg="black")#
# points3d(x= x,y = y,z = zt[,1],col="blue")#
image(x,y,zt,col = terrain.colors(20))#
contour(x,y,zt, add = T)
max(zt)
x = seq(-5,5,length = 150)#
y = x#
BIVT <- Vectorize(bivt2)#
zt <-outer(x,y,FUN="BIVT")
x = seq(-5,5,length = 150)#
y = x#
BIVT <- Vectorize(bivt2)#
zt <-outer(x,y,FUN="BIVT",rho = rho)
bivt2 <- function(yi,yj,nu,rho) #x:c(yi,yj),nu, rho#
{#
  # yi = x[1];yj = x[2]#
  yi2 = (yi^2+nu)#
  yj2 = (yj^2+nu)#
  rho2 = (1-rho^2)#
  C1num = nu^nu*(yi2*yj2)^(-(nu+1)/2 )*gamma((nu+1)/2)^2 #constant numerator#
  C1den = pi*gamma(nu/2)^2*rho2^(-(nu+1)/2 )      #constant denominator#
  Const1 = C1num/C1den#
  C2num = rho*yi*yj*nu^(nu+2)*( yi2*yj2 )^(-nu/2-1)#
  C2den = 2*pi*rho2^(-(nu+1)/2)#
  Const2 = C2num/C2den#
  if(rho==0)#
  {#
    # cat("rho",rho,"\n")#
    C = gamma((nu+1)/2)*pow((1+yi^2/nu),-(nu+1)/2)/(sqrt(pi*nu)*gamma(nu/2));#
    B = gamma((nu+1)/2)*pow((1+yj^2/nu),-(nu+1)/2)/(sqrt(pi*nu)*gamma(nu/2));#
    res =B*C#
  }else#
  {#
    if(yi ==0 || yj==0)#
    {#
      if(yj ==0)#
      {#
        KK = nu^nu*(yi2*nu)^(-(nu+1)/2)*gamma((nu+1)/2)^2/ C1den#
        a = (nu+1)/2;b=a;c=nu/2;z = (nu*rho^2)/yi2#
        Hyp = Re(hypergeo(a,b,c,z))#
        res = KK*Hyp#
      }#
      if(yi ==0)#
      {#
        KK = nu^nu*(yj2*nu)^(-(nu+1)/2)*gamma((nu+1)/2)^2/ C1den#
        a = (nu+1)/2;b=a;c=nu/2;z = (nu*rho^2)/yj2#
        Hyp = Re(hypergeo(a,b,c,z))#
        res = KK*Hyp#
      }#
    }else#
    {#
      sum1=0;sum2=0#
      for(k in 1:30)#
      {#
        A1 = ff((nu+1)/2,k)^2/(gamma(k+1)*ff(nu/2,k))#
        B1 = ((nu*rho)^2/(yi2*yj2))^k#
        a1 = (nu+1)/2+k;b1 = a1;c1 = 0.5;z = (rho*yi*yj)^2/(yi2*yj2)#
        Hyp1 = Re(hypergeo(a1,b1,c1,z))#
        # Hyp1 = hyperg_2F1(a1,b1,c1,z,strict = FALSE)#
        sum1 = sum1+A1*B1*Hyp1#
        if(is.na(sum1) || is.nan(sum1) || is.infinite(sum1)) cat("A:",Hyp1,"\n")#
        A2 = ff(nu/2+1,k)^2/(gamma(k+1)*ff(nu/2,k))#
        B2 = ((nu*rho)^2/(yi2*yj2))^k#
        a2 = nu/2+k+1;b2 = a2;c2 = 1.5#
        Hyp2 = Re(hypergeo(a2,b2,c2,z))#
        # Hyp2 = hyperg_2F1(a2,b2,c2,z,strict = FALSE)#
        sum2 = sum2+A2*B2*Hyp2#
        # print(c(a2,b2,c2,-z,Hyp2))#
        if(is.na(sum2) || is.nan(sum2)|| is.infinite(sum2)) cat("B:",Hyp2,"\n")#
      }#
      res = Const1*sum1+Const2*sum2#
    }#
  }#
  if(is.na(res) || is.nan(res)|| is.infinite(res)) cat("RES:",res,"\n")#
  return(res)#
}
rho
nu
x = seq(-5,5,length = 150)#
y = x#
BIVT <- Vectorize(bivt2)#
zt <-outer(x,y,FUN="BIVT",rho = rho,nu = nu)
persp3d(x ,y ,zt,theta = 90,phi = 10,border = NA,#
      expand = 0.5,col="red3",ltheta = 120,shade = 0.75,ticktype = "detailed",bg="black")
min(zt)
max(zt)
image(x,y,zt,col = terrain.colors(20))#
contour(x,y,zt, add = T)
expand.grid(x,y)
expand.grid(x,y)[0,]
expand.grid(x,y)[x==0,]
EX = expand.grid(x,y)
names(EX)
EX["Var1"==0,]
EX[EX[,1]==0,]
EX[,1]==0
sum(EX[,1]==0)
x
persp3d(x ,y ,zt,theta = 90,phi = 10,border = NA,#
      expand = 0.5,col="red3",ltheta = 120,shade = 0.75,ticktype = "detailed",bg="black")
persp3d(x ,y ,zt,theta = 90,phi = 10,border = NA,#
      expand = 0.5,col="blue3",ltheta = 120,shade = 0.75,ticktype = "detailed",bg="black")
max(zt)
rho
#================================= Comp_Pair_SkewGauss_st2#
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="SkewGaussian";shape=4;n=1#
set.seed(112)#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,5,1)#1#
coordx_dyn=list()#
#
maxN=15#130#
for(k in 1:length(coordt))#
{#
  NN=sample(1:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
# coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 0.1#
sill <- 1#
nugget <- 0#
scale_s <- .3#
scale_t <- .3#
skew <- -0.5#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t,skew=skew)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget, sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,mean = mean ,skew = skew)#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxtime=0.3;maxdist=0.3#
# CPUtime = proc.time()#
# fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
#                corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
#                likelihood="Marginal",type="Pairwise",#
#                start=start,fixed=fixed,model = model,varest = TRUE)#
# # CPUtime = proc.time()-CPUtime#
# print(fit1)#
# #
# #
# #
# fit1$param#
score <- sensmat <- varcov <- varimat <- parscale <- NULL#
### Initialization parameters:#
initparam <- WlsStart(coordx=NULL, coordy=NULL, coordt=coordt, coordx_dyn=coordx_dyn, corrmodel, data=ss1, distance="Eucl", "Fitting", fixed=fixed, grid=FALSE,#10#
                      likelihood='Marginal', maxdist=maxdist, maxtime=maxtime,  model=model, n=1, NULL,#16#
                      parscale, optimizer=='L-BFGS-B', radius=6378.388, start=start, taper=NULL, tapsep=NULL,#22#
                      type="Pairwise", varest=TRUE, vartype='SubSamp', weighted=FALSE, winconst=NULL, winstp=NULL,winconst_t=NULL, winstp_t=NULL, X=NULL)#31#
numcoord=length(initparam$coordx);numtime=1;spacetime_dyn=FALSE#
if(initparam$spacetime) numtime=length(initparam$coordt)#
if(initparam$bivariate) numtime=2#
if(!is.null(coordx_dyn)) spacetime_dyn=TRUE#
dimat <- numcoord*numtime##
NS=cumsum(initparam$ns)#
if(is.null(dim(initparam$X)))#
{#
  X=as.matrix(rep(1,dimat))#
  if((initparam$spacetime||initparam$bivariate)&& spacetime_dyn)  X=as.matrix(rep(1,NS[numtime]))#
}#
num_betas=ncol(X) #
grid = FALSE#
if(grid)    #
  {a=expand.grid(initparam$coordx,initparam$coordy);coordx=a[,1];coordy=a[,2]; #
  }else {#
    if((initparam$spacetime||initparam$bivariate)&&(!spacetime_dyn)){#
  data=c(t(data))#
  coordx=rep(coordx,numtime);coordy=rep(coordy,numtime)#
}#
  if((initparam$spacetime||initparam$bivariate)&&(spacetime_dyn)) initparam$data=unlist(initparam$data)          #
}#
if(initparam$spacetime||initparam$bivariate)   NS=c(0,NS)[-(length(initparam$ns)+1)]#
initparam$fixed#
#
dimmat <- initparam$numparam^2#
dmat <- initparam$numparam*(initparam$numparam+1)/2#
eps <- (.Machine$double.eps)^(1/3)#
param <- c(initparam$param, initparam$fixed)#
score <- double(initparam$numparam)#
paramcorr <- param[initparam$namescorr]#
nuisance <- param[initparam$namesnuis]#
sel=substr(names(nuisance),1,4)=="mean"#
mm=as.numeric(nuisance[sel])   ## mean paramteres#
other_nuis=as.numeric(nuisance[!sel]) #
nuisance=c(mm,other_nuis)#
sensmat <- double(dmat);varimat <- double(dmat)#
GD=.C('GodambeMat',as.double(mm),as.integer(initparam$bivariate),as.double(initparam$coordx),as.double(initparam$coordy),#
      as.double(initparam$coordt),as.integer(initparam$corrmodel), as.double(initparam$data),as.integer(initparam$distance),as.double(eps),#
      as.integer(initparam$flagcorr), as.integer(initparam$flagnuis),as.integer(grid),as.integer(initparam$likelihood),#
      as.double(c(X%*%mm)),as.integer(initparam$model),as.double(initparam$n),as.integer(num_betas),#
      as.integer(initparam$numparam),as.integer(initparam$numparamcorr),as.integer(length(paramcorr)),as.double(paramcorr),as.double(nuisance),#
      score=score,sensmat=sensmat,as.integer(initparam$spacetime),as.integer(initparam$type),#
      varimat=varimat,as.integer(initparam$vartype),as.double(initparam$winconst),as.double(initparam$winstp),as.double(initparam$winconst_t),as.double(initparam$winstp_t),#
      as.integer(initparam$weigthed),c(t(X)),ns=as.integer(initparam$ns),NS=as.integer(NS),PACKAGE='GeoModels',DUP=TRUE,NAOK=TRUE)#
str(GD)#
#
GD$score;GD$sensmat;GD$varimat#
initparam$param#
#
comploglik <- function(param,coordx, coordy ,coordt, corrmodel, data, fixed, fun, n, namescorr, namesnuis,namesparam,weigthed,X,ns,NS,GPU,local)#
{#
  names(param) <- namesparam#
  param <- c(param, fixed)#
  paramcorr <- param[namescorr]#
  nuisance <- param[namesnuis]#
  sel=substr(names(nuisance),1,4)=="mean"#
  mm=as.numeric(nuisance[sel])   ## mean paramteres#
  other_nuis=as.numeric(nuisance[!sel])   ## or nuis parameters (nugget sill skew df)#
  #print(mm);print(other_nuis);print(paramcorr)#
  result <- .C(as.character(fun),as.integer(corrmodel),as.double(coordx),as.double(coordy),as.double(coordt), as.double(data), #
               as.integer(n),as.double(paramcorr), as.integer(weigthed), #
               res=double(1),as.double(c(X%*%mm)),as.double(0),as.double(other_nuis),#
               as.integer(ns),as.integer(NS),as.integer(local),as.integer(GPU),#
               PACKAGE='GeoModels',DUP = TRUE, NAOK=TRUE)$res#
  return(-result)#
}#
fun = "Comp_Pair_SkewGauss_st2"#
comploglik(param=initparam$param,coordx=initparam$coordx, coordy=initparam$coordy ,coordt=initparam$coordt, corrmodel==initparam$corrmodel, #
           data=initparam$data, fixed=initparam$fixed, fun=fun, n=initparam$n, namescorr=initparam$namescorr, namesnuis=initparam$namesnuis,#
           namesparam=initparam$namesparam,weigthed=initparam$weighted,X=initparam$X,#
           ns=initparam$ns,NS=NS,GPU=NULL,local=c(0,0))
coordt
#================================= Comp_Pair_SkewGauss_st2#
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="SkewGaussian";shape=4;n=1#
set.seed(112)#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,5,1)#1#
coordx_dyn=list()#
#
maxN=15#130#
for(k in 1:length(coordt))#
{#
  NN=sample(1:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
# coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 0.1#
sill <- 1#
nugget <- 0#
scale_s <- .3#
scale_t <- .3#
skew <- -0.5#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t,skew=skew)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget, sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,mean = mean ,skew = skew)#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxtime=0.3;maxdist=0.3#
# CPUtime = proc.time()#
# fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
#                corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
#                likelihood="Marginal",type="Pairwise",#
#                start=start,fixed=fixed,model = model,varest = TRUE)#
# # CPUtime = proc.time()-CPUtime#
# print(fit1)#
# #
# #
# #
# fit1$param#
score <- sensmat <- varcov <- varimat <- parscale <- NULL#
### Initialization parameters:#
initparam <- WlsStart(coordx=NULL, coordy=NULL, coordt=coordt, coordx_dyn=coordx_dyn, corrmodel, data=ss1, distance="Eucl", "Fitting", fixed=fixed, grid=FALSE,#10#
                      likelihood='Marginal', maxdist=maxdist, maxtime=maxtime,  model=model, n=1, NULL,#16#
                      parscale, optimizer=='L-BFGS-B', radius=6378.388, start=start, taper=NULL, tapsep=NULL,#22#
                      type="Pairwise", varest=TRUE, vartype='SubSamp', weighted=FALSE, winconst=NULL, winstp=NULL,winconst_t=NULL, winstp_t=NULL, X=NULL)#31#
numcoord=length(initparam$coordx);numtime=1;spacetime_dyn=FALSE#
if(initparam$spacetime) numtime=length(initparam$coordt)#
if(initparam$bivariate) numtime=2#
if(!is.null(coordx_dyn)) spacetime_dyn=TRUE#
dimat <- numcoord*numtime##
NS=cumsum(initparam$ns)#
if(is.null(dim(initparam$X)))#
{#
  X=as.matrix(rep(1,dimat))#
  if((initparam$spacetime||initparam$bivariate)&& spacetime_dyn)  X=as.matrix(rep(1,NS[numtime]))#
}#
num_betas=ncol(X) #
grid = FALSE#
if(grid)    #
  {a=expand.grid(initparam$coordx,initparam$coordy);coordx=a[,1];coordy=a[,2]; #
  }else {#
    if((initparam$spacetime||initparam$bivariate)&&(!spacetime_dyn)){#
  data=c(t(data))#
  coordx=rep(coordx,numtime);coordy=rep(coordy,numtime)#
}#
  if((initparam$spacetime||initparam$bivariate)&&(spacetime_dyn)) initparam$data=unlist(initparam$data)          #
}#
if(initparam$spacetime||initparam$bivariate)   NS=c(0,NS)[-(length(initparam$ns)+1)]#
initparam$fixed#
#
dimmat <- initparam$numparam^2#
dmat <- initparam$numparam*(initparam$numparam+1)/2#
eps <- (.Machine$double.eps)^(1/3)#
param <- c(initparam$param, initparam$fixed)#
score <- double(initparam$numparam)#
paramcorr <- param[initparam$namescorr]#
nuisance <- param[initparam$namesnuis]#
sel=substr(names(nuisance),1,4)=="mean"#
mm=as.numeric(nuisance[sel])   ## mean paramteres#
other_nuis=as.numeric(nuisance[!sel]) #
nuisance=c(mm,other_nuis)#
sensmat <- double(dmat);varimat <- double(dmat)#
GD=.C('GodambeMat',as.double(mm),as.integer(initparam$bivariate),as.double(initparam$coordx),as.double(initparam$coordy),#
      as.double(initparam$coordt),as.integer(initparam$corrmodel), as.double(initparam$data),as.integer(initparam$distance),as.double(eps),#
      as.integer(initparam$flagcorr), as.integer(initparam$flagnuis),as.integer(grid),as.integer(initparam$likelihood),#
      as.double(c(X%*%mm)),as.integer(initparam$model),as.double(initparam$n),as.integer(num_betas),#
      as.integer(initparam$numparam),as.integer(initparam$numparamcorr),as.integer(length(paramcorr)),as.double(paramcorr),as.double(nuisance),#
      score=score,sensmat=sensmat,as.integer(initparam$spacetime),as.integer(initparam$type),#
      varimat=varimat,as.integer(initparam$vartype),as.double(initparam$winconst),as.double(initparam$winstp),as.double(initparam$winconst_t),as.double(initparam$winstp_t),#
      as.integer(initparam$weigthed),c(t(X)),ns=as.integer(initparam$ns),NS=as.integer(NS),PACKAGE='GeoModels',DUP=TRUE,NAOK=TRUE)#
str(GD)#
#
GD$score;GD$sensmat;GD$varimat#
initparam$param#
#
comploglik <- function(param,coordx, coordy ,coordt, corrmodel, data, fixed, fun, n, namescorr, namesnuis,namesparam,weigthed,X,ns,NS,GPU,local)#
{#
  names(param) <- namesparam#
  param <- c(param, fixed)#
  paramcorr <- param[namescorr]#
  nuisance <- param[namesnuis]#
  sel=substr(names(nuisance),1,4)=="mean"#
  mm=as.numeric(nuisance[sel])   ## mean paramteres#
  other_nuis=as.numeric(nuisance[!sel])   ## or nuis parameters (nugget sill skew df)#
  #print(mm);print(other_nuis);print(paramcorr)#
  result <- .C(as.character(fun),as.integer(corrmodel),as.double(coordx),as.double(coordy),as.double(coordt), as.double(data), #
               as.integer(n),as.double(paramcorr), as.integer(weigthed), #
               res=double(1),as.double(c(X%*%mm)),as.double(0),as.double(other_nuis),#
               as.integer(ns),as.integer(NS),as.integer(local),as.integer(GPU),#
               PACKAGE='GeoModels',DUP = TRUE, NAOK=TRUE)$res#
  return(-result)#
}#
fun = "Comp_Pair_SkewGauss_st2"#
comploglik(param=initparam$param,coordx=initparam$coordx, coordy=initparam$coordy ,coordt=initparam$coordt, corrmodel==initparam$corrmodel, #
           data=initparam$data, fixed=initparam$fixed, fun=fun, n=initparam$n, namescorr=initparam$namescorr, namesnuis=initparam$namesnuis,#
           namesparam=initparam$namesparam,weigthed=initparam$weighted,X=initparam$X,#
           ns=initparam$ns,NS=NS,GPU=NULL,local=c(0,0))
ns
#================================= Comp_Pair_SkewGauss_st2#
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="SkewGaussian";shape=4;n=1#
set.seed(112)#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,5,1)#1#
coordx_dyn=list()#
#
maxN=15#130#
for(k in 1:length(coordt))#
{#
  NN=sample(1:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
# coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 0.1#
sill <- 1#
nugget <- 0#
scale_s <- .3#
scale_t <- .3#
skew <- -0.5#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t,skew=skew)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget, sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,mean = mean ,skew = skew)#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxtime=0.3;maxdist=0.3#
# CPUtime = proc.time()#
# fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
#                corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
#                likelihood="Marginal",type="Pairwise",#
#                start=start,fixed=fixed,model = model,varest = TRUE)#
# # CPUtime = proc.time()-CPUtime#
# print(fit1)#
# #
# #
# #
# fit1$param#
score <- sensmat <- varcov <- varimat <- parscale <- NULL#
### Initialization parameters:#
initparam <- WlsStart(coordx=NULL, coordy=NULL, coordt=coordt, coordx_dyn=coordx_dyn, corrmodel, data=ss1, distance="Eucl", "Fitting", fixed=fixed, grid=FALSE,#10#
                      likelihood='Marginal', maxdist=maxdist, maxtime=maxtime,  model=model, n=1, NULL,#16#
                      parscale, optimizer=='L-BFGS-B', radius=6378.388, start=start, taper=NULL, tapsep=NULL,#22#
                      type="Pairwise", varest=TRUE, vartype='SubSamp', weighted=FALSE, winconst=NULL, winstp=NULL,winconst_t=NULL, winstp_t=NULL, X=NULL)#31#
numcoord=length(initparam$coordx);numtime=1;spacetime_dyn=FALSE#
if(initparam$spacetime) numtime=length(initparam$coordt)#
if(initparam$bivariate) numtime=2#
if(!is.null(coordx_dyn)) spacetime_dyn=TRUE#
dimat <- numcoord*numtime##
NS=cumsum(initparam$ns)#
if(is.null(dim(initparam$X)))#
{#
  X=as.matrix(rep(1,dimat))#
  if((initparam$spacetime||initparam$bivariate)&& spacetime_dyn)  X=as.matrix(rep(1,NS[numtime]))#
}#
num_betas=ncol(X) #
grid = FALSE#
if(grid)    #
  {a=expand.grid(initparam$coordx,initparam$coordy);coordx=a[,1];coordy=a[,2]; #
  }else {#
    if((initparam$spacetime||initparam$bivariate)&&(!spacetime_dyn)){#
  data=c(t(data))#
  coordx=rep(coordx,numtime);coordy=rep(coordy,numtime)#
}#
  if((initparam$spacetime||initparam$bivariate)&&(spacetime_dyn)) initparam$data=unlist(initparam$data)          #
}#
if(initparam$spacetime||initparam$bivariate)   NS=c(0,NS)[-(length(initparam$ns)+1)]#
initparam$fixed#
#
dimmat <- initparam$numparam^2#
dmat <- initparam$numparam*(initparam$numparam+1)/2#
eps <- (.Machine$double.eps)^(1/3)#
param <- c(initparam$param, initparam$fixed)#
score <- double(initparam$numparam)#
paramcorr <- param[initparam$namescorr]#
nuisance <- param[initparam$namesnuis]#
sel=substr(names(nuisance),1,4)=="mean"#
mm=as.numeric(nuisance[sel])   ## mean paramteres#
other_nuis=as.numeric(nuisance[!sel]) #
nuisance=c(mm,other_nuis)#
sensmat <- double(dmat);varimat <- double(dmat)#
GD=.C('GodambeMat',as.double(mm),as.integer(initparam$bivariate),as.double(initparam$coordx),as.double(initparam$coordy),#
      as.double(initparam$coordt),as.integer(initparam$corrmodel), as.double(initparam$data),as.integer(initparam$distance),as.double(eps),#
      as.integer(initparam$flagcorr), as.integer(initparam$flagnuis),as.integer(grid),as.integer(initparam$likelihood),#
      as.double(c(X%*%mm)),as.integer(initparam$model),as.double(initparam$n),as.integer(num_betas),#
      as.integer(initparam$numparam),as.integer(initparam$numparamcorr),as.integer(length(paramcorr)),as.double(paramcorr),as.double(nuisance),#
      score=score,sensmat=sensmat,as.integer(initparam$spacetime),as.integer(initparam$type),#
      varimat=varimat,as.integer(initparam$vartype),as.double(initparam$winconst),as.double(initparam$winstp),as.double(initparam$winconst_t),as.double(initparam$winstp_t),#
      as.integer(initparam$weigthed),c(t(X)),ns=as.integer(initparam$ns),NS=as.integer(NS),PACKAGE='GeoModels',DUP=TRUE,NAOK=TRUE)#
str(GD)#
#
GD$score;GD$sensmat;GD$varimat#
initparam$param#
#
comploglik <- function(param,coordx, coordy ,coordt, corrmodel, data, fixed, fun, n, namescorr, namesnuis,namesparam,weigthed,X,ns,NS,GPU,local)#
{#
  names(param) <- namesparam#
  param <- c(param, fixed)#
  paramcorr <- param[namescorr]#
  nuisance <- param[namesnuis]#
  sel=substr(names(nuisance),1,4)=="mean"#
  mm=as.numeric(nuisance[sel])   ## mean paramteres#
  other_nuis=as.numeric(nuisance[!sel])   ## or nuis parameters (nugget sill skew df)#
  #print(mm);print(other_nuis);print(paramcorr)#
  result <- .C(as.character(fun),as.integer(corrmodel),as.double(coordx),as.double(coordy),as.double(coordt), as.double(data), #
               as.integer(n),as.double(paramcorr), as.integer(weigthed), #
               res=double(1),as.double(c(X%*%mm)),as.double(0),as.double(other_nuis),#
               as.integer(ns),as.integer(NS),as.integer(local),as.integer(GPU),#
               PACKAGE='GeoModels',DUP = TRUE, NAOK=TRUE)$res#
  return(-result)#
}#
fun = "Comp_Pair_SkewGauss_st2"#
comploglik(param=initparam$param,coordx=initparam$coordx, coordy=initparam$coordy ,coordt=initparam$coordt, corrmodel==initparam$corrmodel, #
           data=initparam$data, fixed=initparam$fixed, fun=fun, n=initparam$n, namescorr=initparam$namescorr, namesnuis=initparam$namesnuis,#
           namesparam=initparam$namesparam,weigthed=initparam$weighted,X=initparam$X,#
           ns=initparam$ns,NS=NS,GPU=NULL,local=c(0,0))
qui()
quit()
#================================= Comp_Pair_SkewGauss_st2#
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="SkewGaussian";shape=4;n=1#
set.seed(112)#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,5,1)#1#
coordx_dyn=list()#
#
maxN=15#130#
for(k in 1:length(coordt))#
{#
  NN=sample(1:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
# coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 0.1#
sill <- 1#
nugget <- 0#
scale_s <- .3#
scale_t <- .3#
skew <- -0.5#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t,skew=skew)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget, sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,mean = mean ,skew = skew)#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxtime=0.3;maxdist=0.3#
# CPUtime = proc.time()#
# fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
#                corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
#                likelihood="Marginal",type="Pairwise",#
#                start=start,fixed=fixed,model = model,varest = TRUE)#
# # CPUtime = proc.time()-CPUtime#
# print(fit1)#
# #
# #
# #
# fit1$param#
score <- sensmat <- varcov <- varimat <- parscale <- NULL#
### Initialization parameters:#
initparam <- WlsStart(coordx=NULL, coordy=NULL, coordt=coordt, coordx_dyn=coordx_dyn, corrmodel, data=ss1, distance="Eucl", "Fitting", fixed=fixed, grid=FALSE,#10#
                      likelihood='Marginal', maxdist=maxdist, maxtime=maxtime,  model=model, n=1, NULL,#16#
                      parscale, optimizer=='L-BFGS-B', radius=6378.388, start=start, taper=NULL, tapsep=NULL,#22#
                      type="Pairwise", varest=TRUE, vartype='SubSamp', weighted=FALSE, winconst=NULL, winstp=NULL,winconst_t=NULL, winstp_t=NULL, X=NULL)#31#
numcoord=length(initparam$coordx);numtime=1;spacetime_dyn=FALSE#
if(initparam$spacetime) numtime=length(initparam$coordt)#
if(initparam$bivariate) numtime=2#
if(!is.null(coordx_dyn)) spacetime_dyn=TRUE#
dimat <- numcoord*numtime##
NS=cumsum(initparam$ns)#
if(is.null(dim(initparam$X)))#
{#
  X=as.matrix(rep(1,dimat))#
  if((initparam$spacetime||initparam$bivariate)&& spacetime_dyn)  X=as.matrix(rep(1,NS[numtime]))#
}#
num_betas=ncol(X) #
grid = FALSE#
if(grid)    #
  {a=expand.grid(initparam$coordx,initparam$coordy);coordx=a[,1];coordy=a[,2]; #
  }else {#
    if((initparam$spacetime||initparam$bivariate)&&(!spacetime_dyn)){#
  data=c(t(data))#
  coordx=rep(coordx,numtime);coordy=rep(coordy,numtime)#
}#
  if((initparam$spacetime||initparam$bivariate)&&(spacetime_dyn)) initparam$data=unlist(initparam$data)          #
}#
if(initparam$spacetime||initparam$bivariate)   NS=c(0,NS)[-(length(initparam$ns)+1)]#
initparam$fixed#
#
dimmat <- initparam$numparam^2#
dmat <- initparam$numparam*(initparam$numparam+1)/2#
eps <- (.Machine$double.eps)^(1/3)#
param <- c(initparam$param, initparam$fixed)#
score <- double(initparam$numparam)#
paramcorr <- param[initparam$namescorr]#
nuisance <- param[initparam$namesnuis]#
sel=substr(names(nuisance),1,4)=="mean"#
mm=as.numeric(nuisance[sel])   ## mean paramteres#
other_nuis=as.numeric(nuisance[!sel]) #
nuisance=c(mm,other_nuis)#
sensmat <- double(dmat);varimat <- double(dmat)#
GD=.C('GodambeMat',as.double(mm),as.integer(initparam$bivariate),as.double(initparam$coordx),as.double(initparam$coordy),#
      as.double(initparam$coordt),as.integer(initparam$corrmodel), as.double(initparam$data),as.integer(initparam$distance),as.double(eps),#
      as.integer(initparam$flagcorr), as.integer(initparam$flagnuis),as.integer(grid),as.integer(initparam$likelihood),#
      as.double(c(X%*%mm)),as.integer(initparam$model),as.double(initparam$n),as.integer(num_betas),#
      as.integer(initparam$numparam),as.integer(initparam$numparamcorr),as.integer(length(paramcorr)),as.double(paramcorr),as.double(nuisance),#
      score=score,sensmat=sensmat,as.integer(initparam$spacetime),as.integer(initparam$type),#
      varimat=varimat,as.integer(initparam$vartype),as.double(initparam$winconst),as.double(initparam$winstp),as.double(initparam$winconst_t),as.double(initparam$winstp_t),#
      as.integer(initparam$weigthed),c(t(X)),ns=as.integer(initparam$ns),NS=as.integer(NS),PACKAGE='GeoModels',DUP=TRUE,NAOK=TRUE)#
str(GD)#
#
GD$score;GD$sensmat;GD$varimat#
initparam$param#
#
comploglik <- function(param,coordx, coordy ,coordt, corrmodel, data, fixed, fun, n, namescorr, namesnuis,namesparam,weigthed,X,ns,NS,GPU,local)#
{#
  names(param) <- namesparam#
  param <- c(param, fixed)#
  paramcorr <- param[namescorr]#
  nuisance <- param[namesnuis]#
  sel=substr(names(nuisance),1,4)=="mean"#
  mm=as.numeric(nuisance[sel])   ## mean paramteres#
  other_nuis=as.numeric(nuisance[!sel])   ## or nuis parameters (nugget sill skew df)#
  #print(mm);print(other_nuis);print(paramcorr)#
  result <- .C(as.character(fun),as.integer(corrmodel),as.double(coordx),as.double(coordy),as.double(coordt), as.double(data), #
               as.integer(n),as.double(paramcorr), as.integer(weigthed), #
               res=double(1),as.double(c(X%*%mm)),as.double(0),as.double(other_nuis),#
               as.integer(ns),as.integer(NS),as.integer(local),as.integer(GPU),#
               PACKAGE='GeoModels',DUP = TRUE, NAOK=TRUE)$res#
  return(-result)#
}#
fun = "Comp_Pair_SkewGauss_st2"#
comploglik(param=initparam$param,coordx=initparam$coordx, coordy=initparam$coordy ,coordt=initparam$coordt, corrmodel==initparam$corrmodel, #
           data=initparam$data, fixed=initparam$fixed, fun=fun, n=initparam$n, namescorr=initparam$namescorr, namesnuis=initparam$namesnuis,#
           namesparam=initparam$namesparam,weigthed=initparam$weighted,X=initparam$X,#
           ns=initparam$ns,NS=NS,GPU=NULL,local=c(0,0))
ns
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="SkewGaussian";shape=4;n=1#
set.seed(112)#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,9,1)#1#
coordx_dyn=list()#
#
maxN=15#130#
for(k in 1:length(coordt))#
{#
  NN=sample(1:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
# coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 0.1#
sill <- 1#
nugget <- 0#
scale_s <- .3#
scale_t <- .3#
skew <- -0.5#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t,skew=skew)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget, sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,mean = mean ,skew = skew)#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxtime=0.3;maxdist=0.3#
# CPUtime = proc.time()#
# fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
#                corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
#                likelihood="Marginal",type="Pairwise",#
#                start=start,fixed=fixed,model = model,varest = TRUE)#
# # CPUtime = proc.time()-CPUtime#
# print(fit1)#
# #
# #
# #
# fit1$param#
score <- sensmat <- varcov <- varimat <- parscale <- NULL#
### Initialization parameters:#
initparam <- WlsStart(coordx=NULL, coordy=NULL, coordt=coordt, coordx_dyn=coordx_dyn, corrmodel, data=ss1, distance="Eucl", "Fitting", fixed=fixed, grid=FALSE,#10#
                      likelihood='Marginal', maxdist=maxdist, maxtime=maxtime,  model=model, n=1, NULL,#16#
                      parscale, optimizer=='L-BFGS-B', radius=6378.388, start=start, taper=NULL, tapsep=NULL,#22#
                      type="Pairwise", varest=TRUE, vartype='SubSamp', weighted=FALSE, winconst=NULL, winstp=NULL,winconst_t=NULL, winstp_t=NULL, X=NULL)#31#
numcoord=length(initparam$coordx);numtime=1;spacetime_dyn=FALSE#
if(initparam$spacetime) numtime=length(initparam$coordt)#
if(initparam$bivariate) numtime=2#
if(!is.null(coordx_dyn)) spacetime_dyn=TRUE#
dimat <- numcoord*numtime##
NS=cumsum(initparam$ns)#
if(is.null(dim(initparam$X)))#
{#
  X=as.matrix(rep(1,dimat))#
  if((initparam$spacetime||initparam$bivariate)&& spacetime_dyn)  X=as.matrix(rep(1,NS[numtime]))#
}#
num_betas=ncol(X) #
grid = FALSE#
if(grid)    #
  {a=expand.grid(initparam$coordx,initparam$coordy);coordx=a[,1];coordy=a[,2]; #
  }else {#
    if((initparam$spacetime||initparam$bivariate)&&(!spacetime_dyn)){#
  data=c(t(data))#
  coordx=rep(coordx,numtime);coordy=rep(coordy,numtime)#
}#
  if((initparam$spacetime||initparam$bivariate)&&(spacetime_dyn)) initparam$data=unlist(initparam$data)          #
}#
if(initparam$spacetime||initparam$bivariate)   NS=c(0,NS)[-(length(initparam$ns)+1)]#
initparam$fixed#
#
dimmat <- initparam$numparam^2#
dmat <- initparam$numparam*(initparam$numparam+1)/2#
eps <- (.Machine$double.eps)^(1/3)#
param <- c(initparam$param, initparam$fixed)#
score <- double(initparam$numparam)#
paramcorr <- param[initparam$namescorr]#
nuisance <- param[initparam$namesnuis]#
sel=substr(names(nuisance),1,4)=="mean"#
mm=as.numeric(nuisance[sel])   ## mean paramteres#
other_nuis=as.numeric(nuisance[!sel]) #
nuisance=c(mm,other_nuis)#
sensmat <- double(dmat);varimat <- double(dmat)#
GD=.C('GodambeMat',as.double(mm),as.integer(initparam$bivariate),as.double(initparam$coordx),as.double(initparam$coordy),#
      as.double(initparam$coordt),as.integer(initparam$corrmodel), as.double(initparam$data),as.integer(initparam$distance),as.double(eps),#
      as.integer(initparam$flagcorr), as.integer(initparam$flagnuis),as.integer(grid),as.integer(initparam$likelihood),#
      as.double(c(X%*%mm)),as.integer(initparam$model),as.double(initparam$n),as.integer(num_betas),#
      as.integer(initparam$numparam),as.integer(initparam$numparamcorr),as.integer(length(paramcorr)),as.double(paramcorr),as.double(nuisance),#
      score=score,sensmat=sensmat,as.integer(initparam$spacetime),as.integer(initparam$type),#
      varimat=varimat,as.integer(initparam$vartype),as.double(initparam$winconst),as.double(initparam$winstp),as.double(initparam$winconst_t),as.double(initparam$winstp_t),#
      as.integer(initparam$weigthed),c(t(X)),ns=as.integer(initparam$ns),NS=as.integer(NS),PACKAGE='GeoModels',DUP=TRUE,NAOK=TRUE)
ns
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="SkewGaussian";shape=4;n=1#
set.seed(112)#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,8,1)#1#
coordx_dyn=list()#
#
maxN=15#130#
for(k in 1:length(coordt))#
{#
  NN=sample(1:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
# coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 0.1#
sill <- 1#
nugget <- 0#
scale_s <- .3#
scale_t <- .3#
skew <- -0.5#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t,skew=skew)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget, sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,mean = mean ,skew = skew)#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxtime=0.3;maxdist=0.3#
# CPUtime = proc.time()#
# fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
#                corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
#                likelihood="Marginal",type="Pairwise",#
#                start=start,fixed=fixed,model = model,varest = TRUE)#
# # CPUtime = proc.time()-CPUtime#
# print(fit1)#
# #
# #
# #
# fit1$param#
score <- sensmat <- varcov <- varimat <- parscale <- NULL#
### Initialization parameters:#
initparam <- WlsStart(coordx=NULL, coordy=NULL, coordt=coordt, coordx_dyn=coordx_dyn, corrmodel, data=ss1, distance="Eucl", "Fitting", fixed=fixed, grid=FALSE,#10#
                      likelihood='Marginal', maxdist=maxdist, maxtime=maxtime,  model=model, n=1, NULL,#16#
                      parscale, optimizer=='L-BFGS-B', radius=6378.388, start=start, taper=NULL, tapsep=NULL,#22#
                      type="Pairwise", varest=TRUE, vartype='SubSamp', weighted=FALSE, winconst=NULL, winstp=NULL,winconst_t=NULL, winstp_t=NULL, X=NULL)#31#
numcoord=length(initparam$coordx);numtime=1;spacetime_dyn=FALSE#
if(initparam$spacetime) numtime=length(initparam$coordt)#
if(initparam$bivariate) numtime=2#
if(!is.null(coordx_dyn)) spacetime_dyn=TRUE#
dimat <- numcoord*numtime##
NS=cumsum(initparam$ns)#
if(is.null(dim(initparam$X)))#
{#
  X=as.matrix(rep(1,dimat))#
  if((initparam$spacetime||initparam$bivariate)&& spacetime_dyn)  X=as.matrix(rep(1,NS[numtime]))#
}#
num_betas=ncol(X) #
grid = FALSE#
if(grid)    #
  {a=expand.grid(initparam$coordx,initparam$coordy);coordx=a[,1];coordy=a[,2]; #
  }else {#
    if((initparam$spacetime||initparam$bivariate)&&(!spacetime_dyn)){#
  data=c(t(data))#
  coordx=rep(coordx,numtime);coordy=rep(coordy,numtime)#
}#
  if((initparam$spacetime||initparam$bivariate)&&(spacetime_dyn)) initparam$data=unlist(initparam$data)          #
}#
if(initparam$spacetime||initparam$bivariate)   NS=c(0,NS)[-(length(initparam$ns)+1)]#
initparam$fixed#
#
dimmat <- initparam$numparam^2#
dmat <- initparam$numparam*(initparam$numparam+1)/2#
eps <- (.Machine$double.eps)^(1/3)#
param <- c(initparam$param, initparam$fixed)#
score <- double(initparam$numparam)#
paramcorr <- param[initparam$namescorr]#
nuisance <- param[initparam$namesnuis]#
sel=substr(names(nuisance),1,4)=="mean"#
mm=as.numeric(nuisance[sel])   ## mean paramteres#
other_nuis=as.numeric(nuisance[!sel]) #
nuisance=c(mm,other_nuis)#
sensmat <- double(dmat);varimat <- double(dmat)#
GD=.C('GodambeMat',as.double(mm),as.integer(initparam$bivariate),as.double(initparam$coordx),as.double(initparam$coordy),#
      as.double(initparam$coordt),as.integer(initparam$corrmodel), as.double(initparam$data),as.integer(initparam$distance),as.double(eps),#
      as.integer(initparam$flagcorr), as.integer(initparam$flagnuis),as.integer(grid),as.integer(initparam$likelihood),#
      as.double(c(X%*%mm)),as.integer(initparam$model),as.double(initparam$n),as.integer(num_betas),#
      as.integer(initparam$numparam),as.integer(initparam$numparamcorr),as.integer(length(paramcorr)),as.double(paramcorr),as.double(nuisance),#
      score=score,sensmat=sensmat,as.integer(initparam$spacetime),as.integer(initparam$type),#
      varimat=varimat,as.integer(initparam$vartype),as.double(initparam$winconst),as.double(initparam$winstp),as.double(initparam$winconst_t),as.double(initparam$winstp_t),#
      as.integer(initparam$weigthed),c(t(X)),ns=as.integer(initparam$ns),NS=as.integer(NS),PACKAGE='GeoModels',DUP=TRUE,NAOK=TRUE)
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="SkewGaussian";shape=4;n=1#
set.seed(112)#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,8,1)# con 9 funciona,  con 8 explota#
coordx_dyn=list()#
#
maxN=15#130#
for(k in 1:length(coordt))#
{#
  NN=sample(1:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
# coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 0.1#
sill <- 1#
nugget <- 0#
scale_s <- .3#
scale_t <- .3#
skew <- -0.5#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t,skew=skew)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget, sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,mean = mean ,skew = skew)#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxtime=0.3;maxdist=0.3#
# CPUtime = proc.time()#
# fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
#                corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
#                likelihood="Marginal",type="Pairwise",#
#                start=start,fixed=fixed,model = model,varest = TRUE)#
# # CPUtime = proc.time()-CPUtime#
# print(fit1)#
# #
# #
# #
# fit1$param#
score <- sensmat <- varcov <- varimat <- parscale <- NULL#
### Initialization parameters:#
initparam <- WlsStart(coordx=NULL, coordy=NULL, coordt=coordt, coordx_dyn=coordx_dyn, corrmodel, data=ss1, distance="Eucl", "Fitting", fixed=fixed, grid=FALSE,#10#
                      likelihood='Marginal', maxdist=maxdist, maxtime=maxtime,  model=model, n=1, NULL,#16#
                      parscale, optimizer=='L-BFGS-B', radius=6378.388, start=start, taper=NULL, tapsep=NULL,#22#
                      type="Pairwise", varest=TRUE, vartype='SubSamp', weighted=FALSE, winconst=NULL, winstp=NULL,winconst_t=NULL, winstp_t=NULL, X=NULL)#31#
numcoord=length(initparam$coordx);numtime=1;spacetime_dyn=FALSE#
if(initparam$spacetime) numtime=length(initparam$coordt)#
if(initparam$bivariate) numtime=2#
if(!is.null(coordx_dyn)) spacetime_dyn=TRUE#
dimat <- numcoord*numtime##
NS=cumsum(initparam$ns)#
if(is.null(dim(initparam$X)))#
{#
  X=as.matrix(rep(1,dimat))#
  if((initparam$spacetime||initparam$bivariate)&& spacetime_dyn)  X=as.matrix(rep(1,NS[numtime]))#
}#
num_betas=ncol(X) #
grid = FALSE#
if(grid)    #
  {a=expand.grid(initparam$coordx,initparam$coordy);coordx=a[,1];coordy=a[,2]; #
  }else {#
    if((initparam$spacetime||initparam$bivariate)&&(!spacetime_dyn)){#
  data=c(t(data))#
  coordx=rep(coordx,numtime);coordy=rep(coordy,numtime)#
}#
  if((initparam$spacetime||initparam$bivariate)&&(spacetime_dyn)) initparam$data=unlist(initparam$data)          #
}#
if(initparam$spacetime||initparam$bivariate)   NS=c(0,NS)[-(length(initparam$ns)+1)]#
initparam$fixed#
#
dimmat <- initparam$numparam^2#
dmat <- initparam$numparam*(initparam$numparam+1)/2#
eps <- (.Machine$double.eps)^(1/3)#
param <- c(initparam$param, initparam$fixed)#
score <- double(initparam$numparam)#
paramcorr <- param[initparam$namescorr]#
nuisance <- param[initparam$namesnuis]#
sel=substr(names(nuisance),1,4)=="mean"#
mm=as.numeric(nuisance[sel])   ## mean paramteres#
other_nuis=as.numeric(nuisance[!sel]) #
nuisance=c(mm,other_nuis)#
sensmat <- double(dmat);varimat <- double(dmat)#
GD=.C('GodambeMat',as.double(mm),as.integer(initparam$bivariate),as.double(initparam$coordx),as.double(initparam$coordy),#
      as.double(initparam$coordt),as.integer(initparam$corrmodel), as.double(initparam$data),as.integer(initparam$distance),as.double(eps),#
      as.integer(initparam$flagcorr), as.integer(initparam$flagnuis),as.integer(grid),as.integer(initparam$likelihood),#
      as.double(c(X%*%mm)),as.integer(initparam$model),as.double(initparam$n),as.integer(num_betas),#
      as.integer(initparam$numparam),as.integer(initparam$numparamcorr),as.integer(length(paramcorr)),as.double(paramcorr),as.double(nuisance),#
      score=score,sensmat=sensmat,as.integer(initparam$spacetime),as.integer(initparam$type),#
      varimat=varimat,as.integer(initparam$vartype),as.double(initparam$winconst),as.double(initparam$winstp),as.double(initparam$winconst_t),as.double(initparam$winstp_t),#
      as.integer(initparam$weigthed),c(t(X)),ns=as.integer(initparam$ns),NS=as.integer(NS),PACKAGE='GeoModels',DUP=TRUE,NAOK=TRUE)
NS
ns
#================================= Comp_Pair_SkewGauss_st2#
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="SkewGaussian";shape=4;n=1#
set.seed(112)#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,9,1)# con 9 funciona,  con 8 explota#
coordx_dyn=list()#
#
maxN=15#130#
for(k in 1:length(coordt))#
{#
  NN=sample(1:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
# coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 0.1#
sill <- 1#
nugget <- 0#
scale_s <- .3#
scale_t <- .3#
skew <- -0.5#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t,skew=skew)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget, sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,mean = mean ,skew = skew)#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxtime=0.3;maxdist=0.3#
# CPUtime = proc.time()#
# fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
#                corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
#                likelihood="Marginal",type="Pairwise",#
#                start=start,fixed=fixed,model = model,varest = TRUE)#
# # CPUtime = proc.time()-CPUtime#
# print(fit1)#
# #
# #
# #
# fit1$param#
score <- sensmat <- varcov <- varimat <- parscale <- NULL#
### Initialization parameters:#
initparam <- WlsStart(coordx=NULL, coordy=NULL, coordt=coordt, coordx_dyn=coordx_dyn, corrmodel, data=ss1, distance="Eucl", "Fitting", fixed=fixed, grid=FALSE,#10#
                      likelihood='Marginal', maxdist=maxdist, maxtime=maxtime,  model=model, n=1, NULL,#16#
                      parscale, optimizer=='L-BFGS-B', radius=6378.388, start=start, taper=NULL, tapsep=NULL,#22#
                      type="Pairwise", varest=TRUE, vartype='SubSamp', weighted=FALSE, winconst=NULL, winstp=NULL,winconst_t=NULL, winstp_t=NULL, X=NULL)#31#
numcoord=length(initparam$coordx);numtime=1;spacetime_dyn=FALSE#
if(initparam$spacetime) numtime=length(initparam$coordt)#
if(initparam$bivariate) numtime=2#
if(!is.null(coordx_dyn)) spacetime_dyn=TRUE#
dimat <- numcoord*numtime##
NS=cumsum(initparam$ns)#
if(is.null(dim(initparam$X)))#
{#
  X=as.matrix(rep(1,dimat))#
  if((initparam$spacetime||initparam$bivariate)&& spacetime_dyn)  X=as.matrix(rep(1,NS[numtime]))#
}#
num_betas=ncol(X) #
grid = FALSE#
if(grid)    #
  {a=expand.grid(initparam$coordx,initparam$coordy);coordx=a[,1];coordy=a[,2]; #
  }else {#
    if((initparam$spacetime||initparam$bivariate)&&(!spacetime_dyn)){#
  data=c(t(data))#
  coordx=rep(coordx,numtime);coordy=rep(coordy,numtime)#
}#
  if((initparam$spacetime||initparam$bivariate)&&(spacetime_dyn)) initparam$data=unlist(initparam$data)          #
}#
if(initparam$spacetime||initparam$bivariate)   NS=c(0,NS)[-(length(initparam$ns)+1)]#
initparam$fixed#
#
dimmat <- initparam$numparam^2#
dmat <- initparam$numparam*(initparam$numparam+1)/2#
eps <- (.Machine$double.eps)^(1/3)#
param <- c(initparam$param, initparam$fixed)#
score <- double(initparam$numparam)#
paramcorr <- param[initparam$namescorr]#
nuisance <- param[initparam$namesnuis]#
sel=substr(names(nuisance),1,4)=="mean"#
mm=as.numeric(nuisance[sel])   ## mean paramteres#
other_nuis=as.numeric(nuisance[!sel]) #
nuisance=c(mm,other_nuis)#
sensmat <- double(dmat);varimat <- double(dmat)#
GD=.C('GodambeMat',as.double(mm),as.integer(initparam$bivariate),as.double(initparam$coordx),as.double(initparam$coordy),#
      as.double(initparam$coordt),as.integer(initparam$corrmodel), as.double(initparam$data),as.integer(initparam$distance),as.double(eps),#
      as.integer(initparam$flagcorr), as.integer(initparam$flagnuis),as.integer(grid),as.integer(initparam$likelihood),#
      as.double(c(X%*%mm)),as.integer(initparam$model),as.double(initparam$n),as.integer(num_betas),#
      as.integer(initparam$numparam),as.integer(initparam$numparamcorr),as.integer(length(paramcorr)),as.double(paramcorr),as.double(nuisance),#
      score=score,sensmat=sensmat,as.integer(initparam$spacetime),as.integer(initparam$type),#
      varimat=varimat,as.integer(initparam$vartype),as.double(initparam$winconst),as.double(initparam$winstp),as.double(initparam$winconst_t),as.double(initparam$winstp_t),#
      as.integer(initparam$weigthed),c(t(X)),ns=as.integer(initparam$ns),NS=as.integer(NS),PACKAGE='GeoModels',DUP=TRUE,NAOK=TRUE)
quit()
#================================= Comp_Pair_SkewGauss_st2#
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="SkewGaussian";shape=4;n=1#
set.seed(112)#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,9,1)# con 9 funciona,  con 8 explota#
coordx_dyn=list()#
#
maxN=15#130#
for(k in 1:length(coordt))#
{#
  NN=sample(1:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
# coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 0.1#
sill <- 1#
nugget <- 0#
scale_s <- .3#
scale_t <- .3#
skew <- -0.5#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t,skew=skew)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget, sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,mean = mean ,skew = skew)#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxtime=0.3;maxdist=0.3#
# CPUtime = proc.time()#
# fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
#                corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
#                likelihood="Marginal",type="Pairwise",#
#                start=start,fixed=fixed,model = model,varest = TRUE)#
# # CPUtime = proc.time()-CPUtime#
# print(fit1)#
# #
# #
# #
# fit1$param#
score <- sensmat <- varcov <- varimat <- parscale <- NULL#
### Initialization parameters:#
initparam <- WlsStart(coordx=NULL, coordy=NULL, coordt=coordt, coordx_dyn=coordx_dyn, corrmodel, data=ss1, distance="Eucl", "Fitting", fixed=fixed, grid=FALSE,#10#
                      likelihood='Marginal', maxdist=maxdist, maxtime=maxtime,  model=model, n=1, NULL,#16#
                      parscale, optimizer=='L-BFGS-B', radius=6378.388, start=start, taper=NULL, tapsep=NULL,#22#
                      type="Pairwise", varest=TRUE, vartype='SubSamp', weighted=FALSE, winconst=NULL, winstp=NULL,winconst_t=NULL, winstp_t=NULL, X=NULL)#31#
numcoord=length(initparam$coordx);numtime=1;spacetime_dyn=FALSE#
if(initparam$spacetime) numtime=length(initparam$coordt)#
if(initparam$bivariate) numtime=2#
if(!is.null(coordx_dyn)) spacetime_dyn=TRUE#
dimat <- numcoord*numtime##
NS=cumsum(initparam$ns)#
if(is.null(dim(initparam$X)))#
{#
  X=as.matrix(rep(1,dimat))#
  if((initparam$spacetime||initparam$bivariate)&& spacetime_dyn)  X=as.matrix(rep(1,NS[numtime]))#
}#
num_betas=ncol(X) #
grid = FALSE#
if(grid)    #
  {a=expand.grid(initparam$coordx,initparam$coordy);coordx=a[,1];coordy=a[,2]; #
  }else {#
    if((initparam$spacetime||initparam$bivariate)&&(!spacetime_dyn)){#
  data=c(t(data))#
  coordx=rep(coordx,numtime);coordy=rep(coordy,numtime)#
}#
  if((initparam$spacetime||initparam$bivariate)&&(spacetime_dyn)) initparam$data=unlist(initparam$data)          #
}#
if(initparam$spacetime||initparam$bivariate)   NS=c(0,NS)[-(length(initparam$ns)+1)]#
initparam$fixed#
#
dimmat <- initparam$numparam^2#
dmat <- initparam$numparam*(initparam$numparam+1)/2#
eps <- (.Machine$double.eps)^(1/3)#
param <- c(initparam$param, initparam$fixed)#
score <- double(initparam$numparam)#
paramcorr <- param[initparam$namescorr]#
nuisance <- param[initparam$namesnuis]#
sel=substr(names(nuisance),1,4)=="mean"#
mm=as.numeric(nuisance[sel])   ## mean paramteres#
other_nuis=as.numeric(nuisance[!sel]) #
nuisance=c(mm,other_nuis)#
sensmat <- double(dmat);varimat <- double(dmat)#
GD=.C('GodambeMat',as.double(mm),as.integer(initparam$bivariate),as.double(initparam$coordx),as.double(initparam$coordy),#
      as.double(initparam$coordt),as.integer(initparam$corrmodel), as.double(initparam$data),as.integer(initparam$distance),as.double(eps),#
      as.integer(initparam$flagcorr), as.integer(initparam$flagnuis),as.integer(grid),as.integer(initparam$likelihood),#
      as.double(c(X%*%mm)),as.integer(initparam$model),as.double(initparam$n),as.integer(num_betas),#
      as.integer(initparam$numparam),as.integer(initparam$numparamcorr),as.integer(length(paramcorr)),as.double(paramcorr),as.double(nuisance),#
      score=score,sensmat=sensmat,as.integer(initparam$spacetime),as.integer(initparam$type),#
      varimat=varimat,as.integer(initparam$vartype),as.double(initparam$winconst),as.double(initparam$winstp),as.double(initparam$winconst_t),as.double(initparam$winstp_t),#
      as.integer(initparam$weigthed),c(t(X)),ns=as.integer(initparam$ns),NS=as.integer(NS),PACKAGE='GeoModels',DUP=TRUE,NAOK=TRUE)
quit()
#================================= Comp_Pair_SkewGauss_st2#
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="SkewGaussian";shape=4;n=1#
set.seed(112)#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,9,1)# con 9 funciona,  con 8 explota#
coordx_dyn=list()#
#
maxN=15#130#
for(k in 1:length(coordt))#
{#
  NN=sample(1:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
# coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 0.1#
sill <- 1#
nugget <- 0#
scale_s <- .3#
scale_t <- .3#
skew <- -0.5#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t,skew=skew)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget, sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,mean = mean ,skew = skew)#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxtime=0.3;maxdist=0.3#
# CPUtime = proc.time()#
# fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
#                corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
#                likelihood="Marginal",type="Pairwise",#
#                start=start,fixed=fixed,model = model,varest = TRUE)#
# # CPUtime = proc.time()-CPUtime#
# print(fit1)#
# #
# #
# #
# fit1$param#
score <- sensmat <- varcov <- varimat <- parscale <- NULL#
### Initialization parameters:#
initparam <- WlsStart(coordx=NULL, coordy=NULL, coordt=coordt, coordx_dyn=coordx_dyn, corrmodel, data=ss1, distance="Eucl", "Fitting", fixed=fixed, grid=FALSE,#10#
                      likelihood='Marginal', maxdist=maxdist, maxtime=maxtime,  model=model, n=1, NULL,#16#
                      parscale, optimizer=='L-BFGS-B', radius=6378.388, start=start, taper=NULL, tapsep=NULL,#22#
                      type="Pairwise", varest=TRUE, vartype='SubSamp', weighted=FALSE, winconst=NULL, winstp=NULL,winconst_t=NULL, winstp_t=NULL, X=NULL)#31#
numcoord=length(initparam$coordx);numtime=1;spacetime_dyn=FALSE#
if(initparam$spacetime) numtime=length(initparam$coordt)#
if(initparam$bivariate) numtime=2#
if(!is.null(coordx_dyn)) spacetime_dyn=TRUE#
dimat <- numcoord*numtime##
NS=cumsum(initparam$ns)#
if(is.null(dim(initparam$X)))#
{#
  X=as.matrix(rep(1,dimat))#
  if((initparam$spacetime||initparam$bivariate)&& spacetime_dyn)  X=as.matrix(rep(1,NS[numtime]))#
}#
num_betas=ncol(X) #
grid = FALSE#
if(grid)    #
  {a=expand.grid(initparam$coordx,initparam$coordy);coordx=a[,1];coordy=a[,2]; #
  }else {#
    if((initparam$spacetime||initparam$bivariate)&&(!spacetime_dyn)){#
  data=c(t(data))#
  coordx=rep(coordx,numtime);coordy=rep(coordy,numtime)#
}#
  if((initparam$spacetime||initparam$bivariate)&&(spacetime_dyn)) initparam$data=unlist(initparam$data)          #
}#
if(initparam$spacetime||initparam$bivariate)   NS=c(0,NS)[-(length(initparam$ns)+1)]#
initparam$fixed#
#
dimmat <- initparam$numparam^2#
dmat <- initparam$numparam*(initparam$numparam+1)/2#
eps <- (.Machine$double.eps)^(1/3)#
param <- c(initparam$param, initparam$fixed)#
score <- double(initparam$numparam)#
paramcorr <- param[initparam$namescorr]#
nuisance <- param[initparam$namesnuis]#
sel=substr(names(nuisance),1,4)=="mean"#
mm=as.numeric(nuisance[sel])   ## mean paramteres#
other_nuis=as.numeric(nuisance[!sel]) #
nuisance=c(mm,other_nuis)#
sensmat <- double(dmat);varimat <- double(dmat)#
GD=.C('GodambeMat',as.double(mm),as.integer(initparam$bivariate),as.double(initparam$coordx),as.double(initparam$coordy),#
      as.double(initparam$coordt),as.integer(initparam$corrmodel), as.double(initparam$data),as.integer(initparam$distance),as.double(eps),#
      as.integer(initparam$flagcorr), as.integer(initparam$flagnuis),as.integer(grid),as.integer(initparam$likelihood),#
      as.double(c(X%*%mm)),as.integer(initparam$model),as.double(initparam$n),as.integer(num_betas),#
      as.integer(initparam$numparam),as.integer(initparam$numparamcorr),as.integer(length(paramcorr)),as.double(paramcorr),as.double(nuisance),#
      score=score,sensmat=sensmat,as.integer(initparam$spacetime),as.integer(initparam$type),#
      varimat=varimat,as.integer(initparam$vartype),as.double(initparam$winconst),as.double(initparam$winstp),as.double(initparam$winconst_t),as.double(initparam$winstp_t),#
      as.integer(initparam$weigthed),c(t(X)),ns=as.integer(initparam$ns),NS=as.integer(NS),PACKAGE='GeoModels',DUP=TRUE,NAOK=TRUE)
ns
NS
#================================= Comp_Pair_SkewGauss_st2#
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="SkewGaussian";shape=4;n=1#
set.seed(112)#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,9,1)# con 9 funciona,  con 8 explota#
coordx_dyn=list()#
#
maxN=15#130#
for(k in 1:length(coordt))#
{#
  NN=sample(1:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
# coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 0.1#
sill <- 1#
nugget <- 0#
scale_s <- .3#
scale_t <- .3#
skew <- -0.5#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t,skew=skew)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget, sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,mean = mean ,skew = skew)#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxtime=0.3;maxdist=0.3#
# CPUtime = proc.time()#
# fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
#                corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
#                likelihood="Marginal",type="Pairwise",#
#                start=start,fixed=fixed,model = model,varest = TRUE)#
# # CPUtime = proc.time()-CPUtime#
# print(fit1)#
# #
# #
# #
# fit1$param#
score <- sensmat <- varcov <- varimat <- parscale <- NULL#
### Initialization parameters:#
initparam <- WlsStart(coordx=NULL, coordy=NULL, coordt=coordt, coordx_dyn=coordx_dyn, corrmodel, data=ss1, distance="Eucl", "Fitting", fixed=fixed, grid=FALSE,#10#
                      likelihood='Marginal', maxdist=maxdist, maxtime=maxtime,  model=model, n=1, NULL,#16#
                      parscale, optimizer=='L-BFGS-B', radius=6378.388, start=start, taper=NULL, tapsep=NULL,#22#
                      type="Pairwise", varest=TRUE, vartype='SubSamp', weighted=FALSE, winconst=NULL, winstp=NULL,winconst_t=NULL, winstp_t=NULL, X=NULL)#31#
numcoord=length(initparam$coordx);numtime=1;spacetime_dyn=FALSE#
if(initparam$spacetime) numtime=length(initparam$coordt)#
if(initparam$bivariate) numtime=2#
if(!is.null(coordx_dyn)) spacetime_dyn=TRUE#
dimat <- numcoord*numtime##
NS=cumsum(initparam$ns)#
if(is.null(dim(initparam$X)))#
{#
  X=as.matrix(rep(1,dimat))#
  if((initparam$spacetime||initparam$bivariate)&& spacetime_dyn)  X=as.matrix(rep(1,NS[numtime]))#
}#
num_betas=ncol(X) #
grid = FALSE#
if(grid)    #
  {a=expand.grid(initparam$coordx,initparam$coordy);coordx=a[,1];coordy=a[,2]; #
  }else {#
    if((initparam$spacetime||initparam$bivariate)&&(!spacetime_dyn)){#
  data=c(t(data))#
  coordx=rep(coordx,numtime);coordy=rep(coordy,numtime)#
}#
  if((initparam$spacetime||initparam$bivariate)&&(spacetime_dyn)) initparam$data=unlist(initparam$data)          #
}#
if(initparam$spacetime||initparam$bivariate)   NS=c(0,NS)[-(length(initparam$ns)+1)]#
initparam$fixed#
#
dimmat <- initparam$numparam^2#
dmat <- initparam$numparam*(initparam$numparam+1)/2#
eps <- (.Machine$double.eps)^(1/3)#
param <- c(initparam$param, initparam$fixed)#
score <- double(initparam$numparam)#
paramcorr <- param[initparam$namescorr]#
nuisance <- param[initparam$namesnuis]#
sel=substr(names(nuisance),1,4)=="mean"#
mm=as.numeric(nuisance[sel])   ## mean paramteres#
other_nuis=as.numeric(nuisance[!sel]) #
nuisance=c(mm,other_nuis)#
sensmat <- double(dmat);varimat <- double(dmat)#
GD=.C('GodambeMat',as.double(mm),as.integer(initparam$bivariate),as.double(initparam$coordx),as.double(initparam$coordy),#
      as.double(initparam$coordt),as.integer(initparam$corrmodel), as.double(initparam$data),as.integer(initparam$distance),as.double(eps),#
      as.integer(initparam$flagcorr), as.integer(initparam$flagnuis),as.integer(grid),as.integer(initparam$likelihood),#
      as.double(c(X%*%mm)),as.integer(initparam$model),as.double(initparam$n),as.integer(num_betas),#
      as.integer(initparam$numparam),as.integer(initparam$numparamcorr),as.integer(length(paramcorr)),as.double(paramcorr),as.double(nuisance),#
      score=score,sensmat=sensmat,as.integer(initparam$spacetime),as.integer(initparam$type),#
      varimat=varimat,as.integer(initparam$vartype),as.double(initparam$winconst),as.double(initparam$winstp),as.double(initparam$winconst_t),as.double(initparam$winstp_t),#
      as.integer(initparam$weigthed),c(t(X)),ns=as.integer(initparam$ns),NS=as.integer(NS),PACKAGE='GeoModels',DUP=TRUE,NAOK=TRUE)
ns
NS
sum(ns)
sum(ns[-10])
str(GD)
#================================= Comp_Pair_SkewGauss_st2#
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="SkewGaussian";shape=4;n=1#
set.seed(112)#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,8,1)# con 9 funciona,  con 8 explota#
coordx_dyn=list()#
#
maxN=15#130#
for(k in 1:length(coordt))#
{#
  NN=sample(1:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
# coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 0.1#
sill <- 1#
nugget <- 0#
scale_s <- .3#
scale_t <- .3#
skew <- -0.5#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t,skew=skew)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget, sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,mean = mean ,skew = skew)#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxtime=0.3;maxdist=0.3#
# fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
#                corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
#                likelihood="Marginal",type="Pairwise",#
#                start=start,fixed=fixed,model = model,varest = TRUE)#
# print(fit1)#
# #
# #
# #
# fit1$param#
score <- sensmat <- varcov <- varimat <- parscale <- NULL#
### Initialization parameters:#
initparam <- WlsStart(coordx=NULL, coordy=NULL, coordt=coordt, coordx_dyn=coordx_dyn, corrmodel, data=ss1, distance="Eucl", "Fitting", fixed=fixed, grid=FALSE,#10#
                      likelihood='Marginal', maxdist=maxdist, maxtime=maxtime,  model=model, n=1, NULL,#16#
                      parscale, optimizer=='L-BFGS-B', radius=6378.388, start=start, taper=NULL, tapsep=NULL,#22#
                      type="Pairwise", varest=TRUE, vartype='SubSamp', weighted=FALSE, winconst=NULL, winstp=NULL,winconst_t=NULL, winstp_t=NULL, X=NULL)#31#
numcoord=length(initparam$coordx);numtime=1;spacetime_dyn=FALSE#
if(initparam$spacetime) numtime=length(initparam$coordt)#
if(initparam$bivariate) numtime=2#
if(!is.null(coordx_dyn)) spacetime_dyn=TRUE#
dimat <- numcoord*numtime##
NS=cumsum(initparam$ns)#
if(is.null(dim(initparam$X)))#
{#
  X=as.matrix(rep(1,dimat))#
  if((initparam$spacetime||initparam$bivariate)&& spacetime_dyn)  X=as.matrix(rep(1,NS[numtime]))#
}#
num_betas=ncol(X) #
grid = FALSE#
if(grid)    #
  {a=expand.grid(initparam$coordx,initparam$coordy);coordx=a[,1];coordy=a[,2]; #
  }else {#
    if((initparam$spacetime||initparam$bivariate)&&(!spacetime_dyn)){#
  data=c(t(data))#
  coordx=rep(coordx,numtime);coordy=rep(coordy,numtime)#
}#
  if((initparam$spacetime||initparam$bivariate)&&(spacetime_dyn)) initparam$data=unlist(initparam$data)          #
}#
if(initparam$spacetime||initparam$bivariate)   NS=c(0,NS)[-(length(initparam$ns)+1)]#
initparam$fixed#
#
dimmat <- initparam$numparam^2#
dmat <- initparam$numparam*(initparam$numparam+1)/2#
eps <- (.Machine$double.eps)^(1/3)#
param <- c(initparam$param, initparam$fixed)#
score <- double(initparam$numparam)#
paramcorr <- param[initparam$namescorr]#
nuisance <- param[initparam$namesnuis]#
sel=substr(names(nuisance),1,4)=="mean"#
mm=as.numeric(nuisance[sel])   ## mean paramteres#
other_nuis=as.numeric(nuisance[!sel]) #
nuisance=c(mm,other_nuis)#
sensmat <- double(dmat);varimat <- double(dmat)#
GD=.C('GodambeMat',as.double(mm),as.integer(initparam$bivariate),as.double(initparam$coordx),as.double(initparam$coordy),#
      as.double(initparam$coordt),as.integer(initparam$corrmodel), as.double(initparam$data),as.integer(initparam$distance),as.double(eps),#
      as.integer(initparam$flagcorr), as.integer(initparam$flagnuis),as.integer(grid),as.integer(initparam$likelihood),#
      as.double(c(X%*%mm)),as.integer(initparam$model),as.double(initparam$n),as.integer(num_betas),#
      as.integer(initparam$numparam),as.integer(initparam$numparamcorr),as.integer(length(paramcorr)),as.double(paramcorr),as.double(nuisance),#
      score=score,sensmat=sensmat,as.integer(initparam$spacetime),as.integer(initparam$type),#
      varimat=varimat,as.integer(initparam$vartype),as.double(initparam$winconst),as.double(initparam$winstp),as.double(initparam$winconst_t),as.double(initparam$winstp_t),#
      as.integer(initparam$weigthed),c(t(X)),ns=as.integer(initparam$ns),NS=as.integer(NS),PACKAGE='GeoModels',DUP=TRUE,NAOK=TRUE)
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="SkewGaussian";shape=4;n=1#
set.seed(112)#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,8,.5)# con 9 funciona,  con 8 explota#
coordx_dyn=list()#
#
maxN=15#130#
for(k in 1:length(coordt))#
{#
  NN=sample(1:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
# coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 0.1#
sill <- 1#
nugget <- 0#
scale_s <- .3#
scale_t <- .3#
skew <- -0.5#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t,skew=skew)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget, sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,mean = mean ,skew = skew)#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxtime=0.3;maxdist=0.3#
# fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
#                corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
#                likelihood="Marginal",type="Pairwise",#
#                start=start,fixed=fixed,model = model,varest = TRUE)#
# print(fit1)#
# #
# #
# #
# fit1$param#
score <- sensmat <- varcov <- varimat <- parscale <- NULL#
### Initialization parameters:#
initparam <- WlsStart(coordx=NULL, coordy=NULL, coordt=coordt, coordx_dyn=coordx_dyn, corrmodel, data=ss1, distance="Eucl", "Fitting", fixed=fixed, grid=FALSE,#10#
                      likelihood='Marginal', maxdist=maxdist, maxtime=maxtime,  model=model, n=1, NULL,#16#
                      parscale, optimizer=='L-BFGS-B', radius=6378.388, start=start, taper=NULL, tapsep=NULL,#22#
                      type="Pairwise", varest=TRUE, vartype='SubSamp', weighted=FALSE, winconst=NULL, winstp=NULL,winconst_t=NULL, winstp_t=NULL, X=NULL)#31#
numcoord=length(initparam$coordx);numtime=1;spacetime_dyn=FALSE#
if(initparam$spacetime) numtime=length(initparam$coordt)#
if(initparam$bivariate) numtime=2#
if(!is.null(coordx_dyn)) spacetime_dyn=TRUE#
dimat <- numcoord*numtime##
NS=cumsum(initparam$ns)#
if(is.null(dim(initparam$X)))#
{#
  X=as.matrix(rep(1,dimat))#
  if((initparam$spacetime||initparam$bivariate)&& spacetime_dyn)  X=as.matrix(rep(1,NS[numtime]))#
}#
num_betas=ncol(X) #
grid = FALSE#
if(grid)    #
  {a=expand.grid(initparam$coordx,initparam$coordy);coordx=a[,1];coordy=a[,2]; #
  }else {#
    if((initparam$spacetime||initparam$bivariate)&&(!spacetime_dyn)){#
  data=c(t(data))#
  coordx=rep(coordx,numtime);coordy=rep(coordy,numtime)#
}#
  if((initparam$spacetime||initparam$bivariate)&&(spacetime_dyn)) initparam$data=unlist(initparam$data)          #
}#
if(initparam$spacetime||initparam$bivariate)   NS=c(0,NS)[-(length(initparam$ns)+1)]#
initparam$fixed#
#
dimmat <- initparam$numparam^2#
dmat <- initparam$numparam*(initparam$numparam+1)/2#
eps <- (.Machine$double.eps)^(1/3)#
param <- c(initparam$param, initparam$fixed)#
score <- double(initparam$numparam)#
paramcorr <- param[initparam$namescorr]#
nuisance <- param[initparam$namesnuis]#
sel=substr(names(nuisance),1,4)=="mean"#
mm=as.numeric(nuisance[sel])   ## mean paramteres#
other_nuis=as.numeric(nuisance[!sel]) #
nuisance=c(mm,other_nuis)#
sensmat <- double(dmat);varimat <- double(dmat)#
GD=.C('GodambeMat',as.double(mm),as.integer(initparam$bivariate),as.double(initparam$coordx),as.double(initparam$coordy),#
      as.double(initparam$coordt),as.integer(initparam$corrmodel), as.double(initparam$data),as.integer(initparam$distance),as.double(eps),#
      as.integer(initparam$flagcorr), as.integer(initparam$flagnuis),as.integer(grid),as.integer(initparam$likelihood),#
      as.double(c(X%*%mm)),as.integer(initparam$model),as.double(initparam$n),as.integer(num_betas),#
      as.integer(initparam$numparam),as.integer(initparam$numparamcorr),as.integer(length(paramcorr)),as.double(paramcorr),as.double(nuisance),#
      score=score,sensmat=sensmat,as.integer(initparam$spacetime),as.integer(initparam$type),#
      varimat=varimat,as.integer(initparam$vartype),as.double(initparam$winconst),as.double(initparam$winstp),as.double(initparam$winconst_t),as.double(initparam$winstp_t),#
      as.integer(initparam$weigthed),c(t(X)),ns=as.integer(initparam$ns),NS=as.integer(NS),PACKAGE='GeoModels',DUP=TRUE,NAOK=TRUE)
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="SkewGaussian";shape=4;n=1#
set.seed(112)#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,6)# con 9 funciona,  con 8 explota#
coordx_dyn=list()#
#
maxN=15#130#
for(k in 1:length(coordt))#
{#
  NN=sample(1:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
# coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 0.1#
sill <- 1#
nugget <- 0#
scale_s <- .3#
scale_t <- .3#
skew <- -0.5#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t,skew=skew)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget, sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,mean = mean ,skew = skew)#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxtime=1;maxdist=0.3#
# fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
#                corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
#                likelihood="Marginal",type="Pairwise",#
#                start=start,fixed=fixed,model = model,varest = TRUE)#
# print(fit1)#
# #
# #
# #
# fit1$param#
score <- sensmat <- varcov <- varimat <- parscale <- NULL#
### Initialization parameters:#
initparam <- WlsStart(coordx=NULL, coordy=NULL, coordt=coordt, coordx_dyn=coordx_dyn, corrmodel, data=ss1, distance="Eucl", "Fitting", fixed=fixed, grid=FALSE,#10#
                      likelihood='Marginal', maxdist=maxdist, maxtime=maxtime,  model=model, n=1, NULL,#16#
                      parscale, optimizer=='L-BFGS-B', radius=6378.388, start=start, taper=NULL, tapsep=NULL,#22#
                      type="Pairwise", varest=TRUE, vartype='SubSamp', weighted=FALSE, winconst=NULL, winstp=NULL,winconst_t=NULL, winstp_t=NULL, X=NULL)#31#
numcoord=length(initparam$coordx);numtime=1;spacetime_dyn=FALSE#
if(initparam$spacetime) numtime=length(initparam$coordt)#
if(initparam$bivariate) numtime=2#
if(!is.null(coordx_dyn)) spacetime_dyn=TRUE#
dimat <- numcoord*numtime##
NS=cumsum(initparam$ns)#
if(is.null(dim(initparam$X)))#
{#
  X=as.matrix(rep(1,dimat))#
  if((initparam$spacetime||initparam$bivariate)&& spacetime_dyn)  X=as.matrix(rep(1,NS[numtime]))#
}#
num_betas=ncol(X) #
grid = FALSE#
if(grid)    #
  {a=expand.grid(initparam$coordx,initparam$coordy);coordx=a[,1];coordy=a[,2]; #
  }else {#
    if((initparam$spacetime||initparam$bivariate)&&(!spacetime_dyn)){#
  data=c(t(data))#
  coordx=rep(coordx,numtime);coordy=rep(coordy,numtime)#
}#
  if((initparam$spacetime||initparam$bivariate)&&(spacetime_dyn)) initparam$data=unlist(initparam$data)          #
}#
if(initparam$spacetime||initparam$bivariate)   NS=c(0,NS)[-(length(initparam$ns)+1)]#
initparam$fixed#
#
dimmat <- initparam$numparam^2#
dmat <- initparam$numparam*(initparam$numparam+1)/2#
eps <- (.Machine$double.eps)^(1/3)#
param <- c(initparam$param, initparam$fixed)#
score <- double(initparam$numparam)#
paramcorr <- param[initparam$namescorr]#
nuisance <- param[initparam$namesnuis]#
sel=substr(names(nuisance),1,4)=="mean"#
mm=as.numeric(nuisance[sel])   ## mean paramteres#
other_nuis=as.numeric(nuisance[!sel]) #
nuisance=c(mm,other_nuis)#
sensmat <- double(dmat);varimat <- double(dmat)#
GD=.C('GodambeMat',as.double(mm),as.integer(initparam$bivariate),as.double(initparam$coordx),as.double(initparam$coordy),#
      as.double(initparam$coordt),as.integer(initparam$corrmodel), as.double(initparam$data),as.integer(initparam$distance),as.double(eps),#
      as.integer(initparam$flagcorr), as.integer(initparam$flagnuis),as.integer(grid),as.integer(initparam$likelihood),#
      as.double(c(X%*%mm)),as.integer(initparam$model),as.double(initparam$n),as.integer(num_betas),#
      as.integer(initparam$numparam),as.integer(initparam$numparamcorr),as.integer(length(paramcorr)),as.double(paramcorr),as.double(nuisance),#
      score=score,sensmat=sensmat,as.integer(initparam$spacetime),as.integer(initparam$type),#
      varimat=varimat,as.integer(initparam$vartype),as.double(initparam$winconst),as.double(initparam$winstp),as.double(initparam$winconst_t),as.double(initparam$winstp_t),#
      as.integer(initparam$weigthed),c(t(X)),ns=as.integer(initparam$ns),NS=as.integer(NS),PACKAGE='GeoModels',DUP=TRUE,NAOK=TRUE)
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="SkewGaussian";shape=4;n=1#
set.seed(112)#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,9)# con 9 funciona,  con 8 explota#
coordx_dyn=list()#
#
maxN=15#130#
for(k in 1:length(coordt))#
{#
  NN=sample(1:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
# coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 0.1#
sill <- 1#
nugget <- 0#
scale_s <- .3#
scale_t <- .3#
skew <- -0.5#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t,skew=skew)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget, sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,mean = mean ,skew = skew)#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxtime=.3;maxdist=0.3#
# fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
#                corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
#                likelihood="Marginal",type="Pairwise",#
#                start=start,fixed=fixed,model = model,varest = TRUE)#
# print(fit1)#
# #
# #
# #
# fit1$param#
score <- sensmat <- varcov <- varimat <- parscale <- NULL#
### Initialization parameters:#
initparam <- WlsStart(coordx=NULL, coordy=NULL, coordt=coordt, coordx_dyn=coordx_dyn, corrmodel, data=ss1, distance="Eucl", "Fitting", fixed=fixed, grid=FALSE,#10#
                      likelihood='Marginal', maxdist=maxdist, maxtime=maxtime,  model=model, n=1, NULL,#16#
                      parscale, optimizer=='L-BFGS-B', radius=6378.388, start=start, taper=NULL, tapsep=NULL,#22#
                      type="Pairwise", varest=TRUE, vartype='SubSamp', weighted=FALSE, winconst=NULL, winstp=NULL,winconst_t=NULL, winstp_t=NULL, X=NULL)#31#
numcoord=length(initparam$coordx);numtime=1;spacetime_dyn=FALSE#
if(initparam$spacetime) numtime=length(initparam$coordt)#
if(initparam$bivariate) numtime=2#
if(!is.null(coordx_dyn)) spacetime_dyn=TRUE#
dimat <- numcoord*numtime##
NS=cumsum(initparam$ns)#
if(is.null(dim(initparam$X)))#
{#
  X=as.matrix(rep(1,dimat))#
  if((initparam$spacetime||initparam$bivariate)&& spacetime_dyn)  X=as.matrix(rep(1,NS[numtime]))#
}#
num_betas=ncol(X) #
grid = FALSE#
if(grid)    #
  {a=expand.grid(initparam$coordx,initparam$coordy);coordx=a[,1];coordy=a[,2]; #
  }else {#
    if((initparam$spacetime||initparam$bivariate)&&(!spacetime_dyn)){#
  data=c(t(data))#
  coordx=rep(coordx,numtime);coordy=rep(coordy,numtime)#
}#
  if((initparam$spacetime||initparam$bivariate)&&(spacetime_dyn)) initparam$data=unlist(initparam$data)          #
}#
if(initparam$spacetime||initparam$bivariate)   NS=c(0,NS)[-(length(initparam$ns)+1)]#
initparam$fixed#
#
dimmat <- initparam$numparam^2#
dmat <- initparam$numparam*(initparam$numparam+1)/2#
eps <- (.Machine$double.eps)^(1/3)#
param <- c(initparam$param, initparam$fixed)#
score <- double(initparam$numparam)#
paramcorr <- param[initparam$namescorr]#
nuisance <- param[initparam$namesnuis]#
sel=substr(names(nuisance),1,4)=="mean"#
mm=as.numeric(nuisance[sel])   ## mean paramteres#
other_nuis=as.numeric(nuisance[!sel]) #
nuisance=c(mm,other_nuis)#
sensmat <- double(dmat);varimat <- double(dmat)#
GD=.C('GodambeMat',as.double(mm),as.integer(initparam$bivariate),as.double(initparam$coordx),as.double(initparam$coordy),#
      as.double(initparam$coordt),as.integer(initparam$corrmodel), as.double(initparam$data),as.integer(initparam$distance),as.double(eps),#
      as.integer(initparam$flagcorr), as.integer(initparam$flagnuis),as.integer(grid),as.integer(initparam$likelihood),#
      as.double(c(X%*%mm)),as.integer(initparam$model),as.double(initparam$n),as.integer(num_betas),#
      as.integer(initparam$numparam),as.integer(initparam$numparamcorr),as.integer(length(paramcorr)),as.double(paramcorr),as.double(nuisance),#
      score=score,sensmat=sensmat,as.integer(initparam$spacetime),as.integer(initparam$type),#
      varimat=varimat,as.integer(initparam$vartype),as.double(initparam$winconst),as.double(initparam$winstp),as.double(initparam$winconst_t),as.double(initparam$winstp_t),#
      as.integer(initparam$weigthed),c(t(X)),ns=as.integer(initparam$ns),NS=as.integer(NS),PACKAGE='GeoModels',DUP=TRUE,NAOK=TRUE)
#================================= Comp_Pair_SkewGauss_st2#
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="SkewGaussian";shape=4;n=1#
set.seed(112)#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,9)# con 9 funciona,  con 8 explota#
coordx_dyn=list()#
#
maxN=15#130#
for(k in 1:length(coordt))#
{#
  NN=sample(1:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
# coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 0.1#
sill <- 1#
nugget <- 0#
scale_s <- .3#
scale_t <- .3#
skew <- -0.5#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t,skew=skew)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget, sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,mean = mean ,skew = skew)#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxtime=1;maxdist=0.3#
# fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
#                corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
#                likelihood="Marginal",type="Pairwise",#
#                start=start,fixed=fixed,model = model,varest = TRUE)#
# print(fit1)#
# #
# #
# #
# fit1$param#
score <- sensmat <- varcov <- varimat <- parscale <- NULL#
### Initialization parameters:#
initparam <- WlsStart(coordx=NULL, coordy=NULL, coordt=coordt, coordx_dyn=coordx_dyn, corrmodel, data=ss1, distance="Eucl", "Fitting", fixed=fixed, grid=FALSE,#10#
                      likelihood='Marginal', maxdist=maxdist, maxtime=maxtime,  model=model, n=1, NULL,#16#
                      parscale, optimizer=='L-BFGS-B', radius=6378.388, start=start, taper=NULL, tapsep=NULL,#22#
                      type="Pairwise", varest=TRUE, vartype='SubSamp', weighted=FALSE, winconst=NULL, winstp=NULL,winconst_t=NULL, winstp_t=NULL, X=NULL)#31#
numcoord=length(initparam$coordx);numtime=1;spacetime_dyn=FALSE#
if(initparam$spacetime) numtime=length(initparam$coordt)#
if(initparam$bivariate) numtime=2#
if(!is.null(coordx_dyn)) spacetime_dyn=TRUE#
dimat <- numcoord*numtime##
NS=cumsum(initparam$ns)#
if(is.null(dim(initparam$X)))#
{#
  X=as.matrix(rep(1,dimat))#
  if((initparam$spacetime||initparam$bivariate)&& spacetime_dyn)  X=as.matrix(rep(1,NS[numtime]))#
}#
num_betas=ncol(X) #
grid = FALSE#
if(grid)    #
  {a=expand.grid(initparam$coordx,initparam$coordy);coordx=a[,1];coordy=a[,2]; #
  }else {#
    if((initparam$spacetime||initparam$bivariate)&&(!spacetime_dyn)){#
  data=c(t(data))#
  coordx=rep(coordx,numtime);coordy=rep(coordy,numtime)#
}#
  if((initparam$spacetime||initparam$bivariate)&&(spacetime_dyn)) initparam$data=unlist(initparam$data)          #
}#
if(initparam$spacetime||initparam$bivariate)   NS=c(0,NS)[-(length(initparam$ns)+1)]#
initparam$fixed#
#
dimmat <- initparam$numparam^2#
dmat <- initparam$numparam*(initparam$numparam+1)/2#
eps <- (.Machine$double.eps)^(1/3)#
param <- c(initparam$param, initparam$fixed)#
score <- double(initparam$numparam)#
paramcorr <- param[initparam$namescorr]#
nuisance <- param[initparam$namesnuis]#
sel=substr(names(nuisance),1,4)=="mean"#
mm=as.numeric(nuisance[sel])   ## mean paramteres#
other_nuis=as.numeric(nuisance[!sel]) #
nuisance=c(mm,other_nuis)#
sensmat <- double(dmat);varimat <- double(dmat)#
GD=.C('GodambeMat',as.double(mm),as.integer(initparam$bivariate),as.double(initparam$coordx),as.double(initparam$coordy),#
      as.double(initparam$coordt),as.integer(initparam$corrmodel), as.double(initparam$data),as.integer(initparam$distance),as.double(eps),#
      as.integer(initparam$flagcorr), as.integer(initparam$flagnuis),as.integer(grid),as.integer(initparam$likelihood),#
      as.double(c(X%*%mm)),as.integer(initparam$model),as.double(initparam$n),as.integer(num_betas),#
      as.integer(initparam$numparam),as.integer(initparam$numparamcorr),as.integer(length(paramcorr)),as.double(paramcorr),as.double(nuisance),#
      score=score,sensmat=sensmat,as.integer(initparam$spacetime),as.integer(initparam$type),#
      varimat=varimat,as.integer(initparam$vartype),as.double(initparam$winconst),as.double(initparam$winstp),as.double(initparam$winconst_t),as.double(initparam$winstp_t),#
      as.integer(initparam$weigthed),c(t(X)),ns=as.integer(initparam$ns),NS=as.integer(NS),PACKAGE='GeoModels',DUP=TRUE,NAOK=TRUE)
#================================= Comp_Pair_SkewGauss_st2#
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="Gaussian";shape=4;n=1#
set.seed(112)#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,9)# con 9 funciona,  con 8 explota#
coordx_dyn=list()#
#
maxN=15#130#
for(k in 1:length(coordt))#
{#
  NN=sample(1:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
# coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 0.1#
sill <- 1#
nugget <- 0#
scale_s <- .3#
scale_t <- .3#
skew <- -0.5#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget, sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,mean = mean )#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxtime=1;maxdist=0.3#
# fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
#                corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
#                likelihood="Marginal",type="Pairwise",#
#                start=start,fixed=fixed,model = model,varest = TRUE)#
# print(fit1)#
# #
# #
# #
# fit1$param#
score <- sensmat <- varcov <- varimat <- parscale <- NULL#
### Initialization parameters:#
initparam <- WlsStart(coordx=NULL, coordy=NULL, coordt=coordt, coordx_dyn=coordx_dyn, corrmodel, data=ss1, distance="Eucl", "Fitting", fixed=fixed, grid=FALSE,#10#
                      likelihood='Marginal', maxdist=maxdist, maxtime=maxtime,  model=model, n=1, NULL,#16#
                      parscale, optimizer=='L-BFGS-B', radius=6378.388, start=start, taper=NULL, tapsep=NULL,#22#
                      type="Pairwise", varest=TRUE, vartype='SubSamp', weighted=FALSE, winconst=NULL, winstp=NULL,winconst_t=NULL, winstp_t=NULL, X=NULL)#31#
numcoord=length(initparam$coordx);numtime=1;spacetime_dyn=FALSE#
if(initparam$spacetime) numtime=length(initparam$coordt)#
if(initparam$bivariate) numtime=2#
if(!is.null(coordx_dyn)) spacetime_dyn=TRUE#
dimat <- numcoord*numtime##
NS=cumsum(initparam$ns)#
if(is.null(dim(initparam$X)))#
{#
  X=as.matrix(rep(1,dimat))#
  if((initparam$spacetime||initparam$bivariate)&& spacetime_dyn)  X=as.matrix(rep(1,NS[numtime]))#
}#
num_betas=ncol(X) #
grid = FALSE#
if(grid)    #
{a=expand.grid(initparam$coordx,initparam$coordy);coordx=a[,1];coordy=a[,2]; #
}else {#
  if((initparam$spacetime||initparam$bivariate)&&(!spacetime_dyn)){#
    data=c(t(data))#
    coordx=rep(coordx,numtime);coordy=rep(coordy,numtime)#
  }#
  if((initparam$spacetime||initparam$bivariate)&&(spacetime_dyn)) initparam$data=unlist(initparam$data)          #
}#
if(initparam$spacetime||initparam$bivariate)   NS=c(0,NS)[-(length(initparam$ns)+1)]#
initparam$fixed#
#
dimmat <- initparam$numparam^2#
dmat <- initparam$numparam*(initparam$numparam+1)/2#
eps <- (.Machine$double.eps)^(1/3)#
param <- c(initparam$param, initparam$fixed)#
score <- double(initparam$numparam)#
paramcorr <- param[initparam$namescorr]#
nuisance <- param[initparam$namesnuis]#
sel=substr(names(nuisance),1,4)=="mean"#
mm=as.numeric(nuisance[sel])   ## mean paramteres#
other_nuis=as.numeric(nuisance[!sel]) #
nuisance=c(mm,other_nuis)#
sensmat <- double(dmat);varimat <- double(dmat)#
GD=.C('GodambeMat',as.double(mm),as.integer(initparam$bivariate),as.double(initparam$coordx),as.double(initparam$coordy),#
      as.double(initparam$coordt),as.integer(initparam$corrmodel), as.double(initparam$data),as.integer(initparam$distance),as.double(eps),#
      as.integer(initparam$flagcorr), as.integer(initparam$flagnuis),as.integer(grid),as.integer(initparam$likelihood),#
      as.double(c(X%*%mm)),as.integer(initparam$model),as.double(initparam$n),as.integer(num_betas),#
      as.integer(initparam$numparam),as.integer(initparam$numparamcorr),as.integer(length(paramcorr)),as.double(paramcorr),as.double(nuisance),#
      score=score,sensmat=sensmat,as.integer(initparam$spacetime),as.integer(initparam$type),#
      varimat=varimat,as.integer(initparam$vartype),as.double(initparam$winconst),as.double(initparam$winstp),as.double(initparam$winconst_t),as.double(initparam$winstp_t),#
      as.integer(initparam$weigthed),c(t(X)),ns=as.integer(initparam$ns),NS=as.integer(NS),PACKAGE='GeoModels',DUP=TRUE,NAOK=TRUE)
as.integer(initparam$weigthed)
as.integer(initparam$weighted)
#================================= Comp_Pair_SkewGauss_st2#
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="Gaussian";shape=4;n=1#
set.seed(112)#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,9)# con 9 funciona,  con 8 explota#
coordx_dyn=list()#
#
maxN=15#130#
for(k in 1:length(coordt))#
{#
  NN=sample(1:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
# coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 0.1#
sill <- 1#
nugget <- 0#
scale_s <- .3#
scale_t <- .3#
skew <- -0.5#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget, sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,mean = mean )#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxtime=1;maxdist=0.3#
# fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
#                corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
#                likelihood="Marginal",type="Pairwise",#
#                start=start,fixed=fixed,model = model,varest = TRUE)#
# print(fit1)#
# #
# #
# #
# fit1$param#
score <- sensmat <- varcov <- varimat <- parscale <- NULL#
### Initialization parameters:#
initparam <- WlsStart(coordx=NULL, coordy=NULL, coordt=coordt, coordx_dyn=coordx_dyn, corrmodel, data=ss1, distance="Eucl", "Fitting", fixed=fixed, grid=FALSE,#10#
                      likelihood='Marginal', maxdist=maxdist, maxtime=maxtime,  model=model, n=1, NULL,#16#
                      parscale, optimizer=='L-BFGS-B', radius=6378.388, start=start, taper=NULL, tapsep=NULL,#22#
                      type="Pairwise", varest=TRUE, vartype='SubSamp', weighted=FALSE, winconst=NULL, winstp=NULL,winconst_t=NULL, winstp_t=NULL, X=NULL)#31#
numcoord=length(initparam$coordx);numtime=1;spacetime_dyn=FALSE#
if(initparam$spacetime) numtime=length(initparam$coordt)#
if(initparam$bivariate) numtime=2#
if(!is.null(coordx_dyn)) spacetime_dyn=TRUE#
dimat <- numcoord*numtime##
NS=cumsum(initparam$ns)#
if(is.null(dim(initparam$X)))#
{#
  X=as.matrix(rep(1,dimat))#
  if((initparam$spacetime||initparam$bivariate)&& spacetime_dyn)  X=as.matrix(rep(1,NS[numtime]))#
}#
num_betas=ncol(X) #
grid = FALSE#
if(grid)    #
{a=expand.grid(initparam$coordx,initparam$coordy);coordx=a[,1];coordy=a[,2]; #
}else {#
  if((initparam$spacetime||initparam$bivariate)&&(!spacetime_dyn)){#
    data=c(t(data))#
    coordx=rep(coordx,numtime);coordy=rep(coordy,numtime)#
  }#
  if((initparam$spacetime||initparam$bivariate)&&(spacetime_dyn)) initparam$data=unlist(initparam$data)          #
}#
if(initparam$spacetime||initparam$bivariate)   NS=c(0,NS)[-(length(initparam$ns)+1)]#
initparam$fixed#
#
dimmat <- initparam$numparam^2#
dmat <- initparam$numparam*(initparam$numparam+1)/2#
eps <- (.Machine$double.eps)^(1/3)#
param <- c(initparam$param, initparam$fixed)#
score <- double(initparam$numparam)#
paramcorr <- param[initparam$namescorr]#
nuisance <- param[initparam$namesnuis]#
sel=substr(names(nuisance),1,4)=="mean"#
mm=as.numeric(nuisance[sel])   ## mean paramteres#
other_nuis=as.numeric(nuisance[!sel]) #
nuisance=c(mm,other_nuis)#
sensmat <- double(dmat);varimat <- double(dmat)#
GD=.C('GodambeMat',as.double(mm),as.integer(initparam$bivariate),as.double(initparam$coordx),as.double(initparam$coordy),#
      as.double(initparam$coordt),as.integer(initparam$corrmodel), as.double(initparam$data),as.integer(initparam$distance),as.double(eps),#
      as.integer(initparam$flagcorr), as.integer(initparam$flagnuis),as.integer(grid),as.integer(initparam$likelihood),#
      as.double(c(X%*%mm)),as.integer(initparam$model),as.double(initparam$n),as.integer(num_betas),#
      as.integer(initparam$numparam),as.integer(initparam$numparamcorr),as.integer(length(paramcorr)),as.double(paramcorr),as.double(nuisance),#
      score=score,sensmat=sensmat,as.integer(initparam$spacetime),as.integer(initparam$type),#
      varimat=varimat,as.integer(initparam$vartype),as.double(initparam$winconst),as.double(initparam$winstp),as.double(initparam$winconst_t),as.double(initparam$winstp_t),#
      as.integer(initparam$weighted),c(t(X)),ns=as.integer(initparam$ns),NS=as.integer(NS),PACKAGE='GeoModels',DUP=TRUE,NAOK=TRUE)
library(GeoModels)#
#
rm(list = ls())#
# Define the spatial-coordinates of the points:#
# set.seed(6)#
# set.seed(5)#
N=500  # number of location sites#
x <- runif(N, 0, 1)#
# set.seed(5)#
y <- runif(N, 0, 1)#
coords <- cbind(x,y)#
#
# Define spatial matrix covariates#
X=cbind(rep(1,N),runif(N))#
#
# Set the covariance model's parameters:#
corrmodel <- "Exp"#
model <- "SkewGaussian"#
NuisParam(model,FALSE,1)#
CorrParam(corrmodel)#
mean <- 0#
mean1 <- -0.5#
sill <- 1#
nugget <- 0#
scale <- 2/3#
skew <- 1.5#
param<-list(mean=mean,mean1=mean1,sill=sill,nugget=nugget,scale=scale, skew = skew)#
#
# Simulation of the spatial Gaussian RF:#
set.seed(7)#
data <- GeoSim(coordx=coords,corrmodel=corrmodel, param=param,X=X,model = model)$data#
# data = rnorm(nrow(coords))#
# Fixed parameters#
fixed<-list(nugget=nugget,sill=sill,skew = skew)#
# Starting value for the estimated parameters#
start<-list(mean=mean,mean1=mean1,scale=scale)#
#
# CPUtime = proc.time()#
fit1 <- GeoFit(data=data,coordx=coords,corrmodel=corrmodel,#
               maxdist=0.1,likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,X=X, model = model,varest = TRUE)#
# CPUtime = proc.time()-CPUtime;CPUtime#
print(fit1)#
#================================= Comp_Pair_SkewGauss_st2#
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="SkewGaussian";shape=4;n=1#
set.seed(112)#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,9)# con 9 funciona,  con 8 explota#
coordx_dyn=list()#
#
maxN=15#130#
for(k in 1:length(coordt))#
{#
  NN=sample(1:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
# coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 0.1#
sill <- 1#
nugget <- 0#
scale_s <- .3#
scale_t <- .3#
skew <- -0.5#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t,skew=skew)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget, sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,mean = mean ,skew = skew)#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxtime=1;maxdist=0.3#
# fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
#                corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
#                likelihood="Marginal",type="Pairwise",#
#                start=start,fixed=fixed,model = model,varest = TRUE)#
# print(fit1)#
# #
# #
# #
# fit1$param#
score <- sensmat <- varcov <- varimat <- parscale <- NULL#
### Initialization parameters:#
initparam <- WlsStart(coordx=NULL, coordy=NULL, coordt=coordt, coordx_dyn=coordx_dyn, corrmodel, data=ss1, distance="Eucl", "Fitting", fixed=fixed, grid=FALSE,#10#
                      likelihood='Marginal', maxdist=maxdist, maxtime=maxtime,  model=model, n=1, NULL,#16#
                      parscale, optimizer=='L-BFGS-B', radius=6378.388, start=start, taper=NULL, tapsep=NULL,#22#
                      type="Pairwise", varest=TRUE, vartype='SubSamp', weighted=FALSE, winconst=NULL, winstp=NULL,winconst_t=NULL, winstp_t=NULL, X=NULL)#31#
numcoord=length(initparam$coordx);numtime=1;spacetime_dyn=FALSE#
if(initparam$spacetime) numtime=length(initparam$coordt)#
if(initparam$bivariate) numtime=2#
if(!is.null(coordx_dyn)) spacetime_dyn=TRUE#
dimat <- numcoord*numtime##
NS=cumsum(initparam$ns)#
if(is.null(dim(initparam$X)))#
{#
  X=as.matrix(rep(1,dimat))#
  if((initparam$spacetime||initparam$bivariate)&& spacetime_dyn)  X=as.matrix(rep(1,NS[numtime]))#
}#
num_betas=ncol(X) #
grid = FALSE#
if(grid)    #
  {a=expand.grid(initparam$coordx,initparam$coordy);coordx=a[,1];coordy=a[,2]; #
  }else {#
    if((initparam$spacetime||initparam$bivariate)&&(!spacetime_dyn)){#
  data=c(t(data))#
  coordx=rep(coordx,numtime);coordy=rep(coordy,numtime)#
}#
  if((initparam$spacetime||initparam$bivariate)&&(spacetime_dyn)) initparam$data=unlist(initparam$data)          #
}#
if(initparam$spacetime||initparam$bivariate)   NS=c(0,NS)[-(length(initparam$ns)+1)]#
initparam$fixed#
#
dimmat <- initparam$numparam^2#
dmat <- initparam$numparam*(initparam$numparam+1)/2#
eps <- (.Machine$double.eps)^(1/3)#
param <- c(initparam$param, initparam$fixed)#
score <- double(initparam$numparam)#
paramcorr <- param[initparam$namescorr]#
nuisance <- param[initparam$namesnuis]#
sel=substr(names(nuisance),1,4)=="mean"#
mm=as.numeric(nuisance[sel])   ## mean paramteres#
other_nuis=as.numeric(nuisance[!sel]) #
nuisance=c(mm,other_nuis)#
sensmat <- double(dmat);varimat <- double(dmat)#
GD=.C('GodambeMat',as.double(mm),as.integer(initparam$bivariate),as.double(initparam$coordx),as.double(initparam$coordy),#
      as.double(initparam$coordt),as.integer(initparam$corrmodel), as.double(initparam$data),as.integer(initparam$distance),as.double(eps),#
      as.integer(initparam$flagcorr), as.integer(initparam$flagnuis),as.integer(grid),as.integer(initparam$likelihood),#
      as.double(c(X%*%mm)),as.integer(initparam$model),as.double(initparam$n),as.integer(num_betas),#
      as.integer(initparam$numparam),as.integer(initparam$numparamcorr),as.integer(length(paramcorr)),as.double(paramcorr),as.double(nuisance),#
      score=score,sensmat=sensmat,as.integer(initparam$spacetime),as.integer(initparam$type),#
      varimat=varimat,as.integer(initparam$vartype),as.double(initparam$winconst),as.double(initparam$winstp),as.double(initparam$winconst_t),as.double(initparam$winstp_t),#
      as.integer(initparam$weighted),c(t(X)),ns=as.integer(initparam$ns),NS=as.integer(NS),PACKAGE='GeoModels',DUP=TRUE,NAOK=TRUE)
#================================= Comp_Pair_SkewGauss_st2#
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="Gaussian";shape=4;n=1#
set.seed(112)#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,9)# con 9 funciona,  con 8 explota#
coordx_dyn=list()#
#
maxN=15#130#
for(k in 1:length(coordt))#
{#
  NN=sample(1:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
# coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 0.1#
sill <- 1#
nugget <- 0#
scale_s <- .3#
scale_t <- .3#
skew <- -0.5#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget, sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,mean = mean )#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxtime=1;maxdist=0.3#
# fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
#                corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
#                likelihood="Marginal",type="Pairwise",#
#                start=start,fixed=fixed,model = model,varest = TRUE)#
# print(fit1)#
# #
# #
# #
# fit1$param#
score <- sensmat <- varcov <- varimat <- parscale <- NULL#
### Initialization parameters:#
initparam <- WlsStart(coordx=NULL, coordy=NULL, coordt=coordt, coordx_dyn=coordx_dyn, corrmodel, data=ss1, distance="Eucl", "Fitting", fixed=fixed, grid=FALSE,#10#
                      likelihood='Marginal', maxdist=maxdist, maxtime=maxtime,  model=model, n=1, NULL,#16#
                      parscale, optimizer=='L-BFGS-B', radius=6378.388, start=start, taper=NULL, tapsep=NULL,#22#
                      type="Pairwise", varest=TRUE, vartype='SubSamp', weighted=FALSE, winconst=NULL, winstp=NULL,winconst_t=NULL, winstp_t=NULL, X=NULL)#31#
numcoord=length(initparam$coordx);numtime=1;spacetime_dyn=FALSE#
if(initparam$spacetime) numtime=length(initparam$coordt)#
if(initparam$bivariate) numtime=2#
if(!is.null(coordx_dyn)) spacetime_dyn=TRUE#
dimat <- numcoord*numtime##
NS=cumsum(initparam$ns)#
if(is.null(dim(initparam$X)))#
{#
  X=as.matrix(rep(1,dimat))#
  if((initparam$spacetime||initparam$bivariate)&& spacetime_dyn)  X=as.matrix(rep(1,NS[numtime]))#
}#
num_betas=ncol(X) #
grid = FALSE#
if(grid)    #
{a=expand.grid(initparam$coordx,initparam$coordy);coordx=a[,1];coordy=a[,2]; #
}else {#
  if((initparam$spacetime||initparam$bivariate)&&(!spacetime_dyn)){#
    data=c(t(data))#
    coordx=rep(coordx,numtime);coordy=rep(coordy,numtime)#
  }#
  if((initparam$spacetime||initparam$bivariate)&&(spacetime_dyn)) initparam$data=unlist(initparam$data)          #
}#
if(initparam$spacetime||initparam$bivariate)   NS=c(0,NS)[-(length(initparam$ns)+1)]#
initparam$fixed#
#
dimmat <- initparam$numparam^2#
dmat <- initparam$numparam*(initparam$numparam+1)/2#
eps <- (.Machine$double.eps)^(1/3)#
param <- c(initparam$param, initparam$fixed)#
score <- double(initparam$numparam)#
paramcorr <- param[initparam$namescorr]#
nuisance <- param[initparam$namesnuis]#
sel=substr(names(nuisance),1,4)=="mean"#
mm=as.numeric(nuisance[sel])   ## mean paramteres#
other_nuis=as.numeric(nuisance[!sel]) #
nuisance=c(mm,other_nuis)#
sensmat <- double(dmat);varimat <- double(dmat)#
GD=.C('GodambeMat',as.double(mm),as.integer(initparam$bivariate),as.double(initparam$coordx),as.double(initparam$coordy),#
      as.double(initparam$coordt),as.integer(initparam$corrmodel), as.double(initparam$data),as.integer(initparam$distance),as.double(eps),#
      as.integer(initparam$flagcorr), as.integer(initparam$flagnuis),as.integer(grid),as.integer(initparam$likelihood),#
      as.double(c(X%*%mm)),as.integer(initparam$model),as.double(initparam$n),as.integer(num_betas),#
      as.integer(initparam$numparam),as.integer(initparam$numparamcorr),as.integer(length(paramcorr)),as.double(paramcorr),as.double(nuisance),#
      score=score,sensmat=sensmat,as.integer(initparam$spacetime),as.integer(initparam$type),#
      varimat=varimat,as.integer(initparam$vartype),as.double(initparam$winconst),as.double(initparam$winstp),as.double(initparam$winconst_t),as.double(initparam$winstp_t),#
      as.integer(initparam$weighted),c(t(X)),ns=as.integer(initparam$ns),NS=as.integer(NS),PACKAGE='GeoModels',DUP=TRUE,NAOK=TRUE)
str(GD)#
#
GD$score;GD$sensmat;GD$varimat
#================================= Comp_Pair_SkewGauss_st2#
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="Gaussian";shape=4;n=1#
set.seed(112)#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,9)# con 9 funciona,  con 8 explota#
coordx_dyn=list()#
#
maxN=15#130#
for(k in 1:length(coordt))#
{#
  NN=sample(1:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
# coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 0.1#
sill <- 1#
nugget <- 0#
scale_s <- .3#
scale_t <- .3#
skew <- -0.5#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget, sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,mean = mean )#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxtime=1;maxdist=0.3#
# fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
#                corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
#                likelihood="Marginal",type="Pairwise",#
#                start=start,fixed=fixed,model = model,varest = TRUE)#
# print(fit1)#
# #
# #
# #
# fit1$param#
score <- sensmat <- varcov <- varimat <- parscale <- NULL#
### Initialization parameters:#
initparam <- WlsStart(coordx=NULL, coordy=NULL, coordt=coordt, coordx_dyn=coordx_dyn, corrmodel, data=ss1, distance="Eucl", "Fitting", fixed=fixed, grid=FALSE,#10#
                      likelihood='Marginal', maxdist=maxdist, maxtime=maxtime,  model=model, n=1, NULL,#16#
                      parscale, optimizer=='L-BFGS-B', radius=6378.388, start=start, taper=NULL, tapsep=NULL,#22#
                      type="Pairwise", varest=TRUE, vartype='SubSamp', weighted=FALSE, winconst=NULL, winstp=NULL,winconst_t=NULL, winstp_t=NULL, X=NULL)#31#
numcoord=length(initparam$coordx);numtime=1;spacetime_dyn=FALSE#
if(initparam$spacetime) numtime=length(initparam$coordt)#
if(initparam$bivariate) numtime=2#
if(!is.null(coordx_dyn)) spacetime_dyn=TRUE#
dimat <- numcoord*numtime##
NS=cumsum(initparam$ns)#
if(is.null(dim(initparam$X)))#
{#
  X=as.matrix(rep(1,dimat))#
  if((initparam$spacetime||initparam$bivariate)&& spacetime_dyn)  X=as.matrix(rep(1,NS[numtime]))#
}#
num_betas=ncol(X) #
grid = FALSE#
if(grid)    #
{a=expand.grid(initparam$coordx,initparam$coordy);coordx=a[,1];coordy=a[,2]; #
}else {#
  if((initparam$spacetime||initparam$bivariate)&&(!spacetime_dyn)){#
    data=c(t(data))#
    coordx=rep(coordx,numtime);coordy=rep(coordy,numtime)#
  }#
  if((initparam$spacetime||initparam$bivariate)&&(spacetime_dyn)) initparam$data=unlist(initparam$data)          #
}#
if(initparam$spacetime||initparam$bivariate)   NS=c(0,NS)[-(length(initparam$ns)+1)]#
initparam$fixed#
#
dimmat <- initparam$numparam^2#
dmat <- initparam$numparam*(initparam$numparam+1)/2#
eps <- (.Machine$double.eps)^(1/3)#
param <- c(initparam$param, initparam$fixed)#
score <- double(initparam$numparam)#
paramcorr <- param[initparam$namescorr]#
nuisance <- param[initparam$namesnuis]#
sel=substr(names(nuisance),1,4)=="mean"#
mm=as.numeric(nuisance[sel])   ## mean paramteres#
other_nuis=as.numeric(nuisance[!sel]) #
nuisance=c(mm,other_nuis)#
sensmat <- double(dmat);varimat <- double(dmat)#
GD=.C('GodambeMat',as.double(mm),as.integer(initparam$bivariate),as.double(initparam$coordx),as.double(initparam$coordy),#
      as.double(initparam$coordt),as.integer(initparam$corrmodel), as.double(initparam$data),as.integer(initparam$distance),as.double(eps),#
      as.integer(initparam$flagcorr), as.integer(initparam$flagnuis),as.integer(grid),as.integer(initparam$likelihood),#
      as.double(c(X%*%mm)),as.integer(initparam$model),as.double(initparam$n),as.integer(num_betas),#
      as.integer(initparam$numparam),as.integer(initparam$numparamcorr),as.integer(length(paramcorr)),as.double(paramcorr),as.double(nuisance),#
      score=score,sensmat=sensmat,as.integer(initparam$spacetime),as.integer(initparam$type),#
      varimat=varimat,as.integer(initparam$vartype),as.double(initparam$winconst),as.double(initparam$winstp),as.double(initparam$winconst_t),as.double(initparam$winstp_t),#
      as.integer(initparam$weighted),c(t(X)),ns=as.integer(initparam$ns),NS=as.integer(NS),PACKAGE='GeoModels',DUP=TRUE,NAOK=TRUE)#
# str(GD)#
GD$score;GD$sensmat;GD$varimat
initparam$flagcorr
#================================= Comp_Pair_SkewGauss_st2#
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="Gaussian";shape=4;n=1#
set.seed(112)#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,9)# con 9 funciona,  con 8 explota#
coordx_dyn=list()#
#
maxN=15#130#
for(k in 1:length(coordt))#
{#
  NN=sample(1:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
# coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 0.1#
sill <- 1#
nugget <- 0#
scale_s <- .3#
scale_t <- .3#
skew <- -0.5#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget, sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,mean = mean )#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxtime=1;maxdist=0.3#
# fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
#                corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
#                likelihood="Marginal",type="Pairwise",#
#                start=start,fixed=fixed,model = model,varest = TRUE)#
# print(fit1)#
# #
# #
# #
# fit1$param#
score <- sensmat <- varcov <- varimat <- parscale <- NULL#
### Initialization parameters:#
initparam <- WlsStart(coordx=NULL, coordy=NULL, coordt=coordt, coordx_dyn=coordx_dyn, corrmodel, data=ss1, distance="Eucl", "Fitting", fixed=fixed, grid=FALSE,#10#
                      likelihood='Marginal', maxdist=maxdist, maxtime=maxtime,  model=model, n=1, NULL,#16#
                      parscale, optimizer=='L-BFGS-B', radius=6378.388, start=start, taper=NULL, tapsep=NULL,#22#
                      type="Pairwise", varest=TRUE, vartype='SubSamp', weighted=FALSE, winconst=NULL, winstp=NULL,winconst_t=NULL, winstp_t=NULL, X=NULL)#31#
numcoord=length(initparam$coordx);numtime=1;spacetime_dyn=FALSE#
if(initparam$spacetime) numtime=length(initparam$coordt)#
if(initparam$bivariate) numtime=2#
if(!is.null(coordx_dyn)) spacetime_dyn=TRUE#
dimat <- numcoord*numtime##
NS=cumsum(initparam$ns)#
if(is.null(dim(initparam$X)))#
{#
  X=as.matrix(rep(1,dimat))#
  if((initparam$spacetime||initparam$bivariate)&& spacetime_dyn)  X=as.matrix(rep(1,NS[numtime]))#
}#
num_betas=ncol(X) #
grid = FALSE#
if(grid)    #
{a=expand.grid(initparam$coordx,initparam$coordy);coordx=a[,1];coordy=a[,2]; #
}else {#
  if((initparam$spacetime||initparam$bivariate)&&(!spacetime_dyn)){#
    data=c(t(data))#
    coordx=rep(coordx,numtime);coordy=rep(coordy,numtime)#
  }#
  if((initparam$spacetime||initparam$bivariate)&&(spacetime_dyn)) initparam$data=unlist(initparam$data)          #
}#
if(initparam$spacetime||initparam$bivariate)   NS=c(0,NS)[-(length(initparam$ns)+1)]#
initparam$fixed#
#
dimmat <- initparam$numparam^2#
dmat <- initparam$numparam*(initparam$numparam+1)/2#
eps <- (.Machine$double.eps)^(1/3)#
param <- c(initparam$param, initparam$fixed)#
score <- double(initparam$numparam)#
paramcorr <- param[initparam$namescorr]#
nuisance <- param[initparam$namesnuis]#
sel=substr(names(nuisance),1,4)=="mean"#
mm=as.numeric(nuisance[sel])   ## mean paramteres#
other_nuis=as.numeric(nuisance[!sel]) #
nuisance=c(mm,other_nuis)#
sensmat <- double(dmat);varimat <- double(dmat)#
GD=.C('GodambeMat',as.double(mm),as.integer(initparam$bivariate),as.double(initparam$coordx),as.double(initparam$coordy),#
      as.double(initparam$coordt),as.integer(initparam$corrmodel), as.double(initparam$data),as.integer(initparam$distance),as.double(eps),#
      as.integer(initparam$flagcorr), as.integer(initparam$flagnuis),as.integer(grid),as.integer(initparam$likelihood),#
      as.double(c(X%*%mm)),as.integer(initparam$model),as.double(initparam$n),as.integer(num_betas),#
      as.integer(initparam$numparam),as.integer(initparam$numparamcorr),as.integer(length(paramcorr)),as.double(paramcorr),as.double(nuisance),#
      score=score,sensmat=sensmat,as.integer(initparam$spacetime),as.integer(initparam$type),#
      varimat=varimat,as.integer(initparam$vartype),as.double(initparam$winconst),as.double(initparam$winstp),as.double(initparam$winconst_t),as.double(initparam$winstp_t),#
      as.integer(initparam$weighted),c(t(X)),ns=as.integer(initparam$ns),NS=as.integer(NS),PACKAGE='GeoModels',DUP=TRUE,NAOK=TRUE)#
# str(GD)#
GD$score;GD$sensmat;GD$varimat
#================================= Comp_Pair_SkewGauss_st2#
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="Gaussian";shape=4;n=1#
set.seed(112)#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,9)# con 9 funciona,  con 8 explota#
coordx_dyn=list()#
#
maxN=15#130#
for(k in 1:length(coordt))#
{#
  NN=sample(1:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
# coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 0.1#
sill <- 1#
nugget <- 0#
scale_s <- .3#
scale_t <- .3#
skew <- -0.5#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget, sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,mean = mean )#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxtime=1;maxdist=0.3#
fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
               corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,model = model,varest = TRUE)#
print(fit1)#
fit1$param
start
library(GeoModels)#
#
rm(list = ls())#
# Define the spatial-coordinates of the points:#
# set.seed(6)#
# set.seed(5)#
N=500  # number of location sites#
x <- runif(N, 0, 1)#
# set.seed(5)#
y <- runif(N, 0, 1)#
coords <- cbind(x,y)#
#
# Define spatial matrix covariates#
X=cbind(rep(1,N),runif(N))#
#
# Set the covariance model's parameters:#
corrmodel <- "Exp"#
model <- "SkewGaussian"#
NuisParam(model,FALSE,1)#
CorrParam(corrmodel)#
mean <- 0#
mean1 <- -0.5#
sill <- 1#
nugget <- 0#
scale <- 2/3#
skew <- 1.5#
param<-list(mean=mean,mean1=mean1,sill=sill,nugget=nugget,scale=scale, skew = skew)#
#
# Simulation of the spatial Gaussian RF:#
set.seed(7)#
data <- GeoSim(coordx=coords,corrmodel=corrmodel, param=param,X=X,model = model)$data#
# data = rnorm(nrow(coords))#
# Fixed parameters#
fixed<-list(nugget=nugget,sill=sill,skew = skew)#
# Starting value for the estimated parameters#
start<-list(mean=mean,mean1=mean1,scale=scale)#
#
# CPUtime = proc.time()#
fit1 <- GeoFit(data=data,coordx=coords,corrmodel=corrmodel,#
               maxdist=0.1,likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,X=X, model = model,varest = TRUE)#
# CPUtime = proc.time()-CPUtime;CPUtime#
print(fit1)
library(GeoModels)#
#
rm(list = ls())#
# Define the spatial-coordinates of the points:#
# set.seed(6)#
# set.seed(5)#
N=500  # number of location sites#
x <- runif(N, 0, 1)#
# set.seed(5)#
y <- runif(N, 0, 1)#
coords <- cbind(x,y)#
#
# Define spatial matrix covariates#
X=cbind(rep(1,N),runif(N))#
#
# Set the covariance model's parameters:#
corrmodel <- "Exp"#
model <- "Gaussian"#
NuisParam(model,FALSE,1)#
CorrParam(corrmodel)#
mean <- 0#
mean1 <- -0.5#
sill <- 1#
nugget <- 0#
scale <- 2/3#
skew <- 1.5#
param<-list(mean=mean,mean1=mean1,sill=sill,nugget=nugget,scale=scale)#
#
# Simulation of the spatial Gaussian RF:#
set.seed(7)#
data <- GeoSim(coordx=coords,corrmodel=corrmodel, param=param,X=X,model = model)$data#
# data = rnorm(nrow(coords))#
# Fixed parameters#
fixed<-list(nugget=nugget,sill=sill)#
# Starting value for the estimated parameters#
start<-list(mean=mean,mean1=mean1,scale=scale)#
#
# CPUtime = proc.time()#
fit1 <- GeoFit(data=data,coordx=coords,corrmodel=corrmodel,#
               maxdist=0.1,likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,X=X, model = model,varest = TRUE)#
# CPUtime = proc.time()-CPUtime;CPUtime#
print(fit1)
#================================= Comp_Pair_SkewGauss_st2#
rm(list=ls())#
library(GeoModels)#
library(fields)#
library(spam)#
#
model="Gaussian";shape=4;n=1#
set.seed(112)#
#
# Define the spatial-coordinates of the points:#
coordt=seq(0,9)# con 9 funciona,  con 8 explota#
coordx_dyn=list()#
#
maxN=130#130#
for(k in 1:length(coordt))#
{#
  NN=sample(1:maxN,size=1)#
  print(NN)#
  x <- runif(NN, 0, 1)#
  y <- runif(NN, 0, 1)#
  coordx_dyn[[k]]=cbind(x,y)#
}#
# coordx_dyn#
#
############################
#
# Set the covariance model's parameters:#
corrmodel <- "exp_exp"#
CorrParam(corrmodel)#
NuisParam(model,FALSE,1)#
mean <- 0.1#
sill <- 1#
nugget <- 0#
scale_s <- .3#
scale_t <- .3#
skew <- -0.5#
param<-list(mean=mean, sill=sill,nugget=nugget,scale_s=scale_s,scale_t=scale_t)#
#
ns=NULL#
coords=NULL#
for(k in 1:length(coordt)) {#
  ns=c(ns,nrow(coordx_dyn[[k]]))#
  coords=rbind(coords,coordx_dyn[[k]])#
}#
fixed<-list(nugget=nugget, sill = sill)#
# Starting value for the estimated parameters#
start<-list(scale_s=scale_s,scale_t=scale_t,mean = mean )#
set.seed(2)#
ss1 <- GeoSim(coordx_dyn=coordx_dyn, coordt=coordt, corrmodel=corrmodel,model=model,#
              param=param)$data#
#
maxtime=1;maxdist=0.3#
fit1 <- GeoFit(data=ss1,coordx_dyn=coordx_dyn,coordt=coordt,#
               corrmodel=corrmodel,maxtime=maxtime,maxdist=maxdist,#
               likelihood="Marginal",type="Pairwise",#
               start=start,fixed=fixed,model = model,varest = TRUE)#
print(fit1)#
fit1$param
############################################
rm(list=ls())#
########################R package########################
#
require(CompRandFld)#
require(MCMCpack)#
require(STBEU)#
# dir <- "~/Documents/UV/Tesis/OpenCL/Task20BinaryFinal/eu_like"#
# setwd(dir)#
# source("euclidean_cl_st_ocl.R")#
# try(system("R CMD SHLIB euc_like_cl_st_Open.c")) #
# dyn.load("euc_like_cl_st_Open.so")#
#
# .C("DeviceInfo")#
# .C("create_binary_kernel", as.integer(0),as.character("DouExp.cl")) #dev must be 0 or two (double precision)#
# .C("create_binary_kernel", as.integer(0),as.character("Gneiting.cl")) #dev must be 0 or two (double precision)#
#
####location sites #########################################
lambda=8#
xx=seq(-lambda,lambda);#
coords=as.matrix(expand.grid(xx,xx))   ###regular#
nrow(coords)#
# plot(coords)#
#set.seed(15)                                                                      ### not regular#
#pp<-runifpoint(4*(lambda)^2, win=owin(c(-lambda,lambda),c(-lambda,lambda)))       ### not regular#
#coords<-cbind(pp$x,pp$y)  #
### not regular#
####temporal instants #########################################
times=seq(1,5,1)#
type_dist=1                ### type of distance     1=euclidean 2=chordal  3=geodesic #
maxdist=2#
maxtime=2#
###################################################################
###################################################################
model=1  #   1=double exponential       2 =gneiting#
#
if (model == 1) {#
  # exponential model#
  cov.model <-"exp_exp"#
  cc=1#
  ######
  mean=0#
  nugget=0#
  scale_s<-3/3#
  scale_t<-3/3#
  sill=1#
  param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill)  #
  fixed=list(nugget=0)#
  fix=nugget#
}#
if (model == 2) {#
  # gneiting model#
  cov.model <-"gneiting"#
  cc=2#
  ######
  mean=0#
  nugget=0#
  scale_s<-3/3#
  scale_t<-3/20#
  sill=1#
  power_s=1;power_t=1;sep=0.5#
  param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill,#
             power_s=power_s,power_t=power_t,sep=sep)  #
  fixed=list(nugget=0,power_s=power_s,power_t=power_t,sep=sep)   #
  fix=c(nugget, power_s, power_t,sep) #
}#
###################################################################
###################################################################
###################################################################
set.seed(276)#
#####################################################################################################      #
# Simulation of the  Gaussian random field:#
data <- RFsim(coordx=coords,coordt=times,corrmodel=cov.model, param=param)$data#
#####################################################################################################      #
##################################################################################################### #
mm=mean(c(data))#
vv=var(c(data))#
###### Composite likelihood based on pairs estimation ###############################################     #
#
start=list(mean=mm,scale_s=scale_s,scale_t=scale_t,sill=vv)#
#
# Maximum composite-likelihood fitting of the random field:#
fit <- FitComposite(data=data,coordx=coords,coordt=times,#
                    corrmodel=cov.model,maxtime=maxtime,maxdist=maxdist,#
                    likelihood="Marginal",type="Pairwise",#
                    start=start,fixed=fixed,weighted=T)#
#
# Results:#
print(fit$param)#
#################################################
#   parameters for the subsampling #####
################################################
coordx=coords[,1]#
coordy=coords[,2]#
LX=abs(range(coordx)[1]-range(coordx)[2])#
LY=abs(range(coordy)[1]-range(coordy)[2])#
lato_fin=3  #changing window size#
lx=lato_fin          #lunghezza lato x quadrato subfinestra#
ly=lato_fin          #lunghezza lato y quadrato subfinestra#
winc=c(lx/sqrt(LX),ly/sqrt(LY))#
winstp= 1###   1/lato_fin complete overlapping in space  1 "no" overlapping in space#
################################################
winc_t=4   ###  length of temporal window#
winstp_t=1 ###   0.5 half overlapping  1 "no" overlapping#
################################################
#####################################################################################################      #
theta=c(mm,vv,scale_s,scale_t)                #starting value  #
weighted=1                                          #weigthed version  1=yes 0=no#
### eucliden likelihood ################ #
type_subs=3   ### type of subsampling  1=in space    2= in time  3 =spacetime#
res=STBEUFit(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,winc_t,winstp_t,type_subs,weighted)#
eu_par=c(res$par[1],res$par[3],res$par[4],res$par[2])#
names(eu_par)=names(fit$param)#
print(eu_par)#
### OpenCL eucliden likelihood ################ #
local <- c(1,1)#
GPU <- 0#
res1=STBEUFit_ocl(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,winc_t,winstp_t,type_subs,weighted, local = local, GPU = GPU)#
eu_par1=c(res1$par[1],res1$par[3],res1$par[4],res1$par[2])#
names(eu_par1)=names(fit$param)#
print(eu_par1)
library(STBEU)
DevOpenCL()
library(STBEU)
DevOpenCL()
############################################
rm(list=ls())#
########################R package########################
#
require(CompRandFld)#
require(MCMCpack)#
require(STBEU)#
# dir <- "~/Documents/UV/Tesis/OpenCL/Task20BinaryFinal/eu_like"#
# setwd(dir)#
# source("euclidean_cl_st_ocl.R")#
# try(system("R CMD SHLIB euc_like_cl_st_Open.c")) #
# dyn.load("euc_like_cl_st_Open.so")#
#
# .C("DeviceInfo")#
# .C("create_binary_kernel", as.integer(0),as.character("DouExp.cl")) #dev must be 0 or two (double precision)#
# .C("create_binary_kernel", as.integer(0),as.character("Gneiting.cl")) #dev must be 0 or two (double precision)#
#
####location sites #########################################
lambda=8#
xx=seq(-lambda,lambda);#
coords=as.matrix(expand.grid(xx,xx))   ###regular#
nrow(coords)#
# plot(coords)#
#set.seed(15)                                                                      ### not regular#
#pp<-runifpoint(4*(lambda)^2, win=owin(c(-lambda,lambda),c(-lambda,lambda)))       ### not regular#
#coords<-cbind(pp$x,pp$y)  #
### not regular#
####temporal instants #########################################
times=seq(1,5,1)#
type_dist=1                ### type of distance     1=euclidean 2=chordal  3=geodesic #
maxdist=2#
maxtime=2#
###################################################################
###################################################################
model=1  #   1=double exponential       2 =gneiting#
#
if (model == 1) {#
  # exponential model#
  cov.model <-"exp_exp"#
  cc=1#
  ######
  mean=0#
  nugget=0#
  scale_s<-3/3#
  scale_t<-3/3#
  sill=1#
  param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill)  #
  fixed=list(nugget=0)#
  fix=nugget#
}#
if (model == 2) {#
  # gneiting model#
  cov.model <-"gneiting"#
  cc=2#
  ######
  mean=0#
  nugget=0#
  scale_s<-3/3#
  scale_t<-3/20#
  sill=1#
  power_s=1;power_t=1;sep=0.5#
  param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill,#
             power_s=power_s,power_t=power_t,sep=sep)  #
  fixed=list(nugget=0,power_s=power_s,power_t=power_t,sep=sep)   #
  fix=c(nugget, power_s, power_t,sep) #
}#
###################################################################
###################################################################
###################################################################
set.seed(276)#
#####################################################################################################      #
# Simulation of the  Gaussian random field:#
data <- RFsim(coordx=coords,coordt=times,corrmodel=cov.model, param=param)$data#
#####################################################################################################      #
##################################################################################################### #
mm=mean(c(data))#
vv=var(c(data))#
###### Composite likelihood based on pairs estimation ###############################################     #
#
start=list(mean=mm,scale_s=scale_s,scale_t=scale_t,sill=vv)#
#
# Maximum composite-likelihood fitting of the random field:#
fit <- FitComposite(data=data,coordx=coords,coordt=times,#
                    corrmodel=cov.model,maxtime=maxtime,maxdist=maxdist,#
                    likelihood="Marginal",type="Pairwise",#
                    start=start,fixed=fixed,weighted=T)#
#
# Results:#
print(fit$param)#
#################################################
#   parameters for the subsampling #####
################################################
coordx=coords[,1]#
coordy=coords[,2]#
LX=abs(range(coordx)[1]-range(coordx)[2])#
LY=abs(range(coordy)[1]-range(coordy)[2])#
lato_fin=3  #changing window size#
lx=lato_fin          #lunghezza lato x quadrato subfinestra#
ly=lato_fin          #lunghezza lato y quadrato subfinestra#
winc=c(lx/sqrt(LX),ly/sqrt(LY))#
winstp= 1###   1/lato_fin complete overlapping in space  1 "no" overlapping in space#
################################################
winc_t=4   ###  length of temporal window#
winstp_t=1 ###   0.5 half overlapping  1 "no" overlapping#
################################################
#####################################################################################################      #
theta=c(mm,vv,scale_s,scale_t)                #starting value  #
weighted=1                                          #weigthed version  1=yes 0=no#
### eucliden likelihood ################ #
type_subs=3   ### type of subsampling  1=in space    2= in time  3 =spacetime#
res=STBEUFit(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,winc_t,winstp_t,type_subs,weighted)#
eu_par=c(res$par[1],res$par[3],res$par[4],res$par[2])#
names(eu_par)=names(fit$param)#
print(eu_par)#
### OpenCL eucliden likelihood ################ #
local <- c(1,1)#
GPU <- 0#
res1=STBEUFit_ocl(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,winc_t,winstp_t,type_subs,weighted, local = local, GPU = GPU)#
eu_par1=c(res1$par[1],res1$par[3],res1$par[4],res1$par[2])#
names(eu_par1)=names(fit$param)#
print(eu_par1)
library(STBEU)
DevOpenCL()
16*16
32*8
64*64
32*32
############################################
rm(list=ls())#
########################R package########################
#
require(CompRandFld)#
require(MCMCpack)#
require(STBEU)#
# dir <- "~/Documents/UV/Tesis/OpenCL/Task20BinaryFinal/eu_like"#
# setwd(dir)#
# source("euclidean_cl_st_ocl.R")#
# try(system("R CMD SHLIB euc_like_cl_st_Open.c"))#
# dyn.load("euc_like_cl_st_Open.so")#
# .C("create_binary_kernel", as.integer(0),as.character("DouExp.cl")) #dev must be 0 or two (double precision)#
####location sites #########################################
lambda=8#
xx=seq(-lambda,lambda);#
coords=as.matrix(expand.grid(xx,xx))   ###regular#
nrow(coords)#
# plot(coords)#
#set.seed(15)                                                                      ### not regular#
#pp<-runifpoint(4*(lambda)^2, win=owin(c(-lambda,lambda),c(-lambda,lambda)))       ### not regular#
#coords<-cbind(pp$x,pp$y)  #
                                                        ### not regular#
####temporal instants #########################################
times=seq(1,5,1)#
type_dist=1                ### type of distance     1=euclidean 2=chordal  3=geodesic #
maxdist=2#
maxtime=2#
###################################################################
###################################################################
model=1  #   1=double exponential       2 =gneiting#
#
if (model == 1) {#
     # exponential model#
     cov.model <-"exp_exp"#
     cc=1#
     ######
     mean=0#
     nugget=0#
     scale_s<-3/3#
     scale_t<-3/3#
     sill=1#
     param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill)  #
     fixed=list(nugget=0)#
     fix=nugget#
   }#
if (model == 2) {#
     # gneiting model#
     cov.model <-"gneiting"#
     cc=2#
     ######
     mean=0#
     nugget=0#
     scale_s<-3/3#
     scale_t<-3/20#
     sill=1#
     power_s=1;power_t=1;sep=0.5#
     param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill,#
                power_s=power_s,power_t=power_t,sep=sep)  #
     fixed=list(nugget=0,power_s=power_s,power_t=power_t,sep=sep)   #
     fix=c(nugget, power_s, power_t,sep) #
}#
###################################################################
###################################################################
###################################################################
set.seed(276)#
#####################################################################################################      #
# Simulation of the  Gaussian random field:#
data <- RFsim(coordx=coords,coordt=times,corrmodel=cov.model, param=param)$data#
#####################################################################################################      #
##################################################################################################### #
mm=mean(c(data))#
vv=var(c(data))#
###### Composite likelihood based on pairs estimation ###############################################     #
#
start=list(mean=mm,scale_s=scale_s,scale_t=scale_t,sill=vv)#
#
# Maximum composite-likelihood fitting of the random field:#
fit <- FitComposite(data=data,coordx=coords,coordt=times,#
                    corrmodel=cov.model,maxtime=maxtime,maxdist=maxdist,#
                    likelihood="Marginal",type="Pairwise",#
                    start=start,fixed=fixed,weighted=T)#
#
# Results:#
print(fit$param)#
#################################################
#   parameters for the subsampling #####
################################################
coordx=coords[,1]#
coordy=coords[,2]#
LX=abs(range(coordx)[1]-range(coordx)[2])#
LY=abs(range(coordy)[1]-range(coordy)[2])#
lato_fin=3  #changing window size#
lx=lato_fin          #lunghezza lato x quadrato subfinestra#
ly=lato_fin          #lunghezza lato y quadrato subfinestra#
winc=c(lx/sqrt(LX),ly/sqrt(LY))#
winstp= 1###   1/lato_fin complete overlapping in space  1 "no" overlapping in space#
################################################
winc_t=4   ###  length of temporal window#
winstp_t=1 ###   0.5 half overlapping  1 "no" overlapping#
################################################
#####################################################################################################      #
theta=c(mm,vv,scale_s,scale_t)                #starting value  #
weighted=1                                          #weigthed version  1=yes 0=no#
### eucliden likelihood ################ #
type_subs=3   ### type of subsampling  1=in space    2= in time  3 =spacetime#
tCPU = proc.time()#
res=STBEUFit(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,winc_t,winstp_t,type_subs,weighted)#
tCPU = proc.time()-tCPU;tCPU#
eu_par=c(res$par[1],res$par[3],res$par[4],res$par[2])#
names(eu_par)=names(fit$param)#
print(eu_par)#
### OpenCL eucliden likelihood ################ #
local <- c(1,1)#
GPU <- 0#
tGPU = proc.time()#
res1=STBEUFit_ocl(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,winc_t,winstp_t,type_subs,weighted, local = local, GPU = GPU)#
tGPU = proc.time()-tGPU;tGPU#
eu_par1=c(res1$par[1],res1$par[3],res1$par[4],res1$par[2])#
names(eu_par1)=names(fit$param)#
print(eu_par1)#
tCPU;tGPU
#################################***GNETING***####################################### #
rm(list=ls())#
########################R package########################
#
require(CompRandFld)#
require(MCMCpack)#
require(STBEU)#
# dir <- "~/Documents/UV/Tesis/OpenCL/Task20BinaryFinal/eu_like"#
# setwd(dir)#
# source("euclidean_cl_st_ocl.R")#
# try(system("R CMD SHLIB euc_like_cl_st_Open.c"))#
# dyn.load("euc_like_cl_st_Open.so")#
# .C("create_binary_kernel", as.integer(0),as.character("Gneiting.cl")) #dev must be 0 or two (double precision)#
#
####location sites #########################################
lambda=8#
xx=seq(-lambda,lambda);#
coords=as.matrix(expand.grid(xx,xx))   ###regular#
nrow(coords)#
# plot(coords)#
#set.seed(15)                                                                      ### not regular#
#pp<-runifpoint(4*(lambda)^2, win=owin(c(-lambda,lambda),c(-lambda,lambda)))       ### not regular#
#coords<-cbind(pp$x,pp$y)  #
### not regular#
####temporal instants #########################################
times=seq(1,5,1)#
type_dist=1                ### type of distance     1=euclidean 2=chordal  3=geodesic #
maxdist=2#
maxtime=2#
###################################################################
###################################################################
model=2  #   1=double exponential       2 =gneiting#
#
if (model == 1) {#
  # exponential model#
  cov.model <-"exp_exp"#
  cc=1#
  ######
  mean=0#
  nugget=0#
  scale_s<-3/3#
  scale_t<-3/3#
  sill=1#
  param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill)  #
  fixed=list(nugget=0)#
  fix=nugget#
}#
if (model == 2) {#
  # gneiting model#
  cov.model <-"gneiting"#
  cc=2#
  ######
  mean=0#
  nugget=0#
  scale_s<-3/3#
  scale_t<-3/20#
  sill=1#
  power_s=1;power_t=1;sep=0.5#
  param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill,#
             power_s=power_s,power_t=power_t,sep=sep)  #
  fixed=list(nugget=0,power_s=power_s,power_t=power_t,sep=sep)   #
  fix=c(nugget, power_s, power_t,sep) #
}#
###################################################################
###################################################################
###################################################################
set.seed(276)#
#####################################################################################################      #
# Simulation of the  Gaussian random field:#
data <- RFsim(coordx=coords,coordt=times,corrmodel=cov.model, param=param)$data#
#####################################################################################################      #
##################################################################################################### #
mm=mean(c(data))#
vv=var(c(data))#
###### Composite likelihood based on pairs estimation ###############################################     #
#
start=list(mean=mm,scale_s=scale_s,scale_t=scale_t,sill=vv)#
#
# Maximum composite-likelihood fitting of the random field:#
fit <- FitComposite(data=data,coordx=coords,coordt=times,#
                    corrmodel=cov.model,maxtime=maxtime,maxdist=maxdist,#
                    likelihood="Marginal",type="Pairwise",#
                    start=start,fixed=fixed,weighted=T)#
#
# Results:#
print(fit$param)#
#################################################
#   parameters for the subsampling #####
################################################
coordx=coords[,1]#
coordy=coords[,2]#
LX=abs(range(coordx)[1]-range(coordx)[2])#
LY=abs(range(coordy)[1]-range(coordy)[2])#
lato_fin=3  #changing window size#
lx=lato_fin          #lunghezza lato x quadrato subfinestra#
ly=lato_fin          #lunghezza lato y quadrato subfinestra#
winc=c(lx/sqrt(LX),ly/sqrt(LY))#
winstp= 1###   1/lato_fin complete overlapping in space  1 "no" overlapping in space#
################################################
winc_t=4   ###  length of temporal window#
winstp_t=1 ###   0.5 half overlapping  1 "no" overlapping#
################################################
#####################################################################################################      #
theta=c(mm,vv,scale_s,scale_t)                #starting value  #
weighted=0                                          #weigthed version  1=yes 0=no#
### eucliden likelihood ################ #
type_subs=3   ### type of subsampling  1=in space    2= in time  3 =spacetime#
tCPU = proc.time()#
res=STBEUFit(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,winc_t,winstp_t,type_subs,weighted)#
tCPU = proc.time()-tCPU;tCPU#
eu_par=c(res$par[1],res$par[3],res$par[4],res$par[2])#
names(eu_par)=names(fit$param)#
print(eu_par)#
### OpenCL eucliden likelihood ################ #
local <- c(1,1)#
GPU <- 0#
tGPU = proc.time()#
res1=STBEUFit_ocl(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,winc_t,winstp_t,type_subs,weighted, local = local, GPU = GPU)#
tGPU = proc.time()-tGPU;tGPU#
eu_par1=c(res1$par[1],res1$par[3],res1$par[4],res1$par[2])#
names(eu_par1)=names(fit$param)#
print(eu_par1)#
tCPU;tGPU
############################################
rm(list=ls())#
########################R package########################
require(CompRandFld)#
require(MCMCpack)#
require(STBEU)#
# dir <- "~/Documents/UV/Tesis/OpenCL/Task20BinaryFinal/eu_like"#
# setwd(dir)#
# source("euclidean_cl_st_ocl.R")#
# try(system("R CMD SHLIB euc_like_cl_st_Open.c")) #
# dyn.load("euc_like_cl_st_Open.so")#
####location sites #########################################
lambda=5#
xx=seq(-lambda,lambda);#
coords=as.matrix(expand.grid(xx,xx))   ###regular#
nrow(coords)#
plot(coords)#
#set.seed(15)                                                                      ### not regular#
#pp<-runifpoint(4*(lambda)^2, win=owin(c(-lambda,lambda),c(-lambda,lambda)))       ### not regular#
#coords<-cbind(pp$x,pp$y)  #
                                                        ### not regular#
####temporal instants #########################################
times=seq(1,5,1)#
###################################################################
type_dist=1                ### type of distance     1=euclidean 2=chordal  3=geodesic #
#
maxdist=2                  ## compact support in weights function for pairwise liklihood#
maxtime=2#
#
model=1  #   1=double exponential       2 =gneiting#
#
if (model == 1) {#
     # exponential model#
     cov.model <-"exp_exp"#
     cc=1#
     ######
     mean=0#
     nugget=0#
     scale_s<-3/3#
     scale_t<-3/3#
     sill=1#
     param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill)  #
     fixed=list(nugget=0)#
     fix=nugget#
   }#
if (model == 2) {#
     # gneiting model#
     cov.model <-"gneiting"#
     cc=2#
     ######
     mean=0#
     nugget=0#
     scale_s<-3/3#
     scale_t<-3/20#
     sill=1#
     power_s=1;power_t=1;sep=0.5#
     param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill,#
                power_s=power_s,power_t=power_t,sep=sep)  #
     fixed=list(nugget=0,power_s=power_s,power_t=power_t,sep=sep)  #
     fix=c(nugget, power_s, power_t,sep) #
}#
###################################################################
#
set.seed(276)#
#####################################################################################################      #
# Simulation of the spatial Gaussian random field:#
data <- RFsim(coordx=coords,coordt=times,corrmodel=cov.model, param=param)$data#
mm=mean(c(data))#
vv=var(c(data))#
#####################################################################################################      #
##################################################################################################### #
#
###### Composite likelihood based on pairs estimation ###############################################     #
start=list(mean=mm,scale_s=scale_s,scale_t=scale_t,sill=vv)#
# Maximum composite-likelihood fitting of the random field:#
fit <- FitComposite(data=data,coordx=coords,coordt=times,#
                    corrmodel=cov.model,maxtime=maxtime,maxdist=maxdist,#
                    likelihood="Marginal",type="Pairwise",#
                    start=start,fixed=fixed,weighted=T)#
# Results:#
print(fit$param)#
start#
#################################################
#   parameters for the subsampling #####
################################################
coordx=coords[,1]#
coordy=coords[,2]#
LX=abs(range(coordx)[1]-range(coordx)[2])#
LY=abs(range(coordy)[1]-range(coordy)[2])#
lato_fin=3  #changing window size#
lx=lato_fin          #lunghezza lato x quadrato subfinestra#
ly=lato_fin          #lunghezza lato y quadrato subfinestra#
winc=c(lx/sqrt(LX),ly/sqrt(LY))#
winstp= 1  ###   1/lato_fin complete overlapping   1 "no" overlapping#
################################################
#####################################################################################################      #
theta=c(mm,vv,scale_s,scale_t)                #starting value  #
#
weighted=0#
### eucliden likelihood ################ #
type_subs=1    ### type of subsampling  1=in space    2= in time#
tCPU = proc.time()#
res=STBEUFit(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,0,0,type_subs,weighted)#
tCPU = proc.time()-tCPU;tCPU#
eu_par=c(res$par[1],res$par[3],res$par[4],res$par[2])#
names(eu_par)=names(fit$param)#
print(eu_par)#
### OpenCL eucliden likelihood ################ #
local <- c(1,1)#
GPU <- 0#
tGPU = proc.time()#
res1=STBEUFit_ocl(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,0,0,type_subs,weighted, local=local, GPU = GPU)#
tGPU = proc.time()-tGPU;tGPU#
eu_par1=c(res1$par[1],res1$par[3],res1$par[4],res1$par[2])#
names(eu_par1)=names(fit$param)#
print(eu_par1)#
tCPU;tGPU
############################################
rm(list=ls())#
########################R package########################
require(CompRandFld)#
require(MCMCpack)#
require(STBEU)#
# dir <- "~/Documents/UV/Tesis/OpenCL/Task20BinaryFinal/eu_like"#
# setwd(dir)#
# source("euclidean_cl_st_ocl.R")#
# try(system("R CMD SHLIB euc_like_cl_st_Open.c")) #
# dyn.load("euc_like_cl_st_Open.so")#
####location sites #########################################
lambda=8#
xx=seq(-lambda,lambda);#
coords=as.matrix(expand.grid(xx,xx))   ###regular#
nrow(coords)#
# plot(coords)#
#set.seed(15)                                                                      ### not regular#
#pp<-runifpoint(4*(lambda)^2, win=owin(c(-lambda,lambda),c(-lambda,lambda)))       ### not regular#
#coords<-cbind(pp$x,pp$y)  #
                                                        ### not regular#
####temporal instants #########################################
times=seq(1,5,1)#
###################################################################
type_dist=1                ### type of distance     1=euclidean 2=chordal  3=geodesic #
#
maxdist=2                  ## compact support in weights function for pairwise liklihood#
maxtime=2#
#
model=1  #   1=double exponential       2 =gneiting#
#
if (model == 1) {#
     # exponential model#
     cov.model <-"exp_exp"#
     cc=1#
     ######
     mean=0#
     nugget=0#
     scale_s<-3/3#
     scale_t<-3/3#
     sill=1#
     param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill)  #
     fixed=list(nugget=0)#
     fix=nugget#
   }#
if (model == 2) {#
     # gneiting model#
     cov.model <-"gneiting"#
     cc=2#
     ######
     mean=0#
     nugget=0#
     scale_s<-3/3#
     scale_t<-3/20#
     sill=1#
     power_s=1;power_t=1;sep=0.5#
     param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill,#
                power_s=power_s,power_t=power_t,sep=sep)  #
     fixed=list(nugget=0,power_s=power_s,power_t=power_t,sep=sep)  #
     fix=c(nugget, power_s, power_t,sep) #
}#
###################################################################
#
set.seed(276)#
#####################################################################################################      #
# Simulation of the spatial Gaussian random field:#
data <- RFsim(coordx=coords,coordt=times,corrmodel=cov.model, param=param)$data#
mm=mean(c(data))#
vv=var(c(data))#
#####################################################################################################      #
##################################################################################################### #
#
###### Composite likelihood based on pairs estimation ###############################################     #
start=list(mean=mm,scale_s=scale_s,scale_t=scale_t,sill=vv)#
# Maximum composite-likelihood fitting of the random field:#
fit <- FitComposite(data=data,coordx=coords,coordt=times,#
                    corrmodel=cov.model,maxtime=maxtime,maxdist=maxdist,#
                    likelihood="Marginal",type="Pairwise",#
                    start=start,fixed=fixed,weighted=T)#
# Results:#
print(fit$param)#
start#
#################################################
#   parameters for the subsampling #####
################################################
coordx=coords[,1]#
coordy=coords[,2]#
LX=abs(range(coordx)[1]-range(coordx)[2])#
LY=abs(range(coordy)[1]-range(coordy)[2])#
lato_fin=3  #changing window size#
lx=lato_fin          #lunghezza lato x quadrato subfinestra#
ly=lato_fin          #lunghezza lato y quadrato subfinestra#
winc=c(lx/sqrt(LX),ly/sqrt(LY))#
winstp= 1  ###   1/lato_fin complete overlapping   1 "no" overlapping#
################################################
#####################################################################################################      #
theta=c(mm,vv,scale_s,scale_t)                #starting value  #
#
weighted=0#
### eucliden likelihood ################ #
type_subs=1    ### type of subsampling  1=in space    2= in time#
tCPU = proc.time()#
res=STBEUFit(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,0,0,type_subs,weighted)#
tCPU = proc.time()-tCPU;tCPU#
eu_par=c(res$par[1],res$par[3],res$par[4],res$par[2])#
names(eu_par)=names(fit$param)#
print(eu_par)#
### OpenCL eucliden likelihood ################ #
local <- c(1,1)#
GPU <- 0#
tGPU = proc.time()#
res1=STBEUFit_ocl(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,0,0,type_subs,weighted, local=local, GPU = GPU)#
tGPU = proc.time()-tGPU;tGPU#
eu_par1=c(res1$par[1],res1$par[3],res1$par[4],res1$par[2])#
names(eu_par1)=names(fit$param)#
print(eu_par1)#
tCPU;tGPU#
# dyn.unload("euc_like_cl_st.so")#
# setup=setting_param(cc,theta,fix)#
# ncoords=nrow(coords);ntime=length(times)#
# npts = ncoords#
# coordt = times#
# cormod = model#
# parcor = setup$parcor#
# flagcor = setup$flagcor#
# flagnuis = setup$flagnuis#
# # flagnuis = c(1,0,1)#
# npar = setup$npar#
# nuis = setup$nuis#
# weigthed = 0#
# mom_cond = ww = grad = rep(0,npar)#
# gradcor = rep(0,setup$nparc)#
# ntime*ncoords#
# local = c(16,16)#number of local work items. This n#
# ntime*ncoords#
# ntime*ncoords/local#
# dev = 2 # device 0 is CPU (8cores) 1 is Iris Pro and 2 is AMD#
# # if(dev==0 & local>2^10){local = 2^10}#
# # if(dev==1 & local>2^9){local = 2^9}#
# # if(dev==2 & local>2^8){local = 2^8}#
# #
# tCPU = proc.time()#
# p = .C("scalar_space",as.integer(npts), as.integer(ntime),#
#        as.double(coordt), as.double(maxtime),as.double(maxdist),#
#        as.integer(cormod), as.double(parcor),as.integer(flagcor),as.integer(flagnuis),#
#        as.integer(npar),as.double(nuis),as.double(data),as.integer(weigthed),#
#        mom_cond = as.double(mom_cond), as.integer(type_dist), as.double(coordx),#
#        as.double(coordy),as.double(gradcor),as.double(grad), ww= as.double(ww))#
# tCPU = proc.time()-tCPU;tCPU#
# p$mom_cond#
# #
# tGPU = proc.time()#GneitingOCL#
# p1 =.C("DoubleExpOCL",as.integer(npts), as.integer(ntime),#
#        as.double(coordt), as.double(maxtime),as.double(maxdist),#
#        as.integer(cormod), as.double(parcor),as.integer(flagcor),as.integer(flagnuis),#
#        as.integer(npar),as.double(nuis),as.double(data),as.integer(weigthed),#
#        mom_cond = as.double(mom_cond), as.integer(type_dist), as.double(coordx),#
#        as.double(coordy),as.double(gradcor),as.double(grad), ww= as.double(ww),#
#        local = as.integer(local), dev = as.integer(dev))#
# tGPU = proc.time()-tGPU;tGPU#
# p1$mom_cond
############################################
rm(list=ls())#
########################R package########################
require(CompRandFld)#
require(MCMCpack)#
require(STBEU)#
# dir <- "~/Documents/UV/Tesis/OpenCL/Task20BinaryFinal/eu_like"#
# setwd(dir)#
# source("euclidean_cl_st_ocl.R")#
# try(system("R CMD SHLIB euc_like_cl_st_Open.c")) #
# dyn.load("euc_like_cl_st_Open.so")#
####location sites #########################################
lambda=15#
xx=seq(-lambda,lambda);#
coords=as.matrix(expand.grid(xx,xx))   ###regular#
nrow(coords)#
# plot(coords)#
#set.seed(15)                                                                      ### not regular#
#pp<-runifpoint(4*(lambda)^2, win=owin(c(-lambda,lambda),c(-lambda,lambda)))       ### not regular#
#coords<-cbind(pp$x,pp$y)  #
                                                        ### not regular#
####temporal instants #########################################
times=seq(1,5,1)#
###################################################################
type_dist=1                ### type of distance     1=euclidean 2=chordal  3=geodesic #
#
maxdist=2                  ## compact support in weights function for pairwise liklihood#
maxtime=2#
#
model=1  #   1=double exponential       2 =gneiting#
#
if (model == 1) {#
     # exponential model#
     cov.model <-"exp_exp"#
     cc=1#
     ######
     mean=0#
     nugget=0#
     scale_s<-3/3#
     scale_t<-3/3#
     sill=1#
     param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill)  #
     fixed=list(nugget=0)#
     fix=nugget#
   }#
if (model == 2) {#
     # gneiting model#
     cov.model <-"gneiting"#
     cc=2#
     ######
     mean=0#
     nugget=0#
     scale_s<-3/3#
     scale_t<-3/20#
     sill=1#
     power_s=1;power_t=1;sep=0.5#
     param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill,#
                power_s=power_s,power_t=power_t,sep=sep)  #
     fixed=list(nugget=0,power_s=power_s,power_t=power_t,sep=sep)  #
     fix=c(nugget, power_s, power_t,sep) #
}#
###################################################################
#
set.seed(276)#
#####################################################################################################      #
# Simulation of the spatial Gaussian random field:#
data <- RFsim(coordx=coords,coordt=times,corrmodel=cov.model, param=param)$data#
mm=mean(c(data))#
vv=var(c(data))#
#####################################################################################################      #
##################################################################################################### #
#
###### Composite likelihood based on pairs estimation ###############################################     #
start=list(mean=mm,scale_s=scale_s,scale_t=scale_t,sill=vv)#
# Maximum composite-likelihood fitting of the random field:#
fit <- FitComposite(data=data,coordx=coords,coordt=times,#
                    corrmodel=cov.model,maxtime=maxtime,maxdist=maxdist,#
                    likelihood="Marginal",type="Pairwise",#
                    start=start,fixed=fixed,weighted=T)#
# Results:#
print(fit$param)#
start#
#################################################
#   parameters for the subsampling #####
################################################
coordx=coords[,1]#
coordy=coords[,2]#
LX=abs(range(coordx)[1]-range(coordx)[2])#
LY=abs(range(coordy)[1]-range(coordy)[2])#
lato_fin=3  #changing window size#
lx=lato_fin          #lunghezza lato x quadrato subfinestra#
ly=lato_fin          #lunghezza lato y quadrato subfinestra#
winc=c(lx/sqrt(LX),ly/sqrt(LY))#
winstp= 1  ###   1/lato_fin complete overlapping   1 "no" overlapping#
################################################
#####################################################################################################      #
theta=c(mm,vv,scale_s,scale_t)                #starting value  #
#
weighted=0#
### eucliden likelihood ################ #
type_subs=1    ### type of subsampling  1=in space    2= in time#
tCPU = proc.time()#
res=STBEUFit(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,0,0,type_subs,weighted)#
tCPU = proc.time()-tCPU;tCPU#
eu_par=c(res$par[1],res$par[3],res$par[4],res$par[2])#
names(eu_par)=names(fit$param)#
print(eu_par)#
### OpenCL eucliden likelihood ################ #
local <- c(1,1)#
GPU <- 0#
tGPU = proc.time()#
res1=STBEUFit_ocl(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,0,0,type_subs,weighted, local=local, GPU = GPU)#
tGPU = proc.time()-tGPU;tGPU#
eu_par1=c(res1$par[1],res1$par[3],res1$par[4],res1$par[2])#
names(eu_par1)=names(fit$param)#
print(eu_par1)#
tCPU;tGPU
#################################***Double Exponential***####################################### #
############################################
rm(list=ls())#
########################R package########################
require(CompRandFld)#
require(MCMCpack)#
require(STBEU)#
# dir <- "~/Documents/UV/Tesis/OpenCL/Task20BinaryFinal/eu_like"#
# setwd(dir)#
# source("euclidean_cl_st_ocl.R")#
# try(system("R CMD SHLIB euc_like_cl_st_Open.c")) #
# dyn.load("euc_like_cl_st_Open.so")#
####location sites #########################################
lambda=15#
xx=seq(-lambda,lambda);#
coords=as.matrix(expand.grid(xx,xx))   ###regular#
nrow(coords)#
# plot(coords)#
#set.seed(15)                                                                      ### not regular#
#pp<-runifpoint(4*(lambda)^2, win=owin(c(-lambda,lambda),c(-lambda,lambda)))       ### not regular#
#coords<-cbind(pp$x,pp$y)  #
                                                        ### not regular#
####temporal instants #########################################
times=seq(1,5,1)#
###################################################################
type_dist=1                ### type of distance     1=euclidean 2=chordal  3=geodesic #
#
maxdist=2                  ## compact support in weights function for pairwise liklihood#
maxtime=2#
#
model=1  #   1=double exponential       2 =gneiting#
#
if (model == 1) {#
     # exponential model#
     cov.model <-"exp_exp"#
     cc=1#
     ######
     mean=0#
     nugget=0#
     scale_s<-3/3#
     scale_t<-3/3#
     sill=1#
     param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill)  #
     fixed=list(nugget=0)#
     fix=nugget#
   }#
if (model == 2) {#
     # gneiting model#
     cov.model <-"gneiting"#
     cc=2#
     ######
     mean=0#
     nugget=0#
     scale_s<-3/3#
     scale_t<-3/20#
     sill=1#
     power_s=1;power_t=1;sep=0.5#
     param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill,#
                power_s=power_s,power_t=power_t,sep=sep)  #
     fixed=list(nugget=0,power_s=power_s,power_t=power_t,sep=sep)  #
     fix=c(nugget, power_s, power_t,sep) #
}#
###################################################################
#
set.seed(276)#
#####################################################################################################      #
# Simulation of the spatial Gaussian random field:#
data <- RFsim(coordx=coords,coordt=times,corrmodel=cov.model, param=param)$data#
mm=mean(c(data))#
vv=var(c(data))#
#####################################################################################################      #
##################################################################################################### #
#
###### Composite likelihood based on pairs estimation ###############################################     #
start=list(mean=mm,scale_s=scale_s,scale_t=scale_t,sill=vv)#
# Maximum composite-likelihood fitting of the random field:#
fit <- FitComposite(data=data,coordx=coords,coordt=times,#
                    corrmodel=cov.model,maxtime=maxtime,maxdist=maxdist,#
                    likelihood="Marginal",type="Pairwise",#
                    start=start,fixed=fixed,weighted=T)#
# Results:#
print(fit$param)#
start#
#################################################
#   parameters for the subsampling #####
################################################
coordx=coords[,1]#
coordy=coords[,2]#
LX=abs(range(coordx)[1]-range(coordx)[2])#
LY=abs(range(coordy)[1]-range(coordy)[2])#
lato_fin=10  #changing window size#
lx=lato_fin          #lunghezza lato x quadrato subfinestra#
ly=lato_fin          #lunghezza lato y quadrato subfinestra#
winc=c(lx/sqrt(LX),ly/sqrt(LY))#
winstp= 1  ###   1/lato_fin complete overlapping   1 "no" overlapping#
################################################
#####################################################################################################      #
theta=c(mm,vv,scale_s,scale_t)                #starting value  #
#
weighted=0#
### eucliden likelihood ################ #
type_subs=1    ### type of subsampling  1=in space    2= in time#
tCPU = proc.time()#
res=STBEUFit(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,0,0,type_subs,weighted)#
tCPU = proc.time()-tCPU;tCPU#
eu_par=c(res$par[1],res$par[3],res$par[4],res$par[2])#
names(eu_par)=names(fit$param)#
print(eu_par)#
### OpenCL eucliden likelihood ################ #
local <- c(1,1)#
GPU <- 0#
tGPU = proc.time()#
res1=STBEUFit_ocl(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,0,0,type_subs,weighted, local=local, GPU = GPU)#
tGPU = proc.time()-tGPU;tGPU#
eu_par1=c(res1$par[1],res1$par[3],res1$par[4],res1$par[2])#
names(eu_par1)=names(fit$param)#
print(eu_par1)#
tCPU;tGPU
rm(list=ls())#
########################R package########################
require(CompRandFld)#
require(MCMCpack)#
require(STBEU)#
####location sites #########################################
lambda=2#
xx=seq(-lambda,lambda);#
coords=as.matrix(expand.grid(xx,xx))   ###regular#
nrow(coords)#
#
#set.seed(15)                                                                      ### not regular#
#pp<-runifpoint(4*(lambda)^2, win=owin(c(-lambda,lambda),c(-lambda,lambda)))       ### not regular#
#coords<-cbind(pp$x,pp$y)  #
### not regular#
####temporal instants #########################################
times=seq(1,50,1)#
type_dist=1                ### type of distance     1=euclidean 2=chordal  3=geodesic #
maxdist=2#
maxtime=2#
#
###################################################################
###################################################################
model=2  #   1=double exponential       2 =gneiting#
#
if (model == 1) {#
  # exponential model#
  cov.model <-"exp_exp"#
  cc=1#
  ######
  mean=0#
  nugget=0#
  scale_s<-3/3#
  scale_t<-3/3#
  sill=1#
  param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill)  #
  fixed=list(nugget=0)#
  fix=nugget#
}#
if (model == 2) {#
  # gneiting model#
  cov.model <-"gneiting"#
  cc=2#
  ######
  mean=0#
  nugget=0#
  scale_s<-3/3#
  scale_t<-3/20#
  sill=1#
  power_s=1;power_t=1;sep=0.5#
  param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill,#
             power_s=power_s,power_t=power_t,sep=sep)  #
  fixed=list(nugget=0,power_s=power_s,power_t=power_t,sep=sep)  #
  fix=c(nugget, power_s, power_t,sep)  #
}#
###################################################################
###################################################################
###################################################################
#####################################################################################################      #
# Simulation of the spatial Gaussian random field:#
data <- RFsim(coordx=coords,coordt=times,corrmodel=cov.model, param=param)$data#
mm=mean(c(data))#
vv=var(c(data))#
#####################################################################################################      #
##################################################################################################### #
#
###### Composite likelihood based on pairs estimation ###############################################     #
start=list(mean=mm,scale_s=scale_s,scale_t=scale_t,sill=vv)#
# Maximum composite-likelihood fitting of the random field:#
fit <- FitComposite(data=data,coordx=coords,coordt=times,#
                    corrmodel=cov.model,maxtime=maxtime,maxdist=maxdist,#
                    likelihood="Marginal",type="Pairwise",#
                    start=start,fixed=fixed,weighted=T)#
# Results:#
print(fit$param)#
#################################################
#   parameters for the temporal subsampling #####
################################################
#
winc=4    ###  length of temporal window#
winstp=1 ###   0.5 half overlapping  1 "no" overlapping#
################################################
#
#####################################################################################################      #
theta=c(mm,vv,scale_s,scale_t)                #starting value #
weighted=0#
### eucliden likelihood ################ #
type_subs=2    ### type of subsampling  1=in space    2= in time#
tCPU = proc.time()#
res=STBEUFit(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,0,0,winc,winstp,type_subs,weighted)#
tCPU = proc.time()-tCPU;tCPU#
eu_par=c(res$par[1],res$par[3],res$par[4],res$par[2])#
names(eu_par)=names(fit$param)#
print(eu_par)#
#
### OpenCL eucliden likelihood ################ #
local <- c(1,1)#
GPU <- 0#
tGPU = proc.time()#
res1=STBEUFit_ocl(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,0,0,winc,winstp,type_subs,weighted, local=local, GPU = GPU)#
tGPU = proc.time()-tGPU;tGPU#
eu_par1=c(res1$par[1],res1$par[3],res1$par[4],res1$par[2])#
names(eu_par1)=names(fit$param)#
print(eu_par1)#
tCPU;tGPU
model
#################################***Double Exponential***####################################### #
############################################
rm(list=ls())#
########################R package########################
require(CompRandFld)#
require(MCMCpack)#
require(STBEU)#
####location sites #########################################
lambda=2#
xx=seq(-lambda,lambda);#
coords=as.matrix(expand.grid(xx,xx))   ###regular#
nrow(coords)#
#set.seed(15)                                                                      ### not regular#
#pp<-runifpoint(4*(lambda)^2, win=owin(c(-lambda,lambda),c(-lambda,lambda)))       ### not regular#
#coords<-cbind(pp$x,pp$y)  #
                                                        ### not regular#
####temporal instants #########################################
times=seq(1,200,1)#
type_dist=1                ### type of distance     1=euclidean 2=chordal  3=geodesic #
maxdist=2#
maxtime=5#
#
###################################################################
###################################################################
model=1  #   1=double exponential       2 =gneiting#
#
if (model == 1) {#
     # exponential model#
     cov.model <-"exp_exp"#
     cc=1#
     ######
     mean=0#
     nugget=0#
     scale_s<-3/3#
     scale_t<-3/3#
     sill=1#
     param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill)  #
     fixed=list(nugget=0)#
     fix=nugget#
   }#
if (model == 2) {#
     # gneiting model#
     cov.model <-"gneiting"#
     cc=2#
     ######
     mean=0#
     nugget=0#
     scale_s<-3/3#
     scale_t<-3/20#
     sill=1#
     power_s=1;power_t=1;sep=0.5#
     param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill,#
                power_s=power_s,power_t=power_t,sep=sep)  #
     fixed=list(nugget=0,power_s=power_s,power_t=power_t,sep=sep)  #
     fix=c(nugget, power_s, power_t,sep)  #
}#
###################################################################
###################################################################
###################################################################
#####################################################################################################      #
# Simulation of the spatial Gaussian random field:#
data <- RFsim(coordx=coords,coordt=times,corrmodel=cov.model, param=param)$data#
mm=mean(c(data))#
vv=var(c(data))#
#####################################################################################################      #
##################################################################################################### #
#
###### Composite likelihood based on pairs estimation ###############################################     #
start=list(mean=mm,scale_s=scale_s,scale_t=scale_t,sill=vv)#
# Maximum composite-likelihood fitting of the random field:#
fit <- FitComposite(data=data,coordx=coords,coordt=times,#
                    corrmodel=cov.model,maxtime=maxtime,maxdist=maxdist,#
                    likelihood="Marginal",type="Pairwise",#
                    start=start,fixed=fixed,weighted=T)#
# Results:#
print(fit$param)#
#################################################
#   parameters for the temporal subsampling #####
################################################
#
winc=20    ###  length of temporal window#
winstp=1 ###   0.5 half overlapping  1 "no" overlapping#
################################################
#
#####################################################################################################      #
theta=c(mm,vv,scale_s,scale_t)                #starting value #
weighted=0#
### eucliden likelihood ################ #
type_subs=2    ### type of subsampling  1=in space    2= in time#
tCPU = proc.time()#
res=STBEUFit(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,0,0,winc,winstp,type_subs,weighted)#
tCPU = proc.time()-tCPU;tCPU#
eu_par=c(res$par[1],res$par[3],res$par[4],res$par[2])#
names(eu_par)=names(fit$param)#
print(eu_par)#
#
### OpenCL eucliden likelihood ################ #
local <- c(4,64)#
GPU <- 2#
tGPU = proc.time()#
res1=STBEUFit_ocl(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,0,0,winc,winstp,type_subs,weighted, local=local, GPU = GPU)#
tGPU = proc.time()-tGPU;tGPU#
eu_par1=c(res1$par[1],res1$par[3],res1$par[4],res1$par[2])#
names(eu_par1)=names(fit$param)#
print(eu_par1)#
tCPU;tGPU
#################################***Double Exponential***####################################### #
############################################
rm(list=ls())#
########################R package########################
require(CompRandFld)#
require(MCMCpack)#
require(STBEU)#
# dir <- "~/Documents/UV/Tesis/OpenCL/Task20BinaryFinal/eu_like"#
# setwd(dir)#
# source("euclidean_cl_st_ocl.R")#
# try(system("R CMD SHLIB euc_like_cl_st_Open.c")) #
# dyn.load("euc_like_cl_st_Open.so")#
####location sites #########################################
lambda=15#
xx=seq(-lambda,lambda);#
coords=as.matrix(expand.grid(xx,xx))   ###regular#
nrow(coords)#
# plot(coords)#
#set.seed(15)                                                                      ### not regular#
#pp<-runifpoint(4*(lambda)^2, win=owin(c(-lambda,lambda),c(-lambda,lambda)))       ### not regular#
#coords<-cbind(pp$x,pp$y)  #
                                                        ### not regular#
####temporal instants #########################################
times=seq(1,5,1)#
###################################################################
type_dist=1                ### type of distance     1=euclidean 2=chordal  3=geodesic #
#
maxdist=2                  ## compact support in weights function for pairwise liklihood#
maxtime=2#
#
model=1  #   1=double exponential       2 =gneiting#
#
if (model == 1) {#
     # exponential model#
     cov.model <-"exp_exp"#
     cc=1#
     ######
     mean=0#
     nugget=0#
     scale_s<-3/3#
     scale_t<-3/3#
     sill=1#
     param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill)  #
     fixed=list(nugget=0)#
     fix=nugget#
   }#
if (model == 2) {#
     # gneiting model#
     cov.model <-"gneiting"#
     cc=2#
     ######
     mean=0#
     nugget=0#
     scale_s<-3/3#
     scale_t<-3/20#
     sill=1#
     power_s=1;power_t=1;sep=0.5#
     param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill,#
                power_s=power_s,power_t=power_t,sep=sep)  #
     fixed=list(nugget=0,power_s=power_s,power_t=power_t,sep=sep)  #
     fix=c(nugget, power_s, power_t,sep) #
}#
###################################################################
#
set.seed(276)#
#####################################################################################################      #
# Simulation of the spatial Gaussian random field:#
data <- RFsim(coordx=coords,coordt=times,corrmodel=cov.model, param=param)$data#
mm=mean(c(data))#
vv=var(c(data))#
#####################################################################################################      #
##################################################################################################### #
#
###### Composite likelihood based on pairs estimation ###############################################     #
start=list(mean=mm,scale_s=scale_s,scale_t=scale_t,sill=vv)#
# Maximum composite-likelihood fitting of the random field:#
fit <- FitComposite(data=data,coordx=coords,coordt=times,#
                    corrmodel=cov.model,maxtime=maxtime,maxdist=maxdist,#
                    likelihood="Marginal",type="Pairwise",#
                    start=start,fixed=fixed,weighted=T)#
# Results:#
print(fit$param)#
start#
#################################################
#   parameters for the subsampling #####
################################################
coordx=coords[,1]#
coordy=coords[,2]#
LX=abs(range(coordx)[1]-range(coordx)[2])#
LY=abs(range(coordy)[1]-range(coordy)[2])#
lato_fin=10  #changing window size#
lx=lato_fin          #lunghezza lato x quadrato subfinestra#
ly=lato_fin          #lunghezza lato y quadrato subfinestra#
winc=c(lx/sqrt(LX),ly/sqrt(LY))#
winstp= 1  ###   1/lato_fin complete overlapping   1 "no" overlapping#
################################################
#####################################################################################################      #
theta=c(mm,vv,scale_s,scale_t)                #starting value  #
#
weighted=0#
### eucliden likelihood ################ #
type_subs=1    ### type of subsampling  1=in space    2= in time#
tCPU = proc.time()#
res=STBEUFit(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,0,0,type_subs,weighted)#
tCPU = proc.time()-tCPU;tCPU#
eu_par=c(res$par[1],res$par[3],res$par[4],res$par[2])#
names(eu_par)=names(fit$param)#
print(eu_par)#
### OpenCL eucliden likelihood ################ #
local <- c(1,1)#
GPU <- 0#
tGPU = proc.time()#
res1=STBEUFit(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,0,0,type_subs,weighted, local=local, GPU = GPU)#
tGPU = proc.time()-tGPU;tGPU#
eu_par1=c(res1$par[1],res1$par[3],res1$par[4],res1$par[2])#
names(eu_par1)=names(fit$param)#
print(eu_par1)#
tCPU;tGPU
#################################***Double Exponential***####################################### #
############################################
rm(list=ls())#
########################R package########################
require(CompRandFld)#
require(MCMCpack)#
require(STBEU)#
# dir <- "~/Documents/UV/Tesis/OpenCL/Task20BinaryFinal/eu_like"#
# setwd(dir)#
# source("euclidean_cl_st_ocl.R")#
# try(system("R CMD SHLIB euc_like_cl_st_Open.c")) #
# dyn.load("euc_like_cl_st_Open.so")#
####location sites #########################################
lambda=8#
xx=seq(-lambda,lambda);#
coords=as.matrix(expand.grid(xx,xx))   ###regular#
nrow(coords)#
# plot(coords)#
#set.seed(15)                                                                      ### not regular#
#pp<-runifpoint(4*(lambda)^2, win=owin(c(-lambda,lambda),c(-lambda,lambda)))       ### not regular#
#coords<-cbind(pp$x,pp$y)  #
                                                        ### not regular#
####temporal instants #########################################
times=seq(1,5,1)#
###################################################################
type_dist=1                ### type of distance     1=euclidean 2=chordal  3=geodesic #
#
maxdist=2                  ## compact support in weights function for pairwise liklihood#
maxtime=2#
#
model=1  #   1=double exponential       2 =gneiting#
#
if (model == 1) {#
     # exponential model#
     cov.model <-"exp_exp"#
     cc=1#
     ######
     mean=0#
     nugget=0#
     scale_s<-3/3#
     scale_t<-3/3#
     sill=1#
     param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill)  #
     fixed=list(nugget=0)#
     fix=nugget#
   }#
if (model == 2) {#
     # gneiting model#
     cov.model <-"gneiting"#
     cc=2#
     ######
     mean=0#
     nugget=0#
     scale_s<-3/3#
     scale_t<-3/20#
     sill=1#
     power_s=1;power_t=1;sep=0.5#
     param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill,#
                power_s=power_s,power_t=power_t,sep=sep)  #
     fixed=list(nugget=0,power_s=power_s,power_t=power_t,sep=sep)  #
     fix=c(nugget, power_s, power_t,sep) #
}#
###################################################################
#
set.seed(276)#
#####################################################################################################      #
# Simulation of the spatial Gaussian random field:#
data <- RFsim(coordx=coords,coordt=times,corrmodel=cov.model, param=param)$data#
mm=mean(c(data))#
vv=var(c(data))#
#####################################################################################################      #
##################################################################################################### #
#
###### Composite likelihood based on pairs estimation ###############################################     #
start=list(mean=mm,scale_s=scale_s,scale_t=scale_t,sill=vv)#
# Maximum composite-likelihood fitting of the random field:#
fit <- FitComposite(data=data,coordx=coords,coordt=times,#
                    corrmodel=cov.model,maxtime=maxtime,maxdist=maxdist,#
                    likelihood="Marginal",type="Pairwise",#
                    start=start,fixed=fixed,weighted=T)#
# Results:#
print(fit$param)#
start#
#################################################
#   parameters for the subsampling #####
################################################
coordx=coords[,1]#
coordy=coords[,2]#
LX=abs(range(coordx)[1]-range(coordx)[2])#
LY=abs(range(coordy)[1]-range(coordy)[2])#
lato_fin=10  #changing window size#
lx=lato_fin          #lunghezza lato x quadrato subfinestra#
ly=lato_fin          #lunghezza lato y quadrato subfinestra#
winc=c(lx/sqrt(LX),ly/sqrt(LY))#
winstp= 1  ###   1/lato_fin complete overlapping   1 "no" overlapping#
################################################
#####################################################################################################      #
theta=c(mm,vv,scale_s,scale_t)                #starting value  #
#
weighted=0#
### eucliden likelihood ################ #
type_subs=1    ### type of subsampling  1=in space    2= in time#
tCPU = proc.time()#
res=STBEUFit(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,0,0,type_subs,weighted)#
tCPU = proc.time()-tCPU;tCPU#
eu_par=c(res$par[1],res$par[3],res$par[4],res$par[2])#
names(eu_par)=names(fit$param)#
print(eu_par)#
### OpenCL eucliden likelihood ################ #
local <- c(1,1)#
GPU <- 0#
tGPU = proc.time()#
res1=STBEUFit(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,0,0,type_subs,weighted, local=local, GPU = GPU)#
tGPU = proc.time()-tGPU;tGPU#
eu_par1=c(res1$par[1],res1$par[3],res1$par[4],res1$par[2])#
names(eu_par1)=names(fit$param)#
print(eu_par1)#
tCPU;tGPU
#################################***Double Exponential***####################################### #
############################################
rm(list=ls())#
########################R package########################
require(CompRandFld)#
require(MCMCpack)#
require(STBEU)#
# dir <- "~/Documents/UV/Tesis/OpenCL/Task20BinaryFinal/eu_like"#
# setwd(dir)#
# source("euclidean_cl_st_ocl.R")#
# try(system("R CMD SHLIB euc_like_cl_st_Open.c")) #
# dyn.load("euc_like_cl_st_Open.so")#
####location sites #########################################
lambda=8#
xx=seq(-lambda,lambda);#
coords=as.matrix(expand.grid(xx,xx))   ###regular#
nrow(coords)#
# plot(coords)#
#set.seed(15)                                                                      ### not regular#
#pp<-runifpoint(4*(lambda)^2, win=owin(c(-lambda,lambda),c(-lambda,lambda)))       ### not regular#
#coords<-cbind(pp$x,pp$y)  #
                                                        ### not regular#
####temporal instants #########################################
times=seq(1,5,1)#
###################################################################
type_dist=1                ### type of distance     1=euclidean 2=chordal  3=geodesic #
#
maxdist=4                ## compact support in weights function for pairwise liklihood#
maxtime=2#
#
model=1  #   1=double exponential       2 =gneiting#
#
if (model == 1) {#
     # exponential model#
     cov.model <-"exp_exp"#
     cc=1#
     ######
     mean=0#
     nugget=0#
     scale_s<-3/3#
     scale_t<-3/3#
     sill=1#
     param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill)  #
     fixed=list(nugget=0)#
     fix=nugget#
   }#
if (model == 2) {#
     # gneiting model#
     cov.model <-"gneiting"#
     cc=2#
     ######
     mean=0#
     nugget=0#
     scale_s<-3/3#
     scale_t<-3/20#
     sill=1#
     power_s=1;power_t=1;sep=0.5#
     param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill,#
                power_s=power_s,power_t=power_t,sep=sep)  #
     fixed=list(nugget=0,power_s=power_s,power_t=power_t,sep=sep)  #
     fix=c(nugget, power_s, power_t,sep) #
}#
###################################################################
#
set.seed(276)#
#####################################################################################################      #
# Simulation of the spatial Gaussian random field:#
data <- RFsim(coordx=coords,coordt=times,corrmodel=cov.model, param=param)$data#
mm=mean(c(data))#
vv=var(c(data))#
#####################################################################################################      #
##################################################################################################### #
#
###### Composite likelihood based on pairs estimation ###############################################     #
start=list(mean=mm,scale_s=scale_s,scale_t=scale_t,sill=vv)#
# Maximum composite-likelihood fitting of the random field:#
fit <- FitComposite(data=data,coordx=coords,coordt=times,#
                    corrmodel=cov.model,maxtime=maxtime,maxdist=maxdist,#
                    likelihood="Marginal",type="Pairwise",#
                    start=start,fixed=fixed,weighted=T)#
# Results:#
print(fit$param)#
start#
#################################################
#   parameters for the subsampling #####
################################################
coordx=coords[,1]#
coordy=coords[,2]#
LX=abs(range(coordx)[1]-range(coordx)[2])#
LY=abs(range(coordy)[1]-range(coordy)[2])#
lato_fin=10  #changing window size#
lx=lato_fin          #lunghezza lato x quadrato subfinestra#
ly=lato_fin          #lunghezza lato y quadrato subfinestra#
winc=c(lx/sqrt(LX),ly/sqrt(LY))#
winstp= 1  ###   1/lato_fin complete overlapping   1 "no" overlapping#
################################################
#####################################################################################################      #
theta=c(mm,vv,scale_s,scale_t)                #starting value  #
#
weighted=0#
### eucliden likelihood ################ #
type_subs=1    ### type of subsampling  1=in space    2= in time#
tCPU = proc.time()#
res=STBEUFit(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,0,0,type_subs,weighted)#
tCPU = proc.time()-tCPU;tCPU#
eu_par=c(res$par[1],res$par[3],res$par[4],res$par[2])#
names(eu_par)=names(fit$param)#
print(eu_par)#
### OpenCL eucliden likelihood ################ #
local <- c(1,1)#
GPU <- 0#
tGPU = proc.time()#
res1=STBEUFit(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,0,0,type_subs,weighted, local=local, GPU = GPU)#
tGPU = proc.time()-tGPU;tGPU#
eu_par1=c(res1$par[1],res1$par[3],res1$par[4],res1$par[2])#
names(eu_par1)=names(fit$param)#
print(eu_par1)#
tCPU;tGPU
#################################***Double Exponential***####################################### #
############################################
rm(list=ls())#
########################R package########################
require(CompRandFld)#
require(MCMCpack)#
require(STBEU)#
# dir <- "~/Documents/UV/Tesis/OpenCL/Task20BinaryFinal/eu_like"#
# setwd(dir)#
# source("euclidean_cl_st_ocl.R")#
# try(system("R CMD SHLIB euc_like_cl_st_Open.c")) #
# dyn.load("euc_like_cl_st_Open.so")#
####location sites #########################################
lambda=8#
xx=seq(-lambda,lambda);#
coords=as.matrix(expand.grid(xx,xx))   ###regular#
nrow(coords)#
# plot(coords)#
#set.seed(15)                                                                      ### not regular#
#pp<-runifpoint(4*(lambda)^2, win=owin(c(-lambda,lambda),c(-lambda,lambda)))       ### not regular#
#coords<-cbind(pp$x,pp$y)  #
                                                        ### not regular#
####temporal instants #########################################
times=seq(1,5,1)#
###################################################################
type_dist=1                ### type of distance     1=euclidean 2=chordal  3=geodesic #
#
maxdist=4                ## compact support in weights function for pairwise liklihood#
maxtime=2#
#
model=1  #   1=double exponential       2 =gneiting#
#
if (model == 1) {#
     # exponential model#
     cov.model <-"exp_exp"#
     cc=1#
     ######
     mean=0#
     nugget=0#
     scale_s<-3/3#
     scale_t<-3/3#
     sill=1#
     param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill)  #
     fixed=list(nugget=0)#
     fix=nugget#
   }#
if (model == 2) {#
     # gneiting model#
     cov.model <-"gneiting"#
     cc=2#
     ######
     mean=0#
     nugget=0#
     scale_s<-3/3#
     scale_t<-3/20#
     sill=1#
     power_s=1;power_t=1;sep=0.5#
     param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill,#
                power_s=power_s,power_t=power_t,sep=sep)  #
     fixed=list(nugget=0,power_s=power_s,power_t=power_t,sep=sep)  #
     fix=c(nugget, power_s, power_t,sep) #
}#
###################################################################
#
set.seed(276)#
#####################################################################################################      #
# Simulation of the spatial Gaussian random field:#
data <- RFsim(coordx=coords,coordt=times,corrmodel=cov.model, param=param)$data#
mm=mean(c(data))#
vv=var(c(data))#
#####################################################################################################      #
##################################################################################################### #
#
###### Composite likelihood based on pairs estimation ###############################################     #
start=list(mean=mm,scale_s=scale_s,scale_t=scale_t,sill=vv)#
# Maximum composite-likelihood fitting of the random field:#
fit <- FitComposite(data=data,coordx=coords,coordt=times,#
                    corrmodel=cov.model,maxtime=maxtime,maxdist=maxdist,#
                    likelihood="Marginal",type="Pairwise",#
                    start=start,fixed=fixed,weighted=T)#
# Results:#
print(fit$param)#
start#
#################################################
#   parameters for the subsampling #####
################################################
coordx=coords[,1]#
coordy=coords[,2]#
LX=abs(range(coordx)[1]-range(coordx)[2])#
LY=abs(range(coordy)[1]-range(coordy)[2])#
lato_fin=10  #changing window size#
lx=lato_fin          #lunghezza lato x quadrato subfinestra#
ly=lato_fin          #lunghezza lato y quadrato subfinestra#
winc=c(lx/sqrt(LX),ly/sqrt(LY))#
winstp= 1  ###   1/lato_fin complete overlapping   1 "no" overlapping#
################################################
#####################################################################################################      #
theta=c(mm,vv,scale_s,scale_t)                #starting value  #
#
weighted=0#
### eucliden likelihood ################ #
type_subs=1    ### type of subsampling  1=in space    2= in time#
tCPU = proc.time()#
res=STBEUFit(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,0,0,type_subs,weighted)#
tCPU = proc.time()-tCPU;tCPU#
eu_par=c(res$par[1],res$par[3],res$par[4],res$par[2])#
names(eu_par)=names(fit$param)#
print(eu_par)#
### OpenCL eucliden likelihood ################ #
local <- c(1,1)#
GPU <- 0#
tGPU = proc.time()#
res1=STBEUFit(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,0,0,type_subs,weighted, local=local, GPU = GPU)#
tGPU = proc.time()-tGPU;tGPU#
eu_par1=c(res1$par[1],res1$par[4],res1$par[3],res1$par[2])#
names(eu_par1)=names(fit$param)#
print(eu_par1)#
tCPU;tGPU
#################################***Double Exponential***####################################### #
############################################
rm(list=ls())#
########################R package########################
require(CompRandFld)#
require(MCMCpack)#
require(STBEU)#
# dir <- "~/Documents/UV/Tesis/OpenCL/Task20BinaryFinal/eu_like"#
# setwd(dir)#
# source("euclidean_cl_st_ocl.R")#
# try(system("R CMD SHLIB euc_like_cl_st_Open.c")) #
# dyn.load("euc_like_cl_st_Open.so")#
####location sites #########################################
lambda=10#
xx=seq(-lambda,lambda);#
coords=as.matrix(expand.grid(xx,xx))   ###regular#
nrow(coords)#
# plot(coords)#
#set.seed(15)                                                                      ### not regular#
#pp<-runifpoint(4*(lambda)^2, win=owin(c(-lambda,lambda),c(-lambda,lambda)))       ### not regular#
#coords<-cbind(pp$x,pp$y)  #
                                                        ### not regular#
####temporal instants #########################################
times=seq(1,5,1)#
###################################################################
type_dist=1                ### type of distance     1=euclidean 2=chordal  3=geodesic #
#
maxdist=4                ## compact support in weights function for pairwise liklihood#
maxtime=2#
#
model=1  #   1=double exponential       2 =gneiting#
#
if (model == 1) {#
     # exponential model#
     cov.model <-"exp_exp"#
     cc=1#
     ######
     mean=0#
     nugget=0#
     scale_s<-3/3#
     scale_t<-3/3#
     sill=1#
     param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill)  #
     fixed=list(nugget=0)#
     fix=nugget#
   }#
if (model == 2) {#
     # gneiting model#
     cov.model <-"gneiting"#
     cc=2#
     ######
     mean=0#
     nugget=0#
     scale_s<-3/3#
     scale_t<-3/20#
     sill=1#
     power_s=1;power_t=1;sep=0.5#
     param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill,#
                power_s=power_s,power_t=power_t,sep=sep)  #
     fixed=list(nugget=0,power_s=power_s,power_t=power_t,sep=sep)  #
     fix=c(nugget, power_s, power_t,sep) #
}#
###################################################################
#
set.seed(276)#
#####################################################################################################      #
# Simulation of the spatial Gaussian random field:#
data <- RFsim(coordx=coords,coordt=times,corrmodel=cov.model, param=param)$data#
mm=mean(c(data))#
vv=var(c(data))#
#####################################################################################################      #
##################################################################################################### #
#
###### Composite likelihood based on pairs estimation ###############################################     #
start=list(mean=mm,scale_s=scale_s,scale_t=scale_t,sill=vv)#
# Maximum composite-likelihood fitting of the random field:#
fit <- FitComposite(data=data,coordx=coords,coordt=times,#
                    corrmodel=cov.model,maxtime=maxtime,maxdist=maxdist,#
                    likelihood="Marginal",type="Pairwise",#
                    start=start,fixed=fixed,weighted=T)#
# Results:#
print(fit$param)#
start#
#################################################
#   parameters for the subsampling #####
################################################
coordx=coords[,1]#
coordy=coords[,2]#
LX=abs(range(coordx)[1]-range(coordx)[2])#
LY=abs(range(coordy)[1]-range(coordy)[2])#
lato_fin=10  #changing window size#
lx=lato_fin          #lunghezza lato x quadrato subfinestra#
ly=lato_fin          #lunghezza lato y quadrato subfinestra#
winc=c(lx/sqrt(LX),ly/sqrt(LY))#
winstp= 1  ###   1/lato_fin complete overlapping   1 "no" overlapping#
################################################
#####################################################################################################      #
theta=c(mm,vv,scale_s,scale_t)                #starting value  #
#
weighted=0#
### eucliden likelihood ################ #
type_subs=1    ### type of subsampling  1=in space    2= in time#
tCPU = proc.time()#
res=STBEUFit(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,0,0,type_subs,weighted)#
tCPU = proc.time()-tCPU;tCPU#
eu_par=c(res$par[1],res$par[3],res$par[4],res$par[2])#
names(eu_par)=names(fit$param)#
print(eu_par)#
### OpenCL eucliden likelihood ################ #
local <- c(1,1)#
GPU <- 0#
tGPU = proc.time()#
res1=STBEUFit(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,0,0,type_subs,weighted, local=local, GPU = GPU)#
tGPU = proc.time()-tGPU;tGPU#
eu_par1=c(res1$par[1],res1$par[4],res1$par[3],res1$par[2])#
names(eu_par1)=names(fit$param)#
print(eu_par1)#
tCPU;tGPU#
# dyn.unload("euc_like_cl_st.so")
#################################***Double Exponential***####################################### #
############################################
rm(list=ls())#
########################R package########################
require(CompRandFld)#
require(MCMCpack)#
require(STBEU)#
# dir <- "~/Documents/UV/Tesis/OpenCL/Task20BinaryFinal/eu_like"#
# setwd(dir)#
# source("euclidean_cl_st_ocl.R")#
# try(system("R CMD SHLIB euc_like_cl_st_Open.c")) #
# dyn.load("euc_like_cl_st_Open.so")#
####location sites #########################################
lambda=10#
xx=seq(-lambda,lambda);#
coords=as.matrix(expand.grid(xx,xx))   ###regular#
nrow(coords)#
# plot(coords)#
#set.seed(15)                                                                      ### not regular#
#pp<-runifpoint(4*(lambda)^2, win=owin(c(-lambda,lambda),c(-lambda,lambda)))       ### not regular#
#coords<-cbind(pp$x,pp$y)  #
                                                        ### not regular#
####temporal instants #########################################
times=seq(1,5,1)#
###################################################################
type_dist=1                ### type of distance     1=euclidean 2=chordal  3=geodesic #
#
maxdist=4                ## compact support in weights function for pairwise liklihood#
maxtime=2#
#
model=1  #   1=double exponential       2 =gneiting#
#
if (model == 1) {#
     # exponential model#
     cov.model <-"exp_exp"#
     cc=1#
     ######
     mean=0#
     nugget=0#
     scale_s<-3/3#
     scale_t<-3/3#
     sill=1#
     param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill)  #
     fixed=list(nugget=0)#
     fix=nugget#
   }#
if (model == 2) {#
     # gneiting model#
     cov.model <-"gneiting"#
     cc=2#
     ######
     mean=0#
     nugget=0#
     scale_s<-3/3#
     scale_t<-3/20#
     sill=1#
     power_s=1;power_t=1;sep=0.5#
     param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill,#
                power_s=power_s,power_t=power_t,sep=sep)  #
     fixed=list(nugget=0,power_s=power_s,power_t=power_t,sep=sep)  #
     fix=c(nugget, power_s, power_t,sep) #
}#
###################################################################
#
set.seed(276)#
#####################################################################################################      #
# Simulation of the spatial Gaussian random field:#
data <- RFsim(coordx=coords,coordt=times,corrmodel=cov.model, param=param)$data#
mm=mean(c(data))#
vv=var(c(data))#
#####################################################################################################      #
##################################################################################################### #
#
###### Composite likelihood based on pairs estimation ###############################################     #
start=list(mean=mm,scale_s=scale_s,scale_t=scale_t,sill=vv)#
# Maximum composite-likelihood fitting of the random field:#
fit <- FitComposite(data=data,coordx=coords,coordt=times,#
                    corrmodel=cov.model,maxtime=maxtime,maxdist=maxdist,#
                    likelihood="Marginal",type="Pairwise",#
                    start=start,fixed=fixed,weighted=T)#
# Results:#
print(fit$param)#
start#
#################################################
#   parameters for the subsampling #####
################################################
coordx=coords[,1]#
coordy=coords[,2]#
LX=abs(range(coordx)[1]-range(coordx)[2])#
LY=abs(range(coordy)[1]-range(coordy)[2])#
lato_fin=10  #changing window size#
lx=lato_fin          #lunghezza lato x quadrato subfinestra#
ly=lato_fin          #lunghezza lato y quadrato subfinestra#
winc=c(lx/sqrt(LX),ly/sqrt(LY))#
winstp= 1  ###   1/lato_fin complete overlapping   1 "no" overlapping#
################################################
#####################################################################################################      #
theta=c(mm,vv,scale_s,scale_t)                #starting value  #
#
weighted=0#
### eucliden likelihood ################ #
type_subs=1    ### type of subsampling  1=in space    2= in time#
tCPU = proc.time()#
res=STBEUFit(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,0,0,type_subs,weighted)#
tCPU = proc.time()-tCPU;tCPU#
eu_par=c(res$par[1],res$par[3],res$par[4],res$par[2])#
names(eu_par)=names(fit$param)#
print(eu_par)#
### OpenCL eucliden likelihood ################ #
local <- c(1,1)#
GPU <- 0#
tGPU = proc.time()#
res1=STBEUFit(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,0,0,type_subs,weighted, local=local, GPU = GPU)#
tGPU = proc.time()-tGPU;tGPU#
eu_par1=c(res1$par[1],res1$par[3],res1$par[4],res1$par[2])#
names(eu_par1)=names(fit$param)#
print(eu_par1)#
tCPU;tGPU
#################################***Double Exponential***####################################### #
############################################
rm(list=ls())#
########################R package########################
require(CompRandFld)#
require(MCMCpack)#
require(STBEU)#
# dir <- "~/Documents/UV/Tesis/OpenCL/Task20BinaryFinal/eu_like"#
# setwd(dir)#
# source("euclidean_cl_st_ocl.R")#
# try(system("R CMD SHLIB euc_like_cl_st_Open.c")) #
# dyn.load("euc_like_cl_st_Open.so")#
####location sites #########################################
lambda=10#
xx=seq(-lambda,lambda);#
coords=as.matrix(expand.grid(xx,xx))   ###regular#
nrow(coords)#
# plot(coords)#
#set.seed(15)                                                                      ### not regular#
#pp<-runifpoint(4*(lambda)^2, win=owin(c(-lambda,lambda),c(-lambda,lambda)))       ### not regular#
#coords<-cbind(pp$x,pp$y)  #
                                                        ### not regular#
####temporal instants #########################################
times=seq(1,5,1)#
###################################################################
type_dist=1                ### type of distance     1=euclidean 2=chordal  3=geodesic #
#
maxdist=4                ## compact support in weights function for pairwise liklihood#
maxtime=2#
#
model=1  #   1=double exponential       2 =gneiting#
#
if (model == 1) {#
     # exponential model#
     cov.model <-"exp_exp"#
     cc=1#
     ######
     mean=0#
     nugget=0#
     scale_s<-3/3#
     scale_t<-3/3#
     sill=1#
     param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill)  #
     fixed=list(nugget=0)#
     fix=nugget#
   }#
if (model == 2) {#
     # gneiting model#
     cov.model <-"gneiting"#
     cc=2#
     ######
     mean=0#
     nugget=0#
     scale_s<-3/3#
     scale_t<-3/20#
     sill=1#
     power_s=1;power_t=1;sep=0.5#
     param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill,#
                power_s=power_s,power_t=power_t,sep=sep)  #
     fixed=list(nugget=0,power_s=power_s,power_t=power_t,sep=sep)  #
     fix=c(nugget, power_s, power_t,sep) #
}#
###################################################################
#
set.seed(276)#
#####################################################################################################      #
# Simulation of the spatial Gaussian random field:#
data <- RFsim(coordx=coords,coordt=times,corrmodel=cov.model, param=param)$data#
mm=mean(c(data))#
vv=var(c(data))#
#####################################################################################################      #
##################################################################################################### #
#
###### Composite likelihood based on pairs estimation ###############################################     #
start=list(mean=mm,scale_s=scale_s,scale_t=scale_t,sill=vv)#
# Maximum composite-likelihood fitting of the random field:#
fit <- FitComposite(data=data,coordx=coords,coordt=times,#
                    corrmodel=cov.model,maxtime=maxtime,maxdist=maxdist,#
                    likelihood="Marginal",type="Pairwise",#
                    start=start,fixed=fixed,weighted=T)#
# Results:#
print(fit$param)#
start#
#################################################
#   parameters for the subsampling #####
################################################
coordx=coords[,1]#
coordy=coords[,2]#
LX=abs(range(coordx)[1]-range(coordx)[2])#
LY=abs(range(coordy)[1]-range(coordy)[2])#
lato_fin=10  #changing window size#
lx=lato_fin          #lunghezza lato x quadrato subfinestra#
ly=lato_fin          #lunghezza lato y quadrato subfinestra#
winc=c(lx/sqrt(LX),ly/sqrt(LY))#
winstp= 1  ###   1/lato_fin complete overlapping   1 "no" overlapping#
################################################
#####################################################################################################      #
theta=c(mm,vv,scale_s,scale_t)                #starting value  #
#
weighted=0#
### eucliden likelihood ################ #
type_subs=1    ### type of subsampling  1=in space    2= in time#
tCPU = proc.time()#
res=STBEUFit(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,0,0,type_subs,weighted, local=c(1,1), GPU = NULL)#
tCPU = proc.time()-tCPU;tCPU#
eu_par=c(res$par[1],res$par[3],res$par[4],res$par[2])#
names(eu_par)=names(fit$param)#
print(eu_par)#
### OpenCL eucliden likelihood ################ #
local <- c(1,1)#
GPU <- 0#
tGPU = proc.time()#
res1=STBEUFit(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,0,0,type_subs,weighted, local=local, GPU = GPU)#
tGPU = proc.time()-tGPU;tGPU#
eu_par1=c(res1$par[1],res1$par[3],res1$par[4],res1$par[2])#
names(eu_par1)=names(fit$param)#
print(eu_par1)#
tCPU;tGPU#
# dyn.unload("euc_like_cl_st.so")
rm(list=ls())#
########################R package########################
require(CompRandFld)#
require(MCMCpack)#
require(STBEU)#
# dir <- "~/Documents/UV/Tesis/OpenCL/Task20BinaryFinal/eu_like"#
# setwd(dir)#
# source("euclidean_cl_st_ocl.R")#
# try(system("R CMD SHLIB euc_like_cl_st_Open.c")) #
# dyn.load("euc_like_cl_st_Open.so")#
####location sites #########################################
lambda=8#
xx=seq(-lambda,lambda);#
coords=as.matrix(expand.grid(xx,xx))   ###regular#
nrow(coords)#
# plot(coords)#
#set.seed(15)                                                                      ### not regular#
#pp<-runifpoint(4*(lambda)^2, win=owin(c(-lambda,lambda),c(-lambda,lambda)))       ### not regular#
#coords<-cbind(pp$x,pp$y)  #
### not regular#
####temporal instants #########################################
times=seq(1,5,1)#
###################################################################
type_dist=1                ### type of distance     1=euclidean 2=chordal  3=geodesic #
#
maxdist=2                  ## compact support in weights function for pairwise liklihood#
maxtime=2#
#
model=2  #   1=double exponential       2 =gneiting#
#
if (model == 1) {#
  # exponential model#
  cov.model <-"exp_exp"#
  cc=1#
  ######
  mean=0#
  nugget=0#
  scale_s<-3/3#
  scale_t<-3/3#
  sill=1#
  param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill)  #
  fixed=list(nugget=0)#
  fix=nugget#
}#
if (model == 2) {#
  # gneiting model#
  cov.model <-"gneiting"#
  cc=2#
  ######
  mean=0#
  nugget=0#
  scale_s<-3/3#
  scale_t<-3/20#
  sill=1#
  power_s=1;power_t=1;sep=0.5#
  param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill,#
             power_s=power_s,power_t=power_t,sep=sep)  #
  fixed=list(nugget=0,power_s=power_s,power_t=power_t,sep=sep)  #
  fix=c(nugget, power_s, power_t,sep) #
}#
###################################################################
#
set.seed(276)#
#####################################################################################################      #
# Simulation of the spatial Gaussian random field:#
data <- RFsim(coordx=coords,coordt=times,corrmodel=cov.model, param=param)$data#
mm=mean(c(data))#
vv=var(c(data))#
#####################################################################################################      #
##################################################################################################### #
#
###### Composite likelihood based on pairs estimation ###############################################     #
#
start=list(mean=mm,scale_s=scale_s,scale_t=scale_t,sill=vv)#
# Maximum composite-likelihood fitting of the random field:#
fit <- FitComposite(data=data,coordx=coords,coordt=times,#
                    corrmodel=cov.model,maxtime=maxtime,maxdist=maxdist,#
                    likelihood="Marginal",type="Pairwise",#
                    start=start,fixed=fixed,weighted=T)#
# Results:#
print(fit$param)#
start#
#################################################
#   parameters for the subsampling #####
################################################
coordx=coords[,1]#
coordy=coords[,2]#
LX=abs(range(coordx)[1]-range(coordx)[2])#
LY=abs(range(coordy)[1]-range(coordy)[2])#
lato_fin=3  #changing window size#
lx=lato_fin          #lunghezza lato x quadrato subfinestra#
ly=lato_fin          #lunghezza lato y quadrato subfinestra#
winc=c(lx/sqrt(LX),ly/sqrt(LY))#
winstp= 1  ###   1/lato_fin complete overlapping   1 "no" overlapping#
################################################
#####################################################################################################      #
theta=c(mm,vv,scale_s,scale_t)                #starting value  #
#
weighted=0#
### eucliden likelihood ################ #
type_subs=1    ### type of subsampling  1=in space    2= in time#
tCPU = proc.time()#
res=STBEUFit(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,0,0,type_subs,weighted)#
tCPU = proc.time()-tCPU;tCPU#
eu_par=c(res$par[1],res$par[3],res$par[4],res$par[2])#
names(eu_par)=names(fit$param)#
print(eu_par)#
### OpenCL eucliden likelihood ################ #
local <- c(1,1)#
GPU <- 0#
tGPU = proc.time()#
res1=STBEUFit_ocl(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,0,0,type_subs,weighted, local=local, GPU = GPU)#
tGPU = proc.time()-tGPU;tGPU#
eu_par1=c(res1$par[1],res1$par[3],res1$par[4],res1$par[2])#
names(eu_par1)=names(fit$param)#
print(eu_par1)#
tCPU;tGPU
### OpenCL eucliden likelihood ################ #
local <- c(1,1)#
GPU <- 0#
tGPU = proc.time()#
res1=STBEUFit(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,0,0,type_subs,weighted, local=local, GPU = GPU)#
tGPU = proc.time()-tGPU;tGPU#
eu_par1=c(res1$par[1],res1$par[3],res1$par[4],res1$par[2])#
names(eu_par1)=names(fit$param)#
print(eu_par1)#
tCPU;tGPU
#################################***Double Exponential***####################################### #
############################################
rm(list=ls())#
########################R package########################
require(CompRandFld)#
require(MCMCpack)#
require(STBEU)#
# dir <- "~/Documents/UV/Tesis/OpenCL/Task20BinaryFinal/eu_like"#
# setwd(dir)#
# source("euclidean_cl_st_ocl.R")#
# try(system("R CMD SHLIB euc_like_cl_st_Open.c")) #
# dyn.load("euc_like_cl_st_Open.so")#
####location sites #########################################
lambda=10#
xx=seq(-lambda,lambda);#
coords=as.matrix(expand.grid(xx,xx))   ###regular#
nrow(coords)#
# plot(coords)#
#set.seed(15)                                                                      ### not regular#
#pp<-runifpoint(4*(lambda)^2, win=owin(c(-lambda,lambda),c(-lambda,lambda)))       ### not regular#
#coords<-cbind(pp$x,pp$y)  #
                                                        ### not regular#
####temporal instants #########################################
times=seq(1,5,1)#
###################################################################
type_dist=1                ### type of distance     1=euclidean 2=chordal  3=geodesic #
#
maxdist=5               ## compact support in weights function for pairwise liklihood#
maxtime=2#
#
model=1  #   1=double exponential       2 =gneiting#
#
if (model == 1) {#
     # exponential model#
     cov.model <-"exp_exp"#
     cc=1#
     ######
     mean=0#
     nugget=0#
     scale_s<-3/3#
     scale_t<-3/3#
     sill=1#
     param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill)  #
     fixed=list(nugget=0)#
     fix=nugget#
   }#
if (model == 2) {#
     # gneiting model#
     cov.model <-"gneiting"#
     cc=2#
     ######
     mean=0#
     nugget=0#
     scale_s<-3/3#
     scale_t<-3/20#
     sill=1#
     power_s=1;power_t=1;sep=0.5#
     param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill,#
                power_s=power_s,power_t=power_t,sep=sep)  #
     fixed=list(nugget=0,power_s=power_s,power_t=power_t,sep=sep)  #
     fix=c(nugget, power_s, power_t,sep) #
}#
###################################################################
#
set.seed(276)#
#####################################################################################################      #
# Simulation of the spatial Gaussian random field:#
data <- RFsim(coordx=coords,coordt=times,corrmodel=cov.model, param=param)$data#
mm=mean(c(data))#
vv=var(c(data))#
#####################################################################################################      #
##################################################################################################### #
#
###### Composite likelihood based on pairs estimation ###############################################     #
start=list(mean=mm,scale_s=scale_s,scale_t=scale_t,sill=vv)#
# Maximum composite-likelihood fitting of the random field:#
fit <- FitComposite(data=data,coordx=coords,coordt=times,#
                    corrmodel=cov.model,maxtime=maxtime,maxdist=maxdist,#
                    likelihood="Marginal",type="Pairwise",#
                    start=start,fixed=fixed,weighted=T)#
# Results:#
print(fit$param)#
start#
#################################################
#   parameters for the subsampling #####
################################################
coordx=coords[,1]#
coordy=coords[,2]#
LX=abs(range(coordx)[1]-range(coordx)[2])#
LY=abs(range(coordy)[1]-range(coordy)[2])#
lato_fin=10  #changing window size#
lx=lato_fin          #lunghezza lato x quadrato subfinestra#
ly=lato_fin          #lunghezza lato y quadrato subfinestra#
winc=c(lx/sqrt(LX),ly/sqrt(LY))#
winstp= 1  ###   1/lato_fin complete overlapping   1 "no" overlapping#
################################################
#####################################################################################################      #
theta=c(mm,vv,scale_s,scale_t)                #starting value  #
#
weighted=0#
### eucliden likelihood ################ #
type_subs=1    ### type of subsampling  1=in space    2= in time#
tCPU = proc.time()#
res=STBEUFit(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,0,0,type_subs,weighted, local=c(1,1), GPU = NULL)#
tCPU = proc.time()-tCPU;tCPU#
eu_par=c(res$par[1],res$par[3],res$par[4],res$par[2])#
names(eu_par)=names(fit$param)#
print(eu_par)#
### OpenCL eucliden likelihood ################ #
local <- c(1,1)#
GPU <- 0#
tGPU = proc.time()#
res1=STBEUFit(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,0,0,type_subs,weighted, local=local, GPU = GPU)#
tGPU = proc.time()-tGPU;tGPU#
eu_par1=c(res1$par[1],res1$par[3],res1$par[4],res1$par[2])#
names(eu_par1)=names(fit$param)#
print(eu_par1)#
tCPU;tGPU
rm(list=ls())#
########################R package########################
require(CompRandFld)#
require(MCMCpack)#
require(STBEU)#
# dir <- "~/Documents/UV/Tesis/OpenCL/Task20BinaryFinal/eu_like"#
# setwd(dir)#
# source("euclidean_cl_st_ocl.R")#
# try(system("R CMD SHLIB euc_like_cl_st_Open.c")) #
# dyn.load("euc_like_cl_st_Open.so")#
####location sites #########################################
lambda=8#
xx=seq(-lambda,lambda);#
coords=as.matrix(expand.grid(xx,xx))   ###regular#
nrow(coords)#
# plot(coords)#
#set.seed(15)                                                                      ### not regular#
#pp<-runifpoint(4*(lambda)^2, win=owin(c(-lambda,lambda),c(-lambda,lambda)))       ### not regular#
#coords<-cbind(pp$x,pp$y)  #
### not regular#
####temporal instants #########################################
times=seq(1,5,1)#
###################################################################
type_dist=1                ### type of distance     1=euclidean 2=chordal  3=geodesic #
#
maxdist=2                  ## compact support in weights function for pairwise liklihood#
maxtime=2#
#
model=2  #   1=double exponential       2 =gneiting#
#
if (model == 1) {#
  # exponential model#
  cov.model <-"exp_exp"#
  cc=1#
  ######
  mean=0#
  nugget=0#
  scale_s<-3/3#
  scale_t<-3/3#
  sill=1#
  param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill)  #
  fixed=list(nugget=0)#
  fix=nugget#
}#
if (model == 2) {#
  # gneiting model#
  cov.model <-"gneiting"#
  cc=2#
  ######
  mean=0#
  nugget=0#
  scale_s<-3/3#
  scale_t<-3/20#
  sill=1#
  power_s=1;power_t=1;sep=0.5#
  param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill,#
             power_s=power_s,power_t=power_t,sep=sep)  #
  fixed=list(nugget=0,power_s=power_s,power_t=power_t,sep=sep)  #
  fix=c(nugget, power_s, power_t,sep) #
}#
###################################################################
#
set.seed(276)#
#####################################################################################################      #
# Simulation of the spatial Gaussian random field:#
data <- RFsim(coordx=coords,coordt=times,corrmodel=cov.model, param=param)$data#
mm=mean(c(data))#
vv=var(c(data))#
#####################################################################################################      #
##################################################################################################### #
#
###### Composite likelihood based on pairs estimation ###############################################     #
#
start=list(mean=mm,scale_s=scale_s,scale_t=scale_t,sill=vv)#
# Maximum composite-likelihood fitting of the random field:#
fit <- FitComposite(data=data,coordx=coords,coordt=times,#
                    corrmodel=cov.model,maxtime=maxtime,maxdist=maxdist,#
                    likelihood="Marginal",type="Pairwise",#
                    start=start,fixed=fixed,weighted=T)#
# Results:#
print(fit$param)#
start#
#################################################
#   parameters for the subsampling #####
################################################
coordx=coords[,1]#
coordy=coords[,2]#
LX=abs(range(coordx)[1]-range(coordx)[2])#
LY=abs(range(coordy)[1]-range(coordy)[2])#
lato_fin=3  #changing window size#
lx=lato_fin          #lunghezza lato x quadrato subfinestra#
ly=lato_fin          #lunghezza lato y quadrato subfinestra#
winc=c(lx/sqrt(LX),ly/sqrt(LY))#
winstp= 1  ###   1/lato_fin complete overlapping   1 "no" overlapping#
################################################
#####################################################################################################      #
theta=c(mm,vv,scale_s,scale_t)                #starting value  #
#
weighted=0#
### eucliden likelihood ################ #
type_subs=1    ### type of subsampling  1=in space    2= in time#
tCPU = proc.time()#
res=STBEUFit(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,0,0,type_subs,weighted)#
tCPU = proc.time()-tCPU;tCPU#
eu_par=c(res$par[1],res$par[3],res$par[4],res$par[2])#
names(eu_par)=names(fit$param)#
print(eu_par)#
### OpenCL eucliden likelihood ################ #
local <- c(1,1)#
GPU <- 0#
tGPU = proc.time()#
res1=STBEUFit(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,0,0,type_subs,weighted, local=local, GPU = GPU)#
tGPU = proc.time()-tGPU;tGPU#
eu_par1=c(res1$par[1],res1$par[3],res1$par[4],res1$par[2])#
names(eu_par1)=names(fit$param)#
print(eu_par1)#
tCPU;tGPU
#################################***Double Exponential***####################################### #
############################################
rm(list=ls())#
########################R package########################
require(CompRandFld)#
require(MCMCpack)#
require(STBEU)#
# dir <- "~/Documents/UV/Tesis/OpenCL/Task20BinaryFinal/eu_like"#
# setwd(dir)#
# source("euclidean_cl_st_ocl.R")#
# try(system("R CMD SHLIB euc_like_cl_st_Open.c")) #
# dyn.load("euc_like_cl_st_Open.so")#
####location sites #########################################
lambda=8#
xx=seq(-lambda,lambda);#
coords=as.matrix(expand.grid(xx,xx))   ###regular#
nrow(coords)#
# plot(coords)#
#set.seed(15)                                                                      ### not regular#
#pp<-runifpoint(4*(lambda)^2, win=owin(c(-lambda,lambda),c(-lambda,lambda)))       ### not regular#
#coords<-cbind(pp$x,pp$y)  #
                                                        ### not regular#
####temporal instants #########################################
times=seq(1,5,1)#
###################################################################
type_dist=1                ### type of distance     1=euclidean 2=chordal  3=geodesic #
#
maxdist=2            ## compact support in weights function for pairwise liklihood#
maxtime=2#
#
model=1  #   1=double exponential       2 =gneiting#
#
if (model == 1) {#
     # exponential model#
     cov.model <-"exp_exp"#
     cc=1#
     ######
     mean=0#
     nugget=0#
     scale_s<-3/3#
     scale_t<-3/3#
     sill=1#
     param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill)  #
     fixed=list(nugget=0)#
     fix=nugget#
   }#
if (model == 2) {#
     # gneiting model#
     cov.model <-"gneiting"#
     cc=2#
     ######
     mean=0#
     nugget=0#
     scale_s<-3/3#
     scale_t<-3/20#
     sill=1#
     power_s=1;power_t=1;sep=0.5#
     param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill,#
                power_s=power_s,power_t=power_t,sep=sep)  #
     fixed=list(nugget=0,power_s=power_s,power_t=power_t,sep=sep)  #
     fix=c(nugget, power_s, power_t,sep) #
}#
###################################################################
#
set.seed(276)#
#####################################################################################################      #
# Simulation of the spatial Gaussian random field:#
data <- RFsim(coordx=coords,coordt=times,corrmodel=cov.model, param=param)$data#
mm=mean(c(data))#
vv=var(c(data))#
#####################################################################################################      #
##################################################################################################### #
#
###### Composite likelihood based on pairs estimation ###############################################     #
start=list(mean=mm,scale_s=scale_s,scale_t=scale_t,sill=vv)#
# Maximum composite-likelihood fitting of the random field:#
fit <- FitComposite(data=data,coordx=coords,coordt=times,#
                    corrmodel=cov.model,maxtime=maxtime,maxdist=maxdist,#
                    likelihood="Marginal",type="Pairwise",#
                    start=start,fixed=fixed,weighted=T)#
# Results:#
print(fit$param)#
start#
#################################################
#   parameters for the subsampling #####
################################################
coordx=coords[,1]#
coordy=coords[,2]#
LX=abs(range(coordx)[1]-range(coordx)[2])#
LY=abs(range(coordy)[1]-range(coordy)[2])#
lato_fin=10  #changing window size#
lx=lato_fin          #lunghezza lato x quadrato subfinestra#
ly=lato_fin          #lunghezza lato y quadrato subfinestra#
winc=c(lx/sqrt(LX),ly/sqrt(LY))#
winstp= 1  ###   1/lato_fin complete overlapping   1 "no" overlapping#
################################################
#####################################################################################################      #
theta=c(mm,vv,scale_s,scale_t)                #starting value  #
#
weighted=0#
### eucliden likelihood ################ #
type_subs=1    ### type of subsampling  1=in space    2= in time#
tCPU = proc.time()#
res=STBEUFit(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,0,0,type_subs,weighted)#
tCPU = proc.time()-tCPU;tCPU#
eu_par=c(res$par[1],res$par[3],res$par[4],res$par[2])#
names(eu_par)=names(fit$param)#
print(eu_par)#
### OpenCL eucliden likelihood ################ #
local <- c(1,1)#
GPU <- 0#
tGPU = proc.time()#
res1=STBEUFit(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,0,0,type_subs,weighted, local=local, GPU = GPU)#
tGPU = proc.time()-tGPU;tGPU#
eu_par1=c(res1$par[1],res1$par[3],res1$par[4],res1$par[2])#
names(eu_par1)=names(fit$param)#
print(eu_par1)#
tCPU;tGPU
#################################***Double Exponential***####################################### #
############################################
rm(list=ls())#
########################R package########################
require(CompRandFld)#
require(MCMCpack)#
require(STBEU)#
# dir <- "~/Documents/UV/Tesis/OpenCL/Task20BinaryFinal/eu_like"#
# setwd(dir)#
# source("euclidean_cl_st_ocl.R")#
# try(system("R CMD SHLIB euc_like_cl_st_Open.c")) #
# dyn.load("euc_like_cl_st_Open.so")#
####location sites #########################################
lambda=8#
xx=seq(-lambda,lambda);#
coords=as.matrix(expand.grid(xx,xx))   ###regular#
nrow(coords)#
# plot(coords)#
#set.seed(15)                                                                      ### not regular#
#pp<-runifpoint(4*(lambda)^2, win=owin(c(-lambda,lambda),c(-lambda,lambda)))       ### not regular#
#coords<-cbind(pp$x,pp$y)  #
                                                        ### not regular#
####temporal instants #########################################
times=seq(1,5,1)#
###################################################################
type_dist=1                ### type of distance     1=euclidean 2=chordal  3=geodesic #
#
maxdist=2            ## compact support in weights function for pairwise liklihood#
maxtime=2#
#
model=1  #   1=double exponential       2 =gneiting#
#
if (model == 1) {#
     # exponential model#
     cov.model <-"exp_exp"#
     cc=1#
     ######
     mean=0#
     nugget=0#
     scale_s<-3/3#
     scale_t<-3/3#
     sill=1#
     param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill)  #
     fixed=list(nugget=0)#
     fix=nugget#
   }#
if (model == 2) {#
     # gneiting model#
     cov.model <-"gneiting"#
     cc=2#
     ######
     mean=0#
     nugget=0#
     scale_s<-3/3#
     scale_t<-3/20#
     sill=1#
     power_s=1;power_t=1;sep=0.5#
     param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill,#
                power_s=power_s,power_t=power_t,sep=sep)  #
     fixed=list(nugget=0,power_s=power_s,power_t=power_t,sep=sep)  #
     fix=c(nugget, power_s, power_t,sep) #
}#
###################################################################
#
set.seed(276)#
#####################################################################################################      #
# Simulation of the spatial Gaussian random field:#
data <- RFsim(coordx=coords,coordt=times,corrmodel=cov.model, param=param)$data#
mm=mean(c(data))#
vv=var(c(data))#
#####################################################################################################      #
##################################################################################################### #
#
###### Composite likelihood based on pairs estimation ###############################################     #
start=list(mean=mm,scale_s=scale_s,scale_t=scale_t,sill=vv)#
# Maximum composite-likelihood fitting of the random field:#
fit <- FitComposite(data=data,coordx=coords,coordt=times,#
                    corrmodel=cov.model,maxtime=maxtime,maxdist=maxdist,#
                    likelihood="Marginal",type="Pairwise",#
                    start=start,fixed=fixed,weighted=T)#
# Results:#
print(fit$param)#
start#
#################################################
#   parameters for the subsampling #####
################################################
coordx=coords[,1]#
coordy=coords[,2]#
LX=abs(range(coordx)[1]-range(coordx)[2])#
LY=abs(range(coordy)[1]-range(coordy)[2])#
lato_fin=3  #changing window size#
lx=lato_fin          #lunghezza lato x quadrato subfinestra#
ly=lato_fin          #lunghezza lato y quadrato subfinestra#
winc=c(lx/sqrt(LX),ly/sqrt(LY))#
winstp= 1  ###   1/lato_fin complete overlapping   1 "no" overlapping#
################################################
#####################################################################################################      #
theta=c(mm,vv,scale_s,scale_t)                #starting value  #
#
weighted=0#
### eucliden likelihood ################ #
type_subs=1    ### type of subsampling  1=in space    2= in time#
tCPU = proc.time()#
res=STBEUFit(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,0,0,type_subs,weighted)#
tCPU = proc.time()-tCPU;tCPU#
eu_par=c(res$par[1],res$par[3],res$par[4],res$par[2])#
names(eu_par)=names(fit$param)#
print(eu_par)#
### OpenCL eucliden likelihood ################ #
local <- c(1,1)#
GPU <- 0#
tGPU = proc.time()#
res1=STBEUFit(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,0,0,type_subs,weighted, local=local, GPU = GPU)#
tGPU = proc.time()-tGPU;tGPU#
eu_par1=c(res1$par[1],res1$par[3],res1$par[4],res1$par[2])#
names(eu_par1)=names(fit$param)#
print(eu_par1)#
tCPU;tGPU
library(STBEUFit)
library(STBEU)
help(STBEUFit)
1800*.4
library(STBEU)#
?STBEUFit
#=======================Double Exponential=======================##
rm(list=ls())#
########################R package########################
require(CompRandFld)#
require(MCMCpack)#
require(STBEU)#
####location sites #########################################
lambda=8#
xx=seq(-lambda,lambda);#
coords=as.matrix(expand.grid(xx,xx))   ###regular#
nrow(coords)#
# plot(coords)#
#set.seed(15)                                                                      ### not regular#
#pp<-runifpoint(4*(lambda)^2, win=owin(c(-lambda,lambda),c(-lambda,lambda)))       ### not regular#
#coords<-cbind(pp$x,pp$y)  #
                                                        ### not regular#
####temporal instants #########################################
times=seq(1,5,1)#
#
type_dist=1                ### type of distance     1=euclidean 2=chordal  3=geodesic #
maxdist=2#
maxtime=2#
#
###################################################################
model=1  #   1=double exponential       2 =gneiting#
#
if (model == 1) {#
     # exponential model#
     cov.model <-"exp_exp"#
     cc=1#
     ######
     mean=0#
     nugget=0#
     scale_s<-3/3#
     scale_t<-3/3#
     sill=1#
     param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill)  #
     fixed=list(nugget=0)#
     fix=nugget#
   }#
if (model == 2) {#
     # gneiting model#
     cov.model <-"gneiting"#
     cc=2#
     ######
     mean=0#
     nugget=0#
     scale_s<-3/3#
     scale_t<-3/20#
     sill=1#
     power_s=1;power_t=1;sep=0.5#
     param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill,#
                power_s=power_s,power_t=power_t,sep=sep)  #
     fixed=list(nugget=0,power_s=power_s,power_t=power_t,sep=sep)   #
     fix=c(nugget, power_s, power_t,sep) #
}#
###################################################################
set.seed(276)#
###################################################################
# Simulation of the  Gaussian random field:#
data <- RFsim(coordx=coords,coordt=times,corrmodel=cov.model, param=param)$data#
###################################################################
mm=mean(c(data))#
vv=var(c(data))#
###### Composite likelihood based on pairs estimation #############
start=list(mean=mm,scale_s=scale_s,scale_t=scale_t,sill=vv)#
#
# Maximum composite-likelihood fitting of the random field:#
fit <- FitComposite(data=data,coordx=coords,coordt=times,#
                    corrmodel=cov.model,maxtime=maxtime,maxdist=maxdist,#
                    likelihood="Marginal",type="Pairwise",#
                    start=start,fixed=fixed,weighted=T)#
#
# Results:#
print(fit$param)#
#################################################
#   parameters for the subsampling #####
################################################
coordx=coords[,1]#
coordy=coords[,2]#
LX=abs(range(coordx)[1]-range(coordx)[2])#
LY=abs(range(coordy)[1]-range(coordy)[2])#
lato_fin=3  #changing window size#
lx=lato_fin          #lunghezza lato x quadrato subfinestra#
ly=lato_fin          #lunghezza lato y quadrato subfinestra#
winc=c(lx/sqrt(LX),ly/sqrt(LY))#
winstp= 1###   1/lato_fin complete overlapping in space  1 "no" overlapping in space#
################################################
winc_t=4   ###  length of temporal window#
winstp_t=1 ###   0.5 half overlapping  1 "no" overlapping#
################################################
#
theta=c(mm,vv,scale_s,scale_t)                #starting value  #
weighted=1                                          #weigthed version  1=yes 0=no#
### eucliden likelihood ################ #
type_subs=3   ### type of subsampling  1=in space    2= in time  3 =spacetime#
tCPU = proc.time()#
res=STBEUFit(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,winc_t,winstp_t,type_subs,weighted)#
tCPU = proc.time()-tCPU;tCPU#
eu_par=c(res$par[1],res$par[3],res$par[4],res$par[2])#
names(eu_par)=names(fit$param)#
print(eu_par)#
### OpenCL eucliden likelihood ################ #
local <- c(1,1)#
GPU <- 0#
tGPU = proc.time()#
res1=STBEUFit(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,winc_t,winstp_t,type_subs,weighted, local = local, GPU = GPU)#
tGPU = proc.time()-tGPU;tGPU#
eu_par1=c(res1$par[1],res1$par[3],res1$par[4],res1$par[2])#
names(eu_par1)=names(fit$param)#
print(eu_par1)#
tCPU;tGPU
#=======================Gneting=======================##
#
rm(list=ls())#
########################R package########################
require(CompRandFld)#
require(MCMCpack)#
require(STBEU)#
####location sites #########################################
lambda=8#
xx=seq(-lambda,lambda);#
coords=as.matrix(expand.grid(xx,xx))   ###regular#
nrow(coords)#
# plot(coords)#
#set.seed(15)                                                                      ### not regular#
#pp<-runifpoint(4*(lambda)^2, win=owin(c(-lambda,lambda),c(-lambda,lambda)))       ### not regular#
#coords<-cbind(pp$x,pp$y)  #
### not regular#
####temporal instants #########################################
times=seq(1,5,1)#
#
type_dist=1                ### type of distance     1=euclidean 2=chordal  3=geodesic #
maxdist=2#
maxtime=2#
###################################################################
model=2  #   1=double exponential       2 =gneiting#
#
if (model == 1) {#
  # exponential model#
  cov.model <-"exp_exp"#
  cc=1#
  ######
  mean=0#
  nugget=0#
  scale_s<-3/3#
  scale_t<-3/3#
  sill=1#
  param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill)  #
  fixed=list(nugget=0)#
  fix=nugget#
}#
if (model == 2) {#
  # gneiting model#
  cov.model <-"gneiting"#
  cc=2#
  ######
  mean=0#
  nugget=0#
  scale_s<-3/3#
  scale_t<-3/20#
  sill=1#
  power_s=1;power_t=1;sep=0.5#
  param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill,#
             power_s=power_s,power_t=power_t,sep=sep)  #
  fixed=list(nugget=0,power_s=power_s,power_t=power_t,sep=sep)   #
  fix=c(nugget, power_s, power_t,sep) #
}#
###################################################################
set.seed(276)#
###################################################################
# Simulation of the  Gaussian random field:#
data <- RFsim(coordx=coords,coordt=times,corrmodel=cov.model, param=param)$data#
###################################################################
###################################################################
mm=mean(c(data))#
vv=var(c(data))#
###### Composite likelihood based on pairs estimation #############
start=list(mean=mm,scale_s=scale_s,scale_t=scale_t,sill=vv)#
#
# Maximum composite-likelihood fitting of the random field:#
fit <- FitComposite(data=data,coordx=coords,coordt=times,#
                    corrmodel=cov.model,maxtime=maxtime,maxdist=maxdist,#
                    likelihood="Marginal",type="Pairwise",#
                    start=start,fixed=fixed,weighted=T)#
#
# Results:#
print(fit$param)#
#################################################
#   parameters for the subsampling #####
################################################
coordx=coords[,1]#
coordy=coords[,2]#
LX=abs(range(coordx)[1]-range(coordx)[2])#
LY=abs(range(coordy)[1]-range(coordy)[2])#
lato_fin=3  #changing window size#
lx=lato_fin          #lunghezza lato x quadrato subfinestra#
ly=lato_fin          #lunghezza lato y quadrato subfinestra#
winc=c(lx/sqrt(LX),ly/sqrt(LY))#
winstp= 1###   1/lato_fin complete overlapping in space  1 "no" overlapping in space#
################################################
winc_t=4   ###  length of temporal window#
winstp_t=1 ###   0.5 half overlapping  1 "no" overlapping#
################################################
#
theta=c(mm,vv,scale_s,scale_t)                #starting value  #
weighted=0                                          #weigthed version  1=yes 0=no#
### eucliden likelihood ################ #
type_subs=3   ### type of subsampling  1=in space    2= in time  3 =spacetime#
tCPU = proc.time()#
res=STBEUFit(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,winc_t,winstp_t,type_subs,weighted)#
tCPU = proc.time()-tCPU;tCPU#
eu_par=c(res$par[1],res$par[3],res$par[4],res$par[2])#
names(eu_par)=names(fit$param)#
print(eu_par)#
### OpenCL eucliden likelihood ################ #
local <- c(1,1)#
GPU <- 0#
tGPU = proc.time()#
res1=STBEUFit(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,winc_t,winstp_t,type_subs,weighted, local = local, GPU = GPU)#
tGPU = proc.time()-tGPU;tGPU#
eu_par1=c(res1$par[1],res1$par[3],res1$par[4],res1$par[2])#
names(eu_par1)=names(fit$param)#
print(eu_par1)#
tCPU;tGPU
rm(list=ls())#
########################R package########################
require(CompRandFld)#
require(MCMCpack)#
require(STBEU)#
# dir <- "~/Documents/UV/Tesis/OpenCL/Task20BinaryFinal/eu_like"#
# setwd(dir)#
# source("euclidean_cl_st_ocl.R")#
# try(system("R CMD SHLIB euc_like_cl_st_Open.c")) #
# dyn.load("euc_like_cl_st_Open.so")#
####location sites #########################################
lambda=8#
xx=seq(-lambda,lambda);#
coords=as.matrix(expand.grid(xx,xx))   ###regular#
nrow(coords)#
# plot(coords)#
#set.seed(15)                                                                      ### not regular#
#pp<-runifpoint(4*(lambda)^2, win=owin(c(-lambda,lambda),c(-lambda,lambda)))       ### not regular#
#coords<-cbind(pp$x,pp$y)  #
### not regular#
####temporal instants #########################################
times=seq(1,5,1)#
###################################################################
type_dist=1                ### type of distance     1=euclidean 2=chordal  3=geodesic #
#
maxdist=2                  ## compact support in weights function for pairwise liklihood#
maxtime=2#
#
model=2  #   1=double exponential       2 =gneiting#
#
if (model == 1) {#
  # exponential model#
  cov.model <-"exp_exp"#
  cc=1#
  ######
  mean=0#
  nugget=0#
  scale_s<-3/3#
  scale_t<-3/3#
  sill=1#
  param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill)  #
  fixed=list(nugget=0)#
  fix=nugget#
}#
if (model == 2) {#
  # gneiting model#
  cov.model <-"gneiting"#
  cc=2#
  ######
  mean=0#
  nugget=0#
  scale_s<-3/3#
  scale_t<-3/20#
  sill=1#
  power_s=1;power_t=1;sep=0.5#
  param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill,#
             power_s=power_s,power_t=power_t,sep=sep)  #
  fixed=list(nugget=0,power_s=power_s,power_t=power_t,sep=sep)  #
  fix=c(nugget, power_s, power_t,sep) #
}#
###################################################################
#
set.seed(276)#
#####################################################################################################      #
# Simulation of the spatial Gaussian random field:#
data <- RFsim(coordx=coords,coordt=times,corrmodel=cov.model, param=param)$data#
mm=mean(c(data))#
vv=var(c(data))#
#####################################################################################################      #
##################################################################################################### #
#
###### Composite likelihood based on pairs estimation ###############################################     #
#
start=list(mean=mm,scale_s=scale_s,scale_t=scale_t,sill=vv)#
# Maximum composite-likelihood fitting of the random field:#
fit <- FitComposite(data=data,coordx=coords,coordt=times,#
                    corrmodel=cov.model,maxtime=maxtime,maxdist=maxdist,#
                    likelihood="Marginal",type="Pairwise",#
                    start=start,fixed=fixed,weighted=T)#
# Results:#
print(fit$param)#
start#
#################################################
#   parameters for the subsampling #####
################################################
coordx=coords[,1]#
coordy=coords[,2]#
LX=abs(range(coordx)[1]-range(coordx)[2])#
LY=abs(range(coordy)[1]-range(coordy)[2])#
lato_fin=3  #changing window size#
lx=lato_fin          #lunghezza lato x quadrato subfinestra#
ly=lato_fin          #lunghezza lato y quadrato subfinestra#
winc=c(lx/sqrt(LX),ly/sqrt(LY))#
winstp= 1  ###   1/lato_fin complete overlapping   1 "no" overlapping#
################################################
#####################################################################################################      #
theta=c(mm,vv,scale_s,scale_t)                #starting value  #
#
weighted=0#
### eucliden likelihood ################ #
type_subs=1    ### type of subsampling  1=in space    2= in time#
tCPU = proc.time()#
res=STBEUFit(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,0,0,type_subs,weighted)#
tCPU = proc.time()-tCPU;tCPU#
eu_par=c(res$par[1],res$par[3],res$par[4],res$par[2])#
names(eu_par)=names(fit$param)#
print(eu_par)#
### OpenCL eucliden likelihood ################ #
local <- c(1,1)#
GPU <- 0#
tGPU = proc.time()#
res1=STBEUFit(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,0,0,type_subs,weighted, local=local, GPU = GPU)#
tGPU = proc.time()-tGPU;tGPU#
eu_par1=c(res1$par[1],res1$par[3],res1$par[4],res1$par[2])#
names(eu_par1)=names(fit$param)#
print(eu_par1)#
tCPU;tGPU#
STBEUTimeEvalOcl(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,0,0,type_subs,weighted, local=local, GPU = GPU)
#################################***Double Exponential***####################################### #
############################################
rm(list=ls())#
########################R package########################
require(CompRandFld)#
require(MCMCpack)#
require(STBEU)#
####location sites #########################################
lambda=2#
xx=seq(-lambda,lambda);#
coords=as.matrix(expand.grid(xx,xx))   ###regular#
nrow(coords)#
#set.seed(15)                                                                      ### not regular#
#pp<-runifpoint(4*(lambda)^2, win=owin(c(-lambda,lambda),c(-lambda,lambda)))       ### not regular#
#coords<-cbind(pp$x,pp$y)  #
                                                        ### not regular#
####temporal instants #########################################
times=seq(1,50,1)#
type_dist=1                ### type of distance     1=euclidean 2=chordal  3=geodesic #
maxdist=2#
maxtime=5#
#
###################################################################
###################################################################
model=1  #   1=double exponential       2 =gneiting#
#
if (model == 1) {#
     # exponential model#
     cov.model <-"exp_exp"#
     cc=1#
     ######
     mean=0#
     nugget=0#
     scale_s<-3/3#
     scale_t<-3/3#
     sill=1#
     param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill)  #
     fixed=list(nugget=0)#
     fix=nugget#
   }#
if (model == 2) {#
     # gneiting model#
     cov.model <-"gneiting"#
     cc=2#
     ######
     mean=0#
     nugget=0#
     scale_s<-3/3#
     scale_t<-3/20#
     sill=1#
     power_s=1;power_t=1;sep=0.5#
     param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill,#
                power_s=power_s,power_t=power_t,sep=sep)  #
     fixed=list(nugget=0,power_s=power_s,power_t=power_t,sep=sep)  #
     fix=c(nugget, power_s, power_t,sep)  #
}#
###################################################################
###################################################################
###################################################################
#####################################################################################################      #
# Simulation of the spatial Gaussian random field:#
data <- RFsim(coordx=coords,coordt=times,corrmodel=cov.model, param=param)$data#
mm=mean(c(data))#
vv=var(c(data))#
#####################################################################################################      #
##################################################################################################### #
#
###### Composite likelihood based on pairs estimation ###############################################     #
start=list(mean=mm,scale_s=scale_s,scale_t=scale_t,sill=vv)#
# Maximum composite-likelihood fitting of the random field:#
fit <- FitComposite(data=data,coordx=coords,coordt=times,#
                    corrmodel=cov.model,maxtime=maxtime,maxdist=maxdist,#
                    likelihood="Marginal",type="Pairwise",#
                    start=start,fixed=fixed,weighted=T)#
# Results:#
print(fit$param)#
#################################################
#   parameters for the temporal subsampling #####
################################################
#
winc=4    ###  length of temporal window#
winstp=1 ###   0.5 half overlapping  1 "no" overlapping#
################################################
#
#####################################################################################################      #
theta=c(mm,vv,scale_s,scale_t)                #starting value #
weighted=0#
### eucliden likelihood ################ #
type_subs=2    ### type of subsampling  1=in space    2= in time#
tCPU = proc.time()#
res=STBEUFit(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,0,0,winc,winstp,type_subs,weighted)#
tCPU = proc.time()-tCPU;tCPU#
eu_par=c(res$par[1],res$par[3],res$par[4],res$par[2])#
names(eu_par)=names(fit$param)#
print(eu_par)#
#
### OpenCL eucliden likelihood ################ #
local <- c(1,1)#
GPU <- 0#
tGPU = proc.time()#
res1=STBEUFit(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,0,0,winc,winstp,type_subs,weighted, local=local, GPU = GPU)
STBEUTimeEvalOcl(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,0,0,winc,winstp,type_subs,weighted, local=local, GPU = GPU)
rm(list=ls())#
########################R package########################
require(CompRandFld)#
require(MCMCpack)#
require(STBEU)#
####location sites #########################################
lambda=2#
xx=seq(-lambda,lambda);#
coords=as.matrix(expand.grid(xx,xx))   ###regular#
nrow(coords)#
#
#set.seed(15)                                                                      ### not regular#
#pp<-runifpoint(4*(lambda)^2, win=owin(c(-lambda,lambda),c(-lambda,lambda)))       ### not regular#
#coords<-cbind(pp$x,pp$y)  #
### not regular#
####temporal instants #########################################
times=seq(1,50,1)#
type_dist=1                ### type of distance     1=euclidean 2=chordal  3=geodesic #
maxdist=2#
maxtime=2#
#
###################################################################
###################################################################
model=2  #   1=double exponential       2 =gneiting#
#
if (model == 1) {#
  # exponential model#
  cov.model <-"exp_exp"#
  cc=1#
  ######
  mean=0#
  nugget=0#
  scale_s<-3/3#
  scale_t<-3/3#
  sill=1#
  param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill)  #
  fixed=list(nugget=0)#
  fix=nugget#
}#
if (model == 2) {#
  # gneiting model#
  cov.model <-"gneiting"#
  cc=2#
  ######
  mean=0#
  nugget=0#
  scale_s<-3/3#
  scale_t<-3/20#
  sill=1#
  power_s=1;power_t=1;sep=0.5#
  param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill,#
             power_s=power_s,power_t=power_t,sep=sep)  #
  fixed=list(nugget=0,power_s=power_s,power_t=power_t,sep=sep)  #
  fix=c(nugget, power_s, power_t,sep)  #
}#
###################################################################
###################################################################
###################################################################
#####################################################################################################      #
# Simulation of the spatial Gaussian random field:#
data <- RFsim(coordx=coords,coordt=times,corrmodel=cov.model, param=param)$data#
mm=mean(c(data))#
vv=var(c(data))#
#####################################################################################################      #
##################################################################################################### #
#
###### Composite likelihood based on pairs estimation ###############################################     #
start=list(mean=mm,scale_s=scale_s,scale_t=scale_t,sill=vv)#
# Maximum composite-likelihood fitting of the random field:#
fit <- FitComposite(data=data,coordx=coords,coordt=times,#
                    corrmodel=cov.model,maxtime=maxtime,maxdist=maxdist,#
                    likelihood="Marginal",type="Pairwise",#
                    start=start,fixed=fixed,weighted=T)#
# Results:#
print(fit$param)#
#################################################
#   parameters for the temporal subsampling #####
################################################
#
winc=4    ###  length of temporal window#
winstp=1 ###   0.5 half overlapping  1 "no" overlapping#
################################################
#
#####################################################################################################      #
theta=c(mm,vv,scale_s,scale_t)                #starting value #
weighted=0#
### eucliden likelihood ################ #
type_subs=2    ### type of subsampling  1=in space    2= in time#
tCPU = proc.time()#
res=STBEUFit(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,0,0,winc,winstp,type_subs,weighted)#
tCPU = proc.time()-tCPU;tCPU#
eu_par=c(res$par[1],res$par[3],res$par[4],res$par[2])#
names(eu_par)=names(fit$param)#
print(eu_par)#
#
### OpenCL eucliden likelihood ################ #
local <- c(1,1)#
GPU <- 0#
tGPU = proc.time()#
res1=STBEUFit(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,0,0,winc,winstp,type_subs,weighted, local=local, GPU = GPU)#
tGPU = proc.time()-tGPU;tGPU#
eu_par1=c(res1$par[1],res1$par[3],res1$par[4],res1$par[2])#
names(eu_par1)=names(fit$param)#
print(eu_par1)#
tCPU;tGPU
STBEUTimeEvalOcl(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,0,0,winc,winstp,type_subs,weighted, local=local, GPU = GPU)
rm(list=ls())#
########################R package########################
require(CompRandFld)#
require(MCMCpack)#
require(STBEU)#
####location sites #########################################
lambda=2#
xx=seq(-lambda,lambda);#
coords=as.matrix(expand.grid(xx,xx))   ###regular#
nrow(coords)#
#
#set.seed(15)                                                                      ### not regular#
#pp<-runifpoint(4*(lambda)^2, win=owin(c(-lambda,lambda),c(-lambda,lambda)))       ### not regular#
#coords<-cbind(pp$x,pp$y)  #
### not regular#
####temporal instants #########################################
times=seq(1,50,1)#
type_dist=1                ### type of distance     1=euclidean 2=chordal  3=geodesic #
maxdist=2#
maxtime=2#
#
###################################################################
###################################################################
model=2  #   1=double exponential       2 =gneiting#
#
if (model == 1) {#
  # exponential model#
  cov.model <-"exp_exp"#
  cc=1#
  ######
  mean=0#
  nugget=0#
  scale_s<-3/3#
  scale_t<-3/3#
  sill=1#
  param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill)  #
  fixed=list(nugget=0)#
  fix=nugget#
}#
if (model == 2) {#
  # gneiting model#
  cov.model <-"gneiting"#
  cc=2#
  ######
  mean=0#
  nugget=0#
  scale_s<-3/3#
  scale_t<-3/20#
  sill=1#
  power_s=1;power_t=1;sep=0.5#
  param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill,#
             power_s=power_s,power_t=power_t,sep=sep)  #
  fixed=list(nugget=0,power_s=power_s,power_t=power_t,sep=sep)  #
  fix=c(nugget, power_s, power_t,sep)  #
}#
###################################################################
###################################################################
###################################################################
#####################################################################################################      #
# Simulation of the spatial Gaussian random field:#
data <- RFsim(coordx=coords,coordt=times,corrmodel=cov.model, param=param)$data#
mm=mean(c(data))#
vv=var(c(data))#
#####################################################################################################      #
##################################################################################################### #
#
###### Composite likelihood based on pairs estimation ###############################################     #
start=list(mean=mm,scale_s=scale_s,scale_t=scale_t,sill=vv)#
# Maximum composite-likelihood fitting of the random field:#
fit <- FitComposite(data=data,coordx=coords,coordt=times,#
                    corrmodel=cov.model,maxtime=maxtime,maxdist=maxdist,#
                    likelihood="Marginal",type="Pairwise",#
                    start=start,fixed=fixed,weighted=T)#
# Results:#
print(fit$param)#
#################################################
#   parameters for the temporal subsampling #####
################################################
#
winc=4    ###  length of temporal window#
winstp=1 ###   0.5 half overlapping  1 "no" overlapping#
################################################
#
#####################################################################################################      #
theta=c(mm,vv,scale_s,scale_t)                #starting value #
weighted=0#
### eucliden likelihood ################ #
type_subs=2    ### type of subsampling  1=in space    2= in time#
tCPU = proc.time()#
res=STBEUFit(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,0,0,winc,winstp,type_subs,weighted)#
tCPU = proc.time()-tCPU;tCPU#
eu_par=c(res$par[1],res$par[3],res$par[4],res$par[2])#
names(eu_par)=names(fit$param)#
print(eu_par)#
#
### OpenCL eucliden likelihood ################ #
local <- c(1,1)#
GPU <- 0#
tGPU = proc.time()#
res1=STBEUFit(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,0,0,winc,winstp,type_subs,weighted, local=local, GPU = GPU)#
tGPU = proc.time()-tGPU;tGPU#
eu_par1=c(res1$par[1],res1$par[3],res1$par[4],res1$par[2])#
names(eu_par1)=names(fit$param)#
print(eu_par1)#
tCPU;tGPU
STBEUTimeEvalOcl(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,0,0,winc,winstp,type_subs,weighted, local=local, GPU = GPU)
#################################***Double Exponential***####################################### #
############################################
rm(list=ls())#
########################R package########################
require(CompRandFld)#
require(MCMCpack)#
require(STBEU)#
####location sites #########################################
lambda=2#
xx=seq(-lambda,lambda);#
coords=as.matrix(expand.grid(xx,xx))   ###regular#
nrow(coords)#
#set.seed(15)                                                                      ### not regular#
#pp<-runifpoint(4*(lambda)^2, win=owin(c(-lambda,lambda),c(-lambda,lambda)))       ### not regular#
#coords<-cbind(pp$x,pp$y)  #
                                                        ### not regular#
####temporal instants #########################################
times=seq(1,50,1)#
type_dist=1                ### type of distance     1=euclidean 2=chordal  3=geodesic #
maxdist=2#
maxtime=5#
#
###################################################################
###################################################################
model=1  #   1=double exponential       2 =gneiting#
#
if (model == 1) {#
     # exponential model#
     cov.model <-"exp_exp"#
     cc=1#
     ######
     mean=0#
     nugget=0#
     scale_s<-3/3#
     scale_t<-3/3#
     sill=1#
     param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill)  #
     fixed=list(nugget=0)#
     fix=nugget#
   }#
if (model == 2) {#
     # gneiting model#
     cov.model <-"gneiting"#
     cc=2#
     ######
     mean=0#
     nugget=0#
     scale_s<-3/3#
     scale_t<-3/20#
     sill=1#
     power_s=1;power_t=1;sep=0.5#
     param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill,#
                power_s=power_s,power_t=power_t,sep=sep)  #
     fixed=list(nugget=0,power_s=power_s,power_t=power_t,sep=sep)  #
     fix=c(nugget, power_s, power_t,sep)  #
}#
###################################################################
###################################################################
###################################################################
#####################################################################################################      #
# Simulation of the spatial Gaussian random field:#
data <- RFsim(coordx=coords,coordt=times,corrmodel=cov.model, param=param)$data#
mm=mean(c(data))#
vv=var(c(data))#
#####################################################################################################      #
##################################################################################################### #
#
###### Composite likelihood based on pairs estimation ###############################################     #
start=list(mean=mm,scale_s=scale_s,scale_t=scale_t,sill=vv)#
# Maximum composite-likelihood fitting of the random field:#
fit <- FitComposite(data=data,coordx=coords,coordt=times,#
                    corrmodel=cov.model,maxtime=maxtime,maxdist=maxdist,#
                    likelihood="Marginal",type="Pairwise",#
                    start=start,fixed=fixed,weighted=T)#
# Results:#
print(fit$param)#
#################################################
#   parameters for the temporal subsampling #####
################################################
#
winc=4    ###  length of temporal window#
winstp=1 ###   0.5 half overlapping  1 "no" overlapping#
################################################
#
#####################################################################################################      #
theta=c(mm,vv,scale_s,scale_t)                #starting value #
weighted=0#
### eucliden likelihood ################ #
type_subs=2    ### type of subsampling  1=in space    2= in time#
tCPU = proc.time()#
res=STBEUFit(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,0,0,winc,winstp,type_subs,weighted)#
tCPU = proc.time()-tCPU;tCPU#
eu_par=c(res$par[1],res$par[3],res$par[4],res$par[2])#
names(eu_par)=names(fit$param)#
print(eu_par)#
#
### OpenCL eucliden likelihood ################ #
local <- c(1,1)#
GPU <- 0#
tGPU = proc.time()#
res1=STBEUFit(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,0,0,winc,winstp,type_subs,weighted, local=local, GPU = GPU)#
tGPU = proc.time()-tGPU;tGPU#
eu_par1=c(res1$par[1],res1$par[3],res1$par[4],res1$par[2])#
names(eu_par1)=names(fit$param)#
print(eu_par1)#
tCPU;tGPU
STBEUTimeEvalOcl(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,0,0,winc,winstp,type_subs,weighted, local=local, GPU = GPU)
rm(list=ls())#
########################R package########################
#
require(CompRandFld)#
require(MCMCpack)#
require(STBEU)#
# dir <- "~/Documents/UV/Tesis/OpenCL/Task20BinaryFinal/eu_like"#
# setwd(dir)#
# source("euclidean_cl_st_ocl.R")#
# try(system("R CMD SHLIB euc_like_cl_st_Open.c"))#
# dyn.load("euc_like_cl_st_Open.so")#
# .C("create_binary_kernel", as.integer(0),as.character("Gneiting.cl")) #dev must be 0 or two (double precision)#
#
####location sites #########################################
lambda=8#
xx=seq(-lambda,lambda);#
coords=as.matrix(expand.grid(xx,xx))   ###regular#
nrow(coords)#
# plot(coords)#
#set.seed(15)                                                                      ### not regular#
#pp<-runifpoint(4*(lambda)^2, win=owin(c(-lambda,lambda),c(-lambda,lambda)))       ### not regular#
#coords<-cbind(pp$x,pp$y)  #
### not regular#
####temporal instants #########################################
times=seq(1,5,1)#
type_dist=1                ### type of distance     1=euclidean 2=chordal  3=geodesic #
maxdist=2#
maxtime=2#
###################################################################
###################################################################
model=2  #   1=double exponential       2 =gneiting#
#
if (model == 1) {#
  # exponential model#
  cov.model <-"exp_exp"#
  cc=1#
  ######
  mean=0#
  nugget=0#
  scale_s<-3/3#
  scale_t<-3/3#
  sill=1#
  param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill)  #
  fixed=list(nugget=0)#
  fix=nugget#
}#
if (model == 2) {#
  # gneiting model#
  cov.model <-"gneiting"#
  cc=2#
  ######
  mean=0#
  nugget=0#
  scale_s<-3/3#
  scale_t<-3/20#
  sill=1#
  power_s=1;power_t=1;sep=0.5#
  param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill,#
             power_s=power_s,power_t=power_t,sep=sep)  #
  fixed=list(nugget=0,power_s=power_s,power_t=power_t,sep=sep)   #
  fix=c(nugget, power_s, power_t,sep) #
}#
###################################################################
###################################################################
###################################################################
set.seed(276)#
#####################################################################################################      #
# Simulation of the  Gaussian random field:#
data <- RFsim(coordx=coords,coordt=times,corrmodel=cov.model, param=param)$data#
#####################################################################################################      #
##################################################################################################### #
mm=mean(c(data))#
vv=var(c(data))#
###### Composite likelihood based on pairs estimation ###############################################     #
#
start=list(mean=mm,scale_s=scale_s,scale_t=scale_t,sill=vv)#
#
# Maximum composite-likelihood fitting of the random field:#
fit <- FitComposite(data=data,coordx=coords,coordt=times,#
                    corrmodel=cov.model,maxtime=maxtime,maxdist=maxdist,#
                    likelihood="Marginal",type="Pairwise",#
                    start=start,fixed=fixed,weighted=T)#
#
# Results:#
print(fit$param)#
#################################################
#   parameters for the subsampling #####
################################################
coordx=coords[,1]#
coordy=coords[,2]#
LX=abs(range(coordx)[1]-range(coordx)[2])#
LY=abs(range(coordy)[1]-range(coordy)[2])#
lato_fin=3  #changing window size#
lx=lato_fin          #lunghezza lato x quadrato subfinestra#
ly=lato_fin          #lunghezza lato y quadrato subfinestra#
winc=c(lx/sqrt(LX),ly/sqrt(LY))#
winstp= 1###   1/lato_fin complete overlapping in space  1 "no" overlapping in space#
################################################
winc_t=4   ###  length of temporal window#
winstp_t=1 ###   0.5 half overlapping  1 "no" overlapping#
################################################
#####################################################################################################      #
theta=c(mm,vv,scale_s,scale_t)                #starting value  #
weighted=0                                          #weigthed version  1=yes 0=no#
### eucliden likelihood ################ #
type_subs=3   ### type of subsampling  1=in space    2= in time  3 =spacetime#
tCPU = proc.time()#
res=STBEUFit(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,winc_t,winstp_t,type_subs,weighted)#
tCPU = proc.time()-tCPU;tCPU#
eu_par=c(res$par[1],res$par[3],res$par[4],res$par[2])#
names(eu_par)=names(fit$param)#
print(eu_par)#
### OpenCL eucliden likelihood ################ #
local <- c(1,1)#
GPU <- 0#
tGPU = proc.time()#
res1=STBEUFit(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,winc_t,winstp_t,type_subs,weighted, local = local, GPU = GPU)#
tGPU = proc.time()-tGPU;tGPU#
eu_par1=c(res1$par[1],res1$par[3],res1$par[4],res1$par[2])#
names(eu_par1)=names(fit$param)#
print(eu_par1)#
tCPU;tGPU
STBEUTimeEvalOcl(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,winc_t,winstp_t,type_subs,weighted, local = local, GPU = GPU)
STBEUTimeEvalOcl(theta,fix,coords,times,cc=2,data,type_dist,maxdist ,maxtime,winc,winstp,winc_t,winstp_t,type_subs,weighted, local = local, GPU = GPU)
STBEUTimeEvalOcl(theta,fix,coords,times,cc=1,data,type_dist,maxdist ,maxtime,winc,winstp,winc_t,winstp_t,type_subs,weighted, local = local, GPU = GPU)
theta
fix
library(STBEU)
??STBEUTimeEvalOcl
library(STBEU)
?STBEUTimeEvalOcl
#################################***Double Exponential***####################################### #
############################################
rm(list=ls())#
########################R package########################
#
require(CompRandFld)#
require(MCMCpack)#
require(STBEU)#
# dir <- "~/Documents/UV/Tesis/OpenCL/Task20BinaryFinal/eu_like"#
# setwd(dir)#
# source("euclidean_cl_st_ocl.R")#
# try(system("R CMD SHLIB euc_like_cl_st_Open.c"))#
# dyn.load("euc_like_cl_st_Open.so")#
# .C("create_binary_kernel", as.integer(0),as.character("DouExp.cl")) #dev must be 0 or two (double precision)#
####location sites #########################################
lambda=8#
xx=seq(-lambda,lambda);#
coords=as.matrix(expand.grid(xx,xx))   ###regular#
nrow(coords)#
# plot(coords)#
#set.seed(15)                                                                      ### not regular#
#pp<-runifpoint(4*(lambda)^2, win=owin(c(-lambda,lambda),c(-lambda,lambda)))       ### not regular#
#coords<-cbind(pp$x,pp$y)  #
                                                        ### not regular#
####temporal instants #########################################
times=seq(1,5,1)#
type_dist=1                ### type of distance     1=euclidean 2=chordal  3=geodesic #
maxdist=2#
maxtime=2#
###################################################################
###################################################################
model=1  #   1=double exponential       2 =gneiting#
#
if (model == 1) {#
     # exponential model#
     cov.model <-"exp_exp"#
     cc=1#
     ######
     mean=0#
     nugget=0#
     scale_s<-3/3#
     scale_t<-3/3#
     sill=1#
     param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill)  #
     fixed=list(nugget=0)#
     fix=nugget#
   }#
if (model == 2) {#
     # gneiting model#
     cov.model <-"gneiting"#
     cc=2#
     ######
     mean=0#
     nugget=0#
     scale_s<-3/3#
     scale_t<-3/20#
     sill=1#
     power_s=1;power_t=1;sep=0.5#
     param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill,#
                power_s=power_s,power_t=power_t,sep=sep)  #
     fixed=list(nugget=0,power_s=power_s,power_t=power_t,sep=sep)   #
     fix=c(nugget, power_s, power_t,sep) #
}#
###################################################################
###################################################################
###################################################################
set.seed(276)#
#####################################################################################################      #
# Simulation of the  Gaussian random field:#
data <- RFsim(coordx=coords,coordt=times,corrmodel=cov.model, param=param)$data#
#####################################################################################################      #
##################################################################################################### #
mm=mean(c(data))#
vv=var(c(data))#
###### Composite likelihood based on pairs estimation ###############################################     #
#
start=list(mean=mm,scale_s=scale_s,scale_t=scale_t,sill=vv)#
#
# Maximum composite-likelihood fitting of the random field:#
fit <- FitComposite(data=data,coordx=coords,coordt=times,#
                    corrmodel=cov.model,maxtime=maxtime,maxdist=maxdist,#
                    likelihood="Marginal",type="Pairwise",#
                    start=start,fixed=fixed,weighted=T)#
#
# Results:#
print(fit$param)#
#################################################
#   parameters for the subsampling #####
################################################
coordx=coords[,1]#
coordy=coords[,2]#
LX=abs(range(coordx)[1]-range(coordx)[2])#
LY=abs(range(coordy)[1]-range(coordy)[2])#
lato_fin=3  #changing window size#
lx=lato_fin          #lunghezza lato x quadrato subfinestra#
ly=lato_fin          #lunghezza lato y quadrato subfinestra#
winc=c(lx/sqrt(LX),ly/sqrt(LY))#
winstp= 1###   1/lato_fin complete overlapping in space  1 "no" overlapping in space#
################################################
winc_t=4   ###  length of temporal window#
winstp_t=1 ###   0.5 half overlapping  1 "no" overlapping#
################################################
#####################################################################################################      #
theta=c(mm,vv,scale_s,scale_t)                #starting value  #
weighted=0                                          #weigthed version  1=yes 0=no#
### eucliden likelihood ################ #
type_subs=3   ### type of subsampling  1=in space    2= in time  3 =spacetime#
tCPU = proc.time()#
res=STBEUFit(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,winc_t,winstp_t,type_subs,weighted)#
tCPU = proc.time()-tCPU;tCPU#
eu_par=c(res$par[1],res$par[3],res$par[4],res$par[2])#
names(eu_par)=names(fit$param)#
print(eu_par)#
### OpenCL eucliden likelihood ################ #
local <- c(1,1)#
GPU <- 0#
tGPU = proc.time()#
res1=STBEUFit(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,winc_t,winstp_t,type_subs,weighted, local = local, GPU = GPU)#
tGPU = proc.time()-tGPU;tGPU#
eu_par1=c(res1$par[1],res1$par[3],res1$par[4],res1$par[2])#
names(eu_par1)=names(fit$param)#
print(eu_par1)#
tCPU;tGPU#
SubSampTimeEval(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,winc_t,winstp_t,type_subs,weighted, local = local, GPU = GPU)
{#
  "Setting: ns:10201, nt:5,data:norm(0,1),lam:50,maxdist:5,maxtime:1,lato_fin:maxdist*2,model:DouExp"#
  rm(list=ls())#
  ########################R package########################
  require(CompRandFld)#
  require(MCMCpack)#
  require(STBEU)#
  ####location sites #########################################
  lambda=50#
  xx=seq(-lambda,lambda);#
  coords=as.matrix(expand.grid(xx,xx))   ###regular#
  plot(coords)#
  #set.seed(15)                                                                      ### not regular#
  #pp<-runifpoint(4*(lambda)^2, win=owin(c(-lambda,lambda),c(-lambda,lambda)))       ### not regular#
  #coords<-cbind(pp$x,pp$y)  #
  ### not regular#
  ####temporal instants #########################################
  times=seq(1,5,1)#
  ###################################################################
  nrow(coords)#
  nrow(coords)*length(times)#
  type_dist=1                ### type of distance     1=euclidean 2=chordal  3=geodesic #
  maxdist=5            ## compact support in weights function for pairwise liklihood#
  maxtime=1#
  model=1  #   1=double exponential       2 =gneiting#
  if (model == 1) {#
    # exponential model#
    cov.model <-"exp_exp"#
    cc=1#
    ######
    mean=0#
    nugget=0#
    scale_s<-3/3#
    scale_t<-3/3#
    sill=1#
    param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill)  #
    fixed=list(nugget=0)#
    fix=nugget#
  }#
  if (model == 2) {#
    # gneiting model#
    cov.model <-"gneiting"#
    cc=2#
    ######
    mean=0#
    nugget=0#
    scale_s<-3/3#
    scale_t<-3/20#
    sill=1#
    power_s=1;power_t=1;sep=0.5#
    param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill,#
               power_s=power_s,power_t=power_t,sep=sep)  #
    fixed=list(nugget=0,power_s=power_s,power_t=power_t,sep=sep)  #
    fix=c(nugget, power_s, power_t,sep) #
  }#
  ###################################################################
  set.seed(276)#
  #####################################################################################################      #
  # Simulation of the spatial Gaussian random field:#
  # data <- RFsim(coordx=coords,coordt=times,corrmodel=cov.model, param=param)$data#
  data <- matrix(rnorm(nrow(coords)*length(times)),ncol=nrow(coords),nrow=length(times))#
  mm=mean(c(data))#
  vv=var(c(data))#
  ###### Composite likelihood based on pairs estimation ###############################################     #
  start=list(mean=mm,scale_s=scale_s,scale_t=scale_t,sill=vv)#
  # Maximum composite-likelihood fitting of the random field:#
  fit <- FitComposite(data=data,coordx=coords,coordt=times,#
                      corrmodel=cov.model,maxtime=maxtime,maxdist=maxdist,#
                      likelihood="Marginal",type="Pairwise",#
                      start=start,fixed=fixed,weighted=T)#
  # Results:#
  print(fit$param)#
  start#
  #################################################
  #   parameters for the subsampling #####
  ################################################
  coordx=coords[,1]#
  coordy=coords[,2]#
  LX=abs(range(coordx)[1]-range(coordx)[2])#
  LY=abs(range(coordy)[1]-range(coordy)[2])#
  lato_fin=maxdist*10  #changing window size#
  lx=lato_fin          #lunghezza lato x quadrato subfinestra#
  ly=lato_fin          #lunghezza lato y quadrato subfinestra#
  winc=c(lx/sqrt(LX),ly/sqrt(LY))#
  winstp= 1  ###   1/lato_fin complete overlapping   1 "no" overlapping#
  ################################################
  #####################################################################################################      #
  theta=c(mm,vv,scale_s,scale_t)                #starting value  #
  weighted=0#
  ### eucliden likelihood ################ #
  type_subs=1    ### type of subsampling  1=in space    2= in time#
  tCPU = proc.time()#
  # names(fix) = c("nugget");names(theta) = c("mean","sill","scale_s","scale_t")#
  res=STBEUFit(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,0,0,type_subs,weighted)#
  tCPU = proc.time()-tCPU;tCPU#
  eu_par=c(res$par[1],res$par[3],res$par[4],res$par[2])#
  names(eu_par)=names(fit$param)#
  print(eu_par)#
  ### OpenCL eucliden likelihood ################ #
  local <- c(1,1)#
  GPU <- 0#
  tGPU = proc.time()#
  res1=STBEUFit(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,0,0,type_subs,weighted, local=local, GPU = GPU)#
  tGPU = proc.time()-tGPU;tGPU#
  eu_par1=c(res1$par[1],res1$par[3],res1$par[4],res1$par[2])#
  names(eu_par1)=names(fit$param)#
  print(eu_par1)#
  tCPU;tGPU#
  "Setting: ns:10201, nt:5,data:norm(0,1),lam:50,maxdist:5,maxtime:1,lato_fin:maxdist*2,model:DouExp"#
}
tCPU
tGPU
tCPU = proc.time()#
   # names(fix) = c("nugget");names(theta) = c("mean","sill","scale_s","scale_t")#
   res=STBEUFit(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,0,0,type_subs,weighted)#
   tCPU = proc.time()-tCPU;tCPU
tGPU = proc.time()#
   res1=STBEUFit(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,0,0,type_subs,weighted, local=local, GPU = GPU)#
   tGPU = proc.time()-tGPU;tGPU
ncoords
nrow(coords)
nrow(time)
nrow(times)
length(times)
6.059/3.432
# SPACE TIME#
# "model=1" is Double Exponential and "model=2" is Gneiting#
rm(list=ls())#
require(CompRandFld)#
require(MCMCpack)#
require(STBEU)#
#
# maxs = 300 #289#
# maxt = 300#
maxs = 1000#
maxt = 1000#
maxs*maxt#
# maxs = 50#
# maxt = 50#
seqS = seq(10,maxs,50)#
seqT = seq(10,maxt,50)#
# seqS*seqT#
nn = length(seqS)*length(seqT)*2#
Sol = matrix(NA,nrow=nn,ncol=40)#
ppb = 1#
#
ns = seqS[20]#
nt = seqT[20]#
mmm = 1
lambda=8;NN = ns#
    xx=seq(-lambda,lambda,length.out = round(sqrt(NN),0));#
    coords=as.matrix(expand.grid(xx,xx))   ###regular#
    # summary(dist(coords))#
    # Min. 1st Qu.  Median    Mean 3rd Qu.    Max. #
    # 8.00    8.00   11.31   13.08   17.89   22.63#
    # nrow(coords)#
    ####temporal instants #########################################
    NT =nt#
    times=seq(1,NT,1)
model=mmm  #   1=double exponential       2 =gneiting
type_dist=1                ### type of distance     1=euclidean 2=chordal  3=geodesic #
        # maxdist=round(length(seq(-lambda,lambda))*.25,0)#
        # maxtime=round(300*.15,0)#
        maxdist=2#
        maxtime=2#round(NT/4,0)
if (model == 1) {#
          # exponential model#
          cov.model <-"exp_exp"#
          cc=1#
          ######
          mean=0#
          nugget=0#
          scale_s<-(maxdist*.2)/3#
          scale_t<-(maxtime*.2)/3#
          sill=1#
          param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill)  #
          fixed=list(nugget=0)#
          fix=c(nugget = nugget)#
        }
set.seed(276)#ppb#
        ###################################################################
        # Simulation of the  Gaussian random field:#
        # data <- RFsim(coordx=coords,coordt=times,corrmodel=cov.model, param=param)$data#
        data <- matrix(rnorm(nrow(coords)*length(times)),ncol=nrow(coords),nrow=length(times))#
        ###################################################################
        mm=mean(c(data))#
        vv=var(c(data))#
        #################################################
        #   parameters for the subsampling #####
        ################################################
        coordx=coords[,1]#
        coordy=coords[,2]#
        LX=abs(range(coordx)[1]-range(coordx)[2])#
        LY=abs(range(coordy)[1]-range(coordy)[2])#
        lato_fin=3  #changing window size#
        lx=lato_fin          #lunghezza lato x quadrato subfinestra#
        ly=lato_fin          #lunghezza lato y quadrato subfinestra#
        winc=c(lx/sqrt(LX),ly/sqrt(LY))#
        winstp= 1###   1/lato_fin complete overlapping in space  1 "no" overlapping in space#
        ################################################
        winc_t=4   ###  length of temporal window#
        winstp_t=1 ###   0.5 half overlapping  1 "no" overlapping#
        ################################################
        theta=c(mean = mm,sill=vv,scale_s=scale_s,scale_t = scale_t)                #starting value  #
        weighted=0                                          #weigthed version  1=yes 0=no#
        ### eucliden likelihood ################ #
        type_subs=3   ### type of subsampling  1=in space    2= in time  3 =spacetime
GPU <- 0#
      local <- c(1,1)#
      ### Time Evaluation (as if oneblock)#
      onetime <- STBEUTimeEvalOcl(theta,fix,coords,times,cc,data,type_dist,maxdist ,#
                                  maxtime,winc,winstp,winc_t,winstp_t,type_subs,weighted,GPU = GPU, local = local)#
      ### Time Evaluation Blockwise#
      blocktime <- SubSampTimeEval(theta,fix,coords,times,cc,data,type_dist,maxdist ,#
                                   maxtime,winc,winstp,winc_t,winstp_t,type_subs,weighted,GPU = GPU, local = local)
onetime$faster
onetime$difftime
blocktime
rm ( list = ls())#
## see also  https://rdrr.io/rforge/gstat/man/wind.html#
require(gstat) #data#
library(sp) # char2dms#
require(mapproj)#
require(GeoModels)#
data("wind", package = "gstat")#
#
DATA=as.matrix(wind[,4:15])#
# DATA=DATA[,-3]  ### deleting ROSSLANE location site as in previous analysis#
# vec.wind = as.vector(DATA)#
#
# wind.loc=wind.loc[-12,] ## deleting ROSSLANE lon-lat#
#
wind.loc$y = as.numeric(char2dms(as.character(wind.loc[["Latitude"]])))#
wind.loc$x = as.numeric(char2dms(as.character(wind.loc[["Longitude"]])))#
coordsLONLAT=cbind(wind.loc$x,wind.loc$y)  ## lonlat coordinates#
#
distance="Eucl"#
############# sinusoidal projecion#
if(distance=="Eucl")#
{#
  P.sinusoidal <- mapproject(coordsLONLAT[,1],coordsLONLAT[,2],projection="sinusoidal")#
  coords<-cbind(P.sinusoidal$x,P.sinusoidal$y)*6378.388#
}#
if(distance=="Geod")#
{#
  coords=coordsLONLAT#
}#
times = 1:nrow(DATA)#
wind$time = ISOdate(wind$year+1900, wind$month, wind$day)#
# time series of e.g. Dublin data:#
plot(DUB~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Dub")#
dists2 = dist(coords)#
dd=max(dists2)*1+0.5#
dd1 = quantile(dists2)[2]#
#########################################################################
############### Gaussian RF estimation #####################################
model="Gaussian"#
nugget = 0#
sill = 1 ## must be fixed#
mean=mean(sqrt(as.vector(DATA)))#
scale_s = .2*dd1#
scale_t= .2*max(dist(times))#
start=list(mean=mean,scale_s=scale_s,scale_t=scale_t)#
fixed<-list(nugget=nugget,sill=sill) #
maxdist=dd1;maxtime=5#
GPU = 0 # 0 or 2 GPU denotes de Device we are using, in my Mac it is 0 (8 cores CPU),1 (Iris not for double),2 (AMD for double)#
local = c(1,1) #First component is 8 if GPU is 0. It is 2^n for n>=0 if GPU is 2#
fit1 <- GeoFit(data=sqrt((DATA)),coordx=coords,coordt=times,corrmodel="exp_exp",distance=distance,#
               maxdist=maxdist,maxtime=maxtime,likelihood="Marginal",type="Pairwise",model=model,#
               start=start,fixed=fixed)#,GPU=GPU, local = local)#
#
fit1
rm ( list = ls())#
## see also  https://rdrr.io/rforge/gstat/man/wind.html#
require(gstat) #data#
library(sp) # char2dms#
require(mapproj)#
require(GeoModels)#
data("wind", package = "gstat")#
#
DATA=as.matrix(wind[,4:15])#
# DATA=DATA[,-3]  ### deleting ROSSLANE location site as in previous analysis#
# vec.wind = as.vector(DATA)#
#
# wind.loc=wind.loc[-12,] ## deleting ROSSLANE lon-lat#
#
wind.loc$y = as.numeric(char2dms(as.character(wind.loc[["Latitude"]])))#
wind.loc$x = as.numeric(char2dms(as.character(wind.loc[["Longitude"]])))#
coordsLONLAT=cbind(wind.loc$x,wind.loc$y)  ## lonlat coordinates#
#
distance="Eucl"#
############# sinusoidal projecion#
if(distance=="Eucl")#
{#
  P.sinusoidal <- mapproject(coordsLONLAT[,1],coordsLONLAT[,2],projection="sinusoidal")#
  coords<-cbind(P.sinusoidal$x,P.sinusoidal$y)*6378.388#
}#
if(distance=="Geod")#
{#
  coords=coordsLONLAT#
}#
times = 1:nrow(DATA)#
wind$time = ISOdate(wind$year+1900, wind$month, wind$day)#
# time series of e.g. Dublin data:#
plot(DUB~time, wind, type= 'l', ylab = "windspeed (knots)", main = "Dub")#
dists2 = dist(coords)#
dd=max(dists2)*1+0.5#
dd1 = quantile(dists2)[2]#
#########################################################################
############### Gaussian RF estimation #####################################
model="Gaussian"#
nugget = 0#
sill = 1 ## must be fixed#
mean=mean(sqrt(as.vector(DATA)))#
scale_s = .2*dd1#
scale_t= .2*max(dist(times))#
start=list(mean=mean,scale_s=scale_s,scale_t=scale_t)#
fixed<-list(nugget=nugget,sill=sill) #
maxdist=dd1;maxtime=5
############################################
rm(list=ls())#
#
#*** Info:#
'#
PRACTICAL RANGE = 3 Irregular (note the seed for the space coordinates)#
12 scenarios:#
b: 2,4,8 for window size in space and time simultaneously (3 in total).#
Weighted: 1 (Yes), 0 (No) (two in total)#
Step window: 0.5 for space and no overlap in time && no overlap in space and no overlap in time (two in total)'#
#*** End Info:#
#
########################R package########################
#
require(CompRandFld)#
require(MCMCpack)#
require(spatstat)#
source("~/Documents/UV/Tesis/OpenCL/Task18/eu_like/euclidean_cl_st_ocl.R")#
dyn.load("~/Documents/UV/Tesis/OpenCL/Task18/eu_like/euc_like_cl_st_Open.so")#
################################################
# setting 1  (many locations in space a few in time)#
################################################
#
####location sites #########################################
lambda=4#
#xx=seq(-lambda,lambda);#
#coords=as.matrix(expand.grid(xx,xx))   ###regular#
#nrow(coords)#
#
set.seed(67)                                                                      ### not regular#
pp<-runifpoint(81, win=owin(c(-lambda,lambda),c(-lambda,lambda)))       ### not regular#
coords<-cbind(pp$x,pp$y)#
plot(coords)                                                        ### not regular#
nrow(coords)#
####temporal instants #########################################
times=seq(1,90,1)#
#
################################################
#
type_dist=1                ### type of distance     1=euclidean 2=chordal  3=geodesic #
maxdist=1#
maxtime=1#
#
###################################################################
model=1  #   1=double exponential       2 =gneiting#
#
if (model == 1) {#
  # exponential model#
  cov.model <-"exp_exp"#
  cc=1#
  ######
  mean=0#
  nugget=0#
  scale_s<-.4 #practical range/3 (space)#
  scale_t<-.4 #practical range/3 (time)#
  sill=1#
  param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill)  #
  fixed=list(nugget=0)#
  fix=nugget#
}#
if (model == 2) {#
  # gneiting model#
  cov.model <-"gneiting"#
  cc=2#
  ######
  mean=0#
  nugget=0#
  scale_s<-3/3#
  scale_t<-3/20#
  sill=1#
  power_s=1;power_t=1;sep=0.5#
  param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill,#
             power_s=power_s,power_t=power_t,sep=sep)  #
  fixed=list(nugget=0,power_s=power_s,power_t=power_t,sep=sep)   #
  fix=c(nugget, power_s, power_t,sep) #
}#
###################################################################
###################################################################
###################################################################
#
coordx=coords[,1]#
coordy=coords[,2]#
LX=abs(range(coordx)[1]-range(coordx)[2])#
LY=abs(range(coordy)[1]-range(coordy)[2])#
type_subs=3   ### type of subsampling  1=in space    2= in time  3 =spacetime#
results_PLA=NULL#
results_EU1=results_EU2=results_EU3=results_EU4=NULL#
results_EU5=results_EU6=results_EU7=results_EU8=NULL#
results_EU9=results_EU10=results_EU11=results_EU12=NULL#
#
i=1#
nsim<-1000   ## number of simulation#
set.seed(67)#
# Simulation of the  Gaussian random field:#
data <- RFsim(coordx=coords,coordt=times,corrmodel=cov.model, param=param)$data#
#####################################################################################################      #
##################################################################################################### #
mm=mean(c(data))#
vv=var(c(data))#
start=list(mean=mm,scale_s=scale_s,scale_t=scale_t,sill=vv)#
theta=c(mm,vv,scale_s,scale_t)                #starting value  #
lato_fin=2  #changing window size#
lx=lato_fin          #lunghezza lato x quadrato subfinestra#
ly=lato_fin          #lunghezza lato y quadrato subfinestra#
winc=c(lx/sqrt(LX),ly/sqrt(LY))#
winstp= .5###   1/lato_fin complete overlapping in space  1 "no" overlapping in space#
################################################
winc_t=lato_fin   ###  length of temporal window#
winstp_t=1 ###   0.5 half overlapping  1 "no" overlapping#
################################################
#
weighted=0                                          #weigthed version  1=yes 0=no#
maxdist=1#
maxtime=1#
### eucliden likelihood ################ #
res4=euclidean_cl_st(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,winc_t,winstp_t,type_subs,weighted)#
eu_par4=c(res4$par[1],res4$par[3],res4$par[4],res4$par[2])#
names(eu_par4)=names(fitA$param)#
print(eu_par4)
start
winstp= .8###   1/lato_fin complete overlapping in space  1 "no" overlapping in space#
################################################
winc_t=lato_fin   ###  length of temporal window#
winstp_t=1 ###   0.5 half overlapping  1 "no" overlapping#
################################################
#
weighted=0                                          #weigthed version  1=yes 0=no#
maxdist=1#
maxtime=1#
### eucliden likelihood ################ #
res4=euclidean_cl_st(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,winc_t,winstp_t,type_subs,weighted)#
eu_par4=c(res4$par[1],res4$par[3],res4$par[4],res4$par[2])#
names(eu_par4)=names(fitA$param)#
print(eu_par4)
winstp= .5###   1/lato_fin complete overlapping in space  1 "no" overlapping in space#
################################################
winc_t=lato_fin   ###  length of temporal window#
winstp_t=1 ###   0.5 half overlapping  1 "no" overlapping#
################################################
#
weighted=0                                          #weigthed version  1=yes 0=no#
maxdist=.25#
maxtime=1#
### eucliden likelihood ################ #
res4=euclidean_cl_st(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,winc_t,winstp_t,type_subs,weighted)#
eu_par4=c(res4$par[1],res4$par[3],res4$par[4],res4$par[2])#
names(eu_par4)=names(fitA$param)#
print(eu_par4)
winstp= .7###   1/lato_fin complete overlapping in space  1 "no" overlapping in space#
################################################
winc_t=lato_fin   ###  length of temporal window#
winstp_t=1 ###   0.5 half overlapping  1 "no" overlapping#
################################################
#
weighted=0                                          #weigthed version  1=yes 0=no#
maxdist=.25#
maxtime=1#
### eucliden likelihood ################ #
res4=euclidean_cl_st(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,winc_t,winstp_t,type_subs,weighted)#
eu_par4=c(res4$par[1],res4$par[3],res4$par[4],res4$par[2])#
names(eu_par4)=names(fitA$param)#
print(eu_par4)
winstp= .7###   1/lato_fin complete overlapping in space  1 "no" overlapping in space#
################################################
winc_t=lato_fin   ###  length of temporal window#
winstp_t=1 ###   0.5 half overlapping  1 "no" overlapping#
################################################
#
weighted=0                                          #weigthed version  1=yes 0=no#
maxdist=1#
maxtime=1#
### eucliden likelihood ################ #
res4=euclidean_cl_st(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,winc_t,winstp_t,type_subs,weighted)#
eu_par4=c(res4$par[1],res4$par[3],res4$par[4],res4$par[2])#
names(eu_par4)=names(fitA$param)#
print(eu_par4)
winstp= .7###   1/lato_fin complete overlapping in space  1 "no" overlapping in space#
################################################
winc_t=lato_fin   ###  length of temporal window#
winstp_t=1 ###   0.5 half overlapping  1 "no" overlapping#
################################################
#
weighted=0                                          #weigthed version  1=yes 0=no#
maxdist=1#
maxtime=2#
### eucliden likelihood ################ #
res4=euclidean_cl_st(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,winc_t,winstp_t,type_subs,weighted)#
eu_par4=c(res4$par[1],res4$par[3],res4$par[4],res4$par[2])#
names(eu_par4)=names(fitA$param)#
print(eu_par4)
winstp= .5###   1/lato_fin complete overlapping in space  1 "no" overlapping in space#
################################################
winc_t=lato_fin   ###  length of temporal window#
winstp_t=1 ###   0.5 half overlapping  1 "no" overlapping#
################################################
#
weighted=0                                          #weigthed version  1=yes 0=no#
maxdist=1#
maxtime=2#
### eucliden likelihood ################ #
res4=euclidean_cl_st(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,winc_t,winstp_t,type_subs,weighted)#
eu_par4=c(res4$par[1],res4$par[3],res4$par[4],res4$par[2])#
names(eu_par4)=names(fitA$param)#
print(eu_par4)
winstp= .1###   1/lato_fin complete overlapping in space  1 "no" overlapping in space#
################################################
winc_t=lato_fin   ###  length of temporal window#
winstp_t=1 ###   0.5 half overlapping  1 "no" overlapping#
################################################
#
weighted=0                                          #weigthed version  1=yes 0=no#
maxdist=1#
maxtime=2#
### eucliden likelihood ################ #
res4=euclidean_cl_st(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,winc_t,winstp_t,type_subs,weighted)#
eu_par4=c(res4$par[1],res4$par[3],res4$par[4],res4$par[2])#
names(eu_par4)=names(fitA$param)#
print(eu_par4)
start
winstp= .5###   1/lato_fin complete overlapping in space  1 "no" overlapping in space#
################################################
winc_t=lato_fin   ###  length of temporal window#
winstp_t=1 ###   0.5 half overlapping  1 "no" overlapping#
################################################
#
weighted=0                                          #weigthed version  1=yes 0=no#
maxdist=1#
maxtime=2#
### eucliden likelihood ################ #
res4=euclidean_cl_st(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,winc_t,winstp_t,type_subs,weighted)#
eu_par4=c(res4$par[1],res4$par[3],res4$par[4],res4$par[2])#
names(eu_par4)=names(fitA$param)#
print(eu_par4)
winstp= .6###   1/lato_fin complete overlapping in space  1 "no" overlapping in space#
################################################
winc_t=lato_fin   ###  length of temporal window#
winstp_t=1 ###   0.5 half overlapping  1 "no" overlapping#
################################################
#
weighted=0                                          #weigthed version  1=yes 0=no#
maxdist=1#
maxtime=2#
### eucliden likelihood ################ #
res4=euclidean_cl_st(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,winc_t,winstp_t,type_subs,weighted)#
eu_par4=c(res4$par[1],res4$par[3],res4$par[4],res4$par[2])#
names(eu_par4)=names(fitA$param)#
print(eu_par4)
winstp= .7###   1/lato_fin complete overlapping in space  1 "no" overlapping in space#
################################################
winc_t=lato_fin   ###  length of temporal window#
winstp_t=1 ###   0.5 half overlapping  1 "no" overlapping#
################################################
#
weighted=0                                          #weigthed version  1=yes 0=no#
maxdist=1#
maxtime=2#
### eucliden likelihood ################ #
res4=euclidean_cl_st(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,winc_t,winstp_t,type_subs,weighted)#
eu_par4=c(res4$par[1],res4$par[3],res4$par[4],res4$par[2])#
names(eu_par4)=names(fitA$param)#
print(eu_par4)
winstp= .8###   1/lato_fin complete overlapping in space  1 "no" overlapping in space#
################################################
winc_t=lato_fin   ###  length of temporal window#
winstp_t=1 ###   0.5 half overlapping  1 "no" overlapping#
################################################
#
weighted=0                                          #weigthed version  1=yes 0=no#
maxdist=1#
maxtime=2#
### eucliden likelihood ################ #
res4=euclidean_cl_st(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,winc_t,winstp_t,type_subs,weighted)#
eu_par4=c(res4$par[1],res4$par[3],res4$par[4],res4$par[2])#
names(eu_par4)=names(fitA$param)#
print(eu_par4)
winstp= .9###   1/lato_fin complete overlapping in space  1 "no" overlapping in space#
################################################
winc_t=lato_fin   ###  length of temporal window#
winstp_t=1 ###   0.5 half overlapping  1 "no" overlapping#
################################################
#
weighted=0                                          #weigthed version  1=yes 0=no#
maxdist=1#
maxtime=2#
### eucliden likelihood ################ #
res4=euclidean_cl_st(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,winc_t,winstp_t,type_subs,weighted)#
eu_par4=c(res4$par[1],res4$par[3],res4$par[4],res4$par[2])#
names(eu_par4)=names(fitA$param)#
print(eu_par4)
start
lato_fin=2  #changing window size#
lx=lato_fin          #lunghezza lato x quadrato subfinestra#
ly=lato_fin          #lunghezza lato y quadrato subfinestra#
winc=c(lx/sqrt(LX),ly/sqrt(LY))#
winstp= .5###   1/lato_fin complete overlapping in space  1 "no" overlapping in space#
################################################
winc_t=lato_fin   ###  length of temporal window#
winstp_t=1 ###   0.5 half overlapping  1 "no" overlapping#
################################################
#
weighted=0                                          #weigthed version  1=yes 0=no#
maxdist=1#
maxtime=1#
### eucliden likelihood ################ #
res4=euclidean_cl_st(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,winc_t,winstp_t,type_subs,weighted)#
eu_par4=c(res4$par[1],res4$par[3],res4$par[4],res4$par[2])#
names(eu_par4)=names(fitA$param)#
print(eu_par4)
lato_fin=1  #changing window size#
lx=lato_fin          #lunghezza lato x quadrato subfinestra#
ly=lato_fin          #lunghezza lato y quadrato subfinestra#
winc=c(lx/sqrt(LX),ly/sqrt(LY))#
winstp= .5###   1/lato_fin complete overlapping in space  1 "no" overlapping in space#
################################################
winc_t=lato_fin   ###  length of temporal window#
winstp_t=1 ###   0.5 half overlapping  1 "no" overlapping#
################################################
#
weighted=0                                          #weigthed version  1=yes 0=no#
maxdist=1#
maxtime=1#
### eucliden likelihood ################ #
res4=euclidean_cl_st(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,winc_t,winstp_t,type_subs,weighted)#
eu_par4=c(res4$par[1],res4$par[3],res4$par[4],res4$par[2])#
names(eu_par4)=names(fitA$param)#
print(eu_par4)
lato_fin=1.5  #changing window size#
lx=lato_fin          #lunghezza lato x quadrato subfinestra#
ly=lato_fin          #lunghezza lato y quadrato subfinestra#
winc=c(lx/sqrt(LX),ly/sqrt(LY))#
winstp= .5###   1/lato_fin complete overlapping in space  1 "no" overlapping in space#
################################################
winc_t=lato_fin   ###  length of temporal window#
winstp_t=1 ###   0.5 half overlapping  1 "no" overlapping#
################################################
#
weighted=0                                          #weigthed version  1=yes 0=no#
maxdist=1#
maxtime=1#
### eucliden likelihood ################ #
res4=euclidean_cl_st(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,winc_t,winstp_t,type_subs,weighted)#
eu_par4=c(res4$par[1],res4$par[3],res4$par[4],res4$par[2])#
names(eu_par4)=names(fitA$param)#
print(eu_par4)
lato_fin=2  #changing window size#
lx=lato_fin          #lunghezza lato x quadrato subfinestra#
ly=lato_fin          #lunghezza lato y quadrato subfinestra#
winc=c(lx/sqrt(LX),ly/sqrt(LY))#
winstp= .5###   1/lato_fin complete overlapping in space  1 "no" overlapping in space#
################################################
winc_t=lato_fin   ###  length of temporal window#
winstp_t=1 ###   0.5 half overlapping  1 "no" overlapping#
################################################
#
weighted=0                                          #weigthed version  1=yes 0=no#
maxdist=1#
maxtime=1#
### eucliden likelihood ################ #
res4=euclidean_cl_st(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,winc_t,winstp_t,type_subs,weighted)#
eu_par4=c(res4$par[1],res4$par[3],res4$par[4],res4$par[2])#
names(eu_par4)=names(fitA$param)#
print(eu_par4)
lato_fin=2  #changing window size#
lx=lato_fin          #lunghezza lato x quadrato subfinestra#
ly=lato_fin          #lunghezza lato y quadrato subfinestra#
winc=c(lx/sqrt(LX),ly/sqrt(LY))#
winstp= .5###   1/lato_fin complete overlapping in space  1 "no" overlapping in space#
################################################
winc_t=1   ###  length of temporal window#
winstp_t=1 ###   0.5 half overlapping  1 "no" overlapping#
################################################
#
weighted=0                                          #weigthed version  1=yes 0=no#
maxdist=1#
maxtime=1#
### eucliden likelihood ################ #
res4=euclidean_cl_st(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,winc_t,winstp_t,type_subs,weighted)#
eu_par4=c(res4$par[1],res4$par[3],res4$par[4],res4$par[2])#
names(eu_par4)=names(fitA$param)#
print(eu_par4)
lato_fin=2  #changing window size#
lx=lato_fin          #lunghezza lato x quadrato subfinestra#
ly=lato_fin          #lunghezza lato y quadrato subfinestra#
winc=c(lx/sqrt(LX),ly/sqrt(LY))#
winstp= .5###   1/lato_fin complete overlapping in space  1 "no" overlapping in space#
################################################
winc_t=lato_fin   ###  length of temporal window#
winstp_t=1 ###   0.5 half overlapping  1 "no" overlapping#
################################################
#
weighted=0                                          #weigthed version  1=yes 0=no#
maxdist=1#
maxtime=1#
### eucliden likelihood ################ #
res4=euclidean_cl_st(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,winc_t,winstp_t,type_subs,weighted)#
eu_par4=c(res4$par[1],res4$par[3],res4$par[4],res4$par[2])#
names(eu_par4)=names(fitA$param)#
print(eu_par4)
lato_fin=2  #changing window size#
lx=lato_fin          #lunghezza lato x quadrato subfinestra#
ly=lato_fin          #lunghezza lato y quadrato subfinestra#
winc=c(lx/sqrt(LX),ly/sqrt(LY))#
winstp= .5###   1/lato_fin complete overlapping in space  1 "no" overlapping in space#
################################################
winc_t=lato_fin   ###  length of temporal window#
winstp_t=1 ###   0.5 half overlapping  1 "no" overlapping#
################################################
#
weighted=1                                          #weigthed version  1=yes 0=no#
maxdist=1#
maxtime=1#
### eucliden likelihood ################ #
res4=euclidean_cl_st(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,winc_t,winstp_t,type_subs,weighted)#
eu_par4=c(res4$par[1],res4$par[3],res4$par[4],res4$par[2])#
names(eu_par4)=names(fitA$param)#
print(eu_par4)
lato_fin=3  #changing window size#
lx=lato_fin          #lunghezza lato x quadrato subfinestra#
ly=lato_fin          #lunghezza lato y quadrato subfinestra#
winc=c(lx/sqrt(LX),ly/sqrt(LY))#
winstp= .5###   1/lato_fin complete overlapping in space  1 "no" overlapping in space#
################################################
winc_t=lato_fin   ###  length of temporal window#
winstp_t=1 ###   0.5 half overlapping  1 "no" overlapping#
################################################
#
weighted=0                                          #weigthed version  1=yes 0=no#
maxdist=1#
maxtime=1#
### eucliden likelihood ################ #
res4=euclidean_cl_st(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,winc_t,winstp_t,type_subs,weighted)#
eu_par4=c(res4$par[1],res4$par[3],res4$par[4],res4$par[2])#
names(eu_par4)=names(fitA$param)#
print(eu_par4)
maxdist
lato_fin=1  #changing window size#
lx=lato_fin          #lunghezza lato x quadrato subfinestra#
ly=lato_fin          #lunghezza lato y quadrato subfinestra#
winc=c(lx/sqrt(LX),ly/sqrt(LY))#
winstp= .5###   1/lato_fin complete overlapping in space  1 "no" overlapping in space#
################################################
winc_t=lato_fin   ###  length of temporal window#
winstp_t=1 ###   0.5 half overlapping  1 "no" overlapping#
################################################
#
weighted=0                                          #weigthed version  1=yes 0=no#
maxdist=1#
maxtime=1#
### eucliden likelihood ################ #
res4=euclidean_cl_st(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,winc_t,winstp_t,type_subs,weighted)#
eu_par4=c(res4$par[1],res4$par[3],res4$par[4],res4$par[2])#
names(eu_par4)=names(fitA$param)#
print(eu_par4)
lato_fin=1.1  #changing window size#
lx=lato_fin          #lunghezza lato x quadrato subfinestra#
ly=lato_fin          #lunghezza lato y quadrato subfinestra#
winc=c(lx/sqrt(LX),ly/sqrt(LY))#
winstp= .5###   1/lato_fin complete overlapping in space  1 "no" overlapping in space#
################################################
winc_t=lato_fin   ###  length of temporal window#
winstp_t=1 ###   0.5 half overlapping  1 "no" overlapping#
################################################
#
weighted=0                                          #weigthed version  1=yes 0=no#
maxdist=1#
maxtime=1#
### eucliden likelihood ################ #
res4=euclidean_cl_st(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,winc_t,winstp_t,type_subs,weighted)#
eu_par4=c(res4$par[1],res4$par[3],res4$par[4],res4$par[2])#
names(eu_par4)=names(fitA$param)#
print(eu_par4)
lato_fin=1.5  #changing window size#
lx=lato_fin          #lunghezza lato x quadrato subfinestra#
ly=lato_fin          #lunghezza lato y quadrato subfinestra#
winc=c(lx/sqrt(LX),ly/sqrt(LY))#
winstp= .5###   1/lato_fin complete overlapping in space  1 "no" overlapping in space#
################################################
winc_t=lato_fin   ###  length of temporal window#
winstp_t=1 ###   0.5 half overlapping  1 "no" overlapping#
################################################
#
weighted=0                                          #weigthed version  1=yes 0=no#
maxdist=1#
maxtime=1#
### eucliden likelihood ################ #
res4=euclidean_cl_st(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,winc_t,winstp_t,type_subs,weighted)#
eu_par4=c(res4$par[1],res4$par[3],res4$par[4],res4$par[2])#
names(eu_par4)=names(fitA$param)#
print(eu_par4)
lato_fin=4  #changing window size#
lx=lato_fin          #lunghezza lato x quadrato subfinestra#
ly=lato_fin          #lunghezza lato y quadrato subfinestra#
winc=c(lx/sqrt(LX),ly/sqrt(LY))#
winstp= .5###   1/lato_fin complete overlapping in space  1 "no" overlapping in space#
################################################
winc_t=lato_fin   ###  length of temporal window#
winstp_t=1 ###   0.5 half overlapping  1 "no" overlapping#
################################################
#
weighted=0                                          #weigthed version  1=yes 0=no#
maxdist=1#
maxtime=1#
### eucliden likelihood ################ #
res4=euclidean_cl_st(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,winc_t,winstp_t,type_subs,weighted)#
eu_par4=c(res4$par[1],res4$par[3],res4$par[4],res4$par[2])#
names(eu_par4)=names(fitA$param)#
print(eu_par4)
lato_fin=1.1  #changing window size#
lx=lato_fin          #lunghezza lato x quadrato subfinestra#
ly=lato_fin          #lunghezza lato y quadrato subfinestra#
winc=c(lx/sqrt(LX),ly/sqrt(LY))#
winstp= .5###   1/lato_fin complete overlapping in space  1 "no" overlapping in space#
################################################
winc_t=lato_fin   ###  length of temporal window#
winstp_t=1 ###   0.5 half overlapping  1 "no" overlapping#
################################################
#
weighted=0                                          #weigthed version  1=yes 0=no#
maxdist=1#
maxtime=1#
### eucliden likelihood ################ #
res4=euclidean_cl_st(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,winc_t,winstp_t,type_subs,weighted)#
eu_par4=c(res4$par[1],res4$par[3],res4$par[4],res4$par[2])#
names(eu_par4)=names(fitA$param)#
print(eu_par4)
lato_fin=1.5  #changing window size#
lx=lato_fin          #lunghezza lato x quadrato subfinestra#
ly=lato_fin          #lunghezza lato y quadrato subfinestra#
winc=c(lx/sqrt(LX),ly/sqrt(LY))#
winstp= .5###   1/lato_fin complete overlapping in space  1 "no" overlapping in space#
################################################
winc_t=lato_fin   ###  length of temporal window#
winstp_t=1 ###   0.5 half overlapping  1 "no" overlapping#
################################################
#
weighted=0                                          #weigthed version  1=yes 0=no#
maxdist=1#
maxtime=1#
### eucliden likelihood ################ #
res4=euclidean_cl_st(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,winc_t,winstp_t,type_subs,weighted)#
eu_par4=c(res4$par[1],res4$par[3],res4$par[4],res4$par[2])#
names(eu_par4)=names(fitA$param)#
print(eu_par4)
start
summary(dist(coords))
lato_fin=2  #changing window size#
lx=lato_fin          #lunghezza lato x quadrato subfinestra#
ly=lato_fin          #lunghezza lato y quadrato subfinestra#
winc=c(lx/sqrt(LX),ly/sqrt(LY))#
winstp= .5###   1/lato_fin complete overlapping in space  1 "no" overlapping in space#
################################################
winc_t=lato_fin   ###  length of temporal window#
winstp_t=1 ###   0.5 half overlapping  1 "no" overlapping#
################################################
#
weighted=0                                          #weigthed version  1=yes 0=no#
maxdist=3#
maxtime=1#
### eucliden likelihood ################ #
res4=euclidean_cl_st(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,winc_t,winstp_t,type_subs,weighted)#
eu_par4=c(res4$par[1],res4$par[3],res4$par[4],res4$par[2])#
names(eu_par4)=names(fitA$param)#
print(eu_par4)
lato_fin=4  #changing window size#
lx=lato_fin          #lunghezza lato x quadrato subfinestra#
ly=lato_fin          #lunghezza lato y quadrato subfinestra#
winc=c(lx/sqrt(LX),ly/sqrt(LY))#
winstp= .5###   1/lato_fin complete overlapping in space  1 "no" overlapping in space#
################################################
winc_t=lato_fin   ###  length of temporal window#
winstp_t=1 ###   0.5 half overlapping  1 "no" overlapping#
################################################
#
weighted=0                                          #weigthed version  1=yes 0=no#
maxdist=3#
maxtime=1#
### eucliden likelihood ################ #
res4=euclidean_cl_st(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,winc_t,winstp_t,type_subs,weighted)#
eu_par4=c(res4$par[1],res4$par[3],res4$par[4],res4$par[2])#
names(eu_par4)=names(fitA$param)#
print(eu_par4)
lato_fin=4  #changing window size#
lx=lato_fin          #lunghezza lato x quadrato subfinestra#
ly=lato_fin          #lunghezza lato y quadrato subfinestra#
winc=c(lx/sqrt(LX),ly/sqrt(LY))#
winstp= .5###   1/lato_fin complete overlapping in space  1 "no" overlapping in space#
################################################
winc_t=2   ###  length of temporal window#
winstp_t=1 ###   0.5 half overlapping  1 "no" overlapping#
################################################
#
weighted=0                                          #weigthed version  1=yes 0=no#
maxdist=3#
maxtime=1#
### eucliden likelihood ################ #
res4=euclidean_cl_st(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,winc_t,winstp_t,type_subs,weighted)#
eu_par4=c(res4$par[1],res4$par[3],res4$par[4],res4$par[2])#
names(eu_par4)=names(fitA$param)#
print(eu_par4)
lato_fin=4  #changing window size#
lx=lato_fin          #lunghezza lato x quadrato subfinestra#
ly=lato_fin          #lunghezza lato y quadrato subfinestra#
winc=c(lx/sqrt(LX),ly/sqrt(LY))#
winstp= .9###   1/lato_fin complete overlapping in space  1 "no" overlapping in space#
################################################
winc_t=2   ###  length of temporal window#
winstp_t=1 ###   0.5 half overlapping  1 "no" overlapping#
################################################
#
weighted=0                                          #weigthed version  1=yes 0=no#
maxdist=3#
maxtime=1#
### eucliden likelihood ################ #
res4=euclidean_cl_st(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,winc_t,winstp_t,type_subs,weighted)#
eu_par4=c(res4$par[1],res4$par[3],res4$par[4],res4$par[2])#
names(eu_par4)=names(fitA$param)#
print(eu_par4)
lato_fin=4  #changing window size#
lx=lato_fin          #lunghezza lato x quadrato subfinestra#
ly=lato_fin          #lunghezza lato y quadrato subfinestra#
winc=c(lx/sqrt(LX),ly/sqrt(LY))#
winstp= 1###   1/lato_fin complete overlapping in space  1 "no" overlapping in space#
################################################
winc_t=2   ###  length of temporal window#
winstp_t=1 ###   0.5 half overlapping  1 "no" overlapping#
################################################
#
weighted=0                                          #weigthed version  1=yes 0=no#
maxdist=3#
maxtime=1#
### eucliden likelihood ################ #
res4=euclidean_cl_st(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,winc_t,winstp_t,type_subs,weighted)#
eu_par4=c(res4$par[1],res4$par[3],res4$par[4],res4$par[2])#
names(eu_par4)=names(fitA$param)#
print(eu_par4)
winc
winc[2]-winc[1]
############################################
rm(list=ls())#
#
require(CompRandFld)#
require(MCMCpack)#
require(spatstat)#
library(STBEU)#
################################################
# setting 1  (many locations in space a few in time)#
################################################
#
####location sites #########################################
lambda=4#
#xx=seq(-lambda,lambda);#
#coords=as.matrix(expand.grid(xx,xx))   ###regular#
#nrow(coords)#
#
set.seed(67)                                                                      ### not regular#
pp<-runifpoint(81, win=owin(c(-lambda,lambda),c(-lambda,lambda)))       ### not regular#
coords<-cbind(pp$x,pp$y)#
plot(coords)                                                        ### not regular#
nrow(coords)#
####temporal instants #########################################
times=seq(1,90,1)#
model=1  #   1=double exponential       2 =gneiting#
#
  type_dist=1                ### type of distance     1=euclidean 2=chordal  3=geodesic #
  # maxdist=round(length(seq(-lambda,lambda))*.25,0)#
  # maxtime=round(300*.15,0)#
  maxdist=1#
  maxtime=1#round(NT/4,0)#
  ###################################################################
  if (model == 1) {#
    # exponential model#
    cov.model <-"exp_exp"#
    cc=1#
    ######
    mean=0#
    nugget=0#
    scale_s<-1.2/3#
    scale_t<-1.2/3#
    sill=1#
    param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill)  #
    fixed=list(nugget=0)#
    fix=c(nugget = nugget)#
  }#
  if (model == 2) {#
    # gneiting model#
    cov.model <-"gneiting"#
    cc=2#
    ######
    mean=0#
    nugget=0#
    scale_s<-(maxdist*.2)/3#
    scale_t<-(maxtime*.2)/20#
    sill=1#
    power_s=1;power_t=1;sep=0.5#
    param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill,#
               power_s=power_s,power_t=power_t,sep=sep)  #
    fixed=list(nugget=0,power_s=power_s,power_t=power_t,sep=sep)   #
    fix=c(nugget=nugget, power_s=power_s, power_t=power_t,sep=sep) #
}#
  ###################################################################
  set.seed(276)#ppb#
  ###################################################################
  # Simulation of the  Gaussian random field:#
  data <- RFsim(coordx=coords,coordt=times,corrmodel=cov.model, param=param)$data#
  # data <- matrix(rnorm(nrow(coords)*length(times)),ncol=nrow(coords),nrow=length(times))#
  ###################################################################
  mm=mean(c(data))#
  vv=var(c(data))#
  coordx=coords[,1]#
  coordy=coords[,2]#
  LX=abs(range(coordx)[1]-range(coordx)[2])#
  LY=abs(range(coordy)[1]-range(coordy)[2])#
  #################################################
  #   parameters for the subsampling #####
  ################################################
  lato_fin=2  #changing window size#
  lx=lato_fin          #lunghezza lato x quadrato subfinestra#
  ly=lato_fin          #lunghezza lato y quadrato subfinestra#
  winc=c(lx/sqrt(LX),ly/sqrt(LY))#
  winstp= 1###   1/lato_fin complete overlapping in space  1 "no" overlapping in space#
  ################################################
  winc_t=lato_fin   ###  length of temporal window#
  winstp_t=1 ###   0.5 half overlapping  1 "no" overlapping#
  ################################################
  theta=c(mean = mm,sill=vv,scale_s=scale_s,scale_t = scale_t)                #starting value  #
  weighted=0                                          #weigthed version  1=yes 0=no#
  ### eucliden likelihood ################ #
  type_subs=3   ### type of subsampling  1=in space    2= in time  3 =spacetime#
# ### Eucliden likelihood################ #
tCPU = proc.time()#
res=STBEUFit(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,winc_t,winstp_t,type_subs,weighted)#
tCPU = proc.time()-tCPU#
print(res$par)
############################################
rm(list=ls())#
#
require(CompRandFld)#
require(MCMCpack)#
require(spatstat)#
library(STBEU)#
################################################
# setting 1  (many locations in space a few in time)#
################################################
#
####location sites #########################################
lambda=4#
#xx=seq(-lambda,lambda);#
#coords=as.matrix(expand.grid(xx,xx))   ###regular#
#nrow(coords)#
#
set.seed(67)                                                                      ### not regular#
pp<-runifpoint(81, win=owin(c(-lambda,lambda),c(-lambda,lambda)))       ### not regular#
coords<-cbind(pp$x,pp$y)#
plot(coords)                                                        ### not regular#
nrow(coords)#
####temporal instants #########################################
times=seq(1,90,1)#
model=1  #   1=double exponential       2 =gneiting#
#
  type_dist=1                ### type of distance     1=euclidean 2=chordal  3=geodesic #
  # maxdist=round(length(seq(-lambda,lambda))*.25,0)#
  # maxtime=round(300*.15,0)#
  maxdist=1#
  maxtime=1#round(NT/4,0)#
  ###################################################################
  if (model == 1) {#
    # exponential model#
    cov.model <-"exp_exp"#
    cc=1#
    ######
    mean=0#
    nugget=0#
    scale_s<-1.2/3#
    scale_t<-1.2/3#
    sill=1#
    param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill)  #
    fixed=list(nugget=0)#
    fix=c(nugget = nugget)#
  }#
  if (model == 2) {#
    # gneiting model#
    cov.model <-"gneiting"#
    cc=2#
    ######
    mean=0#
    nugget=0#
    scale_s<-1.2/3#
    scale_t<-1.2/20#
    sill=1#
    power_s=1;power_t=1;sep=0.5#
    param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill,#
               power_s=power_s,power_t=power_t,sep=sep)  #
    fixed=list(nugget=0,power_s=power_s,power_t=power_t,sep=sep)   #
    fix=c(nugget=nugget, power_s=power_s, power_t=power_t,sep=sep) #
}#
  ###################################################################
  set.seed(67)#
  ###################################################################
  # Simulation of the  Gaussian random field:#
  data <- RFsim(coordx=coords,coordt=times,corrmodel=cov.model, param=param)$data#
  # data <- matrix(rnorm(nrow(coords)*length(times)),ncol=nrow(coords),nrow=length(times))#
  ###################################################################
  mm=mean(c(data))#
  vv=var(c(data))#
  coordx=coords[,1]#
  coordy=coords[,2]#
  LX=abs(range(coordx)[1]-range(coordx)[2])#
  LY=abs(range(coordy)[1]-range(coordy)[2])#
  #################################################
  #   parameters for the subsampling #####
  ################################################
  lato_fin=2  #changing window size#
  lx=lato_fin          #lunghezza lato x quadrato subfinestra#
  ly=lato_fin          #lunghezza lato y quadrato subfinestra#
  winc=c(lx/sqrt(LX),ly/sqrt(LY))#
  winstp= 1###   1/lato_fin complete overlapping in space  1 "no" overlapping in space#
  ################################################
  winc_t=lato_fin   ###  length of temporal window#
  winstp_t=1 ###   0.5 half overlapping  1 "no" overlapping#
  ################################################
  theta=c(mean = mm,sill=vv,scale_s=scale_s,scale_t = scale_t)                #starting value  #
  weighted=0                                          #weigthed version  1=yes 0=no#
  ### eucliden likelihood ################ #
  type_subs=3   ### type of subsampling  1=in space    2= in time  3 =spacetime#
# ### Eucliden likelihood################ #
tCPU = proc.time()#
res=STBEUFit(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,winc_t,winstp_t,type_subs,weighted)#
tCPU = proc.time()-tCPU#
print(res$par)#
#
# ### OpenCL eucliden likelihood #################
# local <- c(1,1)#
# GPU <- 0#
# tGPU = proc.time()#
# res1=res=STBEUFit(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,winc_t,winstp_t,type_subs,weighted,local=local,GPU=GPU)#
# tGPU = proc.time()-tGPU
mean(data)
summary(coords)
start
theta
summary(times)
type_subs
############################################
rm(list=ls())#
#
#*** Info:#
'#
PRACTICAL RANGE = 3 Irregular (note the seed for the space coordinates)#
12 scenarios:#
b: 2,4,8 for window size in space and time simultaneously (3 in total).#
Weighted: 1 (Yes), 0 (No) (two in total)#
Step window: 0.5 for space and no overlap in time && no overlap in space and no overlap in time (two in total)'#
#*** End Info:#
#
########################R package########################
#
require(CompRandFld)#
require(MCMCpack)#
require(spatstat)#
source("~/Documents/UV/Tesis/OpenCL/Task18/eu_like/euclidean_cl_st_ocl.R")#
dyn.load("~/Documents/UV/Tesis/OpenCL/Task18/eu_like/euc_like_cl_st_Open.so")#
################################################
# setting 1  (many locations in space a few in time)#
################################################
#
####location sites #########################################
lambda=4#
#xx=seq(-lambda,lambda);#
#coords=as.matrix(expand.grid(xx,xx))   ###regular#
#nrow(coords)#
#
set.seed(67)                                                                      ### not regular#
pp<-runifpoint(81, win=owin(c(-lambda,lambda),c(-lambda,lambda)))       ### not regular#
coords<-cbind(pp$x,pp$y)#
plot(coords)                                                        ### not regular#
nrow(coords)#
####temporal instants #########################################
times=seq(1,90,1)#
#
################################################
#
type_dist=1                ### type of distance     1=euclidean 2=chordal  3=geodesic #
maxdist=1#
maxtime=1#
#
###################################################################
model=1  #   1=double exponential       2 =gneiting#
#
if (model == 1) {#
  # exponential model#
  cov.model <-"exp_exp"#
  cc=1#
  ######
  mean=0#
  nugget=0#
  scale_s<-.4 #practical range/3 (space)#
  scale_t<-.4 #practical range/3 (time)#
  sill=1#
  param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill)  #
  fixed=list(nugget=0)#
  fix=nugget#
}#
if (model == 2) {#
  # gneiting model#
  cov.model <-"gneiting"#
  cc=2#
  ######
  mean=0#
  nugget=0#
  scale_s<-3/3#
  scale_t<-3/20#
  sill=1#
  power_s=1;power_t=1;sep=0.5#
  param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill,#
             power_s=power_s,power_t=power_t,sep=sep)  #
  fixed=list(nugget=0,power_s=power_s,power_t=power_t,sep=sep)   #
  fix=c(nugget, power_s, power_t,sep) #
}#
###################################################################
###################################################################
###################################################################
#
coordx=coords[,1]#
coordy=coords[,2]#
LX=abs(range(coordx)[1]-range(coordx)[2])#
LY=abs(range(coordy)[1]-range(coordy)[2])#
type_subs=3   ### type of subsampling  1=in space    2= in time  3 =spacetime#
results_PLA=NULL#
results_EU1=results_EU2=results_EU3=results_EU4=NULL#
results_EU5=results_EU6=results_EU7=results_EU8=NULL#
results_EU9=results_EU10=results_EU11=results_EU12=NULL#
#
i=1#
nsim<-1000   ## number of simulation#
set.seed(67)#
# Simulation of the  Gaussian random field:#
data <- RFsim(coordx=coords,coordt=times,corrmodel=cov.model, param=param)$data#
#####################################################################################################      #
##################################################################################################### #
mm=mean(c(data))#
vv=var(c(data))#
start=list(mean=mm,scale_s=scale_s,scale_t=scale_t,sill=vv)#
theta=c(mm,vv,scale_s,scale_t)                #starting value  #
lato_fin=2  #changing window size#
lx=lato_fin          #lunghezza lato x quadrato subfinestra#
ly=lato_fin          #lunghezza lato y quadrato subfinestra#
winc=c(lx/sqrt(LX),ly/sqrt(LY))#
winstp= .5###   1/lato_fin complete overlapping in space  1 "no" overlapping in space#
################################################
winc_t=lato_fin   ###  length of temporal window#
winstp_t=1 ###   0.5 half overlapping  1 "no" overlapping#
################################################
#
weighted=0                                          #weigthed version  1=yes 0=no#
maxdist=1#
maxtime=1#
### eucliden likelihood ################ #
res4=euclidean_cl_st(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,winc_t,winstp_t,type_subs,weighted)#
eu_par4=c(res4$par[1],res4$par[3],res4$par[4],res4$par[2])#
names(eu_par4)=names(fitA$param)#
print(eu_par4)#
library(STBEU)#
STBEUFit(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,winc_t,winstp_t,type_subs,weighted)
############################################
rm(list=ls())#
#
#*** Info:#
'#
PRACTICAL RANGE = 3 Irregular (note the seed for the space coordinates)#
12 scenarios:#
b: 2,4,8 for window size in space and time simultaneously (3 in total).#
Weighted: 1 (Yes), 0 (No) (two in total)#
Step window: 0.5 for space and no overlap in time && no overlap in space and no overlap in time (two in total)'#
#*** End Info:#
#
########################R package########################
#
require(CompRandFld)#
require(MCMCpack)#
require(spatstat)#
source("~/Documents/UV/Tesis/OpenCL/Task18/eu_like/euclidean_cl_st_ocl.R")#
dyn.load("~/Documents/UV/Tesis/OpenCL/Task18/eu_like/euc_like_cl_st_Open.so")#
################################################
# setting 1  (many locations in space a few in time)#
################################################
#
####location sites #########################################
lambda=4#
#xx=seq(-lambda,lambda);#
#coords=as.matrix(expand.grid(xx,xx))   ###regular#
#nrow(coords)#
#
set.seed(67)                                                                      ### not regular#
pp<-runifpoint(81, win=owin(c(-lambda,lambda),c(-lambda,lambda)))       ### not regular#
coords<-cbind(pp$x,pp$y)#
plot(coords)                                                        ### not regular#
nrow(coords)#
####temporal instants #########################################
times=seq(1,90,1)#
#
################################################
#
type_dist=1                ### type of distance     1=euclidean 2=chordal  3=geodesic #
maxdist=1#
maxtime=1#
#
###################################################################
model=1  #   1=double exponential       2 =gneiting#
#
if (model == 1) {#
  # exponential model#
  cov.model <-"exp_exp"#
  cc=1#
  ######
  mean=0#
  nugget=0#
  scale_s<-.4 #practical range/3 (space)#
  scale_t<-.4 #practical range/3 (time)#
  sill=1#
  param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill)  #
  fixed=list(nugget=0)#
  fix=nugget#
}#
if (model == 2) {#
  # gneiting model#
  cov.model <-"gneiting"#
  cc=2#
  ######
  mean=0#
  nugget=0#
  scale_s<-3/3#
  scale_t<-3/20#
  sill=1#
  power_s=1;power_t=1;sep=0.5#
  param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill,#
             power_s=power_s,power_t=power_t,sep=sep)  #
  fixed=list(nugget=0,power_s=power_s,power_t=power_t,sep=sep)   #
  fix=c(nugget, power_s, power_t,sep) #
}#
###################################################################
###################################################################
###################################################################
#
coordx=coords[,1]#
coordy=coords[,2]#
LX=abs(range(coordx)[1]-range(coordx)[2])#
LY=abs(range(coordy)[1]-range(coordy)[2])#
type_subs=3   ### type of subsampling  1=in space    2= in time  3 =spacetime#
results_PLA=NULL#
results_EU1=results_EU2=results_EU3=results_EU4=NULL#
results_EU5=results_EU6=results_EU7=results_EU8=NULL#
results_EU9=results_EU10=results_EU11=results_EU12=NULL#
#
i=1#
nsim<-1000   ## number of simulation#
set.seed(67)#
# Simulation of the  Gaussian random field:#
data <- RFsim(coordx=coords,coordt=times,corrmodel=cov.model, param=param)$data#
#####################################################################################################      #
##################################################################################################### #
mm=mean(c(data))#
vv=var(c(data))#
start=list(mean=mm,scale_s=scale_s,scale_t=scale_t,sill=vv)#
theta=c(mm,vv,scale_s,scale_t)                #starting value  #
lato_fin=2  #changing window size#
lx=lato_fin          #lunghezza lato x quadrato subfinestra#
ly=lato_fin          #lunghezza lato y quadrato subfinestra#
winc=c(lx/sqrt(LX),ly/sqrt(LY))#
winstp= .5###   1/lato_fin complete overlapping in space  1 "no" overlapping in space#
################################################
winc_t=lato_fin   ###  length of temporal window#
winstp_t=1 ###   0.5 half overlapping  1 "no" overlapping#
################################################
#
weighted=0                                          #weigthed version  1=yes 0=no#
maxdist=1#
maxtime=1#
### eucliden likelihood ################ #
res4=euclidean_cl_st(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,winc_t,winstp_t,type_subs,weighted)#
eu_par4=c(res4$par[1],res4$par[3],res4$par[4],res4$par[2])#
names(eu_par4)=names(fitA$param)#
print(eu_par4)#
dyn.unload("~/Documents/UV/Tesis/OpenCL/Task18/eu_like/euc_like_cl_st_Open.so")#
library(STBEU)#
STBEUFit(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,winc_t,winstp_t,type_subs,weighted)
theta
weighted
maxdit
maxdist
maxtime
fix
rm(eucl_st_ocl)
STBEUFit(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,winc_t,winstp_t,type_subs,weighted)
rm(list=ls())#
#
require(CompRandFld)#
require(MCMCpack)#
require(spatstat)#
library(STBEU)#
################################################
# setting 1  (many locations in space a few in time)#
################################################
#
####location sites #########################################
lambda=4#
#xx=seq(-lambda,lambda);#
#coords=as.matrix(expand.grid(xx,xx))   ###regular#
#nrow(coords)#
#
set.seed(67)                                                                      ### not regular#
pp<-runifpoint(200, win=owin(c(-lambda,lambda),c(-lambda,lambda)))       ### not regular#
coords<-cbind(pp$x,pp$y)#
# plot(coords)                                                        ### not regular#
nrow(coords)#
####temporal instants #########################################
times=seq(1,10,1)#
model=1  #   1=double exponential       2 =gneiting#
#
type_dist=1                ### type of distance     1=euclidean 2=chordal  3=geodesic #
# maxdist=round(length(seq(-lambda,lambda))*.25,0)#
# maxtime=round(300*.15,0)#
maxdist=1#
maxtime=1#round(NT/4,0)#
#
###################################################################
#
if (model == 1) {#
  # exponential model#
  cov.model <-"exp_exp"#
  cc=1#
  ######
  mean=0#
  nugget=0#
  scale_s<-.4#
  scale_t<-1.2/3#
  sill=1#
  param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill)  #
  fixed=list(nugget=0)#
  fix=c(nugget = nugget)#
}#
if (model == 2) {#
  # gneiting model#
  cov.model <-"gneiting"#
  cc=2#
  ######
  mean=0#
  nugget=0#
  scale_s<-1#
  scale_t<-1.2/20#
  sill=1#
  power_s=1;power_t=1;sep=0.5#
  param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill,#
             power_s=power_s,power_t=power_t,sep=sep)  #
  fixed=list(nugget=0,power_s=power_s,power_t=power_t,sep=sep)   #
  fix=c(nugget=nugget, power_s=power_s, power_t=power_t,sep=sep) #
}#
###################################################################
set.seed(67)#
###################################################################
# Simulation of the  Gaussian random field:#
data <- RFsim(coordx=coords,coordt=times,corrmodel=cov.model, param=param)$data#
# data <- matrix(rnorm(nrow(coords)*length(times)),ncol=nrow(coords),nrow=length(times))#
###################################################################
mm=mean(c(data))#
vv=var(c(data))#
coordx=coords[,1]#
coordy=coords[,2]#
LX=abs(range(coordx)[1]-range(coordx)[2])#
LY=abs(range(coordy)[1]-range(coordy)[2])#
#################################################
#   parameters for the subsampling #####
################################################
lato_fin=2  #changing window size#
lx=lato_fin          #lunghezza lato x quadrato subfinestra#
ly=lato_fin          #lunghezza lato y quadrato subfinestra#
winc=c(lx/sqrt(LX),ly/sqrt(LY))#
winstp= 0.5###   1/lato_fin complete overlapping in space  1 "no" overlapping in space#
################################################
winc_t=lato_fin   ###  length of temporal window#
winstp_t=1 ###   0.5 half overlapping  1 "no" overlapping#
################################################
theta=c(mean = mm,sill=vv,scale_s=scale_s,scale_t = scale_t)                #starting value  #
weighted=0                                          #weigthed version  1=yes 0=no#
### eucliden likelihood ################ #
type_subs=3   ### type of subsampling  1=in space    2= in time  3 =spacetime#
# ### Eucliden likelihood################ #
tCPU = proc.time()#
res=STBEUFit(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,winc_t,winstp_t,type_subs,weighted)#
tCPU = proc.time()-tCPU#
print(res$par)
rm(list=ls())#
#
require(CompRandFld)#
require(MCMCpack)#
require(spatstat)#
library(STBEU)#
################################################
# setting 1  (many locations in space a few in time)#
################################################
#
####location sites #########################################
lambda=4#
#xx=seq(-lambda,lambda);#
#coords=as.matrix(expand.grid(xx,xx))   ###regular#
#nrow(coords)#
#
set.seed(67)                                                                      ### not regular#
pp<-runifpoint(200, win=owin(c(-lambda,lambda),c(-lambda,lambda)))       ### not regular#
coords<-cbind(pp$x,pp$y)#
# plot(coords)                                                        ### not regular#
nrow(coords)#
####temporal instants #########################################
times=seq(1,10,1)#
model=1  #   1=double exponential       2 =gneiting#
#
type_dist=1                ### type of distance     1=euclidean 2=chordal  3=geodesic #
# maxdist=round(length(seq(-lambda,lambda))*.25,0)#
# maxtime=round(300*.15,0)#
maxdist=1#
maxtime=1#round(NT/4,0)#
#
###################################################################
#
if (model == 1) {#
  # exponential model#
  cov.model <-"exp_exp"#
  cc=1#
  ######
  mean=0#
  nugget=0#
  scale_s<-.4#
  scale_t<-1.2/3#
  sill=1#
  param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill)  #
  fixed=list(nugget=0)#
  fix=c(nugget = nugget)#
}#
if (model == 2) {#
  # gneiting model#
  cov.model <-"gneiting"#
  cc=2#
  ######
  mean=0#
  nugget=0#
  scale_s<-1#
  scale_t<-1.2/20#
  sill=1#
  power_s=1;power_t=1;sep=0.5#
  param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill,#
             power_s=power_s,power_t=power_t,sep=sep)  #
  fixed=list(nugget=0,power_s=power_s,power_t=power_t,sep=sep)   #
  fix=c(nugget=nugget, power_s=power_s, power_t=power_t,sep=sep) #
}#
###################################################################
set.seed(67)#
###################################################################
# Simulation of the  Gaussian random field:#
data <- RFsim(coordx=coords,coordt=times,corrmodel=cov.model, param=param)$data#
# data <- matrix(rnorm(nrow(coords)*length(times)),ncol=nrow(coords),nrow=length(times))#
###################################################################
mm=mean(c(data))#
vv=var(c(data))#
coordx=coords[,1]#
coordy=coords[,2]#
LX=abs(range(coordx)[1]-range(coordx)[2])#
LY=abs(range(coordy)[1]-range(coordy)[2])#
#################################################
#   parameters for the subsampling #####
################################################
lato_fin=2  #changing window size#
lx=lato_fin          #lunghezza lato x quadrato subfinestra#
ly=lato_fin          #lunghezza lato y quadrato subfinestra#
winc=c(lx/sqrt(LX),ly/sqrt(LY))#
winstp= .5###   1/lato_fin complete overlapping in space  1 "no" overlapping in space#
################################################
winc_t=lato_fin   ###  length of temporal window#
winstp_t=1  ###   0.5 half overlapping  1 "no" overlapping#
################################################
theta=c(mean = mm,sill=vv,scale_s=scale_s,scale_t = scale_t)                #starting value  #
weighted=0                                          #weigthed version  1=yes 0=no#
### eucliden likelihood ################ #
type_subs=3   ### type of subsampling  1=in space    2= in time  3 =spacetime#
# ### Eucliden likelihood################ #
tCPU = proc.time()#
res=STBEUFit(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,winc_t,winstp_t,type_subs,weighted)#
tCPU = proc.time()-tCPU#
print(res$par)
lato_fin=2  #changing window size#
lx=lato_fin          #lunghezza lato x quadrato subfinestra#
ly=lato_fin          #lunghezza lato y quadrato subfinestra#
winc=c(lx/sqrt(LX),ly/sqrt(LY))#
winstp= .5###   1/lato_fin complete overlapping in space  1 "no" overlapping in space#
################################################
winc_t=lato_fin   ###  length of temporal window#
winstp_t=1  ###   0.5 half overlapping  1 "no" overlapping#
################################################
theta=c(mean = mm,sill=vv,scale_s=scale_s,scale_t = scale_t)                #starting value  #
weighted=0                                          #weigthed version  1=yes 0=no#
### eucliden likelihood ################ #
type_subs=3   ### type of subsampling  1=in space    2= in time  3 =spacetime#
# ### Eucliden likelihood################ #
tCPU = proc.time()#
res=STBEUFit(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,winc_t,winstp_t,type_subs,weighted)#
tCPU = proc.time()-tCPU#
print(res$par)
rm(list=ls())#
#
require(CompRandFld)#
require(MCMCpack)#
require(spatstat)#
library(STBEU)#
################################################
# setting 1  (many locations in space a few in time)#
################################################
#
####location sites #########################################
lambda=4#
#xx=seq(-lambda,lambda);#
#coords=as.matrix(expand.grid(xx,xx))   ###regular#
#nrow(coords)#
#
set.seed(67)                                                                      ### not regular#
pp<-runifpoint(200, win=owin(c(-lambda,lambda),c(-lambda,lambda)))       ### not regular#
coords<-cbind(pp$x,pp$y)#
# plot(coords)                                                        ### not regular#
nrow(coords)#
####temporal instants #########################################
times=seq(1,10,1)#
model=1  #   1=double exponential       2 =gneiting#
#
type_dist=1                ### type of distance     1=euclidean 2=chordal  3=geodesic #
# maxdist=round(length(seq(-lambda,lambda))*.25,0)#
# maxtime=round(300*.15,0)#
maxdist=1#
maxtime=1#round(NT/4,0)#
#
###################################################################
#
if (model == 1) {#
  # exponential model#
  cov.model <-"exp_exp"#
  cc=1#
  ######
  mean=0#
  nugget=0#
  scale_s<-.4#
  scale_t<-1.2/3#
  sill=1#
  param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill)  #
  fixed=list(nugget=0)#
  fix=c(nugget = nugget)#
}#
if (model == 2) {#
  # gneiting model#
  cov.model <-"gneiting"#
  cc=2#
  ######
  mean=0#
  nugget=0#
  scale_s<-1#
  scale_t<-1.2/20#
  sill=1#
  power_s=1;power_t=1;sep=0.5#
  param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill,#
             power_s=power_s,power_t=power_t,sep=sep)  #
  fixed=list(nugget=0,power_s=power_s,power_t=power_t,sep=sep)   #
  fix=c(nugget=nugget, power_s=power_s, power_t=power_t,sep=sep) #
}#
###################################################################
set.seed(67)#
###################################################################
# Simulation of the  Gaussian random field:#
data <- RFsim(coordx=coords,coordt=times,corrmodel=cov.model, param=param)$data#
# data <- matrix(rnorm(nrow(coords)*length(times)),ncol=nrow(coords),nrow=length(times))#
###################################################################
mm=mean(c(data))#
vv=var(c(data))#
coordx=coords[,1]#
coordy=coords[,2]#
LX=abs(range(coordx)[1]-range(coordx)[2])#
LY=abs(range(coordy)[1]-range(coordy)[2])#
#################################################
#   parameters for the subsampling #####
################################################
lato_fin=2  #changing window size#
lx=lato_fin          #lunghezza lato x quadrato subfinestra#
ly=lato_fin          #lunghezza lato y quadrato subfinestra#
winc=c(lx/sqrt(LX),ly/sqrt(LY))#
winstp= .5###   1/lato_fin complete overlapping in space  1 "no" overlapping in space#
################################################
winc_t=lato_fin   ###  length of temporal window#
winstp_t=1  ###   0.5 half overlapping  1 "no" overlapping#
################################################
theta=c(mean = mm,sill=vv,scale_s=scale_s,scale_t = scale_t)                #starting value  #
weighted=0                                          #weigthed version  1=yes 0=no#
### eucliden likelihood ################ #
type_subs=3   ### type of subsampling  1=in space    2= in time  3 =spacetime#
# ### Eucliden likelihood################ #
tCPU = proc.time()#
res=STBEUFit(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,winc_t,winstp_t,type_subs,weighted)#
tCPU = proc.time()-tCPU#
print(res$par)
theta
rm(list=ls())#
#
require(CompRandFld)#
require(MCMCpack)#
require(spatstat)#
library(STBEU)#
################################################
# setting 1  (many locations in space a few in time)#
################################################
#
####location sites #########################################
lambda=4#
#xx=seq(-lambda,lambda);#
#coords=as.matrix(expand.grid(xx,xx))   ###regular#
#nrow(coords)#
#
set.seed(67)                                                                      ### not regular#
pp<-runifpoint(200, win=owin(c(-lambda,lambda),c(-lambda,lambda)))       ### not regular#
coords<-cbind(pp$x,pp$y)#
# plot(coords)                                                        ### not regular#
nrow(coords)#
####temporal instants #########################################
times=seq(1,10,1)#
model=1  #   1=double exponential       2 =gneiting#
#
type_dist=1                ### type of distance     1=euclidean 2=chordal  3=geodesic #
# maxdist=round(length(seq(-lambda,lambda))*.25,0)#
# maxtime=round(300*.15,0)#
maxdist=1#
maxtime=1#round(NT/4,0)#
#
###################################################################
#
if (model == 1) {#
  # exponential model#
  cov.model <-"exp_exp"#
  cc=1#
  ######
  mean=0#
  nugget=0#
  scale_s<-.4#
  scale_t<-1.2/3#
  sill=1#
  param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill)  #
  fixed=list(nugget=0)#
  fix=c(nugget = nugget)#
}#
if (model == 2) {#
  # gneiting model#
  cov.model <-"gneiting"#
  cc=2#
  ######
  mean=0#
  nugget=0#
  scale_s<-1#
  scale_t<-1.2/20#
  sill=1#
  power_s=1;power_t=1;sep=0.5#
  param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill,#
             power_s=power_s,power_t=power_t,sep=sep)  #
  fixed=list(nugget=0,power_s=power_s,power_t=power_t,sep=sep)   #
  fix=c(nugget=nugget, power_s=power_s, power_t=power_t,sep=sep) #
}#
###################################################################
set.seed(67)#
###################################################################
# Simulation of the  Gaussian random field:#
data <- RFsim(coordx=coords,coordt=times,corrmodel=cov.model, param=param)$data#
# data <- matrix(rnorm(nrow(coords)*length(times)),ncol=nrow(coords),nrow=length(times))#
###################################################################
mm=mean(c(data))#
vv=var(c(data))#
coordx=coords[,1]#
coordy=coords[,2]#
LX=abs(range(coordx)[1]-range(coordx)[2])#
LY=abs(range(coordy)[1]-range(coordy)[2])#
#################################################
#   parameters for the subsampling #####
################################################
lato_fin=2  #changing window size#
lx=lato_fin          #lunghezza lato x quadrato subfinestra#
ly=lato_fin          #lunghezza lato y quadrato subfinestra#
winc=c(lx/sqrt(LX),ly/sqrt(LY))#
winstp= .5###   1/lato_fin complete overlapping in space  1 "no" overlapping in space#
################################################
winc_t=lato_fin   ###  length of temporal window#
winstp_t=1  ###   0.5 half overlapping  1 "no" overlapping#
################################################
theta=c(mean = mm,sill=vv,scale_s=scale_s,scale_t = scale_t)                #starting value  #
weighted=0                                          #weigthed version  1=yes 0=no#
### eucliden likelihood ################ #
type_subs=3   ### type of subsampling  1=in space    2= in time  3 =spacetime#
# ### Eucliden likelihood################ #
tCPU = proc.time()#
res=STBEUFit(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,winc_t,winstp_t,type_subs,weighted)#
tCPU = proc.time()-tCPU#
print(res$par)
winstp= 1###   1/lato_fin complete overlapping in space  1 "no" overlapping in space#
################################################
winc_t=lato_fin   ###  length of temporal window#
winstp_t=1  ###   0.5 half overlapping  1 "no" overlapping#
################################################
theta=c(mean = mm,sill=vv,scale_s=scale_s,scale_t = scale_t)                #starting value  #
weighted=0                                          #weigthed version  1=yes 0=no#
### eucliden likelihood ################ #
type_subs=3   ### type of subsampling  1=in space    2= in time  3 =spacetime#
# ### Eucliden likelihood################ #
tCPU = proc.time()#
res=STBEUFit(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,winc_t,winstp_t,type_subs,weighted)#
tCPU = proc.time()-tCPU#
print(res$par)
rm(list=ls())#
#
require(CompRandFld)#
require(MCMCpack)#
require(spatstat)#
library(STBEU)#
################################################
# setting 1  (many locations in space a few in time)#
################################################
#
####location sites #########################################
lambda=4#
#xx=seq(-lambda,lambda);#
#coords=as.matrix(expand.grid(xx,xx))   ###regular#
#nrow(coords)#
#
set.seed(67)                                                                      ### not regular#
pp<-runifpoint(200, win=owin(c(-lambda,lambda),c(-lambda,lambda)))       ### not regular#
coords<-cbind(pp$x,pp$y)#
# plot(coords)                                                        ### not regular#
nrow(coords)#
####temporal instants #########################################
times=seq(1,10,1)#
model=1  #   1=double exponential       2 =gneiting#
#
type_dist=1                ### type of distance     1=euclidean 2=chordal  3=geodesic #
# maxdist=round(length(seq(-lambda,lambda))*.25,0)#
# maxtime=round(300*.15,0)#
maxdist=1#
maxtime=1#round(NT/4,0)#
#
###################################################################
#
if (model == 1) {#
  # exponential model#
  cov.model <-"exp_exp"#
  cc=1#
  ######
  mean=0#
  nugget=0#
  scale_s<-.4#
  scale_t<-1.2/3#
  sill=1#
  param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill)  #
  fixed=list(nugget=0)#
  fix=c(nugget = nugget)#
}#
if (model == 2) {#
  # gneiting model#
  cov.model <-"gneiting"#
  cc=2#
  ######
  mean=0#
  nugget=0#
  scale_s<-1#
  scale_t<-1.2/20#
  sill=1#
  power_s=1;power_t=1;sep=0.5#
  param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill,#
             power_s=power_s,power_t=power_t,sep=sep)  #
  fixed=list(nugget=0,power_s=power_s,power_t=power_t,sep=sep)   #
  fix=c(nugget=nugget, power_s=power_s, power_t=power_t,sep=sep) #
}#
###################################################################
set.seed(67)#
###################################################################
# Simulation of the  Gaussian random field:#
data <- RFsim(coordx=coords,coordt=times,corrmodel=cov.model, param=param)$data#
# data <- matrix(rnorm(nrow(coords)*length(times)),ncol=nrow(coords),nrow=length(times))#
###################################################################
mm=mean(c(data))#
vv=var(c(data))#
coordx=coords[,1]#
coordy=coords[,2]#
LX=abs(range(coordx)[1]-range(coordx)[2])#
LY=abs(range(coordy)[1]-range(coordy)[2])#
#################################################
#   parameters for the subsampling #####
################################################
lato_fin=2  #changing window size#
lx=lato_fin          #lunghezza lato x quadrato subfinestra#
ly=lato_fin          #lunghezza lato y quadrato subfinestra#
winc=c(lx/sqrt(LX),ly/sqrt(LY))#
winstp= .5###   1/lato_fin complete overlapping in space  1 "no" overlapping in space#
################################################
winc_t=lato_fin   ###  length of temporal window#
winstp_t=1  ###   0.5 half overlapping  1 "no" overlapping#
################################################
theta=c(mean = mm,sill=vv,scale_s=scale_s,scale_t = scale_t)                #starting value  #
weighted=0                                          #weigthed version  1=yes 0=no#
### eucliden likelihood ################ #
type_subs=3   ### type of subsampling  1=in space    2= in time  3 =spacetime#
# ### Eucliden likelihood################ #
tCPU = proc.time()#
res=STBEUFit(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,winc_t,winstp_t,type_subs,weighted)#
tCPU = proc.time()-tCPU#
print(res$par)
rm(list=ls())#
#
require(CompRandFld)#
require(MCMCpack)#
require(spatstat)#
library(STBEU)#
################################################
# setting 1  (many locations in space a few in time)#
################################################
#
####location sites #########################################
lambda=4#
#xx=seq(-lambda,lambda);#
#coords=as.matrix(expand.grid(xx,xx))   ###regular#
#nrow(coords)#
#
set.seed(67)                                                                      ### not regular#
pp<-runifpoint(10, win=owin(c(-lambda,lambda),c(-lambda,lambda)))       ### not regular#
coords<-cbind(pp$x,pp$y)#
# plot(coords)                                                        ### not regular#
nrow(coords)#
####temporal instants #########################################
times=seq(1,20,1)#
model=1  #   1=double exponential       2 =gneiting#
#
type_dist=1                ### type of distance     1=euclidean 2=chordal  3=geodesic #
# maxdist=round(length(seq(-lambda,lambda))*.25,0)#
# maxtime=round(300*.15,0)#
maxdist=1#
maxtime=1#round(NT/4,0)#
#
###################################################################
#
if (model == 1) {#
  # exponential model#
  cov.model <-"exp_exp"#
  cc=1#
  ######
  mean=0#
  nugget=0#
  scale_s<-.4#
  scale_t<-1.2/3#
  sill=1#
  param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill)  #
  fixed=list(nugget=0)#
  fix=c(nugget = nugget)#
}#
if (model == 2) {#
  # gneiting model#
  cov.model <-"gneiting"#
  cc=2#
  ######
  mean=0#
  nugget=0#
  scale_s<-1#
  scale_t<-1.2/20#
  sill=1#
  power_s=1;power_t=1;sep=0.5#
  param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill,#
             power_s=power_s,power_t=power_t,sep=sep)  #
  fixed=list(nugget=0,power_s=power_s,power_t=power_t,sep=sep)   #
  fix=c(nugget=nugget, power_s=power_s, power_t=power_t,sep=sep) #
}#
###################################################################
set.seed(67)#
###################################################################
# Simulation of the  Gaussian random field:#
data <- RFsim(coordx=coords,coordt=times,corrmodel=cov.model, param=param)$data#
# data <- matrix(rnorm(nrow(coords)*length(times)),ncol=nrow(coords),nrow=length(times))#
###################################################################
mm=mean(c(data))#
vv=var(c(data))#
coordx=coords[,1]#
coordy=coords[,2]#
LX=abs(range(coordx)[1]-range(coordx)[2])#
LY=abs(range(coordy)[1]-range(coordy)[2])#
#################################################
#   parameters for the subsampling #####
################################################
lato_fin=3  #changing window size#
lx=lato_fin          #lunghezza lato x quadrato subfinestra#
ly=lato_fin          #lunghezza lato y quadrato subfinestra#
winc=c(lx/sqrt(LX),ly/sqrt(LY))#
winstp= .5###   1/lato_fin complete overlapping in space  1 "no" overlapping in space#
################################################
winc_t=4  ###  length of temporal window#
winstp_t=.5  ###   0.5 half overlapping  1 "no" overlapping#
################################################
theta=c(mean = mm,sill=vv,scale_s=scale_s,scale_t = scale_t)                #starting value  #
weighted=0                                          #weigthed version  1=yes 0=no#
### eucliden likelihood ################ #
type_subs=2   ### type of subsampling  1=in space    2= in time  3 =spacetime#
# ### Eucliden likelihood################ #
tCPU = proc.time()#
res=STBEUFit(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc_s=0,winstp_s=0,winc_t,winstp_t,type_subs,weighted)#
tCPU = proc.time()-tCPU#
print(res$par)
winstp_t=1  ###   0.5 half overlapping  1 "no" overlapping#
################################################
theta=c(mean = mm,sill=vv,scale_s=scale_s,scale_t = scale_t)                #starting value  #
weighted=0                                          #weigthed version  1=yes 0=no#
### eucliden likelihood ################ #
type_subs=2   ### type of subsampling  1=in space    2= in time  3 =spacetime#
# ### Eucliden likelihood################ #
tCPU = proc.time()#
res=STBEUFit(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc_s=0,winstp_s=0,winc_t,winstp_t,type_subs,weighted)#
tCPU = proc.time()-tCPU#
print(res$par)
rm(list=ls())#
#
require(CompRandFld)#
require(MCMCpack)#
require(spatstat)#
library(STBEU)#
################################################
# setting 1  (many locations in space a few in time)#
################################################
#
####location sites #########################################
lambda=4#
#xx=seq(-lambda,lambda);#
#coords=as.matrix(expand.grid(xx,xx))   ###regular#
#nrow(coords)#
#
set.seed(67)                                                                      ### not regular#
pp<-runifpoint(5, win=owin(c(-lambda,lambda),c(-lambda,lambda)))       ### not regular#
coords<-cbind(pp$x,pp$y)#
# plot(coords)                                                        ### not regular#
nrow(coords)#
####temporal instants #########################################
times=seq(1,20,1)#
model=1  #   1=double exponential       2 =gneiting#
#
type_dist=1                ### type of distance     1=euclidean 2=chordal  3=geodesic #
# maxdist=round(length(seq(-lambda,lambda))*.25,0)#
# maxtime=round(300*.15,0)#
maxdist=1#
maxtime=1#round(NT/4,0)#
#
###################################################################
#
if (model == 1) {#
  # exponential model#
  cov.model <-"exp_exp"#
  cc=1#
  ######
  mean=0#
  nugget=0#
  scale_s<-.4#
  scale_t<-1.2/3#
  sill=1#
  param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill)  #
  fixed=list(nugget=0)#
  fix=c(nugget = nugget)#
}#
if (model == 2) {#
  # gneiting model#
  cov.model <-"gneiting"#
  cc=2#
  ######
  mean=0#
  nugget=0#
  scale_s<-1#
  scale_t<-1.2/20#
  sill=1#
  power_s=1;power_t=1;sep=0.5#
  param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill,#
             power_s=power_s,power_t=power_t,sep=sep)  #
  fixed=list(nugget=0,power_s=power_s,power_t=power_t,sep=sep)   #
  fix=c(nugget=nugget, power_s=power_s, power_t=power_t,sep=sep) #
}#
###################################################################
set.seed(67)#
###################################################################
# Simulation of the  Gaussian random field:#
data <- RFsim(coordx=coords,coordt=times,corrmodel=cov.model, param=param)$data#
# data <- matrix(rnorm(nrow(coords)*length(times)),ncol=nrow(coords),nrow=length(times))#
###################################################################
mm=mean(c(data))#
vv=var(c(data))#
coordx=coords[,1]#
coordy=coords[,2]#
LX=abs(range(coordx)[1]-range(coordx)[2])#
LY=abs(range(coordy)[1]-range(coordy)[2])#
#################################################
#   parameters for the subsampling #####
################################################
lato_fin=3  #changing window size#
lx=lato_fin          #lunghezza lato x quadrato subfinestra#
ly=lato_fin          #lunghezza lato y quadrato subfinestra#
winc=c(lx/sqrt(LX),ly/sqrt(LY))#
winstp= .5###   1/lato_fin complete overlapping in space  1 "no" overlapping in space#
################################################
winc_t=4  ###  length of temporal window#
winstp_t=.5  ###   0.5 half overlapping  1 "no" overlapping#
################################################
theta=c(mean = mm,sill=vv,scale_s=scale_s,scale_t = scale_t)                #starting value  #
weighted=0                                          #weigthed version  1=yes 0=no#
### eucliden likelihood ################ #
type_subs=2   ### type of subsampling  1=in space    2= in time  3 =spacetime#
# ### Eucliden likelihood################ #
tCPU = proc.time()#
res=STBEUFit(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc_s=0,winstp_s=0,winc_t,winstp_t,type_subs,weighted)#
tCPU = proc.time()-tCPU#
print(res$par)
winstp_t=1  ###   0.5 half overlapping  1 "no" overlapping#
################################################
theta=c(mean = mm,sill=vv,scale_s=scale_s,scale_t = scale_t)                #starting value  #
weighted=0                                          #weigthed version  1=yes 0=no#
### eucliden likelihood ################ #
type_subs=2   ### type of subsampling  1=in space    2= in time  3 =spacetime#
# ### Eucliden likelihood################ #
tCPU = proc.time()#
res=STBEUFit(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc_s=0,winstp_s=0,winc_t,winstp_t,type_subs,weighted)#
tCPU = proc.time()-tCPU#
print(res$par)
winstp_t=.5  ###   0.5 half overlapping  1 "no" overlapping#
################################################
theta=c(mean = mm,sill=vv,scale_s=scale_s,scale_t = scale_t)                #starting value  #
weighted=0                                          #weigthed version  1=yes 0=no#
### eucliden likelihood ################ #
type_subs=2   ### type of subsampling  1=in space    2= in time  3 =spacetime#
# ### Eucliden likelihood################ #
tCPU = proc.time()#
res=STBEUFit(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc_s=0,winstp_s=0,winc_t,winstp_t,type_subs,weighted)#
tCPU = proc.time()-tCPU#
print(res$par)
rm(list=ls())#
#
require(CompRandFld)#
require(MCMCpack)#
require(spatstat)#
library(STBEU)#
################################################
# setting 1  (many locations in space a few in time)#
################################################
#
####location sites #########################################
lambda=4#
#xx=seq(-lambda,lambda);#
#coords=as.matrix(expand.grid(xx,xx))   ###regular#
#nrow(coords)#
#
set.seed(67)                                                                      ### not regular#
pp<-runifpoint(5, win=owin(c(-lambda,lambda),c(-lambda,lambda)))       ### not regular#
coords<-cbind(pp$x,pp$y)#
# plot(coords)                                                        ### not regular#
nrow(coords)#
####temporal instants #########################################
times=seq(1,16,1)#
model=1  #   1=double exponential       2 =gneiting#
#
type_dist=1                ### type of distance     1=euclidean 2=chordal  3=geodesic #
# maxdist=round(length(seq(-lambda,lambda))*.25,0)#
# maxtime=round(300*.15,0)#
maxdist=1#
maxtime=1#round(NT/4,0)#
#
###################################################################
#
if (model == 1) {#
  # exponential model#
  cov.model <-"exp_exp"#
  cc=1#
  ######
  mean=0#
  nugget=0#
  scale_s<-.4#
  scale_t<-1.2/3#
  sill=1#
  param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill)  #
  fixed=list(nugget=0)#
  fix=c(nugget = nugget)#
}#
if (model == 2) {#
  # gneiting model#
  cov.model <-"gneiting"#
  cc=2#
  ######
  mean=0#
  nugget=0#
  scale_s<-1#
  scale_t<-1.2/20#
  sill=1#
  power_s=1;power_t=1;sep=0.5#
  param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill,#
             power_s=power_s,power_t=power_t,sep=sep)  #
  fixed=list(nugget=0,power_s=power_s,power_t=power_t,sep=sep)   #
  fix=c(nugget=nugget, power_s=power_s, power_t=power_t,sep=sep) #
}#
###################################################################
set.seed(67)#
###################################################################
# Simulation of the  Gaussian random field:#
data <- RFsim(coordx=coords,coordt=times,corrmodel=cov.model, param=param)$data#
# data <- matrix(rnorm(nrow(coords)*length(times)),ncol=nrow(coords),nrow=length(times))#
###################################################################
mm=mean(c(data))#
vv=var(c(data))#
coordx=coords[,1]#
coordy=coords[,2]#
LX=abs(range(coordx)[1]-range(coordx)[2])#
LY=abs(range(coordy)[1]-range(coordy)[2])#
#################################################
#   parameters for the subsampling #####
################################################
lato_fin=3  #changing window size#
lx=lato_fin          #lunghezza lato x quadrato subfinestra#
ly=lato_fin          #lunghezza lato y quadrato subfinestra#
winc=c(lx/sqrt(LX),ly/sqrt(LY))#
winstp= .5###   1/lato_fin complete overlapping in space  1 "no" overlapping in space#
################################################
winc_t=2  ###  length of temporal window#
winstp_t=.5 ###   0.5 half overlapping  1 "no" overlapping#
################################################
theta=c(mean = mm,sill=vv,scale_s=scale_s,scale_t = scale_t)                #starting value  #
weighted=0                                          #weigthed version  1=yes 0=no#
### eucliden likelihood ################ #
type_subs=2   ### type of subsampling  1=in space    2= in time  3 =spacetime#
# ### Eucliden likelihood################ #
tCPU = proc.time()#
res=STBEUFit(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc_s=0,winstp_s=0,winc_t,winstp_t,type_subs,weighted)#
tCPU = proc.time()-tCPU#
print(res$par)
length(times)
rm(list=ls())#
#
require(CompRandFld)#
require(MCMCpack)#
require(spatstat)#
library(STBEU)#
################################################
# setting 1  (many locations in space a few in time)#
################################################
#
####location sites #########################################
lambda=6#
#xx=seq(-lambda,lambda);#
#coords=as.matrix(expand.grid(xx,xx))   ###regular#
#nrow(coords)#
#
set.seed(67)                                                                      ### not regular#
pp<-runifpoint(5, win=owin(c(-lambda,lambda),c(-lambda,lambda)))       ### not regular#
coords<-cbind(pp$x,pp$y)#
# plot(coords)                                                        ### not regular#
nrow(coords)#
####temporal instants #########################################
times=seq(1,16,1)#
model=1  #   1=double exponential       2 =gneiting#
#
type_dist=1                ### type of distance     1=euclidean 2=chordal  3=geodesic #
# maxdist=round(length(seq(-lambda,lambda))*.25,0)#
# maxtime=round(300*.15,0)#
maxdist=1#
maxtime=1#round(NT/4,0)#
#
###################################################################
#
if (model == 1) {#
  # exponential model#
  cov.model <-"exp_exp"#
  cc=1#
  ######
  mean=0#
  nugget=0#
  scale_s<-.4#
  scale_t<-1.2/3#
  sill=1#
  param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill)  #
  fixed=list(nugget=0)#
  fix=c(nugget = nugget)#
}#
if (model == 2) {#
  # gneiting model#
  cov.model <-"gneiting"#
  cc=2#
  ######
  mean=0#
  nugget=0#
  scale_s<-1#
  scale_t<-1.2/20#
  sill=1#
  power_s=1;power_t=1;sep=0.5#
  param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill,#
             power_s=power_s,power_t=power_t,sep=sep)  #
  fixed=list(nugget=0,power_s=power_s,power_t=power_t,sep=sep)   #
  fix=c(nugget=nugget, power_s=power_s, power_t=power_t,sep=sep) #
}#
###################################################################
set.seed(67)#
###################################################################
# Simulation of the  Gaussian random field:#
data <- RFsim(coordx=coords,coordt=times,corrmodel=cov.model, param=param)$data#
# data <- matrix(rnorm(nrow(coords)*length(times)),ncol=nrow(coords),nrow=length(times))#
###################################################################
mm=mean(c(data))#
vv=var(c(data))#
coordx=coords[,1]#
coordy=coords[,2]#
LX=abs(range(coordx)[1]-range(coordx)[2])#
LY=abs(range(coordy)[1]-range(coordy)[2])#
#################################################
#   parameters for the subsampling #####
################################################
lato_fin=2  #changing window size#
lx=lato_fin          #lunghezza lato x quadrato subfinestra#
ly=lato_fin          #lunghezza lato y quadrato subfinestra#
winc=c(lx/sqrt(LX),ly/sqrt(LY))#
winstp= .5###   1/lato_fin complete overlapping in space  1 "no" overlapping in space#
################################################
winc_t=2  ###  length of temporal window#
winstp_t=.5 ###   0.5 half overlapping  1 "no" overlapping#
################################################
theta=c(mean = mm,sill=vv,scale_s=scale_s,scale_t = scale_t)                #starting value  #
weighted=0                                          #weigthed version  1=yes 0=no#
### eucliden likelihood ################ #
type_subs=1   ### type of subsampling  1=in space    2= in time  3 =spacetime#
# ### Eucliden likelihood################ #
tCPU = proc.time()#
res=STBEUFit(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc_s=winc,winstp_s=winstp,winc_t=0,winstp_t=0,type_subs,weighted)#
tCPU = proc.time()-tCPU#
print(res$par)
theta
rm(list=ls())#
#
require(CompRandFld)#
require(MCMCpack)#
require(spatstat)#
library(STBEU)#
################################################
# setting 1  (many locations in space a few in time)#
################################################
#
####location sites #########################################
lambda=6#
#xx=seq(-lambda,lambda);#
#coords=as.matrix(expand.grid(xx,xx))   ###regular#
#nrow(coords)#
#
set.seed(67)                                                                      ### not regular#
pp<-runifpoint(100, win=owin(c(-lambda,lambda),c(-lambda,lambda)))       ### not regular#
coords<-cbind(pp$x,pp$y)#
# plot(coords)                                                        ### not regular#
nrow(coords)#
####temporal instants #########################################
times=seq(1,2,1)#
model=1  #   1=double exponential       2 =gneiting#
#
type_dist=1                ### type of distance     1=euclidean 2=chordal  3=geodesic #
# maxdist=round(length(seq(-lambda,lambda))*.25,0)#
# maxtime=round(300*.15,0)#
maxdist=1#
maxtime=1#round(NT/4,0)#
#
###################################################################
#
if (model == 1) {#
  # exponential model#
  cov.model <-"exp_exp"#
  cc=1#
  ######
  mean=0#
  nugget=0#
  scale_s<-.4#
  scale_t<-1.2/3#
  sill=1#
  param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill)  #
  fixed=list(nugget=0)#
  fix=c(nugget = nugget)#
}#
if (model == 2) {#
  # gneiting model#
  cov.model <-"gneiting"#
  cc=2#
  ######
  mean=0#
  nugget=0#
  scale_s<-1#
  scale_t<-1.2/20#
  sill=1#
  power_s=1;power_t=1;sep=0.5#
  param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill,#
             power_s=power_s,power_t=power_t,sep=sep)  #
  fixed=list(nugget=0,power_s=power_s,power_t=power_t,sep=sep)   #
  fix=c(nugget=nugget, power_s=power_s, power_t=power_t,sep=sep) #
}#
###################################################################
set.seed(67)#
###################################################################
# Simulation of the  Gaussian random field:#
data <- RFsim(coordx=coords,coordt=times,corrmodel=cov.model, param=param)$data#
# data <- matrix(rnorm(nrow(coords)*length(times)),ncol=nrow(coords),nrow=length(times))#
###################################################################
mm=mean(c(data))#
vv=var(c(data))#
coordx=coords[,1]#
coordy=coords[,2]#
LX=abs(range(coordx)[1]-range(coordx)[2])#
LY=abs(range(coordy)[1]-range(coordy)[2])#
#################################################
#   parameters for the subsampling #####
################################################
lato_fin=2  #changing window size#
lx=lato_fin          #lunghezza lato x quadrato subfinestra#
ly=lato_fin          #lunghezza lato y quadrato subfinestra#
winc=c(lx/sqrt(LX),ly/sqrt(LY))#
winstp= .5###   1/lato_fin complete overlapping in space  1 "no" overlapping in space#
################################################
winc_t=2  ###  length of temporal window#
winstp_t=.5 ###   0.5 half overlapping  1 "no" overlapping#
################################################
theta=c(mean = mm,sill=vv,scale_s=scale_s,scale_t = scale_t)                #starting value  #
weighted=0                                          #weigthed version  1=yes 0=no#
### eucliden likelihood ################ #
type_subs=1   ### type of subsampling  1=in space    2= in time  3 =spacetime#
# ### Eucliden likelihood################ #
tCPU = proc.time()#
res=STBEUFit(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc_s=winc,winstp_s=winstp,winc_t=0,winstp_t=0,type_subs,weighted)#
tCPU = proc.time()-tCPU#
print(res$par)
theta
rm(list=ls())#
#
require(CompRandFld)#
require(MCMCpack)#
require(spatstat)#
library(STBEU)#
################################################
# setting 1  (many locations in space a few in time)#
################################################
#
####location sites #########################################
lambda=6#
#xx=seq(-lambda,lambda);#
#coords=as.matrix(expand.grid(xx,xx))   ###regular#
#nrow(coords)#
#
set.seed(67)                                                                      ### not regular#
pp<-runifpoint(100, win=owin(c(0,lambda),c(0,lambda)))       ### not regular#
coords<-cbind(pp$x,pp$y)#
# plot(coords)                                                        ### not regular#
nrow(coords)#
####temporal instants #########################################
times=seq(1,2,1)#
model=1  #   1=double exponential       2 =gneiting#
#
type_dist=1                ### type of distance     1=euclidean 2=chordal  3=geodesic #
# maxdist=round(length(seq(-lambda,lambda))*.25,0)#
# maxtime=round(300*.15,0)#
maxdist=1#
maxtime=1#round(NT/4,0)#
#
###################################################################
#
if (model == 1) {#
  # exponential model#
  cov.model <-"exp_exp"#
  cc=1#
  ######
  mean=0#
  nugget=0#
  scale_s<-.4#
  scale_t<-1.2/3#
  sill=1#
  param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill)  #
  fixed=list(nugget=0)#
  fix=c(nugget = nugget)#
}#
if (model == 2) {#
  # gneiting model#
  cov.model <-"gneiting"#
  cc=2#
  ######
  mean=0#
  nugget=0#
  scale_s<-1#
  scale_t<-1.2/20#
  sill=1#
  power_s=1;power_t=1;sep=0.5#
  param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill,#
             power_s=power_s,power_t=power_t,sep=sep)  #
  fixed=list(nugget=0,power_s=power_s,power_t=power_t,sep=sep)   #
  fix=c(nugget=nugget, power_s=power_s, power_t=power_t,sep=sep) #
}#
###################################################################
set.seed(67)#
###################################################################
# Simulation of the  Gaussian random field:#
data <- RFsim(coordx=coords,coordt=times,corrmodel=cov.model, param=param)$data#
# data <- matrix(rnorm(nrow(coords)*length(times)),ncol=nrow(coords),nrow=length(times))#
###################################################################
mm=mean(c(data))#
vv=var(c(data))#
coordx=coords[,1]#
coordy=coords[,2]#
LX=abs(range(coordx)[1]-range(coordx)[2])#
LY=abs(range(coordy)[1]-range(coordy)[2])#
#################################################
#   parameters for the subsampling #####
################################################
lato_fin=2  #changing window size#
lx=lato_fin          #lunghezza lato x quadrato subfinestra#
ly=lato_fin          #lunghezza lato y quadrato subfinestra#
winc=c(lx/sqrt(LX),ly/sqrt(LY))#
winstp= 1###   1/lato_fin complete overlapping in space  1 "no" overlapping in space#
################################################
winc_t=2  ###  length of temporal window#
winstp_t=.5 ###   0.5 half overlapping  1 "no" overlapping#
################################################
theta=c(mean = mm,sill=vv,scale_s=scale_s,scale_t = scale_t)                #starting value  #
weighted=0                                          #weigthed version  1=yes 0=no#
### eucliden likelihood ################ #
type_subs=1   ### type of subsampling  1=in space    2= in time  3 =spacetime#
# ### Eucliden likelihood################ #
tCPU = proc.time()#
res=STBEUFit(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc_s=winc,winstp_s=winstp,winc_t=0,winstp_t=0,type_subs,weighted)#
tCPU = proc.time()-tCPU#
print(res$par)
rm(list=ls())#
#
require(CompRandFld)#
require(MCMCpack)#
require(spatstat)#
library(STBEU)#
################################################
# setting 1  (many locations in space a few in time)#
################################################
#
####location sites #########################################
lambda=6#
xx=seq(0,lambda);#
coords=as.matrix(expand.grid(xx,xx))   ###regular#
#nrow(coords)#
#
# set.seed(67)                                                                      ### not regular#
# pp<-runifpoint(100, win=owin(c(0,lambda),c(0,lambda)))       ### not regular#
# coords<-cbind(pp$x,pp$y)#
# plot(coords)                                                        ### not regular#
nrow(coords)#
####temporal instants #########################################
times=seq(1,19,1)#
model=1  #   1=double exponential       2 =gneiting#
#
type_dist=1                ### type of distance     1=euclidean 2=chordal  3=geodesic #
# maxdist=round(length(seq(-lambda,lambda))*.25,0)#
# maxtime=round(300*.15,0)#
maxdist=1#
maxtime=1#round(NT/4,0)#
#
###################################################################
#
if (model == 1) {#
  # exponential model#
  cov.model <-"exp_exp"#
  cc=1#
  ######
  mean=0#
  nugget=0#
  scale_s<-.4#
  scale_t<-1.2/3#
  sill=1#
  param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill)  #
  fixed=list(nugget=0)#
  fix=c(nugget = nugget)#
}#
if (model == 2) {#
  # gneiting model#
  cov.model <-"gneiting"#
  cc=2#
  ######
  mean=0#
  nugget=0#
  scale_s<-1#
  scale_t<-1.2/20#
  sill=1#
  power_s=1;power_t=1;sep=0.5#
  param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill,#
             power_s=power_s,power_t=power_t,sep=sep)  #
  fixed=list(nugget=0,power_s=power_s,power_t=power_t,sep=sep)   #
  fix=c(nugget=nugget, power_s=power_s, power_t=power_t,sep=sep) #
}#
###################################################################
set.seed(67)#
###################################################################
# Simulation of the  Gaussian random field:#
data <- RFsim(coordx=coords,coordt=times,corrmodel=cov.model, param=param)$data#
# data <- matrix(rnorm(nrow(coords)*length(times)),ncol=nrow(coords),nrow=length(times))#
###################################################################
mm=mean(c(data))#
vv=var(c(data))#
coordx=coords[,1]#
coordy=coords[,2]#
LX=abs(range(coordx)[1]-range(coordx)[2])#
LY=abs(range(coordy)[1]-range(coordy)[2])#
#################################################
#   parameters for the subsampling #####
################################################
lato_fin=2  #changing window size#
lx=lato_fin          #lunghezza lato x quadrato subfinestra#
ly=lato_fin          #lunghezza lato y quadrato subfinestra#
winc=c(lx/sqrt(LX),ly/sqrt(LY))#
winstp= .5###   1/lato_fin complete overlapping in space  1 "no" overlapping in space#
################################################
winc_t=2  ###  length of temporal window#
winstp_t=.5 ###   0.5 half overlapping  1 "no" overlapping#
################################################
theta=c(mean = mm,sill=vv,scale_s=scale_s,scale_t = scale_t)                #starting value  #
weighted=0                                          #weigthed version  1=yes 0=no#
### eucliden likelihood ################ #
type_subs=3   ### type of subsampling  1=in space    2= in time  3 =spacetime#
# ### Eucliden likelihood################ #
tCPU = proc.time()#
res=STBEUFit(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc_s=winc,winstp_s=winstp,winc_t=winc_t,winstp_t=winstp_t,type_subs,weighted)#
tCPU = proc.time()-tCPU#
print(res$par)
winstp_t=1 ###   0.5 half overlapping  1 "no" overlapping#
################################################
theta=c(mean = mm,sill=vv,scale_s=scale_s,scale_t = scale_t)                #starting value  #
weighted=0                                          #weigthed version  1=yes 0=no#
### eucliden likelihood ################ #
type_subs=3   ### type of subsampling  1=in space    2= in time  3 =spacetime#
# ### Eucliden likelihood################ #
tCPU = proc.time()#
res=STBEUFit(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc_s=winc,winstp_s=winstp,winc_t=winc_t,winstp_t=winstp_t,type_subs,weighted)#
tCPU = proc.time()-tCPU#
print(res$par)
############################################
rm(list=ls())#
#
#*** Info:#
'   #
PRACTICAL RANGE = 0.4#
            12 scenarios:#
b: 2,4 for window size in space.#
Step window: 0.5 for space && no overlap (two in total)#
#
maxdist=.25*lato_fin#
'#
#*** End Info:#
#
########################R package########################
require(CompRandFld)#
require(MCMCpack)#
require(STBEU)#
dirsol = "~/Documents/Software/STBEU/Simulations/StartDoubleFix" # Directory where results will be #
################################################
# setting 1  (many locations in space a few in time)#
################################################
#
####location sites #########################################
lambda=8#
xx=seq(-lambda,lambda,length.out = 16);#
coords=as.matrix(expand.grid(xx,xx))   ###regular#
plot(coords)#
#
####temporal instants #########################################
nt = 5 # Time points 20#
times=seq(1,nt,1)#
nrow(coords)#
nrow(coords)*nt#
# bn = 2,4 Same Space#
################################################
###################################################################
model=1  #   1=double exponential       2 =gneiting#
#
if (model == 1) #
{#
     # exponential model#
     cov.model <-"exp_exp"#
     cc=1#
     ######
     mean=0#
     nugget=0#
     scale_s<-1.2/3#
     scale_t<-1.2/3#
     sill=1#
     param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill)#
     fixed=list(nugget=nugget)#
     fix=c(nugget=nugget)#
}#
#
#################################################
#   parameters for the subsampling #####
################################################
coordx=coords[,1]#
coordy=coords[,2]#
LX=abs(range(coordx)[1]-range(coordx)[2])#
LY=abs(range(coordy)[1]-range(coordy)[2])#
type_subs=1    ### type of subsampling  1=in space    2= in time 3= spacetime#
#
type_dist=1                ### type of distance     1=euclidean 2=chordal  3=geodesic #
maxdistPL=max(dist(coords))*.25                  ## compact support in weights function for pairwise liklihood#
maxtime=ceiling(max(dist(times))*.25)#
#
i=1#
nsim<-3   ## number of simulation#
results=matrix(NA,ncol=5,nrow=5*nsim)#
set.seed(276)#
while(i<=nsim)#
{#
  #####################################################################################################      #
  # Simulation of the spatial Gaussian random field:#
  data <- RFsim(coordx=coords,coordt=times,corrmodel=cov.model, param=param)$data#
  mm=mean(c(data))#
  vv=var(c(data))#
  start=list(mean=mm,scale_s=scale_s,scale_t=scale_t,sill=vv)#
  ##################################################################################################### #
  ###### Composite likelihood based on pairs estimation ###############################################     #
  theta=c(mean = mm,sill=vv,scale_s=scale_s,scale_t=scale_t)                #starting value  #
  # Maximum composite-likelihood fitting of the random field:#
  # **************************scenario 0/12A main NOT weighted estimation***#
  fitA <- FitComposite(data=data,coordx=coords,coordt=times,#
                       corrmodel=cov.model,maxtime=maxtime,maxdist=maxdistPL,#
                       likelihood="Marginal",type="Pairwise",#
                       start=start,fixed=fixed,weighted=T)#
  print(fitA$param)#
  # **************************scenario 1/12 b = 2, no overlaping  ***#
  #################################################
  #   parameters for the subsampling #####
  ################################################
  lato_fin=2  #changing window size 2,4#
  lx=lato_fin          #lunghezza lato x quadrato subfinestra#
  ly=lato_fin          #lunghezza lato y quadrato subfinestra#
  winc=c(lx/sqrt(LX),ly/sqrt(LY))#
  winstp= 1  ###   1/lato_fin complete overlapping   1 "no" overlapping#
  ################################################
  weighted=0#
  maxdist=2#
  ### eucliden likelihood ################ #
  res1=STBEUFit(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,0,0,type_subs,weighted)#
  eu_par1=c(res1$par[1],res1$par[3],res1$par[4],res1$par[2])#
  names(eu_par1)=names(fitA$param)#
  print(eu_par1)#
  # **************************scenario 2/12 b = 4, no overlaping ***#
  #################################################
  #   parameters for the subsampling #####
  ################################################
  lato_fin=4  #changing window size 2,4#
  lx=lato_fin          #lunghezza lato x quadrato subfinestra#
  ly=lato_fin          #lunghezza lato y quadrato subfinestra#
  winc=c(lx/sqrt(LX),ly/sqrt(LY))#
  winstp= 1  ###   1/lato_fin complete overlapping   1 "no" overlapping#
  ################################################
  maxdist=.25*lato_fin#
  ### eucliden likelihood ################ #
  res2=STBEUFit(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,0,0,type_subs,weighted)#
  eu_par2=c(res2$par[1],res2$par[3],res2$par[4],res2$par[2])#
  names(eu_par2)=names(fitA$param)#
  print(eu_par2)#
  # **************************scenario 3/12 b = 2, overlaping (.5) ***#
  #################################################
  #   parameters for the subsampling #####
  ################################################
  lato_fin=2  #changing window size 2,4#
  lx=lato_fin          #lunghezza lato x quadrato subfinestra#
  ly=lato_fin          #lunghezza lato y quadrato subfinestra#
  winc=c(lx/sqrt(LX),ly/sqrt(LY))#
  winstp= .5  ###   1/lato_fin complete overlapping   1 "no" overlapping#
  ################################################
  maxdist=.25*lato_fin#
  ### eucliden likelihood ################ #
  res4=STBEUFit(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,0,0,type_subs,weighted)#
  eu_par4=c(res4$par[1],res4$par[3],res4$par[4],res4$par[2])#
  names(eu_par4)=names(fitA$param)#
  print(eu_par4)#
  # **************************scenario 4/12 b = 4, overlaping (.5), weighted. ***#
  #################################################
  #   parameters for the subsampling #####
  ################################################
  lato_fin=4  #changing window size 2,4,8#
  lx=lato_fin          #lunghezza lato x quadrato subfinestra#
  ly=lato_fin          #lunghezza lato y quadrato subfinestra#
  winc=c(lx/sqrt(LX),ly/sqrt(LY))#
  winstp= .5  ###   1/lato_fin complete overlapping   1 "no" overlapping#
  ################################################
  maxdist=.25*lato_fin#
#
  ### eucliden likelihood ################ #
  res5=STBEUFit(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,0,0,type_subs,weighted)#
  eu_par5=c(res5$par[1],res5$par[3],res5$par[4],res5$par[2])#
  names(eu_par5)=names(fitA$param)#
  print(eu_par5)#
  results[i:(i+4),]=rbind(fitA$param,eu_par1,eu_par2,eu_par3,eu_par4)#
  print(i)#
  i=i+1#
  setwd(dirsol)#
  write.csv(TotRes, "regular_results_spaceDE12.csv")#
}
############################################
rm(list=ls())#
#
#*** Info:#
'   #
PRACTICAL RANGE = 0.4#
12 scenarios:#
b: 2,4 for window size in space.#
Step window: 0.5 for space && no overlap (two in total)#
#
maxdist=.25*lato_fin#
'#
#*** End Info:#
#
########################R package########################
require(CompRandFld)#
require(MCMCpack)#
require(STBEU)#
dirsol = "~/Documents/Software/STBEU/Simulations/StartDoubleFix" # Directory where results will be #
################################################
# setting 1  (many locations in space a few in time)#
################################################
#
####location sites #########################################
lambda=8#
xx=seq(-lambda,lambda);#
coords=as.matrix(expand.grid(xx,xx))   ###regular#
# plot(coords)#
#
####temporal instants #########################################
nt = 18 # Time points 18#
times=seq(1,nt,1)#
nrow(coords)#
nrow(coords)*nt#
# bn = 2,4 Same Space#
################################################
###################################################################
model=1  #   1=double exponential       2 =gneiting#
#
if (model == 1) #
{#
  # exponential model#
  cov.model <-"exp_exp"#
  cc=1#
  ######
  mean=0#
  nugget=0#
  scale_s<-1.2/3#
  scale_t<-1.2/3#
  sill=1#
  param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill)#
  fixed=list(nugget=nugget)#
  fix=c(nugget=nugget)#
}#
#
#################################################
#   parameters for the subsampling #####
################################################
coordx=coords[,1]#
coordy=coords[,2]#
LX=abs(range(coordx)[1]-range(coordx)[2])#
LY=abs(range(coordy)[1]-range(coordy)[2])#
type_subs=1    ### type of subsampling  1=in space    2= in time 3= spacetime#
#
type_dist=1                ### type of distance     1=euclidean 2=chordal  3=geodesic #
maxdistPL=max(dist(coords))*.25                  ## compact support in weights function for pairwise liklihood#
maxtime=ceiling(max(dist(times))*.25)#
#
i=1#
nsim<-1   ## number of simulation#
results=matrix(NA,ncol=5,nrow=5*nsim);label = 0:4#
set.seed(276)#
while(i<=nsim)#
{#
  #####################################################################################################      #
  # Simulation of the spatial Gaussian random field:#
  data <- RFsim(coordx=coords,coordt=times,corrmodel=cov.model, param=param)$data#
  mm=mean(c(data))#
  vv=var(c(data))#
  start=list(mean=mm,scale_s=scale_s,scale_t=scale_t,sill=vv)#
  ##################################################################################################### #
  ###### Composite likelihood based on pairs estimation ###############################################     #
  theta=c(mean = mm,sill=vv,scale_s=scale_s,scale_t=scale_t)                #starting value  #
  # Maximum composite-likelihood fitting of the random field:#
  # **************************scenario 0/4A main NOT weighted estimation***#
  fitA <- FitComposite(data=data,coordx=coords,coordt=times,#
                       corrmodel=cov.model,maxtime=maxtime,maxdist=maxdistPL,#
                       likelihood="Marginal",type="Pairwise",#
                       start=start,fixed=fixed,weighted=F)#
  eu_par0=c(fitA$param[1],fitA$param[2],fitA$param[3],fitA$param[4])#
  print(fitA$param)#
  names(eu_par0)=names(fitA$param)#
  # **************************scenario 1/4 b = 2, no overlaping  ***#
  #################################################
  #   parameters for the subsampling #####
  ################################################
  lato_fin=2  #changing window size 2,4#
  lx=lato_fin          #lunghezza lato x quadrato subfinestra#
  ly=lato_fin          #lunghezza lato y quadrato subfinestra#
  winc=c(lx/sqrt(LX),ly/sqrt(LY))#
  winstp= 1  ###   1/lato_fin complete overlapping   1 "no" overlapping#
  ################################################
  weighted=0#
  maxdist=.25*lato_fin#
  # maxdist=1.5#
  ### eucliden likelihood ################ #
  res1=SubSampTimeEval(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc_s=winc,winstp_s = winstp,0,0,type_subs,weighted)#
  eu_par1=c(res1$par[1],res1$par[3],res1$par[4],res1$par[2])#
  names(eu_par1)=names(fitA$param)#
  # print(eu_par1)#
  # **************************scenario 2/4 b = 4, no overlaping ***#
  #################################################
  #   parameters for the subsampling #####
  ################################################
  lato_fin=4  #changing window size 2,4#
  lx=lato_fin          #lunghezza lato x quadrato subfinestra#
  ly=lato_fin          #lunghezza lato y quadrato subfinestra#
  winc=c(lx/sqrt(LX),ly/sqrt(LY))#
  winstp= 1  ###   1/lato_fin complete overlapping   1 "no" overlapping#
  ################################################
  maxdist=.25*lato_fin#
  ### eucliden likelihood ################ #
  res2=SubSampTimeEval(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,0,0,type_subs,weighted)#
  eu_par2=c(res2$par[1],res2$par[3],res2$par[4],res2$par[2])#
  names(eu_par2)=names(fitA$param)#
  # print(eu_par2)#
  # **************************scenario 3/4 b = 2, overlaping (.5) ***#
  #################################################
  #   parameters for the subsampling #####
  ################################################
  lato_fin=2  #changing window size 2,4#
  lx=lato_fin          #lunghezza lato x quadrato subfinestra#
  ly=lato_fin          #lunghezza lato y quadrato subfinestra#
  winc=c(lx/sqrt(LX),ly/sqrt(LY))#
  winstp= .5  ###   1/lato_fin complete overlapping   1 "no" overlapping#
  ################################################
  maxdist=.25*lato_fin#
  ### eucliden likelihood ################ #
  res3=SubSampTimeEval(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,0,0,type_subs,weighted)#
  eu_par3=c(res3$par[1],res3$par[3],res3$par[4],res3$par[2])#
  names(eu_par3)=names(fitA$param)#
  # print(eu_par3)#
  # **************************scenario 4/4 b = 4, overlaping (.5), weighted. ***#
  #################################################
  #   parameters for the subsampling #####
  ################################################
  lato_fin=4  #changing window size 2,4,8#
  lx=lato_fin          #lunghezza lato x quadrato subfinestra#
  ly=lato_fin          #lunghezza lato y quadrato subfinestra#
  winc=c(lx/sqrt(LX),ly/sqrt(LY))#
  winstp= .5  ###   1/lato_fin complete overlapping   1 "no" overlapping#
  ################################################
  maxdist=.25*lato_fin#
  ### eucliden likelihood ################ #
  res4=SubSampTimeEval(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,0,0,type_subs,weighted)#
  eu_par4=c(res4$par[1],res4$par[3],res4$par[4],res4$par[2])#
  names(eu_par4)=names(fitA$param)#
  # print(eu_par4)#
  # results[(5*(i)-4):((5*(i)-4)+4),]=cbind(label,rbind(eu_par0=eu_par0,eu_par1,eu_par2,eu_par3,eu_par4))#
  # colnames(results)=c("setting",names(fitA$param))#
  print(i)#
  i=i+1#
  # setwd(dirsol)#
  # write.csv(results, "regular_results_spaceDE12.csv")#
}
############################################
rm(list=ls())#
#
#*** Info:#
'   #
PRACTICAL RANGE = 1.2/3#
12 scenarios:#
b: 4,8 for window size in space.#
Step window: 0.5 for space && no overlap (two in total)#
#
maxtime=ceiling(.25*winc_t)#
'#
#*** End Info:#
#
########################R package########################
require(CompRandFld)#
require(MCMCpack)#
require(STBEU)#
dirsol = "~/Documents/Software/STBEU/Simulations/StartDoubleFix" # Directory where results will be #
#
################################################
# setting 2  (few locations in space many in time)#
################################################
#
####location sites #########################################
lambda=1 #2#
xx=seq(-lambda,lambda);#
coords=as.matrix(expand.grid(xx,xx))   ###regular#
# plot(coords)#
####temporal instants #########################################
nt = 210 # Time points 210#
times=seq(1,nt,1)#
nrow(coords)#
nrow(coords)*nt # bnt = 2,4,6. For Time#
################################################
#
###################################################################
model=1  #   1=double exponential       2 =gneiting#
#
if (model == 1) #
{#
  # exponential model#
  cov.model <-"exp_exp"#
  cc=1#
  ######
  mean=0#
  nugget=0#
  scale_s<-1.2/3#
  scale_t<-1.2/3#
  sill=1#
  param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill)#
  fixed=list(nugget=nugget)#
  fix=c(nugget=nugget)#
}#
#
#################################################
#   parameters for the subsampling #####
################################################
coordx=coords[,1]#
coordy=coords[,2]#
type_subs=2    ### type of subsampling  1=in space    2= in time 3= spacetime#
#
type_dist=1                ### type of distance     1=euclidean 2=chordal  3=geodesic #
maxdist=max(dist(coords))*.25                  ## compact support in weights function for pairwise liklihood#
maxtimePL=ceiling(max(dist(times))*.25)#
#
i=1#
nsim<-5   ## number of simulation#
results=matrix(NA,ncol=5,nrow=5*nsim);label = 0:4#
set.seed(276)#
while(i<=nsim)#
{#
  #####################################################################################################      #
  # Simulation of the spatial Gaussian random field:#
  data <- RFsim(coordx=coords,coordt=times,corrmodel=cov.model, param=param)$data#
  mm=mean(c(data))#
  vv=var(c(data))#
  start=list(mean=mm,scale_s=scale_s,scale_t=scale_t,sill=vv)#
  ##################################################################################################### #
  ###### Composite likelihood based on pairs estimation ###############################################     #
  theta=c(mean = mm,sill=vv,scale_s=scale_s,scale_t=scale_t)                #starting value  #
  # Maximum composite-likelihood fitting of the random field:#
  # **************************scenario 0/4A main NOT weighted estimation***#
  fitA <- FitComposite(data=data,coordx=coords,coordt=times,#
                       corrmodel=cov.model,maxtime=maxtimePL,maxdist=maxdist,#
                       likelihood="Marginal",type="Pairwise",#
                       start=start,fixed=fixed,weighted=F)#
  eu_par0=c(fitA$param[1],fitA$param[2],fitA$param[3],fitA$param[4])#
  print(fitA$param)#
  names(eu_par0)=names(fitA$param)#
  # **************************scenario 1/4 b = 4, no overlaping  ***#
  #################################################
  #   parameters for the subsampling #####
  ################################################
  winc_t=4#
  winstp_t= 1  ###   1/lato_fin complete overlapping   1 "no" overlapping#
  ################################################
  weighted=0#
  maxtime=ceiling(.25*winc_t)#
  # maxdist=1.5#
  ### eucliden likelihood ################ #
  res1=SubSampTimeEval(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc_s=0,winstp_s = 0,winc_t = winc_t,winstp_t = winstp_t,type_subs,weighted)#
  eu_par1=c(res1$par[1],res1$par[3],res1$par[4],res1$par[2])#
  names(eu_par1)=names(fitA$param)#
  # print(eu_par1)#
  # **************************scenario 2/4 b = 8, no overlaping ***#
  #################################################
  #   parameters for the subsampling #####
  ################################################
  winc_t=8#
  winstp= 1  ###   1/lato_fin complete overlapping   1 "no" overlapping#
  ################################################
  maxtime=ceiling(.25*winc_t)#
  ### eucliden likelihood ################ #
  res2=SubSampTimeEval(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc_s=0,winstp_s = 0,winc_t = winc_t,winstp_t = winstp_t,type_subs,weighted)#
  eu_par2=c(res2$par[1],res2$par[3],res2$par[4],res2$par[2])#
  names(eu_par2)=names(fitA$param)#
  # print(eu_par2)#
  # **************************scenario 3/4 b = 4, overlaping (.5) ***#
  #################################################
  #   parameters for the subsampling #####
  ################################################
  winc_t=4#
  winstp= .5  ###   1/lato_fin complete overlapping   1 "no" overlapping#
  ################################################
  maxtime=ceiling(.25*winc_t)#
  ### eucliden likelihood ################ #
  res3=SubSampTimeEval(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc_s=0,winstp_s = 0,winc_t = winc_t,winstp_t = winstp_t,type_subs,weighted)#
  eu_par3=c(res3$par[1],res3$par[3],res3$par[4],res3$par[2])#
  names(eu_par3)=names(fitA$param)#
  # print(eu_par3)#
  # **************************scenario 4/4 b = 8, overlaping (.5), weighted. ***#
  #################################################
  #   parameters for the subsampling #####
  ################################################
  winc_t=8#
  winstp= .5  ###   1/lato_fin complete overlapping   1 "no" overlapping#
  ################################################
  maxtime=ceiling(.25*winc_t)#
  ### eucliden likelihood ################ #
  res4=SubSampTimeEval(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc_s=0,winstp_s = 0,winc_t = winc_t,winstp_t = winstp_t,type_subs,weighted)#
  eu_par4=c(res4$par[1],res4$par[3],res4$par[4],res4$par[2])#
  names(eu_par4)=names(fitA$param)#
  # print(eu_par4)#
  # results[(5*(i)-4):((5*(i)-4)+4),]=cbind(label,rbind(eu_par0=eu_par0,eu_par1,eu_par2,eu_par3,eu_par4))#
  # colnames(results)=c("setting",names(fitA$param))#
  print(i)#
  i=i+1#
  # setwd(dirsol)#
  # write.csv(results, "regular_results_timeDE04.csv")#
}
############################################
rm(list=ls())#
#
#*** Info:#
'   #
PRACTICAL RANGE = 1.2/3#
12 scenarios:#
b: 4,8 for window size in space.#
Step window: 0.5 for space && no overlap (two in total)#
#
maxtime=ceiling(.25*winc_t)#
'#
#*** End Info:#
#
########################R package########################
require(CompRandFld)#
require(MCMCpack)#
require(STBEU)#
dirsol = "~/Documents/Software/STBEU/Simulations/StartDoubleFix" # Directory where results will be #
#
################################################
# setting 2  (few locations in space many in time)#
################################################
#
####location sites #########################################
lambda=1 #2#
xx=seq(-lambda,lambda);#
coords=as.matrix(expand.grid(xx,xx))   ###regular#
# plot(coords)#
####temporal instants #########################################
nt = 210 # Time points 210#
times=seq(1,nt,1)#
nrow(coords)#
nrow(coords)*nt # bnt = 2,4,6. For Time#
################################################
#
###################################################################
model=1  #   1=double exponential       2 =gneiting#
#
if (model == 1) #
{#
  # exponential model#
  cov.model <-"exp_exp"#
  cc=1#
  ######
  mean=0#
  nugget=0#
  scale_s<-1.2/3#
  scale_t<-1.2/3#
  sill=1#
  param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill)#
  fixed=list(nugget=nugget)#
  fix=c(nugget=nugget)#
}#
#
#################################################
#   parameters for the subsampling #####
################################################
coordx=coords[,1]#
coordy=coords[,2]#
type_subs=2    ### type of subsampling  1=in space    2= in time 3= spacetime#
#
type_dist=1                ### type of distance     1=euclidean 2=chordal  3=geodesic #
maxdist=max(dist(coords))*.25                  ## compact support in weights function for pairwise liklihood#
maxtimePL=ceiling(max(dist(times))*.25)#
#
i=1#
nsim<-2   ## number of simulation#
results=matrix(NA,ncol=5,nrow=5*nsim);label = 0:4#
set.seed(276)#
while(i<=nsim)#
{#
  #####################################################################################################      #
  # Simulation of the spatial Gaussian random field:#
  data <- RFsim(coordx=coords,coordt=times,corrmodel=cov.model, param=param)$data#
  mm=mean(c(data))#
  vv=var(c(data))#
  start=list(mean=mm,scale_s=scale_s,scale_t=scale_t,sill=vv)#
  ##################################################################################################### #
  ###### Composite likelihood based on pairs estimation ###############################################     #
  theta=c(mean = mm,sill=vv,scale_s=scale_s,scale_t=scale_t)                #starting value  #
  # Maximum composite-likelihood fitting of the random field:#
  # **************************scenario 0/4A main NOT weighted estimation***#
  fitA <- FitComposite(data=data,coordx=coords,coordt=times,#
                       corrmodel=cov.model,maxtime=maxtimePL,maxdist=maxdist,#
                       likelihood="Marginal",type="Pairwise",#
                       start=start,fixed=fixed,weighted=F)#
  eu_par0=c(fitA$param[1],fitA$param[2],fitA$param[3],fitA$param[4])#
  print(fitA$param)#
  names(eu_par0)=names(fitA$param)#
  # **************************scenario 1/4 b = 4, no overlaping  ***#
  #################################################
  #   parameters for the subsampling #####
  ################################################
  winc_t=4#
  winstp_t= 1  ###   1/lato_fin complete overlapping   1 "no" overlapping#
  ################################################
  weighted=0#
  maxtime=ceiling(.25*winc_t)#
  # maxdist=1.5#
  ### eucliden likelihood ################ #
  res1=SubSampTimeEval(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc_s=0,winstp_s = 0,winc_t = winc_t,winstp_t = winstp_t,type_subs,weighted)#
  eu_par1=c(res1$par[1],res1$par[3],res1$par[4],res1$par[2])#
  names(eu_par1)=names(fitA$param)#
  # print(eu_par1)#
  # **************************scenario 2/4 b = 8, no overlaping ***#
  #################################################
  #   parameters for the subsampling #####
  ################################################
  winc_t=8#
  winstp= 1  ###   1/lato_fin complete overlapping   1 "no" overlapping#
  ################################################
  maxtime=ceiling(.25*winc_t)#
  ### eucliden likelihood ################ #
  res2=SubSampTimeEval(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc_s=0,winstp_s = 0,winc_t = winc_t,winstp_t = winstp_t,type_subs,weighted)#
  eu_par2=c(res2$par[1],res2$par[3],res2$par[4],res2$par[2])#
  names(eu_par2)=names(fitA$param)#
  # print(eu_par2)#
  # **************************scenario 3/4 b = 4, overlaping (.5) ***#
  #################################################
  #   parameters for the subsampling #####
  ################################################
  winc_t=4#
  winstp= .5  ###   1/lato_fin complete overlapping   1 "no" overlapping#
  ################################################
  maxtime=ceiling(.25*winc_t)#
  ### eucliden likelihood ################ #
  res3=SubSampTimeEval(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc_s=0,winstp_s = 0,winc_t = winc_t,winstp_t = winstp_t,type_subs,weighted)#
  eu_par3=c(res3$par[1],res3$par[3],res3$par[4],res3$par[2])#
  names(eu_par3)=names(fitA$param)#
  # print(eu_par3)#
  # **************************scenario 4/4 b = 8, overlaping (.5), weighted. ***#
  #################################################
  #   parameters for the subsampling #####
  ################################################
  winc_t=8#
  winstp= .5  ###   1/lato_fin complete overlapping   1 "no" overlapping#
  ################################################
  maxtime=ceiling(.25*winc_t)#
  ### eucliden likelihood ################ #
  res4=SubSampTimeEval(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc_s=0,winstp_s = 0,winc_t = winc_t,winstp_t = winstp_t,type_subs,weighted)#
  eu_par4=c(res4$par[1],res4$par[3],res4$par[4],res4$par[2])#
  names(eu_par4)=names(fitA$param)#
  # print(eu_par4)#
  # results[(5*(i)-4):((5*(i)-4)+4),]=cbind(label,rbind(eu_par0=eu_par0,eu_par1,eu_par2,eu_par3,eu_par4))#
  # colnames(results)=c("setting",names(fitA$param))#
  print(i)#
  i=i+1#
  # setwd(dirsol)#
  # write.csv(results, "regular_results_timeDE04.csv")#
}
############################################
rm(list=ls())#
#
#*** Info:#
'   #
PRACTICAL RANGE = 0.4#
12 scenarios:#
b1: 3,10 for window size in space and time.#
b2: 4,20 for window size in space and time.#
Step window: 0.5 for space && no overlap (two in total)#
#
maxdist=.25*lato_fin#
maxtime=ceiling(.25*winc_t)#
'#
#*** End Info:#
#
########################R package########################
require(CompRandFld)#
require(MCMCpack)#
require(STBEU)#
dirsol = "~/Documents/Software/STBEU/Simulations/StartDoubleFix" # Directory where results will be #
################################################
# setting 1  (many locations in space a few in time)#
################################################
#
####location sites #########################################
lambda=5#
xx=seq(-lambda,lambda);#
coords=as.matrix(expand.grid(xx,xx))   ###regular#
# plot(coords)#
#
####temporal instants #########################################
nt = 50 # Time points 18#
times=seq(1,nt,1)#
nrow(coords)#
nrow(coords)*nt#
# bn = 2,4 Same Space#
################################################
###################################################################
model=1  #   1=double exponential       2 =gneiting#
#
if (model == 1) #
{#
  # exponential model#
  cov.model <-"exp_exp"#
  cc=1#
  ######
  mean=0#
  nugget=0#
  scale_s<-1.2/3#
  scale_t<-1.2/3#
  sill=1#
  param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill)#
  fixed=list(nugget=nugget)#
  fix=c(nugget=nugget)#
}#
#
#################################################
#   parameters for the subsampling #####
################################################
coordx=coords[,1]#
coordy=coords[,2]#
LX=abs(range(coordx)[1]-range(coordx)[2])#
LY=abs(range(coordy)[1]-range(coordy)[2])#
type_subs=3    ### type of subsampling  1=in space    2= in time 3= spacetime#
#
type_dist=1                ### type of distance     1=euclidean 2=chordal  3=geodesic #
maxdistPL=max(dist(coords))*.25                  ## compact support in weights function for pairwise liklihood#
maxtimePL=ceiling(max(dist(times))*.25)#
#
i=1#
nsim<-1   ## number of simulation#
results=matrix(NA,ncol=5,nrow=5*nsim);label = 0:4#
set.seed(276)#
while(i<=nsim)#
{#
  #####################################################################################################      #
  # Simulation of the spatial Gaussian random field:#
  data <- RFsim(coordx=coords,coordt=times,corrmodel=cov.model, param=param)$data#
  mm=mean(c(data))#
  vv=var(c(data))#
  start=list(mean=mm,scale_s=scale_s,scale_t=scale_t,sill=vv)#
  ##################################################################################################### #
  ###### Composite likelihood based on pairs estimation ###############################################     #
  theta=c(mean = mm,sill=vv,scale_s=scale_s,scale_t=scale_t)                #starting value  #
  # Maximum composite-likelihood fitting of the random field:#
  # **************************scenario 0/4A main NOT weighted estimation***#
  fitA <- FitComposite(data=data,coordx=coords,coordt=times,#
                       corrmodel=cov.model,maxtime=maxtimePL,maxdist=maxdistPL,#
                       likelihood="Marginal",type="Pairwise",#
                       start=start,fixed=fixed,weighted=F)#
  eu_par0=c(fitA$param[1],fitA$param[2],fitA$param[3],fitA$param[4])#
  print(fitA$param)#
  names(eu_par0)=names(fitA$param)#
  # **************************scenario 1/4 bs = 3,bt = 10, no overlaping  ***#
  #################################################
  #   parameters for the subsampling #####
  ################################################
  lato_fin=3  #changing window size 2,4#
  lx=lato_fin          #lunghezza lato x quadrato subfinestra#
  ly=lato_fin          #lunghezza lato y quadrato subfinestra#
  winc=c(lx/sqrt(LX),ly/sqrt(LY))#
  winstp= 1  ###   1/lato_fin complete overlapping   1 "no" overlapping#
  ################################################
  winc_t=10#
  winstp_t= 1  ###   1/lato_fin complete overlapping   1 "no" overlapping#
  ################################################
  weighted=0#
  maxdist=.25*lato_fin#
  maxtime=ceiling(.25*winc_t)#
  ### eucliden likelihood ################ #
  res1=SubSampTimeEval(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc_s=winc,winstp_s = winstp,winc_t = winc_t,winstp_t = winstp_t,type_subs,weighted)#
  eu_par1=c(res1$par[1],res1$par[3],res1$par[4],res1$par[2])#
  names(eu_par1)=names(fitA$param)#
  # print(eu_par1)#
  # **************************scenario 2/4 bs = 4,bt = 20, no overlaping  ***#
  #################################################
  #   parameters for the subsampling #####
  ################################################
  lato_fin=4  #changing window size 2,4#
  lx=lato_fin          #lunghezza lato x quadrato subfinestra#
  ly=lato_fin          #lunghezza lato y quadrato subfinestra#
  winc=c(lx/sqrt(LX),ly/sqrt(LY))#
  winstp= 1  ###   1/lato_fin complete overlapping   1 "no" overlapping#
  ################################################
  winc_t=20#
  winstp_t= 1  ###   1/lato_fin complete overlapping   1 "no" overlapping#
  ################################################
  maxdist=.25*lato_fin#
  maxtime=ceiling(.25*winc_t)#
  ### eucliden likelihood ################ #
  res2=SubSampTimeEval(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,winc_t = winc_t,winstp_t = winstp_t,type_subs,weighted)#
  eu_par2=c(res2$par[1],res2$par[3],res2$par[4],res2$par[2])#
  names(eu_par2)=names(fitA$param)#
  # print(eu_par2)#
  # **************************scenario 3/4 bs = 3,bt=10 overlaping (.5) ***#
  #################################################
  #   parameters for the subsampling #####
  ################################################
  lato_fin=3  #changing window size 2,4#
  lx=lato_fin          #lunghezza lato x quadrato subfinestra#
  ly=lato_fin          #lunghezza lato y quadrato subfinestra#
  winc=c(lx/sqrt(LX),ly/sqrt(LY))#
  winstp= .5  ###   1/lato_fin complete overlapping   1 "no" overlapping#
  ################################################
  winc_t=10#
  winstp_t= 1  ###   1/lato_fin complete overlapping   1 "no" overlapping#
  ################################################
  maxdist=.25*lato_fin#
  maxtime=ceiling(.25*winc_t)#
  ### eucliden likelihood ################ #
  res3=SubSampTimeEval(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,winc_t = winc_t,winstp_t = winstp_t,type_subs,weighted)#
  eu_par3=c(res3$par[1],res3$par[3],res3$par[4],res3$par[2])#
  names(eu_par3)=names(fitA$param)#
  # print(eu_par3)#
  # **************************scenario 4/4 bs = 4,bt=20, overlaping (.5), weighted. ***#
  #################################################
  #   parameters for the subsampling #####
  ################################################
  lato_fin=4  #changing window size 2,4,8#
  lx=lato_fin          #lunghezza lato x quadrato subfinestra#
  ly=lato_fin          #lunghezza lato y quadrato subfinestra#
  winc=c(lx/sqrt(LX),ly/sqrt(LY))#
  winstp= .5  ###   1/lato_fin complete overlapping   1 "no" overlapping#
  ################################################
  winc_t=20#
  winstp_t= 1  ###   1/lato_fin complete overlapping   1 "no" overlapping#
  ################################################
  maxdist=.25*lato_fin#
  maxtime=ceiling(.25*winc_t)#
  ### eucliden likelihood ################ #
  res4=SubSampTimeEval(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,winc_t = winc_t,winstp_t = winstp_t,type_subs,weighted)#
  eu_par4=c(res4$par[1],res4$par[3],res4$par[4],res4$par[2])#
  names(eu_par4)=names(fitA$param)#
  # print(eu_par4)#
  # results[(5*(i)-4):((5*(i)-4)+4),]=cbind(label,rbind(eu_par0=eu_par0,eu_par1,eu_par2,eu_par3,eu_par4))#
  # colnames(results)=c("setting",names(fitA$param))#
  print(i)#
  i=i+1#
  # setwd(dirsol)#
  # write.csv(results, "regular_results_spacetimeDE12.csv")#
}
data
lato_fin=3  #changing window size 2,4#
  lx=lato_fin          #lunghezza lato x quadrato subfinestra#
  ly=lato_fin          #lunghezza lato y quadrato subfinestra#
  winc=c(lx/sqrt(LX),ly/sqrt(LY))#
  winstp= 1  ###   1/lato_fin complete overlapping   1 "no" overlapping#
  ################################################
  winc_t=10#
  winstp_t= 1  ###   1/lato_fin complete overlapping   1 "no" overlapping#
  ################################################
  weighted=0#
  maxdist=.25*lato_fin#
  maxtime=ceiling(.25*winc_t)#
  ### eucliden likelihood ################ #
  res1=SubSampTimeEval(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc_s=winc,winstp_s = winstp,winc_t = winc_t,winstp_t = winstp_t,type_subs,weighted)#
  eu_par1=c(res1$par[1],res1$par[3],res1$par[4],res1$par[2])#
  names(eu_par1)=names(fitA$param)#
  # print(eu_par1)#
  # **************************scenario 2/4 bs = 4,bt = 20, no overlaping  ***#
  #################################################
  #   parameters for the subsampling #####
  ################################################
  lato_fin=4  #changing window size 2,4#
  lx=lato_fin          #lunghezza lato x quadrato subfinestra#
  ly=lato_fin          #lunghezza lato y quadrato subfinestra#
  winc=c(lx/sqrt(LX),ly/sqrt(LY))#
  winstp= 1  ###   1/lato_fin complete overlapping   1 "no" overlapping#
  ################################################
  winc_t=20#
  winstp_t= 1  ###   1/lato_fin complete overlapping   1 "no" overlapping#
  ################################################
  maxdist=.25*lato_fin#
  maxtime=ceiling(.25*winc_t)#
  ### eucliden likelihood ################ #
  res2=SubSampTimeEval(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc_s=winc,winstp_s = winstp,winc_t = winc_t,winstp_t = winstp_t,type_subs,weighted)#
  eu_par2=c(res2$par[1],res2$par[3],res2$par[4],res2$par[2])#
  names(eu_par2)=names(fitA$param)#
  # print(eu_par2)#
  # **************************scenario 3/4 bs = 3,bt=10 overlaping (.5) ***#
  #################################################
  #   parameters for the subsampling #####
  ################################################
  lato_fin=3  #changing window size 2,4#
  lx=lato_fin          #lunghezza lato x quadrato subfinestra#
  ly=lato_fin          #lunghezza lato y quadrato subfinestra#
  winc=c(lx/sqrt(LX),ly/sqrt(LY))#
  winstp= .5  ###   1/lato_fin complete overlapping   1 "no" overlapping#
  ################################################
  winc_t=10#
  winstp_t= 1  ###   1/lato_fin complete overlapping   1 "no" overlapping#
  ################################################
  maxdist=.25*lato_fin#
  maxtime=ceiling(.25*winc_t)#
  ### eucliden likelihood ################ #
  res3=SubSampTimeEval(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc_s=winc,winstp_s = winstp,winc_t = winc_t,winstp_t = winstp_t,type_subs,weighted)#
  eu_par3=c(res3$par[1],res3$par[3],res3$par[4],res3$par[2])#
  names(eu_par3)=names(fitA$param)#
  # print(eu_par3)#
  # **************************scenario 4/4 bs = 4,bt=20, overlaping (.5), weighted. ***#
  #################################################
  #   parameters for the subsampling #####
  ################################################
  lato_fin=4  #changing window size 2,4,8#
  lx=lato_fin          #lunghezza lato x quadrato subfinestra#
  ly=lato_fin          #lunghezza lato y quadrato subfinestra#
  winc=c(lx/sqrt(LX),ly/sqrt(LY))#
  winstp= .5  ###   1/lato_fin complete overlapping   1 "no" overlapping#
  ################################################
  winc_t=20#
  winstp_t= 1  ###   1/lato_fin complete overlapping   1 "no" overlapping#
  ################################################
  maxdist=.25*lato_fin#
  maxtime=ceiling(.25*winc_t)#
  ### eucliden likelihood ################ #
  res4=SubSampTimeEval(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc_s=winc,winstp_s = winstp,winc_t = winc_t,winstp_t = winstp_t,type_subs,weighted)#
  eu_par4=c(res4$par[1],res4$par[3],res4$par[4],res4$par[2])#
  names(eu_par4)=names(fitA$param)
############################################
rm(list=ls())#
#
#*** Info:#
'   #
PRACTICAL RANGE = 0.4#
12 scenarios:#
b1: 3,10 for window size in space and time.#
b2: 4,20 for window size in space and time.#
Step window: 0.5 for space && no overlap (two in total)#
#
maxdist=.25*lato_fin#
maxtime=ceiling(.25*winc_t)#
'#
#*** End Info:#
#
########################R package########################
require(CompRandFld)#
require(MCMCpack)#
require(STBEU)#
dirsol = "~/Documents/Software/STBEU/Simulations/StartDoubleFix" # Directory where results will be #
################################################
# setting 1  (many locations in space a few in time)#
################################################
#
####location sites #########################################
lambda=5#
xx=seq(-lambda,lambda);#
coords=as.matrix(expand.grid(xx,xx))   ###regular#
# plot(coords)#
#
####temporal instants #########################################
nt = 50 # Time points 18#
times=seq(1,nt,1)#
nrow(coords)#
nrow(coords)*nt#
# bn = 2,4 Same Space#
################################################
###################################################################
model=1  #   1=double exponential       2 =gneiting#
#
if (model == 1) #
{#
  # exponential model#
  cov.model <-"exp_exp"#
  cc=1#
  ######
  mean=0#
  nugget=0#
  scale_s<-1.2/3#
  scale_t<-1.2/3#
  sill=1#
  param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill)#
  fixed=list(nugget=nugget)#
  fix=c(nugget=nugget)#
}#
#
#################################################
#   parameters for the subsampling #####
################################################
coordx=coords[,1]#
coordy=coords[,2]#
LX=abs(range(coordx)[1]-range(coordx)[2])#
LY=abs(range(coordy)[1]-range(coordy)[2])#
type_subs=3    ### type of subsampling  1=in space    2= in time 3= spacetime#
#
type_dist=1                ### type of distance     1=euclidean 2=chordal  3=geodesic #
maxdistPL=max(dist(coords))*.25                  ## compact support in weights function for pairwise liklihood#
maxtimePL=ceiling(max(dist(times))*.25)#
#
i=1#
nsim<-1   ## number of simulation#
results=matrix(NA,ncol=5,nrow=5*nsim);label = 0:4#
set.seed(276)#
while(i<=nsim)#
{#
  #####################################################################################################      #
  # Simulation of the spatial Gaussian random field:#
  data <- RFsim(coordx=coords,coordt=times,corrmodel=cov.model, param=param)$data#
  mm=mean(c(data))#
  vv=var(c(data))#
  start=list(mean=mm,scale_s=scale_s,scale_t=scale_t,sill=vv)#
  ##################################################################################################### #
  ###### Composite likelihood based on pairs estimation ###############################################     #
  theta=c(mean = mm,sill=vv,scale_s=scale_s,scale_t=scale_t)                #starting value  #
  # Maximum composite-likelihood fitting of the random field:#
  # **************************scenario 0/4A main NOT weighted estimation***#
  fitA <- FitComposite(data=data,coordx=coords,coordt=times,#
                       corrmodel=cov.model,maxtime=maxtimePL,maxdist=maxdistPL,#
                       likelihood="Marginal",type="Pairwise",#
                       start=start,fixed=fixed,weighted=F)#
  eu_par0=c(fitA$param[1],fitA$param[2],fitA$param[3],fitA$param[4])#
  print(fitA$param)#
  names(eu_par0)=names(fitA$param)#
  # **************************scenario 1/4 bs = 3,bt = 10, no overlaping  ***#
  #################################################
  #   parameters for the subsampling #####
  ################################################
  lato_fin=3  #changing window size 2,4#
  lx=lato_fin          #lunghezza lato x quadrato subfinestra#
  ly=lato_fin          #lunghezza lato y quadrato subfinestra#
  winc=c(lx/sqrt(LX),ly/sqrt(LY))#
  winstp= 1  ###   1/lato_fin complete overlapping   1 "no" overlapping#
  ################################################
  winc_t=10#
  winstp_t= 1  ###   1/lato_fin complete overlapping   1 "no" overlapping#
  ################################################
  weighted=0#
  maxdist=.25*lato_fin#
  maxtime=ceiling(.25*winc_t)#
  ### eucliden likelihood ################ #
  res1=SubSampTimeEval(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc_s=winc,winstp_s = winstp,winc_t = winc_t,winstp_t = winstp_t,type_subs,weighted)#
  eu_par1=c(res1$par[1],res1$par[3],res1$par[4],res1$par[2])#
  names(eu_par1)=names(fitA$param)#
  # print(eu_par1)#
  # **************************scenario 2/4 bs = 4,bt = 20, no overlaping  ***#
  #################################################
  #   parameters for the subsampling #####
  ################################################
  lato_fin=4  #changing window size 2,4#
  lx=lato_fin          #lunghezza lato x quadrato subfinestra#
  ly=lato_fin          #lunghezza lato y quadrato subfinestra#
  winc=c(lx/sqrt(LX),ly/sqrt(LY))#
  winstp= 1  ###   1/lato_fin complete overlapping   1 "no" overlapping#
  ################################################
  winc_t=20#
  winstp_t= 1  ###   1/lato_fin complete overlapping   1 "no" overlapping#
  ################################################
  maxdist=.25*lato_fin#
  maxtime=ceiling(.25*winc_t)#
  ### eucliden likelihood ################ #
  res2=SubSampTimeEval(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc_s=winc,winstp_s = winstp,winc_t = winc_t,winstp_t = winstp_t,type_subs,weighted)#
  eu_par2=c(res2$par[1],res2$par[3],res2$par[4],res2$par[2])#
  names(eu_par2)=names(fitA$param)#
  # print(eu_par2)#
  # **************************scenario 3/4 bs = 3,bt=10 overlaping (.5) ***#
  #################################################
  #   parameters for the subsampling #####
  ################################################
  lato_fin=3  #changing window size 2,4#
  lx=lato_fin          #lunghezza lato x quadrato subfinestra#
  ly=lato_fin          #lunghezza lato y quadrato subfinestra#
  winc=c(lx/sqrt(LX),ly/sqrt(LY))#
  winstp= .5  ###   1/lato_fin complete overlapping   1 "no" overlapping#
  ################################################
  winc_t=10#
  winstp_t= 1  ###   1/lato_fin complete overlapping   1 "no" overlapping#
  ################################################
  maxdist=.25*lato_fin#
  maxtime=ceiling(.25*winc_t)#
  ### eucliden likelihood ################ #
  res3=SubSampTimeEval(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc_s=winc,winstp_s = winstp,winc_t = winc_t,winstp_t = winstp_t,type_subs,weighted)#
  eu_par3=c(res3$par[1],res3$par[3],res3$par[4],res3$par[2])#
  names(eu_par3)=names(fitA$param)#
  # print(eu_par3)#
  # **************************scenario 4/4 bs = 4,bt=20, overlaping (.5), weighted. ***#
  #################################################
  #   parameters for the subsampling #####
  ################################################
  lato_fin=4  #changing window size 2,4,8#
  lx=lato_fin          #lunghezza lato x quadrato subfinestra#
  ly=lato_fin          #lunghezza lato y quadrato subfinestra#
  winc=c(lx/sqrt(LX),ly/sqrt(LY))#
  winstp= .5  ###   1/lato_fin complete overlapping   1 "no" overlapping#
  ################################################
  winc_t=20#
  winstp_t= 1  ###   1/lato_fin complete overlapping   1 "no" overlapping#
  ################################################
  maxdist=.25*lato_fin#
  maxtime=ceiling(.25*winc_t)#
  ### eucliden likelihood ################ #
  res4=SubSampTimeEval(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc_s=winc,winstp_s = winstp,winc_t = winc_t,winstp_t = winstp_t,type_subs,weighted)#
  eu_par4=c(res4$par[1],res4$par[3],res4$par[4],res4$par[2])#
  names(eu_par4)=names(fitA$param)#
  # print(eu_par4)#
  # results[(5*(i)-4):((5*(i)-4)+4),]=cbind(label,rbind(eu_par0=eu_par0,eu_par1,eu_par2,eu_par3,eu_par4))#
  # colnames(results)=c("setting",names(fitA$param))#
  print(i)#
  i=i+1#
  # setwd(dirsol)#
  # write.csv(results, "regular_results_spacetimeDE12.csv")#
}
lato_fin=3  #changing window size 2,4#
  lx=lato_fin          #lunghezza lato x quadrato subfinestra#
  ly=lato_fin          #lunghezza lato y quadrato subfinestra#
  winc=c(lx/sqrt(LX),ly/sqrt(LY))#
  winstp= 1  ###   1/lato_fin complete overlapping   1 "no" overlapping#
  ################################################
  winc_t=10#
  winstp_t= 1  ###   1/lato_fin complete overlapping   1 "no" overlapping#
  ################################################
  weighted=0#
  maxdist=.25*lato_fin#
  maxtime=ceiling(.25*winc_t)#
  ### eucliden likelihood ################ #
  res1=SubSampTimeEval(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc_s=winc,winstp_s = winstp,winc_t = winc_t,winstp_t = winstp_t,type_subs,weighted)#
  eu_par1=c(res1$par[1],res1$par[3],res1$par[4],res1$par[2])#
  names(eu_par1)=names(fitA$param)#
  # print(eu_par1)#
  # **************************scenario 2/4 bs = 4,bt = 20, no overlaping  ***#
  #################################################
  #   parameters for the subsampling #####
  ################################################
  lato_fin=4  #changing window size 2,4#
  lx=lato_fin          #lunghezza lato x quadrato subfinestra#
  ly=lato_fin          #lunghezza lato y quadrato subfinestra#
  winc=c(lx/sqrt(LX),ly/sqrt(LY))#
  winstp= 1  ###   1/lato_fin complete overlapping   1 "no" overlapping#
  ################################################
  winc_t=20#
  winstp_t= 1  ###   1/lato_fin complete overlapping   1 "no" overlapping#
  ################################################
  maxdist=.25*lato_fin#
  maxtime=ceiling(.25*winc_t)#
  ### eucliden likelihood ################ #
  res2=SubSampTimeEval(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc_s=winc,winstp_s = winstp,winc_t = winc_t,winstp_t = winstp_t,type_subs,weighted)#
  eu_par2=c(res2$par[1],res2$par[3],res2$par[4],res2$par[2])#
  names(eu_par2)=names(fitA$param)#
  # print(eu_par2)#
  # **************************scenario 3/4 bs = 3,bt=10 overlaping (.5) ***#
  #################################################
  #   parameters for the subsampling #####
  ################################################
  lato_fin=3  #changing window size 2,4#
  lx=lato_fin          #lunghezza lato x quadrato subfinestra#
  ly=lato_fin          #lunghezza lato y quadrato subfinestra#
  winc=c(lx/sqrt(LX),ly/sqrt(LY))#
  winstp= .5  ###   1/lato_fin complete overlapping   1 "no" overlapping#
  ################################################
  winc_t=10#
  winstp_t= .5  ###   1/lato_fin complete overlapping   1 "no" overlapping#
  ################################################
  maxdist=.25*lato_fin#
  maxtime=ceiling(.25*winc_t)#
  ### eucliden likelihood ################ #
  res3=SubSampTimeEval(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc_s=winc,winstp_s = winstp,winc_t = winc_t,winstp_t = winstp_t,type_subs,weighted)#
  eu_par3=c(res3$par[1],res3$par[3],res3$par[4],res3$par[2])#
  names(eu_par3)=names(fitA$param)#
  # print(eu_par3)#
  # **************************scenario 4/4 bs = 4,bt=20, overlaping (.5), weighted. ***#
  #################################################
  #   parameters for the subsampling #####
  ################################################
  lato_fin=4  #changing window size 2,4,8#
  lx=lato_fin          #lunghezza lato x quadrato subfinestra#
  ly=lato_fin          #lunghezza lato y quadrato subfinestra#
  winc=c(lx/sqrt(LX),ly/sqrt(LY))#
  winstp= .5  ###   1/lato_fin complete overlapping   1 "no" overlapping#
  ################################################
  winc_t=20#
  winstp_t= .5  ###   1/lato_fin complete overlapping   1 "no" overlapping#
  ################################################
  maxdist=.25*lato_fin#
  maxtime=ceiling(.25*winc_t)#
  ### eucliden likelihood ################ #
  res4=SubSampTimeEval(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc_s=winc,winstp_s = winstp,winc_t = winc_t,winstp_t = winstp_t,type_subs,weighted)#
  eu_par4=c(res4$par[1],res4$par[3],res4$par[4],res4$par[2])#
  names(eu_par4)=names(fitA$param)
############################################
rm(list=ls())#
#
#*** Info:#
'   #
PRACTICAL RANGE = 3 IRREGULAR#
            12 scenarios:#
b: 2,4 for window size in space (3 in total).#
Weighted: 0 (No) #
Step window: 0.5 for space && no overlap (two in total)'#
#*** End Info:#
#
########################R package########################
require(CompRandFld)#
require(MCMCpack)#
require(spatstat)#
require(STBEU)#
dirsol = "~/Documents/Software/STBEU/Simulations/StartDoubleFix" # Directory where results will be #
################################################
# setting 1  (many locations in space a few in time)#
################################################
#
####location sites #########################################
lambda=8#
set.seed(1985)                                                                      ### not regular#
pp<-runifpoint(289, win=owin(c(-lambda,lambda),c(-lambda,lambda)))       ### not regular#
coords<-cbind(pp$x,pp$y)#
plot(coords) ### not regular#
####temporal instants #########################################
nt = 3 # Time points 18#
times=seq(1,nt,1) #
nrow(coords)#
nrow(coords)*nt#
#
###################################################################
model=1  #   1=double exponential       2 =gneiting#
#
if (model == 1) #
{#
  # exponential model#
  cov.model <-"exp_exp"#
  cc=1#
  ######
  mean=0#
  nugget=0#
  scale_s<-1.2/3#
  scale_t<-1.2/3#
  sill=1#
  param=list(nugget=nugget,mean=mean,scale_t=scale_t,scale_s=scale_s,sill=sill)#
  fixed=list(nugget=nugget)#
  fix=c(nugget=nugget)#
}#
#
#################################################
#   parameters for the subsampling #####
################################################
coordx=coords[,1]#
coordy=coords[,2]#
LX=abs(range(coordx)[1]-range(coordx)[2])#
LY=abs(range(coordy)[1]-range(coordy)[2])#
type_subs=1    ### type of subsampling  1=in space    2= in time 3= spacetime#
#
type_dist=1                ### type of distance     1=euclidean 2=chordal  3=geodesic #
maxdistPL=max(dist(coords))*.25                  ## compact support in weights function for pairwise liklihood#
maxtime=ceiling(max(dist(times))*.25)#
#
i=1#
nsim<-5   ## number of simulation#
results=matrix(NA,ncol=5,nrow=5*nsim);label = 0:4#
set.seed(276)#
while(i<=nsim)#
{#
  #####################################################################################################      #
  # Simulation of the spatial Gaussian random field:#
  data <- RFsim(coordx=coords,coordt=times,corrmodel=cov.model, param=param)$data#
  mm=mean(c(data))#
  vv=var(c(data))#
  start=list(mean=mm,scale_s=scale_s,scale_t=scale_t,sill=vv)#
  ##################################################################################################### #
  ###### Composite likelihood based on pairs estimation ###############################################     #
  theta=c(mean = mm,sill=vv,scale_s=scale_s,scale_t=scale_t)                #starting value  #
  # Maximum composite-likelihood fitting of the random field:#
  # **************************scenario 0/4A main NOT weighted estimation***#
  fitA <- FitComposite(data=data,coordx=coords,coordt=times,#
                       corrmodel=cov.model,maxtime=maxtime,maxdist=maxdistPL,#
                       likelihood="Marginal",type="Pairwise",#
                       start=start,fixed=fixed,weighted=F)#
  eu_par0=c(fitA$param[1],fitA$param[2],fitA$param[3],fitA$param[4])#
  print(fitA$param)#
  names(eu_par0)=names(fitA$param)#
  # **************************scenario 1/4 b = 2, no overlaping  ***#
  #################################################
  #   parameters for the subsampling #####
  ################################################
  lato_fin=2  #changing window size 2,4#
  lx=lato_fin          #lunghezza lato x quadrato subfinestra#
  ly=lato_fin          #lunghezza lato y quadrato subfinestra#
  winc=c(lx/sqrt(LX),ly/sqrt(LY))#
  winstp= 1  ###   1/lato_fin complete overlapping   1 "no" overlapping#
  ################################################
  weighted=0#
  maxdist=.25*lato_fin#
  # maxdist=1.5#
  ### eucliden likelihood ################ #
  res1=STBEUFit(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc_s=winc,winstp_s = winstp,0,0,type_subs,weighted)#
  eu_par1=c(res1$par[1],res1$par[3],res1$par[4],res1$par[2])#
  names(eu_par1)=names(fitA$param)#
  # print(eu_par1)#
  # **************************scenario 2/4 b = 4, no overlaping ***#
  #################################################
  #   parameters for the subsampling #####
  ################################################
  lato_fin=4  #changing window size 2,4#
  lx=lato_fin          #lunghezza lato x quadrato subfinestra#
  ly=lato_fin          #lunghezza lato y quadrato subfinestra#
  winc=c(lx/sqrt(LX),ly/sqrt(LY))#
  winstp= 1  ###   1/lato_fin complete overlapping   1 "no" overlapping#
  ################################################
  maxdist=.25*lato_fin#
  ### eucliden likelihood ################ #
  res2=STBEUFit(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,0,0,type_subs,weighted)#
  eu_par2=c(res2$par[1],res2$par[3],res2$par[4],res2$par[2])#
  names(eu_par2)=names(fitA$param)#
  # print(eu_par2)#
  # **************************scenario 3/4 b = 2, overlaping (.5) ***#
  #################################################
  #   parameters for the subsampling #####
  ################################################
  lato_fin=2  #changing window size 2,4#
  lx=lato_fin          #lunghezza lato x quadrato subfinestra#
  ly=lato_fin          #lunghezza lato y quadrato subfinestra#
  winc=c(lx/sqrt(LX),ly/sqrt(LY))#
  winstp= .5  ###   1/lato_fin complete overlapping   1 "no" overlapping#
  ################################################
  maxdist=.25*lato_fin#
  ### eucliden likelihood ################ #
  res3=STBEUFit(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,0,0,type_subs,weighted)#
  eu_par3=c(res3$par[1],res3$par[3],res3$par[4],res3$par[2])#
  names(eu_par3)=names(fitA$param)#
  # print(eu_par3)#
  # **************************scenario 4/4 b = 4, overlaping (.5), weighted. ***#
  #################################################
  #   parameters for the subsampling #####
  ################################################
  lato_fin=4  #changing window size 2,4,8#
  lx=lato_fin          #lunghezza lato x quadrato subfinestra#
  ly=lato_fin          #lunghezza lato y quadrato subfinestra#
  winc=c(lx/sqrt(LX),ly/sqrt(LY))#
  winstp= .5  ###   1/lato_fin complete overlapping   1 "no" overlapping#
  ################################################
  maxdist=.25*lato_fin#
  ### eucliden likelihood ################ #
  res4=STBEUFit(theta,fix,coords,times,cc,data,type_dist,maxdist ,maxtime,winc,winstp,0,0,type_subs,weighted)#
  eu_par4=c(res4$par[1],res4$par[3],res4$par[4],res4$par[2])#
  names(eu_par4)=names(fitA$param)#
  # print(eu_par4)#
  results[(5*(i)-4):((5*(i)-4)+4),]=cbind(label,rbind(eu_par0=eu_par0,eu_par1,eu_par2,eu_par3,eu_par4))#
  colnames(results)=c("setting",names(fitA$param))#
  print(i)#
  i=i+1#
  setwd(dirsol)#
  write.csv(results, "Irregular_results_spaceDE12.csv")#
}
resultds
results
